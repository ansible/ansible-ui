name: Pull Request

on:
  pull_request:

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  packages:
    name: Packages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: PreCache
        run: cat package-lock.json | jq '.version = "0.0.0"' | jq '.packages."".version = "0.0.0"' > package-lock-copy.json
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ./node_modules
            /home/runner/.cache/Cypress
          key: modules-${{ hashFiles('package-lock-copy.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

  checks:
    name: ESLint - Prettier - TSC
    runs-on: ubuntu-latest
    needs: packages
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: PreCache
        run: cat package-lock.json | jq '.version = "0.0.0"' | jq '.packages."".version = "0.0.0"' > package-lock-copy.json
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ./node_modules
            /home/runner/.cache/Cypress
          key: modules-${{ hashFiles('package-lock-copy.json') }}
      - run: npm run checks

  component-tests:
    name: Component Tests
    runs-on: ubuntu-latest
    needs: packages
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: PreCache
        run: cat package-lock.json | jq '.version = "0.0.0"' | jq '.packages."".version = "0.0.0"' > package-lock-copy.json
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ./node_modules
            /home/runner/.cache/Cypress
          key: modules-${{ hashFiles('package-lock-copy.json') }}
      - run: npm run cypress:run:component
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}

  container-image:
    name: Container Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: DOCKER_BUILDKIT=1 docker build --cache-from quay.io/ansible/ansible-ui:dependencies --tag ansible-ui .
      - run: docker save ansible-ui > ansible-ui.tar
      - uses: actions/upload-artifact@v3
        with:
          name: ansible-ui.tar
          path: ansible-ui.tar

  awx-e2e:
    name: AWX E2E
    runs-on: ubuntu-latest
    needs:
      - packages
      - container-image
    strategy:
      fail-fast: false
      matrix:
        containers: [1, 2]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ansible-ui.tar
      - run: docker load --input ansible-ui.tar
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: PreCache
        run: cat package-lock.json | jq '.version = "0.0.0"' | jq '.packages."".version = "0.0.0"' > package-lock-copy.json
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ./node_modules
            /home/runner/.cache/Cypress
          key: modules-${{ hashFiles('package-lock-copy.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - uses: cypress-io/github-action@v4
        with:
          install: false
          start: npm run docker:run
          wait-on: 'https://localhost:3002'
          record: true
          parallel: true
          env: server=${{ secrets.AWX_SERVER }},username=${{ secrets.AWX_USERNAME }},password=${{ secrets.AWX_PASSWORD }},servertype=AWX
          config: specPattern=cypress/e2e/awx/**/*.cy.ts
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_TLS_REJECT_UNAUTHORIZED: 0
