{
  "name": "Inventory Source Detail",
  "description": "# Retrieve an Inventory Source:\n\nMake GET request to this resource to retrieve a single inventory source\nrecord containing the following fields:\n\n* `id`: Database ID for this inventory source. (integer)\n* `type`: Data type for this inventory source. (choice)\n* `url`: URL for this inventory source. (string)\n* `related`: Data structure with URLs of related resources. (object)\n* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)\n* `created`: Timestamp when this inventory source was created. (datetime)\n* `modified`: Timestamp when this inventory source was last modified. (datetime)\n* `name`: Name of this inventory source. (string)\n* `description`: Optional description of this inventory source. (string)\n* `source`:  (choice)\n    - `file`: File, Directory or Script\n    - `constructed`: Template additional groups and hostvars at runtime\n    - `scm`: Sourced from a Project\n    - `ec2`: Amazon EC2\n    - `gce`: Google Compute Engine\n    - `azure_rm`: Microsoft Azure Resource Manager\n    - `vmware`: VMware vCenter\n    - `satellite6`: Red Hat Satellite 6\n    - `openstack`: OpenStack\n    - `rhv`: Red Hat Virtualization\n    - `controller`: Red Hat Ansible Automation Platform\n    - `insights`: Red Hat Insights\n* `source_path`:  (string)\n* `source_vars`: Inventory source variables in YAML or JSON format. (string)\n* `scm_branch`: Inventory source SCM branch. Project default used if blank. Only allowed if project allow_override field is set to true. (string)\n* `credential`: Cloud credential to use for inventory updates. (integer)\n* `enabled_var`: Retrieve the enabled state from the given dict of host variables. The enabled variable may be specified as &quot;foo.bar&quot;, in which case the lookup will traverse into nested dicts, equivalent to: from_dict.get(&quot;foo&quot;, {}).get(&quot;bar&quot;, default) (string)\n* `enabled_value`: Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var=&quot;status.power_state&quot;and enabled_value=&quot;powered_on&quot; with host variables:{   &quot;status&quot;: {     &quot;power_state&quot;: &quot;powered_on&quot;,     &quot;created&quot;: &quot;2020-08-04T18:13:04+00:00&quot;,     &quot;healthy&quot;: true    },    &quot;name&quot;: &quot;foobar&quot;,    &quot;ip_address&quot;: &quot;192.168.2.1&quot;}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled (string)\n* `host_filter`: This field is deprecated and will be removed in a future release. Regex where only matching hosts will be imported. (string)\n* `overwrite`: Overwrite local groups and hosts from remote inventory source. (boolean)\n* `overwrite_vars`: Overwrite local variables from remote inventory source. (boolean)\n* `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string)\n* `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer)\n* `verbosity`:  (choice)\n    - `0`: 0 (WARNING)\n    - `1`: 1 (INFO)\n    - `2`: 2 (DEBUG)\n* `limit`: Enter host, group or pattern match (string)\n* `last_job_run`:  (datetime)\n* `last_job_failed`:  (boolean)\n* `next_job_run`:  (datetime)\n* `status`:  (choice)\n    - `new`: New\n    - `pending`: Pending\n    - `waiting`: Waiting\n    - `running`: Running\n    - `successful`: Successful\n    - `failed`: Failed\n    - `error`: Error\n    - `canceled`: Canceled\n    - `never updated`: Never Updated\n    - `none`: No External Source\n* `execution_environment`: The container image to be used for execution. (id)\n* `inventory`:  (id)\n* `update_on_launch`:  (boolean)\n* `update_cache_timeout`:  (integer)\n* `source_project`: Project containing inventory file used as source. (id)\n* `last_update_failed`:  (boolean)\n* `last_updated`:  (datetime)\n\n\n\n\n\n# Update an Inventory Source:\n\nMake a PUT or PATCH request to this resource to update this\ninventory source.  The following fields may be modified:\n\n\n\n\n\n\n\n\n\n* `name`: Name of this inventory source. (string, required)\n* `description`: Optional description of this inventory source. (string, default=`\"\"`)\n* `source`:  (choice)\n    - `file`: File, Directory or Script\n    - `constructed`: Template additional groups and hostvars at runtime\n    - `scm`: Sourced from a Project\n    - `ec2`: Amazon EC2\n    - `gce`: Google Compute Engine\n    - `azure_rm`: Microsoft Azure Resource Manager\n    - `vmware`: VMware vCenter\n    - `satellite6`: Red Hat Satellite 6\n    - `openstack`: OpenStack\n    - `rhv`: Red Hat Virtualization\n    - `controller`: Red Hat Ansible Automation Platform\n    - `insights`: Red Hat Insights\n* `source_path`:  (string, default=`\"\"`)\n* `source_vars`: Inventory source variables in YAML or JSON format. (string, default=`\"\"`)\n* `scm_branch`: Inventory source SCM branch. Project default used if blank. Only allowed if project allow_override field is set to true. (string, default=`\"\"`)\n* `credential`: Cloud credential to use for inventory updates. (integer, default=`None`)\n* `enabled_var`: Retrieve the enabled state from the given dict of host variables. The enabled variable may be specified as &quot;foo.bar&quot;, in which case the lookup will traverse into nested dicts, equivalent to: from_dict.get(&quot;foo&quot;, {}).get(&quot;bar&quot;, default) (string, default=`\"\"`)\n* `enabled_value`: Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var=&quot;status.power_state&quot;and enabled_value=&quot;powered_on&quot; with host variables:{   &quot;status&quot;: {     &quot;power_state&quot;: &quot;powered_on&quot;,     &quot;created&quot;: &quot;2020-08-04T18:13:04+00:00&quot;,     &quot;healthy&quot;: true    },    &quot;name&quot;: &quot;foobar&quot;,    &quot;ip_address&quot;: &quot;192.168.2.1&quot;}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled (string, default=`\"\"`)\n* `host_filter`: This field is deprecated and will be removed in a future release. Regex where only matching hosts will be imported. (string, default=`\"\"`)\n* `overwrite`: Overwrite local groups and hosts from remote inventory source. (boolean, default=`False`)\n* `overwrite_vars`: Overwrite local variables from remote inventory source. (boolean, default=`False`)\n\n* `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer, default=`0`)\n* `verbosity`:  (choice)\n    - `0`: 0 (WARNING)\n    - `1`: 1 (INFO) (default)\n    - `2`: 2 (DEBUG)\n* `limit`: Enter host, group or pattern match (string, default=`\"\"`)\n\n\n\n\n* `execution_environment`: The container image to be used for execution. (id, default=``)\n* `inventory`:  (id, required)\n* `update_on_launch`:  (boolean, default=`False`)\n* `update_cache_timeout`:  (integer, default=`0`)\n* `source_project`: Project containing inventory file used as source. (id, default=``)\n\n\n\n\n\n\n\n\nFor a PUT request, include **all** fields in the request.\n\n\n\nFor a PATCH request, include only the fields that are being modified.\n\n\n\n# Delete an Inventory Source:\n\nMake a DELETE request to this resource to delete this inventory source.",
  "renders": ["application/json", "text/html"],
  "parses": ["application/json"],
  "actions": {
    "PUT": {
      "name": {
        "type": "string",
        "required": true,
        "label": "Name",
        "max_length": 512,
        "help_text": "Name of this inventory source.",
        "filterable": true
      },
      "description": {
        "type": "string",
        "required": false,
        "label": "Description",
        "help_text": "Optional description of this inventory source.",
        "filterable": true,
        "default": ""
      },
      "source": {
        "type": "choice",
        "required": false,
        "label": "Source",
        "filterable": true,
        "default": null,
        "choices": [
          ["file", "File, Directory or Script"],
          ["constructed", "Template additional groups and hostvars at runtime"],
          ["scm", "Sourced from a Project"],
          ["ec2", "Amazon EC2"],
          ["gce", "Google Compute Engine"],
          ["azure_rm", "Microsoft Azure Resource Manager"],
          ["vmware", "VMware vCenter"],
          ["satellite6", "Red Hat Satellite 6"],
          ["openstack", "OpenStack"],
          ["rhv", "Red Hat Virtualization"],
          ["controller", "Red Hat Ansible Automation Platform"],
          ["insights", "Red Hat Insights"]
        ]
      },
      "source_path": {
        "type": "string",
        "required": false,
        "label": "Source path",
        "max_length": 1024,
        "filterable": true,
        "default": ""
      },
      "source_vars": {
        "type": "string",
        "required": false,
        "label": "Source vars",
        "help_text": "Inventory source variables in YAML or JSON format.",
        "filterable": true,
        "default": ""
      },
      "scm_branch": {
        "type": "string",
        "required": false,
        "label": "Scm branch",
        "help_text": "Inventory source SCM branch. Project default used if blank. Only allowed if project allow_override field is set to true.",
        "max_length": 1024,
        "filterable": true,
        "default": ""
      },
      "credential": {
        "type": "integer",
        "required": false,
        "label": "Credential",
        "help_text": "Cloud credential to use for inventory updates.",
        "min_value": 1,
        "filterable": false,
        "default": null
      },
      "enabled_var": {
        "type": "string",
        "required": false,
        "label": "Enabled var",
        "help_text": "Retrieve the enabled state from the given dict of host variables. The enabled variable may be specified as \"foo.bar\", in which case the lookup will traverse into nested dicts, equivalent to: from_dict.get(\"foo\", {}).get(\"bar\", default)",
        "filterable": true,
        "default": ""
      },
      "enabled_value": {
        "type": "string",
        "required": false,
        "label": "Enabled value",
        "help_text": "Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var=\"status.power_state\"and enabled_value=\"powered_on\" with host variables:{   \"status\": {     \"power_state\": \"powered_on\",     \"created\": \"2020-08-04T18:13:04+00:00\",     \"healthy\": true    },    \"name\": \"foobar\",    \"ip_address\": \"192.168.2.1\"}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled",
        "filterable": true,
        "default": ""
      },
      "host_filter": {
        "type": "string",
        "required": false,
        "label": "Host filter",
        "help_text": "This field is deprecated and will be removed in a future release. Regex where only matching hosts will be imported.",
        "filterable": true,
        "default": ""
      },
      "overwrite": {
        "type": "boolean",
        "required": false,
        "label": "Overwrite",
        "help_text": "Overwrite local groups and hosts from remote inventory source.",
        "filterable": true,
        "default": false
      },
      "overwrite_vars": {
        "type": "boolean",
        "required": false,
        "label": "Overwrite vars",
        "help_text": "Overwrite local variables from remote inventory source.",
        "filterable": true,
        "default": false
      },
      "timeout": {
        "type": "integer",
        "required": false,
        "label": "Timeout",
        "help_text": "The amount of time (in seconds) to run before the task is canceled.",
        "min_value": -2147483648,
        "max_value": 2147483647,
        "filterable": true,
        "default": 0
      },
      "verbosity": {
        "type": "choice",
        "required": false,
        "label": "Verbosity",
        "filterable": true,
        "default": 1,
        "choices": [
          [0, "0 (WARNING)"],
          [1, "1 (INFO)"],
          [2, "2 (DEBUG)"]
        ]
      },
      "limit": {
        "type": "string",
        "required": false,
        "label": "Limit",
        "help_text": "Enter host, group or pattern match",
        "filterable": true,
        "default": ""
      },
      "execution_environment": {
        "type": "id",
        "required": false,
        "label": "Execution environment",
        "help_text": "The container image to be used for execution.",
        "filterable": true
      },
      "update_on_launch": {
        "type": "boolean",
        "required": false,
        "label": "Update on launch",
        "filterable": true,
        "default": false
      },
      "update_cache_timeout": {
        "type": "integer",
        "required": false,
        "label": "Update cache timeout",
        "min_value": 0,
        "max_value": 2147483647,
        "filterable": true,
        "default": 0
      },
      "source_project": {
        "type": "id",
        "required": false,
        "label": "Source project",
        "help_text": "Project containing inventory file used as source.",
        "filterable": true
      }
    },
    "GET": {
      "id": {
        "type": "integer",
        "label": "ID",
        "help_text": "Database ID for this inventory source.",
        "filterable": true
      },
      "type": {
        "type": "choice",
        "label": "Type",
        "help_text": "Data type for this inventory source.",
        "filterable": true,
        "choices": [["inventory_source", "Inventory Source"]]
      },
      "url": {
        "type": "string",
        "label": "Url",
        "help_text": "URL for this inventory source.",
        "filterable": false
      },
      "related": {
        "type": "object",
        "label": "Related",
        "help_text": "Data structure with URLs of related resources.",
        "filterable": false
      },
      "summary_fields": {
        "type": "object",
        "label": "Summary fields",
        "help_text": "Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons.",
        "filterable": false
      },
      "created": {
        "type": "datetime",
        "label": "Created",
        "help_text": "Timestamp when this inventory source was created.",
        "filterable": true
      },
      "modified": {
        "type": "datetime",
        "label": "Modified",
        "help_text": "Timestamp when this inventory source was last modified.",
        "filterable": true
      },
      "name": {
        "type": "string",
        "label": "Name",
        "help_text": "Name of this inventory source.",
        "filterable": true
      },
      "description": {
        "type": "string",
        "label": "Description",
        "help_text": "Optional description of this inventory source.",
        "filterable": true
      },
      "source": {
        "type": "choice",
        "label": "Source",
        "filterable": true,
        "choices": [
          ["file", "File, Directory or Script"],
          ["constructed", "Template additional groups and hostvars at runtime"],
          ["scm", "Sourced from a Project"],
          ["ec2", "Amazon EC2"],
          ["gce", "Google Compute Engine"],
          ["azure_rm", "Microsoft Azure Resource Manager"],
          ["vmware", "VMware vCenter"],
          ["satellite6", "Red Hat Satellite 6"],
          ["openstack", "OpenStack"],
          ["rhv", "Red Hat Virtualization"],
          ["controller", "Red Hat Ansible Automation Platform"],
          ["insights", "Red Hat Insights"]
        ]
      },
      "source_path": {
        "type": "string",
        "label": "Source path",
        "filterable": true
      },
      "source_vars": {
        "type": "string",
        "label": "Source vars",
        "help_text": "Inventory source variables in YAML or JSON format.",
        "filterable": true
      },
      "scm_branch": {
        "type": "string",
        "label": "Scm branch",
        "help_text": "Inventory source SCM branch. Project default used if blank. Only allowed if project allow_override field is set to true.",
        "filterable": true
      },
      "credential": {
        "type": "integer",
        "label": "Credential",
        "help_text": "Cloud credential to use for inventory updates.",
        "min_value": 1,
        "filterable": false
      },
      "enabled_var": {
        "type": "string",
        "label": "Enabled var",
        "help_text": "Retrieve the enabled state from the given dict of host variables. The enabled variable may be specified as \"foo.bar\", in which case the lookup will traverse into nested dicts, equivalent to: from_dict.get(\"foo\", {}).get(\"bar\", default)",
        "filterable": true
      },
      "enabled_value": {
        "type": "string",
        "label": "Enabled value",
        "help_text": "Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var=\"status.power_state\"and enabled_value=\"powered_on\" with host variables:{   \"status\": {     \"power_state\": \"powered_on\",     \"created\": \"2020-08-04T18:13:04+00:00\",     \"healthy\": true    },    \"name\": \"foobar\",    \"ip_address\": \"192.168.2.1\"}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled",
        "filterable": true
      },
      "host_filter": {
        "type": "string",
        "label": "Host filter",
        "help_text": "This field is deprecated and will be removed in a future release. Regex where only matching hosts will be imported.",
        "filterable": true
      },
      "overwrite": {
        "type": "boolean",
        "label": "Overwrite",
        "help_text": "Overwrite local groups and hosts from remote inventory source.",
        "filterable": true
      },
      "overwrite_vars": {
        "type": "boolean",
        "label": "Overwrite vars",
        "help_text": "Overwrite local variables from remote inventory source.",
        "filterable": true
      },
      "custom_virtualenv": {
        "type": "string",
        "label": "Custom virtualenv",
        "help_text": "Local absolute file path containing a custom Python virtualenv to use",
        "filterable": true
      },
      "timeout": {
        "type": "integer",
        "label": "Timeout",
        "help_text": "The amount of time (in seconds) to run before the task is canceled.",
        "min_value": -2147483648,
        "max_value": 2147483647,
        "filterable": true
      },
      "verbosity": {
        "type": "choice",
        "label": "Verbosity",
        "filterable": true,
        "choices": [
          [0, "0 (WARNING)"],
          [1, "1 (INFO)"],
          [2, "2 (DEBUG)"]
        ]
      },
      "limit": {
        "type": "string",
        "label": "Limit",
        "help_text": "Enter host, group or pattern match",
        "filterable": true
      },
      "last_job_run": {
        "type": "datetime",
        "label": "Last job run",
        "filterable": true
      },
      "last_job_failed": {
        "type": "boolean",
        "label": "Last job failed",
        "filterable": true
      },
      "next_job_run": {
        "type": "datetime",
        "label": "Next job run",
        "filterable": true
      },
      "status": {
        "type": "choice",
        "label": "Status",
        "filterable": true,
        "choices": [
          ["new", "New"],
          ["pending", "Pending"],
          ["waiting", "Waiting"],
          ["running", "Running"],
          ["successful", "Successful"],
          ["failed", "Failed"],
          ["error", "Error"],
          ["canceled", "Canceled"],
          ["never updated", "Never Updated"],
          ["none", "No External Source"]
        ]
      },
      "execution_environment": {
        "type": "id",
        "label": "Execution environment",
        "help_text": "The container image to be used for execution.",
        "filterable": true
      },
      "inventory": {
        "type": "id",
        "label": "Inventory",
        "filterable": true
      },
      "update_on_launch": {
        "type": "boolean",
        "label": "Update on launch",
        "filterable": true
      },
      "update_cache_timeout": {
        "type": "integer",
        "label": "Update cache timeout",
        "min_value": 0,
        "max_value": 2147483647,
        "filterable": true
      },
      "source_project": {
        "type": "id",
        "label": "Source project",
        "help_text": "Project containing inventory file used as source.",
        "filterable": true
      },
      "last_update_failed": {
        "type": "boolean",
        "label": "Last update failed",
        "filterable": false
      },
      "last_updated": {
        "type": "datetime",
        "label": "Last updated",
        "filterable": false
      }
    }
  },
  "types": ["inventory_source"]
}
