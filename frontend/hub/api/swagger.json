{
  "openapi": "3.0.3",
  "info": {
    "title": "Automation Hub API",
    "version": "v3",
    "description": "Fetch, Upload, Organize, and Distribute Ansible Collections",
    "contact": {
      "name": "Pulp Team",
      "email": "pulp-list@redhat.com",
      "url": "https://pulpproject.org"
    },
    "license": {
      "name": "GPLv2+",
      "url": "https://raw.githubusercontent.com/ansible/galaxy_ng/master/LICENSE"
    },
    "x-logo": {
      "url": "https://pulp.plan.io/attachments/download/517478/pulp_logo_word_rectangle.svg"
    },
    "x-pulp-app-versions": {
      "core": "3.28.1",
      "container": "2.15.1",
      "ansible": "0.18.0",
      "galaxy": "4.8.0dev"
    },
    "x-pulp-domain-enabled": false
  },
  "paths": {
    "/ansible/collections/": {
      "post": {
        "operationId": "upload_collection",
        "description": "Create an artifact and trigger an asynchronous task to create Collection content from it.",
        "summary": "Upload a collection",
        "tags": ["Ansible: Collections"],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CollectionOneShot"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CollectionOneShot"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/": {
      "get": {
        "operationId": "api_read",
        "tags": ["Api"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/_ui/": {
      "get": {
        "operationId": "api__ui_read",
        "tags": ["Api: _Ui"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/_ui/v1/ai_deny_index/": {
      "get": {
        "operationId": "api__ui_v1_ai_deny_index_ai-deny-index-list",
        "description": "Lists all entries in the AIIndexDenyList.\nOpen without auth.",
        "parameters": [
          {
            "in": "query",
            "name": "reference",
            "schema": {
              "type": "string"
            },
            "description": "Filter by reference (namespace name)"
          },
          {
            "in": "query",
            "name": "scope",
            "schema": {
              "type": "string",
              "enum": ["legacy_namespace", "namespace"]
            },
            "description": "Filter by scope"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V1 Ai_Deny_Index"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIIndexDenyResultsResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/_ui/v1/ai_deny_index/{scope}/": {
      "post": {
        "operationId": "api__ui_v1_ai_deny_index_ai-deny-index-add",
        "description": "Allows to add a namespace to AIIndexDenyList.",
        "parameters": [
          {
            "in": "path",
            "name": "scope",
            "schema": {
              "type": "string",
              "enum": ["legacy_namespace", "namespace"]
            },
            "required": true
          }
        ],
        "tags": ["Api: V1 Ai_Deny_Index"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddToAIIndexDenyList"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AddToAIIndexDenyList"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AddToAIIndexDenyList"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddedToAIIndexDenyListResponse"
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Unspecified response body"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Unspecified response body"
                }
              }
            },
            "description": ""
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Unspecified response body"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/_ui/v1/ai_deny_index/{scope}/{reference}/": {
      "delete": {
        "operationId": "api__ui_v1_ai_deny_index_ai-deny-index-delete",
        "description": "Access specific AIIndexDenyList Object and allow deletion.",
        "parameters": [
          {
            "in": "path",
            "name": "reference",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "scope",
            "schema": {
              "type": "string",
              "enum": ["legacy_namespace", "namespace"]
            },
            "required": true
          }
        ],
        "tags": ["Api: V1 Ai_Deny_Index"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Unspecified response body"
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Unspecified response body"
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Unspecified response body"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/_ui/v1/auth/login/": {
      "get": {
        "operationId": "api__ui_v1_auth_login_get",
        "tags": ["Api: V1 Auth Login"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/galaxy.LoginResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "api__ui_v1_auth_login_post",
        "tags": ["Api: V1 Auth Login"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/galaxy.Login"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/galaxy.Login"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/galaxy.Login"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/galaxy.LoginResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/_ui/v1/auth/logout/": {
      "post": {
        "operationId": "api__ui_v1_auth_logout_post",
        "tags": ["Api: V1 Auth Logout"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/_ui/v1/collection-versions/": {
      "get": {
        "operationId": "api__ui_v1_collection_versions_list",
        "summary": "List collection versions",
        "parameters": [
          {
            "in": "query",
            "name": "dependency",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "namespace__contains",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "namespace__icontains",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "namespace__startswith",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-collection",
                  "-namespace",
                  "-pulp_created",
                  "-version",
                  "collection",
                  "namespace",
                  "pulp_created",
                  "version"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `collection` - Collection\n* `-collection` - Collection (descending)\n* `version` - Version\n* `-version` - Version (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "version__contains",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "version__icontains",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "version__startswith",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "version_range",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V1 Collection-Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedgalaxy.LoginResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/_ui/v1/collection-versions/{version}/": {
      "get": {
        "operationId": "api__ui_v1_collection_versions_read",
        "summary": "Retrieve collection version",
        "parameters": [
          {
            "in": "path",
            "name": "version",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-z_]+/[0-9a-z_]+/[0-9A-Za-z.+-]+$"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V1 Collection-Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/galaxy.LoginResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/_ui/v1/collection_signing/": {
      "post": {
        "operationId": "_api__ui_v1_collection_signing_api__ui_v1_collection_signing_sign",
        "tags": ["Api: V1 Collection_Signing"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/_ui/v1/collection_signing/{path}/": {
      "post": {
        "operationId": "_api__ui_v1_collection_signing_{path}_api__ui_v1_collection_signing_sign",
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: V1 Collection_Signing"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/_ui/v1/collection_signing/{path}/{namespace}/": {
      "post": {
        "operationId": "_api__ui_v1_collection_signing_{path}_{namespace}_api__ui_v1_collection_signing_sign",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: V1 Collection_Signing"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/_ui/v1/collection_signing/{path}/{namespace}/{collection}/": {
      "post": {
        "operationId": "_api__ui_v1_collection_signing_{path}_{namespace}_{collection}_api__ui_v1_collection_signing_sign",
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: V1 Collection_Signing"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/_ui/v1/collection_signing/{path}/{namespace}/{collection}/{version}/": {
      "post": {
        "operationId": "_api__ui_v1_collection_signing_{path}_{namespace}_{collection}_{version}_api__ui_v1_collection_signing_sign",
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: V1 Collection_Signing"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/_ui/v1/controllers/": {
      "get": {
        "operationId": "api__ui_v1_controllers_get",
        "tags": ["Api: V1 Controllers"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/_ui/v1/distributions/": {
      "get": {
        "operationId": "api__ui_v1_distributions_list",
        "summary": "List ansible distributions",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V1 Distributions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedDistributionResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/_ui/v1/distributions/{pulp_id}/": {
      "get": {
        "operationId": "api__ui_v1_distributions_read",
        "summary": "Inspect an ansible distribution",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this ansible distribution.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V1 Distributions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistributionResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/_ui/v1/feature-flags/": {
      "get": {
        "operationId": "api__ui_v1_feature_flags_get",
        "tags": ["Api: V1 Feature-Flags"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/_ui/v1/groups/": {
      "get": {
        "operationId": "_api__ui_v1_groups_groups_list",
        "description": "ViewSet for Group.",
        "summary": "List groups",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["-name", "name"]
              }
            },
            "description": "Ordering\n\n* `name` - Name\n* `-name` - Name (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Groups"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedGroupResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "_api__ui_v1_groups_groups_create",
        "description": "ViewSet for Group.",
        "summary": "Create a group",
        "tags": ["Groups"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Group"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Group"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Group"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/_ui/v1/groups/{group_pk}/users/": {
      "get": {
        "operationId": "_api__ui_v1_groups_{group_pk}_users_groups_users_list",
        "description": "List group users.",
        "summary": "List users",
        "parameters": [
          {
            "in": "path",
            "name": "group_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Groups: Users"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedGroupUserResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "_api__ui_v1_groups_{group_pk}_users_groups_users_create",
        "description": "Add a user to a group.",
        "summary": "Create an user",
        "parameters": [
          {
            "in": "path",
            "name": "group_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Groups: Users"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupUser"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/GroupUser"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/GroupUser"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupUserResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/_ui/v1/groups/{group_pk}/users/{id}/": {
      "delete": {
        "operationId": "_api__ui_v1_groups_{group_pk}_users_{id}_groups_users_delete",
        "description": "Remove a user from a group.",
        "summary": "Delete an user",
        "parameters": [
          {
            "in": "path",
            "name": "group_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Groups: Users"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/_ui/v1/groups/{id}/": {
      "get": {
        "operationId": "_api__ui_v1_groups_{id}_groups_read",
        "description": "ViewSet for Group.",
        "summary": "Inspect a group",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Groups"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "_api__ui_v1_groups_{id}_groups_delete",
        "description": "ViewSet for Group.",
        "summary": "Delete a group",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Groups"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/_ui/v1/imports/collections/": {
      "get": {
        "operationId": "api__ui_v1_imports_collections_list",
        "description": "ViewSet for CollectionImports.",
        "summary": "List collection imports",
        "parameters": [
          {
            "in": "query",
            "name": "created",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "keywords",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["-created", "created"]
              }
            },
            "description": "Ordering\n\n* `created` - Created\n* `-created` - Created (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "state",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V1 Imports Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedImportTaskListResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/_ui/v1/imports/collections/{task_id}/": {
      "get": {
        "operationId": "api__ui_v1_imports_collections_read",
        "description": "Returns a CollectionImport object.",
        "summary": "Retrieve collection import",
        "parameters": [
          {
            "in": "path",
            "name": "task_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A unique value identifying this collection import.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V1 Imports Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportTaskDetailResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/_ui/v1/landing-page/": {
      "get": {
        "operationId": "api__ui_v1_landing_page_read",
        "tags": ["Api: V1 Landing-Page"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/_ui/v1/me/": {
      "get": {
        "operationId": "api__ui_v1_me_read",
        "tags": ["Api: V1 Me"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentUserResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "api__ui_v1_me_update",
        "tags": ["Api: V1 Me"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CurrentUser"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CurrentUser"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CurrentUser"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentUserResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/_ui/v1/my-distributions/": {
      "get": {
        "operationId": "api__ui_v1_my_distributions_list",
        "summary": "List ansible distributions",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V1 My-Distributions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedDistributionResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/_ui/v1/my-distributions/{pulp_id}/": {
      "get": {
        "operationId": "api__ui_v1_my_distributions_read",
        "summary": "Inspect an ansible distribution",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this ansible distribution.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V1 My-Distributions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistributionResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/_ui/v1/my-namespaces/": {
      "get": {
        "operationId": "api__ui_v1_my_namespaces_list",
        "summary": "List namespaces",
        "parameters": [
          {
            "in": "query",
            "name": "company",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keywords",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["-company", "-id", "-name", "company", "id", "name"]
              }
            },
            "description": "Ordering\n\n* `name` - Name\n* `-name` - Name (descending)\n* `company` - Company\n* `-company` - Company (descending)\n* `id` - Id\n* `-id` - Id (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V1 My-Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedNamespaceSummaryResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "api__ui_v1_my_namespaces_create",
        "description": "Override to validate for name duplication before serializer validation.",
        "summary": "Create a namespace",
        "tags": ["Api: V1 My-Namespaces"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Namespace"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Namespace"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Namespace"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NamespaceResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/_ui/v1/my-namespaces/{name}/": {
      "get": {
        "operationId": "api__ui_v1_my_namespaces_read",
        "summary": "Inspect a namespace",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V1 My-Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NamespaceResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "api__ui_v1_my_namespaces_update",
        "summary": "Update a namespace",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: V1 My-Namespaces"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Namespace"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Namespace"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Namespace"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NamespaceResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "api__ui_v1_my_namespaces_partial_update",
        "summary": "Update a namespace",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: V1 My-Namespaces"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedNamespace"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedNamespace"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedNamespace"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NamespaceResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "api__ui_v1_my_namespaces_delete",
        "description": "Delete a namespace.\n\n1. Perform a check to see if there are any collections in the namespace.\n   If there are, return a failure.\n2. Delete the pulp distro and repository\n3. Delete the namespace object.\n\nreturn: Response(status=204)",
        "summary": "Delete a namespace",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: V1 My-Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/_ui/v1/my-synclists/": {
      "get": {
        "operationId": "api__ui_v1_my_synclists_list",
        "summary": "List sync lists",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V1 My-Synclists"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedSyncListResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "api__ui_v1_my_synclists_create",
        "summary": "Create a sync list",
        "tags": ["Api: V1 My-Synclists"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncList"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SyncList"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SyncList"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncListResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/_ui/v1/my-synclists/{id}/": {
      "get": {
        "operationId": "api__ui_v1_my_synclists_read",
        "summary": "Inspect a sync list",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A unique integer value identifying this sync list.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V1 My-Synclists"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncListResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "api__ui_v1_my_synclists_update",
        "summary": "Update a sync list",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A unique integer value identifying this sync list.",
            "required": true
          }
        ],
        "tags": ["Api: V1 My-Synclists"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncList"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SyncList"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SyncList"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncListResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "api__ui_v1_my_synclists_partial_update",
        "summary": "Update a sync list",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A unique integer value identifying this sync list.",
            "required": true
          }
        ],
        "tags": ["Api: V1 My-Synclists"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedSyncList"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedSyncList"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedSyncList"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncListResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "api__ui_v1_my_synclists_delete",
        "summary": "Delete a sync list",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A unique integer value identifying this sync list.",
            "required": true
          }
        ],
        "tags": ["Api: V1 My-Synclists"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/_ui/v1/my-synclists/{id}/curate/": {
      "post": {
        "operationId": "api__ui_v1_my_synclists_curate_curate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A unique integer value identifying this sync list.",
            "required": true
          }
        ],
        "tags": ["Api: V1 My-Synclists Curate"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncList"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SyncList"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SyncList"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncListResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/_ui/v1/namespaces/": {
      "get": {
        "operationId": "api__ui_v1_namespaces_list",
        "summary": "List namespaces",
        "parameters": [
          {
            "in": "query",
            "name": "company",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keywords",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["-company", "-id", "-name", "company", "id", "name"]
              }
            },
            "description": "Ordering\n\n* `name` - Name\n* `-name` - Name (descending)\n* `company` - Company\n* `-company` - Company (descending)\n* `id` - Id\n* `-id` - Id (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V1 Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedNamespaceSummaryResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "api__ui_v1_namespaces_create",
        "description": "Override to validate for name duplication before serializer validation.",
        "summary": "Create a namespace",
        "tags": ["Api: V1 Namespaces"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Namespace"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Namespace"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Namespace"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NamespaceResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/_ui/v1/namespaces/{name}/": {
      "get": {
        "operationId": "api__ui_v1_namespaces_read",
        "summary": "Inspect a namespace",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V1 Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NamespaceResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "api__ui_v1_namespaces_update",
        "summary": "Update a namespace",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: V1 Namespaces"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Namespace"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Namespace"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Namespace"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NamespaceResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "api__ui_v1_namespaces_partial_update",
        "summary": "Update a namespace",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: V1 Namespaces"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedNamespace"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedNamespace"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedNamespace"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NamespaceResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "api__ui_v1_namespaces_delete",
        "description": "Delete a namespace.\n\n1. Perform a check to see if there are any collections in the namespace.\n   If there are, return a failure.\n2. Delete the pulp distro and repository\n3. Delete the namespace object.\n\nreturn: Response(status=204)",
        "summary": "Delete a namespace",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: V1 Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/_ui/v1/remotes/": {
      "get": {
        "operationId": "api__ui_v1_remotes_list",
        "summary": "List collection remotes",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V1 Remotes"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedansible.CollectionRemoteResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "api__ui_v1_remotes_create",
        "summary": "Create a collection remote",
        "tags": ["Api: V1 Remotes"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ansible.CollectionRemote"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ansible.CollectionRemote"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ansible.CollectionRemote"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionRemoteResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/_ui/v1/remotes/{pulp_id}/": {
      "get": {
        "operationId": "api__ui_v1_remotes_read",
        "summary": "Inspect a collection remote",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this collection remote.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V1 Remotes"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionRemoteResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "api__ui_v1_remotes_update",
        "summary": "Update a collection remote",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this collection remote.",
            "required": true
          }
        ],
        "tags": ["Api: V1 Remotes"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ansible.CollectionRemote"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ansible.CollectionRemote"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ansible.CollectionRemote"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionRemoteResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "api__ui_v1_remotes_partial_update",
        "summary": "Update a collection remote",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this collection remote.",
            "required": true
          }
        ],
        "tags": ["Api: V1 Remotes"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Patchedansible.CollectionRemote"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Patchedansible.CollectionRemote"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Patchedansible.CollectionRemote"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionRemoteResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "api__ui_v1_remotes_delete",
        "summary": "Delete a collection remote",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this collection remote.",
            "required": true
          }
        ],
        "tags": ["Api: V1 Remotes"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/_ui/v1/repo/{distro_base_path}/": {
      "get": {
        "operationId": "api__ui_v1_repo_list",
        "description": "Viewset that uses CollectionVersion's within distribution to display data for Collection's.\n\nCollection list is filterable by FilterSet and includes latest CollectionVersion.\n\nCollection detail includes CollectionVersion that is latest or via query param 'version'.",
        "parameters": [
          {
            "in": "query",
            "name": "deprecated",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "include_related",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "is_highest",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "keywords",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-authors",
                  "-contents",
                  "-dependencies",
                  "-description",
                  "-docs_blob",
                  "-documentation",
                  "-files",
                  "-homepage",
                  "-is_highest",
                  "-issues",
                  "-license",
                  "-manifest",
                  "-name",
                  "-namespace",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-repository",
                  "-requires_ansible",
                  "-search_vector",
                  "-timestamp_of_interest",
                  "-upstream_id",
                  "-version",
                  "authors",
                  "contents",
                  "dependencies",
                  "description",
                  "docs_blob",
                  "documentation",
                  "files",
                  "homepage",
                  "is_highest",
                  "issues",
                  "license",
                  "manifest",
                  "name",
                  "namespace",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type",
                  "repository",
                  "requires_ansible",
                  "search_vector",
                  "timestamp_of_interest",
                  "upstream_id",
                  "version"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `authors` - Authors\n* `-authors` - Authors (descending)\n* `contents` - Contents\n* `-contents` - Contents (descending)\n* `dependencies` - Dependencies\n* `-dependencies` - Dependencies (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `docs_blob` - Docs blob\n* `-docs_blob` - Docs blob (descending)\n* `manifest` - Manifest\n* `-manifest` - Manifest (descending)\n* `files` - Files\n* `-files` - Files (descending)\n* `documentation` - Documentation\n* `-documentation` - Documentation (descending)\n* `homepage` - Homepage\n* `-homepage` - Homepage (descending)\n* `issues` - Issues\n* `-issues` - Issues (descending)\n* `license` - License\n* `-license` - License (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `repository` - Repository\n* `-repository` - Repository (descending)\n* `version` - Version\n* `-version` - Version (descending)\n* `requires_ansible` - Requires ansible\n* `-requires_ansible` - Requires ansible (descending)\n* `is_highest` - Is highest\n* `-is_highest` - Is highest (descending)\n* `search_vector` - Search vector\n* `-search_vector` - Search vector (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "repository_version",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_added",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_removed",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "sign_state",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "string"
            },
            "description": "Filter by comma separate list of tags that must all be matched"
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where version matches value"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V1 Repo"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedgalaxy.LoginResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/_ui/v1/repo/{distro_base_path}/{namespace}/{name}/": {
      "get": {
        "operationId": "api__ui_v1_repo_read",
        "description": "Viewset that uses CollectionVersion's within distribution to display data for Collection's.\n\nCollection list is filterable by FilterSet and includes latest CollectionVersion.\n\nCollection detail includes CollectionVersion that is latest or via query param 'version'.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V1 Repo"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/galaxy.LoginResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/_ui/v1/settings/": {
      "get": {
        "operationId": "api__ui_v1_settings_get",
        "tags": ["Api: V1 Settings"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/_ui/v1/synclists/": {
      "get": {
        "operationId": "api__ui_v1_synclists_list",
        "summary": "List sync lists",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V1 Synclists"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedSyncListResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "api__ui_v1_synclists_create",
        "summary": "Create a sync list",
        "tags": ["Api: V1 Synclists"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncList"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SyncList"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SyncList"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncListResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/_ui/v1/synclists/{id}/": {
      "get": {
        "operationId": "api__ui_v1_synclists_read",
        "summary": "Inspect a sync list",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A unique integer value identifying this sync list.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V1 Synclists"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncListResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "api__ui_v1_synclists_update",
        "summary": "Update a sync list",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A unique integer value identifying this sync list.",
            "required": true
          }
        ],
        "tags": ["Api: V1 Synclists"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncList"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SyncList"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SyncList"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncListResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "api__ui_v1_synclists_partial_update",
        "summary": "Update a sync list",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A unique integer value identifying this sync list.",
            "required": true
          }
        ],
        "tags": ["Api: V1 Synclists"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedSyncList"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedSyncList"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedSyncList"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncListResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "api__ui_v1_synclists_delete",
        "summary": "Delete a sync list",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A unique integer value identifying this sync list.",
            "required": true
          }
        ],
        "tags": ["Api: V1 Synclists"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/_ui/v1/tags/": {
      "get": {
        "operationId": "api__ui_v1_tags_list",
        "summary": "List tags",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V1 Tags"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTagResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/_ui/v1/users/": {
      "get": {
        "operationId": "api__ui_v1_users_list",
        "summary": "List users",
        "parameters": [
          {
            "in": "query",
            "name": "date_joined",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "email__contains",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "email__startswith",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "first_name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "first_name__contains",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "first_name__startswith",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "groups",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "groups__name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "last_name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "last_name__contains",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "last_name__startswith",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-date_joined",
                  "-email",
                  "-first_name",
                  "-last_name",
                  "-username",
                  "date_joined",
                  "email",
                  "first_name",
                  "last_name",
                  "username"
                ]
              }
            },
            "description": "Ordering\n\n* `username` - Username\n* `-username` - Username (descending)\n* `email` - Email\n* `-email` - Email (descending)\n* `first_name` - First name\n* `-first_name` - First name (descending)\n* `last_name` - Last name\n* `-last_name` - Last name (descending)\n* `date_joined` - Date joined\n* `-date_joined` - Date joined (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "username",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "username__contains",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "username__startswith",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V1 Users"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUserResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "api__ui_v1_users_create",
        "summary": "Create an user",
        "tags": ["Api: V1 Users"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/_ui/v1/users/{id}/": {
      "get": {
        "operationId": "api__ui_v1_users_read",
        "summary": "Inspect an user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A unique integer value identifying this user.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V1 Users"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "api__ui_v1_users_update",
        "summary": "Update an user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A unique integer value identifying this user.",
            "required": true
          }
        ],
        "tags": ["Api: V1 Users"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "api__ui_v1_users_partial_update",
        "summary": "Update an user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A unique integer value identifying this user.",
            "required": true
          }
        ],
        "tags": ["Api: V1 Users"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUser"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUser"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUser"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "api__ui_v1_users_delete",
        "summary": "Delete an user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A unique integer value identifying this user.",
            "required": true
          }
        ],
        "tags": ["Api: V1 Users"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/api/": {
      "get": {
        "operationId": "api_api_read",
        "tags": ["Api: Api"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/content/{path}/": {
      "get": {
        "operationId": "api_content_read",
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Content"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/content/{path}/api/": {
      "get": {
        "operationId": "api_content_api_read",
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Api"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/content/{path}/v3/": {
      "get": {
        "operationId": "api_content_v3_read",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V3"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoMetadataResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/content/{path}/v3/artifacts/collections/": {
      "post": {
        "operationId": "api_content_v3_artifacts_collections_create",
        "description": "Create an artifact and trigger an asynchronous task to create Collection content from it.",
        "summary": "Upload a collection",
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Pulp_Ansible: Artifacts Collections V3"],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CollectionUploadWithDownloadUrl"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CollectionUploadWithDownloadUrl"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/content/{path}/v3/artifacts/collections/{path}/{filename}": {
      "get": {
        "operationId": "api_content_v3_artifacts_collections_get",
        "description": "Download collection.",
        "parameters": [
          {
            "in": "path",
            "name": "filename",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V3 Artifacts Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/content/{path}/v3/collection_versions/all/": {
      "get": {
        "operationId": "api_content_v3_collection_versions_all_get",
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V3 Collection_Versions All"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/content/{path}/v3/collections/": {
      "get": {
        "operationId": "api_content_v3_collections_list",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "query",
            "name": "deprecated",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-name",
                  "-namespace",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "name",
                  "namespace",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V3 Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCollectionResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/content/{path}/v3/collections/{namespace}/{name}/": {
      "get": {
        "operationId": "api_content_v3_collections_read",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V3 Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "api_content_v3_collections_update",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: V3 Collections"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCollection"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCollection"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCollection"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "api_content_v3_collections_delete",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: V3 Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/content/{path}/v3/collections/{namespace}/{name}/versions/": {
      "get": {
        "operationId": "api_content_v3_collections_versions_list",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "query",
            "name": "is_highest",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-authors",
                  "-contents",
                  "-dependencies",
                  "-description",
                  "-docs_blob",
                  "-documentation",
                  "-files",
                  "-homepage",
                  "-is_highest",
                  "-issues",
                  "-license",
                  "-manifest",
                  "-name",
                  "-namespace",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-repository",
                  "-requires_ansible",
                  "-search_vector",
                  "-timestamp_of_interest",
                  "-upstream_id",
                  "-version",
                  "authors",
                  "contents",
                  "dependencies",
                  "description",
                  "docs_blob",
                  "documentation",
                  "files",
                  "homepage",
                  "is_highest",
                  "issues",
                  "license",
                  "manifest",
                  "name",
                  "namespace",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type",
                  "repository",
                  "requires_ansible",
                  "search_vector",
                  "timestamp_of_interest",
                  "upstream_id",
                  "version"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `authors` - Authors\n* `-authors` - Authors (descending)\n* `contents` - Contents\n* `-contents` - Contents (descending)\n* `dependencies` - Dependencies\n* `-dependencies` - Dependencies (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `docs_blob` - Docs blob\n* `-docs_blob` - Docs blob (descending)\n* `manifest` - Manifest\n* `-manifest` - Manifest (descending)\n* `files` - Files\n* `-files` - Files (descending)\n* `documentation` - Documentation\n* `-documentation` - Documentation (descending)\n* `homepage` - Homepage\n* `-homepage` - Homepage (descending)\n* `issues` - Issues\n* `-issues` - Issues (descending)\n* `license` - License\n* `-license` - License (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `repository` - Repository\n* `-repository` - Repository (descending)\n* `version` - Version\n* `-version` - Version (descending)\n* `requires_ansible` - Requires ansible\n* `-requires_ansible` - Requires ansible (descending)\n* `is_highest` - Is highest\n* `-is_highest` - Is highest (descending)\n* `search_vector` - Search vector\n* `-search_vector` - Search vector (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "repository_version",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_added",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_removed",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "string"
            },
            "description": "Filter by comma separate list of tags that must all be matched"
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where version matches value"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V3 Collections Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCollectionVersionListResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/": {
      "get": {
        "operationId": "api_content_v3_collections_versions_read",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V3 Collections Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "api_content_v3_collections_versions_delete",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: V3 Collections Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/copy/{source_path}/{dest_path}/": {
      "post": {
        "operationId": "api_content_v3_collections_versions_copy_copy_content",
        "description": "Copy collection version from one  repository to another.",
        "parameters": [
          {
            "in": "path",
            "name": "dest_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "source_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: V3 Collections Versions Copy"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/": {
      "get": {
        "operationId": "api_content_v3_collections_versions_docs_blob_read",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V3 Collections Versions Docs-Blob"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionDocsResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/move/{source_path}/{dest_path}/": {
      "post": {
        "operationId": "api_content_v3_collections_versions_move_move_content",
        "description": "Remove content from source repo and add to destination repo.\n\nCreates new RepositoryVersion of source repo without content included.\nCreates new RepositoryVersion of destination repo with content included.",
        "parameters": [
          {
            "in": "path",
            "name": "dest_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "source_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: V3 Collections Versions Move"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/content/{path}/v3/collections/all/": {
      "get": {
        "operationId": "api_content_v3_collections_all_get",
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V3 Collections All"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/content/{path}/v3/excludes/": {
      "get": {
        "operationId": "api_content_v3_excludes_read",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["json", "yaml"]
            }
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V3 Excludes"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/content/{path}/v3/imports/collections/{task}/": {
      "get": {
        "operationId": "api_content_v3_imports_collections_read",
        "description": "Legacy v3 endpoint.",
        "summary": "Inspect a collection import",
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "task",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A unique value identifying this collection import.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V3 Imports Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionImportDetailResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/content/{path}/v3/namespaces/": {
      "get": {
        "operationId": "api_content_v3_namespaces_list",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "query",
            "name": "company",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company matches value"
          },
          {
            "in": "query",
            "name": "company__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company contains value"
          },
          {
            "in": "query",
            "name": "company__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company contains value"
          },
          {
            "in": "query",
            "name": "company__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where company is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "company__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company starts with value"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "metadata_sha256",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where metadata_sha256 matches value"
          },
          {
            "in": "query",
            "name": "metadata_sha256__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where metadata_sha256 is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-avatar_sha256",
                  "-company",
                  "-description",
                  "-email",
                  "-links",
                  "-metadata_sha256",
                  "-name",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-resources",
                  "-timestamp_of_interest",
                  "-upstream_id",
                  "avatar_sha256",
                  "company",
                  "description",
                  "email",
                  "links",
                  "metadata_sha256",
                  "name",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type",
                  "resources",
                  "timestamp_of_interest",
                  "upstream_id"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `company` - Company\n* `-company` - Company (descending)\n* `email` - Email\n* `-email` - Email (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `resources` - Resources\n* `-resources` - Resources (descending)\n* `links` - Links\n* `-links` - Links (descending)\n* `avatar_sha256` - Avatar sha256\n* `-avatar_sha256` - Avatar sha256 (descending)\n* `metadata_sha256` - Metadata sha256\n* `-metadata_sha256` - Metadata sha256 (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V3 Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedansible.AnsibleNamespaceMetadataResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/content/{path}/v3/namespaces/{name}/": {
      "get": {
        "operationId": "api_content_v3_namespaces_read",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V3 Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadataResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/content/{path}/v3/plugin/ansible/client-configuration/": {
      "get": {
        "operationId": "api_content_v3_plugin_ansible_client_configuration_read",
        "description": "Return configurations for the ansible-galaxy client.",
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V3 Plugin Ansible Client-Configuration"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientConfigurationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/": {
      "get": {
        "operationId": "api_content_v3_plugin_ansible_content_collections_read",
        "description": "ViewSet for Repository Metadata.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V3 Plugin Ansible Content Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoMetadataResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/": {
      "get": {
        "operationId": "api_content_v3_plugin_ansible_content_collections_all_collections_list",
        "description": "Unpaginated ViewSet for Collections.",
        "parameters": [
          {
            "in": "query",
            "name": "deprecated",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-name",
                  "-namespace",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "name",
                  "namespace",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V3 Plugin Ansible Content Collections All-Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CollectionResponse"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/": {
      "get": {
        "operationId": "api_content_v3_plugin_ansible_content_collections_all_versions_list",
        "description": "Returns paginated CollectionVersions list.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V3 Plugin Ansible Content Collections All-Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UnpaginatedCollectionVersionResponse"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/": {
      "post": {
        "operationId": "api_content_v3_plugin_ansible_content_collections_artifacts_create",
        "description": "Create an artifact and trigger an asynchronous task to create Collection content from it.",
        "summary": "Upload a collection",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Pulp_Ansible: Artifacts Collections V3"],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CollectionUploadWithDownloadUrl"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CollectionUploadWithDownloadUrl"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}": {
      "get": {
        "operationId": "api_content_v3_plugin_ansible_content_collections_artifacts_download",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "filename",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V3 Plugin Ansible Content Collections Artifacts"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/": {
      "get": {
        "operationId": "api_content_v3_plugin_ansible_content_collections_index_list",
        "description": "ViewSet for Collections.",
        "parameters": [
          {
            "in": "query",
            "name": "deprecated",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-name",
                  "-namespace",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "name",
                  "namespace",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V3 Plugin Ansible Content Collections Index"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCollectionResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/": {
      "get": {
        "operationId": "api_content_v3_plugin_ansible_content_collections_index_read",
        "description": "ViewSet for Collections.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V3 Plugin Ansible Content Collections Index"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "api_content_v3_plugin_ansible_content_collections_index_update",
        "description": "Trigger an asynchronous update task",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: V3 Plugin Ansible Content Collections Index"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCollection"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCollection"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCollection"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "api_content_v3_plugin_ansible_content_collections_index_delete",
        "description": "Trigger an asynchronous delete task",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: V3 Plugin Ansible Content Collections Index"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/": {
      "get": {
        "operationId": "api_content_v3_plugin_ansible_content_collections_index_versions_list",
        "description": "Returns paginated CollectionVersions list.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "is_highest",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-authors",
                  "-contents",
                  "-dependencies",
                  "-description",
                  "-docs_blob",
                  "-documentation",
                  "-files",
                  "-homepage",
                  "-is_highest",
                  "-issues",
                  "-license",
                  "-manifest",
                  "-name",
                  "-namespace",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-repository",
                  "-requires_ansible",
                  "-search_vector",
                  "-timestamp_of_interest",
                  "-upstream_id",
                  "-version",
                  "authors",
                  "contents",
                  "dependencies",
                  "description",
                  "docs_blob",
                  "documentation",
                  "files",
                  "homepage",
                  "is_highest",
                  "issues",
                  "license",
                  "manifest",
                  "name",
                  "namespace",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type",
                  "repository",
                  "requires_ansible",
                  "search_vector",
                  "timestamp_of_interest",
                  "upstream_id",
                  "version"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `authors` - Authors\n* `-authors` - Authors (descending)\n* `contents` - Contents\n* `-contents` - Contents (descending)\n* `dependencies` - Dependencies\n* `-dependencies` - Dependencies (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `docs_blob` - Docs blob\n* `-docs_blob` - Docs blob (descending)\n* `manifest` - Manifest\n* `-manifest` - Manifest (descending)\n* `files` - Files\n* `-files` - Files (descending)\n* `documentation` - Documentation\n* `-documentation` - Documentation (descending)\n* `homepage` - Homepage\n* `-homepage` - Homepage (descending)\n* `issues` - Issues\n* `-issues` - Issues (descending)\n* `license` - License\n* `-license` - License (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `repository` - Repository\n* `-repository` - Repository (descending)\n* `version` - Version\n* `-version` - Version (descending)\n* `requires_ansible` - Requires ansible\n* `-requires_ansible` - Requires ansible (descending)\n* `is_highest` - Is highest\n* `-is_highest` - Is highest (descending)\n* `search_vector` - Search vector\n* `-search_vector` - Search vector (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "repository_version",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_added",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_removed",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "string"
            },
            "description": "Filter by comma separate list of tags that must all be matched"
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where version matches value"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V3 Plugin Ansible Content Collections Index Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCollectionVersionListResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/": {
      "get": {
        "operationId": "api_content_v3_plugin_ansible_content_collections_index_versions_read",
        "description": "Returns a CollectionVersion object.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V3 Plugin Ansible Content Collections Index Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "api_content_v3_plugin_ansible_content_collections_index_versions_delete",
        "description": "Trigger an asynchronous delete task",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: V3 Plugin Ansible Content Collections Index Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/": {
      "get": {
        "operationId": "api_content_v3_plugin_ansible_content_collections_index_versions_docs_blob_read",
        "description": "Returns a CollectionVersion object.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V3 Plugin Ansible Content Collections Index Versions Docs-Blob"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionDocsResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/content/{path}/v3/plugin/ansible/content/{distro_base_path}/namespaces/": {
      "get": {
        "operationId": "api_content_v3_plugin_ansible_content_namespaces_list",
        "description": "Custom exception handler mixin class.",
        "parameters": [
          {
            "in": "query",
            "name": "company",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company matches value"
          },
          {
            "in": "query",
            "name": "company__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company contains value"
          },
          {
            "in": "query",
            "name": "company__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company contains value"
          },
          {
            "in": "query",
            "name": "company__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where company is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "company__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company starts with value"
          },
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "metadata_sha256",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where metadata_sha256 matches value"
          },
          {
            "in": "query",
            "name": "metadata_sha256__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where metadata_sha256 is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-avatar_sha256",
                  "-company",
                  "-description",
                  "-email",
                  "-links",
                  "-metadata_sha256",
                  "-name",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-resources",
                  "-timestamp_of_interest",
                  "-upstream_id",
                  "avatar_sha256",
                  "company",
                  "description",
                  "email",
                  "links",
                  "metadata_sha256",
                  "name",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type",
                  "resources",
                  "timestamp_of_interest",
                  "upstream_id"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `company` - Company\n* `-company` - Company (descending)\n* `email` - Email\n* `-email` - Email (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `resources` - Resources\n* `-resources` - Resources (descending)\n* `links` - Links\n* `-links` - Links (descending)\n* `avatar_sha256` - Avatar sha256\n* `-avatar_sha256` - Avatar sha256 (descending)\n* `metadata_sha256` - Metadata sha256\n* `-metadata_sha256` - Metadata sha256 (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V3 Plugin Ansible Content Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedansible.AnsibleNamespaceMetadataResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "api_content_v3_plugin_ansible_content_namespaces_create",
        "description": "Custom exception handler mixin class.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: V3 Plugin Ansible Content Namespaces"],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadata"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadata"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/content/{path}/v3/plugin/ansible/content/{distro_base_path}/namespaces/{name}/": {
      "get": {
        "operationId": "api_content_v3_plugin_ansible_content_namespaces_read",
        "description": "Custom exception handler mixin class.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V3 Plugin Ansible Content Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadataResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "api_content_v3_plugin_ansible_content_namespaces_partial_update",
        "description": "Custom exception handler mixin class.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: V3 Plugin Ansible Content Namespaces"],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Patchedansible.AnsibleNamespaceMetadata"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Patchedansible.AnsibleNamespaceMetadata"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "api_content_v3_plugin_ansible_content_namespaces_delete",
        "description": "Try to remove the Namespace if no Collections under Namespace are present.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: V3 Plugin Ansible Content Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/content/{path}/v3/plugin/ansible/imports/collections/{task}/": {
      "get": {
        "operationId": "api_content_v3_plugin_ansible_imports_collections_read",
        "description": "Returns a CollectionImport object.",
        "summary": "Inspect a collection import",
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "since",
            "schema": {
              "type": "string"
            },
            "description": "Filter messages since a given timestamp"
          },
          {
            "in": "path",
            "name": "task",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A unique value identifying this collection import.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V3 Plugin Ansible Imports Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionImportDetailResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/content/{path}/v3/plugin/ansible/search/collection-versions/": {
      "get": {
        "operationId": "api_content_v3_plugin_ansible_search_collection_versions_list",
        "description": "A viewset for cross-repo searches.",
        "parameters": [
          {
            "in": "query",
            "name": "dependency",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "deprecated",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "distribution",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter collectionversions that are in these distrubtion ids.",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "distribution_base_path",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter collectionversions that are in these base paths.",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "highest",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "is_deprecated",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "is_highest",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "is_signed",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "keywords",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-name",
                  "-namespace",
                  "-pulp_created",
                  "-version",
                  "name",
                  "namespace",
                  "pulp_created",
                  "version"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_created` - by CV created\n* `-pulp_created` - by CV created (descending)\n* `namespace` - by CV namespace\n* `-namespace` - by CV namespace (descending)\n* `name` - by CV name\n* `-name` - by CV name (descending)\n* `version` - by CV version\n* `-version` - by CV version (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "repository",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter collectionversions that are in these repository ids.",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "repository_label",
            "schema": {
              "type": "string"
            },
            "description": "Filter labels by search string"
          },
          {
            "in": "query",
            "name": "repository_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter collectionversions that are in these repositories.",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "repository_version",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "signed",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "string"
            },
            "description": "Filter by comma separate list of tags that must all be matched"
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "version_range",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V3 Plugin Ansible Search Collection-Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCollectionVersionSearchListResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "api_content_v3_plugin_ansible_search_collection_versions_rebuild",
        "description": "A viewset for cross-repo searches.",
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: V3 Plugin Ansible Search Collection-Versions"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionVersionSearchList"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CollectionVersionSearchList"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CollectionVersionSearchList"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionSearchListResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/content/{path}/v3/sync/": {
      "post": {
        "operationId": "api_content_v3_sync_sync",
        "description": "Trigger an asynchronous sync task",
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: V3 Sync"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/content/{path}/v3/sync/config/": {
      "get": {
        "operationId": "api_content_v3_sync_config_read",
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: V3 Sync Config"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionRemoteResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "api_content_v3_sync_config_update",
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: V3 Sync Config"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ansible.CollectionRemote"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ansible.CollectionRemote"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ansible.CollectionRemote"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionRemoteResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/content/{path}/v3/tasks/": {
      "get": {
        "operationId": "_api_content_{path}_v3_tasks_tasks_list",
        "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
        "summary": "List tasks",
        "parameters": [
          {
            "in": "query",
            "name": "child_tasks",
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "description": "Filter results where child_tasks matches value"
          },
          {
            "in": "query",
            "name": "created_resources",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "exclusive_resources",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exclusive_resources__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "finished_at",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where finished_at matches value"
          },
          {
            "in": "query",
            "name": "finished_at__gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where finished_at is greater than value"
          },
          {
            "in": "query",
            "name": "finished_at__gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where finished_at is greater than or equal to value"
          },
          {
            "in": "query",
            "name": "finished_at__lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where finished_at is less than value"
          },
          {
            "in": "query",
            "name": "finished_at__lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where finished_at is less than or equal to value"
          },
          {
            "in": "query",
            "name": "finished_at__range",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            },
            "description": "Filter results where finished_at is between two comma separated values",
            "explode": false,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "logging_cid",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where logging_cid matches value"
          },
          {
            "in": "query",
            "name": "logging_cid__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where logging_cid contains value"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-args",
                  "-error",
                  "-finished_at",
                  "-kwargs",
                  "-logging_cid",
                  "-name",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-reserved_resources_record",
                  "-started_at",
                  "-state",
                  "args",
                  "error",
                  "finished_at",
                  "kwargs",
                  "logging_cid",
                  "name",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "reserved_resources_record",
                  "started_at",
                  "state"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `state` - State\n* `-state` - State (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `logging_cid` - Logging cid\n* `-logging_cid` - Logging cid (descending)\n* `started_at` - Started at\n* `-started_at` - Started at (descending)\n* `finished_at` - Finished at\n* `-finished_at` - Finished at (descending)\n* `error` - Error\n* `-error` - Error (descending)\n* `args` - Args\n* `-args` - Args (descending)\n* `kwargs` - Kwargs\n* `-kwargs` - Kwargs (descending)\n* `reserved_resources_record` - Reserved resources record\n* `-reserved_resources_record` - Reserved resources record (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "parent_task",
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "description": "Filter results where parent_task matches value"
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "reserved_resources",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "reserved_resources__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "reserved_resources_record",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "shared_resources",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "shared_resources__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "started_at",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where started_at matches value"
          },
          {
            "in": "query",
            "name": "started_at__gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where started_at is greater than value"
          },
          {
            "in": "query",
            "name": "started_at__gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where started_at is greater than or equal to value"
          },
          {
            "in": "query",
            "name": "started_at__lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where started_at is less than value"
          },
          {
            "in": "query",
            "name": "started_at__lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where started_at is less than or equal to value"
          },
          {
            "in": "query",
            "name": "started_at__range",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            },
            "description": "Filter results where started_at is between two comma separated values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "state",
            "schema": {
              "type": "string",
              "enum": [
                "canceled",
                "canceling",
                "completed",
                "failed",
                "running",
                "skipped",
                "waiting"
              ]
            },
            "description": "Filter results where state matches value\n\n* `waiting` - Waiting\n* `skipped` - Skipped\n* `running` - Running\n* `completed` - Completed\n* `failed` - Failed\n* `canceled` - Canceled\n* `canceling` - Canceling"
          },
          {
            "in": "query",
            "name": "state__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where state is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "task_group",
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "description": "Filter results where task_group matches value"
          },
          {
            "in": "query",
            "name": "worker",
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "description": "Filter results where worker matches value"
          },
          {
            "in": "query",
            "name": "worker__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uri"
              }
            },
            "description": "Filter results where worker is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Tasks"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTaskSummaryResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/content/{path}/v3/tasks/{pulp_id}/": {
      "get": {
        "operationId": "_api_content_{path}_v3_tasks_{pulp_id}_tasks_read",
        "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
        "summary": "Inspect a task",
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this task.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Tasks"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/access_policies/": {
      "get": {
        "operationId": "access_policies_list",
        "description": "ViewSet for AccessPolicy.\n\nNOTE: This API endpoint is in \"tech preview\" and subject to change",
        "summary": "List access policys",
        "parameters": [
          {
            "in": "query",
            "name": "customized",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter results where customized matches value"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-creation_hooks",
                  "-customized",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-queryset_scoping",
                  "-statements",
                  "-viewset_name",
                  "creation_hooks",
                  "customized",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "queryset_scoping",
                  "statements",
                  "viewset_name"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `creation_hooks` - Creation hooks\n* `-creation_hooks` - Creation hooks (descending)\n* `statements` - Statements\n* `-statements` - Statements (descending)\n* `viewset_name` - Viewset name\n* `-viewset_name` - Viewset name (descending)\n* `customized` - Customized\n* `-customized` - Customized (descending)\n* `queryset_scoping` - Queryset scoping\n* `-queryset_scoping` - Queryset scoping (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "viewset_name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where viewset_name matches value"
          },
          {
            "in": "query",
            "name": "viewset_name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where viewset_name contains value"
          },
          {
            "in": "query",
            "name": "viewset_name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where viewset_name contains value"
          },
          {
            "in": "query",
            "name": "viewset_name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where viewset_name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "viewset_name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where viewset_name starts with value"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Access_Policies"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAccessPolicyResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/access_policies/{pulp_id}/": {
      "get": {
        "operationId": "access_policies_read",
        "description": "ViewSet for AccessPolicy.\n\nNOTE: This API endpoint is in \"tech preview\" and subject to change",
        "summary": "Inspect an access policy",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this access policy.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Access_Policies"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessPolicyResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "access_policies_update",
        "description": "ViewSet for AccessPolicy.\n\nNOTE: This API endpoint is in \"tech preview\" and subject to change",
        "summary": "Update an access policy",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this access policy.",
            "required": true
          }
        ],
        "tags": ["Access_Policies"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessPolicy"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AccessPolicy"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AccessPolicy"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessPolicyResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "access_policies_partial_update",
        "description": "ViewSet for AccessPolicy.\n\nNOTE: This API endpoint is in \"tech preview\" and subject to change",
        "summary": "Update an access policy",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this access policy.",
            "required": true
          }
        ],
        "tags": ["Access_Policies"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedAccessPolicy"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedAccessPolicy"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedAccessPolicy"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessPolicyResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/access_policies/{pulp_id}/reset/": {
      "post": {
        "operationId": "access_policies_reset",
        "description": "Reset the access policy to its uncustomized default value.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this access policy.",
            "required": true
          }
        ],
        "tags": ["Access_Policies"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessPolicyResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/ansible/collections/": {
      "get": {
        "operationId": "ansible_collections_list",
        "description": "Viewset for Ansible Collections.",
        "summary": "List collections",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-name",
                  "-namespace",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "name",
                  "namespace",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Ansible: Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedansible.CollectionResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/ansible/collections/{pulp_id}/": {
      "get": {
        "operationId": "ansible_collections_read",
        "description": "Viewset for Ansible Collections.",
        "summary": "Inspect a collection",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this collection.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Ansible: Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/ansible/collections/{pulp_id}/add_role/": {
      "post": {
        "operationId": "ansible_collections_add_role",
        "description": "Add a role for this object to users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this collection.",
            "required": true
          }
        ],
        "tags": ["Ansible: Collections"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/ansible/collections/{pulp_id}/list_roles/": {
      "get": {
        "operationId": "ansible_collections_list_roles",
        "description": "List roles assigned to this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this collection.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Ansible: Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectRolesResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/ansible/collections/{pulp_id}/my_permissions/": {
      "get": {
        "operationId": "ansible_collections_my_permissions",
        "description": "List permissions available to the current user on this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this collection.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Ansible: Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyPermissionsResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/ansible/collections/{pulp_id}/remove_role/": {
      "post": {
        "operationId": "ansible_collections_remove_role",
        "description": "Remove a role for this object from users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this collection.",
            "required": true
          }
        ],
        "tags": ["Ansible: Collections"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/artifacts/": {
      "get": {
        "operationId": "artifacts_list",
        "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
        "summary": "List artifacts",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "md5",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where md5 matches value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-file",
                  "-md5",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-sha1",
                  "-sha224",
                  "-sha256",
                  "-sha384",
                  "-sha512",
                  "-size",
                  "-timestamp_of_interest",
                  "file",
                  "md5",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "sha1",
                  "sha224",
                  "sha256",
                  "sha384",
                  "sha512",
                  "size",
                  "timestamp_of_interest"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `file` - File\n* `-file` - File (descending)\n* `size` - Size\n* `-size` - Size (descending)\n* `md5` - Md5\n* `-md5` - Md5 (descending)\n* `sha1` - Sha1\n* `-sha1` - Sha1 (descending)\n* `sha224` - Sha224\n* `-sha224` - Sha224 (descending)\n* `sha256` - Sha256\n* `-sha256` - Sha256 (descending)\n* `sha384` - Sha384\n* `-sha384` - Sha384 (descending)\n* `sha512` - Sha512\n* `-sha512` - Sha512 (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "repository_version",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "sha1",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where sha1 matches value"
          },
          {
            "in": "query",
            "name": "sha224",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where sha224 matches value"
          },
          {
            "in": "query",
            "name": "sha256",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where sha256 matches value"
          },
          {
            "in": "query",
            "name": "sha384",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where sha384 matches value"
          },
          {
            "in": "query",
            "name": "sha512",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where sha512 matches value"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Artifacts"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedArtifactResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "artifacts_create",
        "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
        "summary": "Create an artifact",
        "tags": ["Artifacts"],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Artifact"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Artifact"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArtifactResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/artifacts/{pulp_id}/": {
      "get": {
        "operationId": "artifacts_read",
        "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
        "summary": "Inspect an artifact",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this artifact.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Artifacts"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArtifactResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "artifacts_delete",
        "description": "Remove Artifact only if it is not associated with any Content.",
        "summary": "Delete an artifact",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this artifact.",
            "required": true
          }
        ],
        "tags": ["Artifacts"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/pulp/api/v3/content/": {
      "get": {
        "operationId": "content_list",
        "description": "Endpoint to list all content.",
        "summary": "List content",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["-pk", "pk"]
              }
            },
            "description": "Ordering\n\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_type__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "ansible.collection_deprecation",
                  "ansible.collection_mark",
                  "ansible.collection_signature",
                  "ansible.collection_version",
                  "ansible.namespace",
                  "ansible.role",
                  "container.blob",
                  "container.manifest",
                  "container.signature",
                  "container.tag",
                  "core.publishedmetadata"
                ]
              }
            },
            "description": "Pulp type is in\n\n* `core.publishedmetadata` - core.publishedmetadata\n* `container.blob` - container.blob\n* `container.manifest` - container.manifest\n* `container.tag` - container.tag\n* `container.signature` - container.signature\n* `ansible.role` - ansible.role\n* `ansible.collection_version` - ansible.collection_version\n* `ansible.collection_mark` - ansible.collection_mark\n* `ansible.collection_signature` - ansible.collection_signature\n* `ansible.namespace` - ansible.namespace\n* `ansible.collection_deprecation` - ansible.collection_deprecation",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "repository_version",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_added",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_removed",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Content"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedMultipleArtifactContentResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/content/ansible/collection_deprecations/": {
      "get": {
        "operationId": "content_ansible_collection_deprecations_list",
        "description": "ViewSet for AnsibleCollectionDeprecated.",
        "summary": "List ansible collection deprecateds",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["-pk", "pk"]
              }
            },
            "description": "Ordering\n\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "repository_version",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_added",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_removed",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Content: Collection_Deprecations"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedansible.CollectionResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "content_ansible_collection_deprecations_create",
        "description": "ViewSet for AnsibleCollectionDeprecated.",
        "summary": "Create an ansible collection deprecated",
        "tags": ["Content: Collection_Deprecations"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ansible.Collection"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ansible.Collection"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ansible.Collection"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/content/ansible/collection_deprecations/{pulp_id}/": {
      "get": {
        "operationId": "content_ansible_collection_deprecations_read",
        "description": "ViewSet for AnsibleCollectionDeprecated.",
        "summary": "Inspect an ansible collection deprecated",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this ansible collection deprecated.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Content: Collection_Deprecations"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/content/ansible/collection_marks/": {
      "get": {
        "operationId": "content_ansible_collection_marks_list",
        "description": "ViewSet for looking at mark objects for CollectionVersion content.",
        "summary": "List collection version marks",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "marked_collection",
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "description": "Filter marks for collection version"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-timestamp_of_interest",
                  "-upstream_id",
                  "-value",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type",
                  "timestamp_of_interest",
                  "upstream_id",
                  "value"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `value` - Value\n* `-value` - Value (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "repository_version",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_added",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_removed",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "value",
            "schema": {
              "type": "string"
            },
            "description": "Filter marks by value"
          },
          {
            "in": "query",
            "name": "value__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where value is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Content: Collection_Marks"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedansible.CollectionVersionMarkResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "content_ansible_collection_marks_create",
        "description": "ViewSet for looking at mark objects for CollectionVersion content.",
        "summary": "Create a collection version mark",
        "tags": ["Content: Collection_Marks"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ansible.CollectionVersionMark"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ansible.CollectionVersionMark"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ansible.CollectionVersionMark"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionVersionMarkResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/content/ansible/collection_marks/{pulp_id}/": {
      "get": {
        "operationId": "content_ansible_collection_marks_read",
        "description": "ViewSet for looking at mark objects for CollectionVersion content.",
        "summary": "Inspect a collection version mark",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this collection version mark.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Content: Collection_Marks"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionVersionMarkResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/content/ansible/collection_signatures/": {
      "get": {
        "operationId": "content_ansible_collection_signatures_list",
        "description": "ViewSet for looking at signature objects for CollectionVersion content.",
        "summary": "List collection version signatures",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-data",
                  "-digest",
                  "-pk",
                  "-pubkey_fingerprint",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-timestamp_of_interest",
                  "-upstream_id",
                  "data",
                  "digest",
                  "pk",
                  "pubkey_fingerprint",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type",
                  "timestamp_of_interest",
                  "upstream_id"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `data` - Data\n* `-data` - Data (descending)\n* `digest` - Digest\n* `-digest` - Digest (descending)\n* `pubkey_fingerprint` - Pubkey fingerprint\n* `-pubkey_fingerprint` - Pubkey fingerprint (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pubkey_fingerprint",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where pubkey_fingerprint matches value"
          },
          {
            "in": "query",
            "name": "pubkey_fingerprint__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where pubkey_fingerprint is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "repository_version",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_added",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_removed",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "signed_collection",
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "description": "Filter signatures for collection version"
          },
          {
            "in": "query",
            "name": "signing_service",
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "description": "Filter signatures produced by signature service"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Content: Collection_Signatures"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedansible.CollectionVersionSignatureResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "content_ansible_collection_signatures_create",
        "description": "Trigger an asynchronous task to create content,optionally create new repository version.",
        "summary": "Create a collection version signature",
        "tags": ["Content: Collection_Signatures"],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ansible.CollectionVersionSignature"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ansible.CollectionVersionSignature"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/content/ansible/collection_signatures/{pulp_id}/": {
      "get": {
        "operationId": "content_ansible_collection_signatures_read",
        "description": "ViewSet for looking at signature objects for CollectionVersion content.",
        "summary": "Inspect a collection version signature",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this collection version signature.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Content: Collection_Signatures"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionVersionSignatureResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/content/ansible/collection_versions/": {
      "get": {
        "operationId": "content_ansible_collection_versions_list",
        "description": "ViewSet for Ansible Collection.",
        "summary": "List collection versions",
        "parameters": [
          {
            "in": "query",
            "name": "is_highest",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-authors",
                  "-contents",
                  "-dependencies",
                  "-description",
                  "-docs_blob",
                  "-documentation",
                  "-files",
                  "-homepage",
                  "-is_highest",
                  "-issues",
                  "-license",
                  "-manifest",
                  "-name",
                  "-namespace",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-repository",
                  "-requires_ansible",
                  "-search_vector",
                  "-timestamp_of_interest",
                  "-upstream_id",
                  "-version",
                  "authors",
                  "contents",
                  "dependencies",
                  "description",
                  "docs_blob",
                  "documentation",
                  "files",
                  "homepage",
                  "is_highest",
                  "issues",
                  "license",
                  "manifest",
                  "name",
                  "namespace",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type",
                  "repository",
                  "requires_ansible",
                  "search_vector",
                  "timestamp_of_interest",
                  "upstream_id",
                  "version"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `authors` - Authors\n* `-authors` - Authors (descending)\n* `contents` - Contents\n* `-contents` - Contents (descending)\n* `dependencies` - Dependencies\n* `-dependencies` - Dependencies (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `docs_blob` - Docs blob\n* `-docs_blob` - Docs blob (descending)\n* `manifest` - Manifest\n* `-manifest` - Manifest (descending)\n* `files` - Files\n* `-files` - Files (descending)\n* `documentation` - Documentation\n* `-documentation` - Documentation (descending)\n* `homepage` - Homepage\n* `-homepage` - Homepage (descending)\n* `issues` - Issues\n* `-issues` - Issues (descending)\n* `license` - License\n* `-license` - License (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `repository` - Repository\n* `-repository` - Repository (descending)\n* `version` - Version\n* `-version` - Version (descending)\n* `requires_ansible` - Requires ansible\n* `-requires_ansible` - Requires ansible (descending)\n* `is_highest` - Is highest\n* `-is_highest` - Is highest (descending)\n* `search_vector` - Search vector\n* `-search_vector` - Search vector (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "repository_version",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_added",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_removed",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "string"
            },
            "description": "Filter by comma separate list of tags that must all be matched"
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where version matches value"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Content: Collection_Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedansible.CollectionVersionResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "content_ansible_collection_versions_create",
        "description": "Trigger an asynchronous task to create content,optionally create new repository version.",
        "summary": "Create a collection version",
        "tags": ["Content: Collection_Versions"],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ansible.CollectionVersion"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ansible.CollectionVersion"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/content/ansible/collection_versions/{pulp_id}/": {
      "get": {
        "operationId": "content_ansible_collection_versions_read",
        "description": "ViewSet for Ansible Collection.",
        "summary": "Inspect a collection version",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this collection version.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Content: Collection_Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionVersionResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/content/ansible/namespaces/": {
      "get": {
        "operationId": "content_ansible_namespaces_list",
        "description": "ViewSet for AnsibleNamespace.",
        "summary": "List ansible namespace metadatas",
        "parameters": [
          {
            "in": "query",
            "name": "company",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company matches value"
          },
          {
            "in": "query",
            "name": "company__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company contains value"
          },
          {
            "in": "query",
            "name": "company__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company contains value"
          },
          {
            "in": "query",
            "name": "company__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where company is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "company__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company starts with value"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "metadata_sha256",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where metadata_sha256 matches value"
          },
          {
            "in": "query",
            "name": "metadata_sha256__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where metadata_sha256 is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-avatar_sha256",
                  "-company",
                  "-description",
                  "-email",
                  "-links",
                  "-metadata_sha256",
                  "-name",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-resources",
                  "-timestamp_of_interest",
                  "-upstream_id",
                  "avatar_sha256",
                  "company",
                  "description",
                  "email",
                  "links",
                  "metadata_sha256",
                  "name",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type",
                  "resources",
                  "timestamp_of_interest",
                  "upstream_id"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `company` - Company\n* `-company` - Company (descending)\n* `email` - Email\n* `-email` - Email (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `resources` - Resources\n* `-resources` - Resources (descending)\n* `links` - Links\n* `-links` - Links (descending)\n* `avatar_sha256` - Avatar sha256\n* `-avatar_sha256` - Avatar sha256 (descending)\n* `metadata_sha256` - Metadata sha256\n* `-metadata_sha256` - Metadata sha256 (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "repository_version",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_added",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_removed",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Content: Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedansible.AnsibleNamespaceMetadataResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/content/ansible/namespaces/{pulp_id}/": {
      "get": {
        "operationId": "content_ansible_namespaces_read",
        "description": "ViewSet for AnsibleNamespace.",
        "summary": "Inspect an ansible namespace metadata",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this ansible namespace metadata.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Content: Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadataResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/content/ansible/namespaces/{pulp_id}/avatar/": {
      "get": {
        "operationId": "content_ansible_namespaces_avatar",
        "description": "Get the logo for the this namespace.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this ansible namespace metadata.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Content: Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "302": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Unspecified response body"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/content/ansible/roles/": {
      "get": {
        "operationId": "content_ansible_roles_list",
        "description": "ViewSet for Role.",
        "summary": "List roles",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where namespace matches value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-name",
                  "-namespace",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-timestamp_of_interest",
                  "-upstream_id",
                  "-version",
                  "name",
                  "namespace",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type",
                  "timestamp_of_interest",
                  "upstream_id",
                  "version"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `version` - Version\n* `-version` - Version (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "repository_version",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_added",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_removed",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where version matches value"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Content: Roles"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedansible.RoleResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "content_ansible_roles_create",
        "description": "ViewSet for Role.",
        "summary": "Create a role",
        "tags": ["Content: Roles"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ansible.Role"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ansible.Role"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ansible.Role"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.RoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/content/ansible/roles/{pulp_id}/": {
      "get": {
        "operationId": "content_ansible_roles_read",
        "description": "ViewSet for Role.",
        "summary": "Inspect a role",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this role.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Content: Roles"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.RoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/content/container/blobs/": {
      "get": {
        "operationId": "content_container_blobs_list",
        "description": "ViewSet for Blobs.",
        "summary": "List blobs",
        "parameters": [
          {
            "in": "query",
            "name": "digest",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where digest matches value"
          },
          {
            "in": "query",
            "name": "digest__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where digest is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-digest",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-timestamp_of_interest",
                  "-upstream_id",
                  "digest",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type",
                  "timestamp_of_interest",
                  "upstream_id"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `digest` - Digest\n* `-digest` - Digest (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "repository_version",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_added",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_removed",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Content: Blobs"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedcontainer.BlobResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/content/container/blobs/{pulp_id}/": {
      "get": {
        "operationId": "content_container_blobs_read",
        "description": "ViewSet for Blobs.",
        "summary": "Inspect a blob",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this blob.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Content: Blobs"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/container.BlobResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/content/container/manifests/": {
      "get": {
        "operationId": "content_container_manifests_list",
        "description": "ViewSet for Manifest.",
        "summary": "List manifests",
        "parameters": [
          {
            "in": "query",
            "name": "digest",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where digest matches value"
          },
          {
            "in": "query",
            "name": "digest__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where digest is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "media_type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "application/vnd.docker.distribution.manifest.list.v2+json",
                  "application/vnd.docker.distribution.manifest.v1+json",
                  "application/vnd.docker.distribution.manifest.v2+json",
                  "application/vnd.oci.image.index.v1+json",
                  "application/vnd.oci.image.manifest.v1+json"
                ]
              }
            },
            "description": "* `application/vnd.docker.distribution.manifest.v1+json` - application/vnd.docker.distribution.manifest.v1+json\n* `application/vnd.docker.distribution.manifest.v2+json` - application/vnd.docker.distribution.manifest.v2+json\n* `application/vnd.docker.distribution.manifest.list.v2+json` - application/vnd.docker.distribution.manifest.list.v2+json\n* `application/vnd.oci.image.manifest.v1+json` - application/vnd.oci.image.manifest.v1+json\n* `application/vnd.oci.image.index.v1+json` - application/vnd.oci.image.index.v1+json\n\n* `application/vnd.docker.distribution.manifest.v1+json` - application/vnd.docker.distribution.manifest.v1+json\n* `application/vnd.docker.distribution.manifest.v2+json` - application/vnd.docker.distribution.manifest.v2+json\n* `application/vnd.docker.distribution.manifest.list.v2+json` - application/vnd.docker.distribution.manifest.list.v2+json\n* `application/vnd.oci.image.manifest.v1+json` - application/vnd.oci.image.manifest.v1+json\n* `application/vnd.oci.image.index.v1+json` - application/vnd.oci.image.index.v1+json",
            "explode": true,
            "style": "form"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-digest",
                  "-media_type",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-schema_version",
                  "-timestamp_of_interest",
                  "-upstream_id",
                  "digest",
                  "media_type",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type",
                  "schema_version",
                  "timestamp_of_interest",
                  "upstream_id"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `digest` - Digest\n* `-digest` - Digest (descending)\n* `schema_version` - Schema version\n* `-schema_version` - Schema version (descending)\n* `media_type` - Media type\n* `-media_type` - Media type (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "repository_version",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_added",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_removed",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Content: Manifests"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedcontainer.ManifestResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/content/container/manifests/{pulp_id}/": {
      "get": {
        "operationId": "content_container_manifests_read",
        "description": "ViewSet for Manifest.",
        "summary": "Inspect a manifest",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this manifest.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Content: Manifests"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/container.ManifestResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/content/container/signatures/": {
      "get": {
        "operationId": "content_container_signatures_list",
        "description": "ViewSet for image signatures.",
        "summary": "List manifest signatures",
        "parameters": [
          {
            "in": "query",
            "name": "digest",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where digest matches value"
          },
          {
            "in": "query",
            "name": "digest__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where digest is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "key_id",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where key_id matches value"
          },
          {
            "in": "query",
            "name": "key_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where key_id is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "manifest",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-creator",
                  "-data",
                  "-digest",
                  "-key_id",
                  "-name",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-timestamp",
                  "-timestamp_of_interest",
                  "-type",
                  "-upstream_id",
                  "creator",
                  "data",
                  "digest",
                  "key_id",
                  "name",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type",
                  "timestamp",
                  "timestamp_of_interest",
                  "type",
                  "upstream_id"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `digest` - Digest\n* `-digest` - Digest (descending)\n* `type` - Type\n* `-type` - Type (descending)\n* `key_id` - Key id\n* `-key_id` - Key id (descending)\n* `timestamp` - Timestamp\n* `-timestamp` - Timestamp (descending)\n* `creator` - Creator\n* `-creator` - Creator (descending)\n* `data` - Data\n* `-data` - Data (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "repository_version",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_added",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_removed",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Content: Signatures"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedcontainer.ManifestSignatureResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/content/container/signatures/{pulp_id}/": {
      "get": {
        "operationId": "content_container_signatures_read",
        "description": "ViewSet for image signatures.",
        "summary": "Inspect a manifest signature",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this manifest signature.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Content: Signatures"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/container.ManifestSignatureResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/content/container/tags/": {
      "get": {
        "operationId": "content_container_tags_list",
        "description": "ViewSet for Tag.",
        "summary": "List tags",
        "parameters": [
          {
            "in": "query",
            "name": "digest",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "media_type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "application/vnd.docker.distribution.manifest.list.v2+json",
                  "application/vnd.docker.distribution.manifest.v1+json",
                  "application/vnd.docker.distribution.manifest.v2+json",
                  "application/vnd.oci.image.index.v1+json",
                  "application/vnd.oci.image.manifest.v1+json"
                ]
              }
            },
            "description": "* `application/vnd.docker.distribution.manifest.v1+json` - application/vnd.docker.distribution.manifest.v1+json\n* `application/vnd.docker.distribution.manifest.v2+json` - application/vnd.docker.distribution.manifest.v2+json\n* `application/vnd.docker.distribution.manifest.list.v2+json` - application/vnd.docker.distribution.manifest.list.v2+json\n* `application/vnd.oci.image.manifest.v1+json` - application/vnd.oci.image.manifest.v1+json\n* `application/vnd.oci.image.index.v1+json` - application/vnd.oci.image.index.v1+json\n\n* `application/vnd.docker.distribution.manifest.v1+json` - application/vnd.docker.distribution.manifest.v1+json\n* `application/vnd.docker.distribution.manifest.v2+json` - application/vnd.docker.distribution.manifest.v2+json\n* `application/vnd.docker.distribution.manifest.list.v2+json` - application/vnd.docker.distribution.manifest.list.v2+json\n* `application/vnd.oci.image.manifest.v1+json` - application/vnd.oci.image.manifest.v1+json\n* `application/vnd.oci.image.index.v1+json` - application/vnd.oci.image.index.v1+json",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-name",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-timestamp_of_interest",
                  "-upstream_id",
                  "name",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type",
                  "timestamp_of_interest",
                  "upstream_id"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "repository_version",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_added",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_removed",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Content: Tags"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedcontainer.TagResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/content/container/tags/{pulp_id}/": {
      "get": {
        "operationId": "content_container_tags_read",
        "description": "ViewSet for Tag.",
        "summary": "Inspect a tag",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this tag.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Content: Tags"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/container.TagResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/contentguards/": {
      "get": {
        "operationId": "contentguards_list",
        "description": "Endpoint to list all contentguards.",
        "summary": "List content guards",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-description",
                  "-name",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "description",
                  "name",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_type__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["core.content_redirect", "core.rbac"]
              }
            },
            "description": "Pulp type is in\n\n* `core.rbac` - core.rbac\n* `core.content_redirect` - core.content_redirect",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Contentguards"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedContentGuardResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/contentguards/core/content_redirect/": {
      "get": {
        "operationId": "contentguards_core_content_redirect_list",
        "description": "Content guard to protect preauthenticated redirects to the content app.",
        "summary": "List content redirect content guards",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-description",
                  "-name",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "description",
                  "name",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Contentguards: Content_Redirect"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedContentRedirectContentGuardResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "contentguards_core_content_redirect_create",
        "description": "Content guard to protect preauthenticated redirects to the content app.",
        "summary": "Create a content redirect content guard",
        "tags": ["Contentguards: Content_Redirect"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentRedirectContentGuard"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ContentRedirectContentGuard"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ContentRedirectContentGuard"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentRedirectContentGuardResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/": {
      "get": {
        "operationId": "contentguards_core_content_redirect_read",
        "description": "Content guard to protect preauthenticated redirects to the content app.",
        "summary": "Inspect a content redirect content guard",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this content redirect content guard.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Contentguards: Content_Redirect"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentRedirectContentGuardResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "contentguards_core_content_redirect_update",
        "description": "Content guard to protect preauthenticated redirects to the content app.",
        "summary": "Update a content redirect content guard",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this content redirect content guard.",
            "required": true
          }
        ],
        "tags": ["Contentguards: Content_Redirect"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentRedirectContentGuard"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ContentRedirectContentGuard"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ContentRedirectContentGuard"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentRedirectContentGuardResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "contentguards_core_content_redirect_partial_update",
        "description": "Content guard to protect preauthenticated redirects to the content app.",
        "summary": "Update a content redirect content guard",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this content redirect content guard.",
            "required": true
          }
        ],
        "tags": ["Contentguards: Content_Redirect"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedContentRedirectContentGuard"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedContentRedirectContentGuard"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedContentRedirectContentGuard"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentRedirectContentGuardResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "contentguards_core_content_redirect_delete",
        "description": "Content guard to protect preauthenticated redirects to the content app.",
        "summary": "Delete a content redirect content guard",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this content redirect content guard.",
            "required": true
          }
        ],
        "tags": ["Contentguards: Content_Redirect"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/add_role/": {
      "post": {
        "operationId": "contentguards_core_content_redirect_add_role",
        "description": "Add a role for this object to users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this content redirect content guard.",
            "required": true
          }
        ],
        "tags": ["Contentguards: Content_Redirect"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/list_roles/": {
      "get": {
        "operationId": "contentguards_core_content_redirect_list_roles",
        "description": "List roles assigned to this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this content redirect content guard.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Contentguards: Content_Redirect"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectRolesResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/my_permissions/": {
      "get": {
        "operationId": "contentguards_core_content_redirect_my_permissions",
        "description": "List permissions available to the current user on this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this content redirect content guard.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Contentguards: Content_Redirect"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyPermissionsResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/remove_role/": {
      "post": {
        "operationId": "contentguards_core_content_redirect_remove_role",
        "description": "Remove a role for this object from users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this content redirect content guard.",
            "required": true
          }
        ],
        "tags": ["Contentguards: Content_Redirect"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/contentguards/core/rbac/": {
      "get": {
        "operationId": "contentguards_core_rbac_list",
        "description": "Viewset for creating contentguards that use RBAC to protect content.\nHas add and remove actions for managing permission for users and groups to download content\nprotected by this guard.",
        "summary": "List rbac content guards",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-description",
                  "-name",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "description",
                  "name",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Contentguards: Rbac"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRBACContentGuardResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "contentguards_core_rbac_create",
        "description": "Viewset for creating contentguards that use RBAC to protect content.\nHas add and remove actions for managing permission for users and groups to download content\nprotected by this guard.",
        "summary": "Create a rbac content guard",
        "tags": ["Contentguards: Rbac"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RBACContentGuard"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RBACContentGuard"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/RBACContentGuard"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RBACContentGuardResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/contentguards/core/rbac/{pulp_id}/": {
      "get": {
        "operationId": "contentguards_core_rbac_read",
        "description": "Viewset for creating contentguards that use RBAC to protect content.\nHas add and remove actions for managing permission for users and groups to download content\nprotected by this guard.",
        "summary": "Inspect a rbac content guard",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this rbac content guard.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Contentguards: Rbac"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RBACContentGuardResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "contentguards_core_rbac_update",
        "description": "Viewset for creating contentguards that use RBAC to protect content.\nHas add and remove actions for managing permission for users and groups to download content\nprotected by this guard.",
        "summary": "Update a rbac content guard",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this rbac content guard.",
            "required": true
          }
        ],
        "tags": ["Contentguards: Rbac"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RBACContentGuard"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RBACContentGuard"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/RBACContentGuard"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RBACContentGuardResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "contentguards_core_rbac_partial_update",
        "description": "Viewset for creating contentguards that use RBAC to protect content.\nHas add and remove actions for managing permission for users and groups to download content\nprotected by this guard.",
        "summary": "Update a rbac content guard",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this rbac content guard.",
            "required": true
          }
        ],
        "tags": ["Contentguards: Rbac"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedRBACContentGuard"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedRBACContentGuard"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedRBACContentGuard"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RBACContentGuardResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "contentguards_core_rbac_delete",
        "description": "Viewset for creating contentguards that use RBAC to protect content.\nHas add and remove actions for managing permission for users and groups to download content\nprotected by this guard.",
        "summary": "Delete a rbac content guard",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this rbac content guard.",
            "required": true
          }
        ],
        "tags": ["Contentguards: Rbac"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/pulp/api/v3/contentguards/core/rbac/{pulp_id}/add_role/": {
      "post": {
        "operationId": "contentguards_core_rbac_add_role",
        "description": "Add a role for this object to users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this rbac content guard.",
            "required": true
          }
        ],
        "tags": ["Contentguards: Rbac"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/contentguards/core/rbac/{pulp_id}/list_roles/": {
      "get": {
        "operationId": "contentguards_core_rbac_list_roles",
        "description": "List roles assigned to this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this rbac content guard.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Contentguards: Rbac"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectRolesResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/contentguards/core/rbac/{pulp_id}/my_permissions/": {
      "get": {
        "operationId": "contentguards_core_rbac_my_permissions",
        "description": "List permissions available to the current user on this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this rbac content guard.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Contentguards: Rbac"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyPermissionsResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/contentguards/core/rbac/{pulp_id}/remove_role/": {
      "post": {
        "operationId": "contentguards_core_rbac_remove_role",
        "description": "Remove a role for this object from users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this rbac content guard.",
            "required": true
          }
        ],
        "tags": ["Contentguards: Rbac"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/distributions/": {
      "get": {
        "operationId": "distributions_list",
        "description": "Provides base viewset for Distributions.",
        "summary": "List distributions",
        "parameters": [
          {
            "in": "query",
            "name": "base_path",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where base_path matches value"
          },
          {
            "in": "query",
            "name": "base_path__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where base_path contains value"
          },
          {
            "in": "query",
            "name": "base_path__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where base_path contains value"
          },
          {
            "in": "query",
            "name": "base_path__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where base_path is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-base_path",
                  "-hidden",
                  "-name",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_labels",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "base_path",
                  "hidden",
                  "name",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_labels",
                  "pulp_last_updated",
                  "pulp_type"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pulp_labels` - Pulp labels\n* `-pulp_labels` - Pulp labels (descending)\n* `base_path` - Base path\n* `-base_path` - Base path (descending)\n* `hidden` - Hidden\n* `-hidden` - Hidden (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_label_select",
            "schema": {
              "type": "string"
            },
            "description": "Filter labels by search string"
          },
          {
            "in": "query",
            "name": "pulp_type__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["ansible.ansible", "container.container", "core.artifact"]
              }
            },
            "description": "Pulp type is in\n\n* `core.artifact` - core.artifact\n* `container.container` - container.container\n* `ansible.ansible` - ansible.ansible",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "repository",
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "description": "Filter results where repository matches value"
          },
          {
            "in": "query",
            "name": "repository__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uri"
              }
            },
            "description": "Filter results where repository is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "with_content",
            "schema": {
              "type": "string"
            },
            "description": "Filter distributions based on the content served by them"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Distributions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedDistributionResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/distributions/ansible/ansible/": {
      "get": {
        "operationId": "distributions_ansible_ansible_list",
        "description": "ViewSet for Ansible Distributions.",
        "summary": "List ansible distributions",
        "parameters": [
          {
            "in": "query",
            "name": "base_path",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where base_path matches value"
          },
          {
            "in": "query",
            "name": "base_path__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where base_path contains value"
          },
          {
            "in": "query",
            "name": "base_path__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where base_path contains value"
          },
          {
            "in": "query",
            "name": "base_path__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where base_path is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-base_path",
                  "-hidden",
                  "-name",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_labels",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "base_path",
                  "hidden",
                  "name",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_labels",
                  "pulp_last_updated",
                  "pulp_type"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pulp_labels` - Pulp labels\n* `-pulp_labels` - Pulp labels (descending)\n* `base_path` - Base path\n* `-base_path` - Base path (descending)\n* `hidden` - Hidden\n* `-hidden` - Hidden (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_label_select",
            "schema": {
              "type": "string"
            },
            "description": "Filter labels by search string"
          },
          {
            "in": "query",
            "name": "repository",
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "description": "Filter results where repository matches value"
          },
          {
            "in": "query",
            "name": "repository__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uri"
              }
            },
            "description": "Filter results where repository is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "with_content",
            "schema": {
              "type": "string"
            },
            "description": "Filter distributions based on the content served by them"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Distributions: Ansible"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedansible.AnsibleDistributionResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "distributions_ansible_ansible_create",
        "description": "Trigger an asynchronous create task",
        "summary": "Create an ansible distribution",
        "tags": ["Distributions: Ansible"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ansible.AnsibleDistribution"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ansible.AnsibleDistribution"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ansible.AnsibleDistribution"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/": {
      "get": {
        "operationId": "distributions_ansible_ansible_read",
        "description": "ViewSet for Ansible Distributions.",
        "summary": "Inspect an ansible distribution",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this ansible distribution.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Distributions: Ansible"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.AnsibleDistributionResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "distributions_ansible_ansible_update",
        "description": "Trigger an asynchronous update task",
        "summary": "Update an ansible distribution",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this ansible distribution.",
            "required": true
          }
        ],
        "tags": ["Distributions: Ansible"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ansible.AnsibleDistribution"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ansible.AnsibleDistribution"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ansible.AnsibleDistribution"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "distributions_ansible_ansible_partial_update",
        "description": "Trigger an asynchronous partial update task",
        "summary": "Update an ansible distribution",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this ansible distribution.",
            "required": true
          }
        ],
        "tags": ["Distributions: Ansible"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Patchedansible.AnsibleDistribution"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Patchedansible.AnsibleDistribution"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Patchedansible.AnsibleDistribution"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "distributions_ansible_ansible_delete",
        "description": "Trigger an asynchronous delete task",
        "summary": "Delete an ansible distribution",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this ansible distribution.",
            "required": true
          }
        ],
        "tags": ["Distributions: Ansible"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/add_role/": {
      "post": {
        "operationId": "distributions_ansible_ansible_add_role",
        "description": "Add a role for this object to users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this ansible distribution.",
            "required": true
          }
        ],
        "tags": ["Distributions: Ansible"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/list_roles/": {
      "get": {
        "operationId": "distributions_ansible_ansible_list_roles",
        "description": "List roles assigned to this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this ansible distribution.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Distributions: Ansible"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectRolesResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/my_permissions/": {
      "get": {
        "operationId": "distributions_ansible_ansible_my_permissions",
        "description": "List permissions available to the current user on this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this ansible distribution.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Distributions: Ansible"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyPermissionsResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/remove_role/": {
      "post": {
        "operationId": "distributions_ansible_ansible_remove_role",
        "description": "Remove a role for this object from users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this ansible distribution.",
            "required": true
          }
        ],
        "tags": ["Distributions: Ansible"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/distributions/container/container/": {
      "get": {
        "operationId": "distributions_container_container_list",
        "description": "The Container Distribution will serve the latest version of a Repository if\n``repository`` is specified. The Container Distribution will serve a specific\nrepository version if ``repository_version``. Note that **either**\n``repository`` or ``repository_version`` can be set on a Container\nDistribution, but not both.",
        "summary": "List container distributions",
        "parameters": [
          {
            "in": "query",
            "name": "base_path",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where base_path matches value"
          },
          {
            "in": "query",
            "name": "base_path__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where base_path contains value"
          },
          {
            "in": "query",
            "name": "base_path__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where base_path contains value"
          },
          {
            "in": "query",
            "name": "base_path__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where base_path is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "in": "query",
            "name": "namespace__name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-base_path",
                  "-description",
                  "-hidden",
                  "-name",
                  "-pk",
                  "-private",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_labels",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "base_path",
                  "description",
                  "hidden",
                  "name",
                  "pk",
                  "private",
                  "pulp_created",
                  "pulp_id",
                  "pulp_labels",
                  "pulp_last_updated",
                  "pulp_type"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pulp_labels` - Pulp labels\n* `-pulp_labels` - Pulp labels (descending)\n* `base_path` - Base path\n* `-base_path` - Base path (descending)\n* `hidden` - Hidden\n* `-hidden` - Hidden (descending)\n* `private` - Private\n* `-private` - Private (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_label_select",
            "schema": {
              "type": "string"
            },
            "description": "Filter labels by search string"
          },
          {
            "in": "query",
            "name": "repository",
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "description": "Filter results where repository matches value"
          },
          {
            "in": "query",
            "name": "repository__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uri"
              }
            },
            "description": "Filter results where repository is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "with_content",
            "schema": {
              "type": "string"
            },
            "description": "Filter distributions based on the content served by them"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Distributions: Container"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedcontainer.ContainerDistributionResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "distributions_container_container_create",
        "description": "Trigger an asynchronous create task",
        "summary": "Create a container distribution",
        "tags": ["Distributions: Container"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/container.ContainerDistribution"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/container.ContainerDistribution"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/container.ContainerDistribution"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/distributions/container/container/{pulp_id}/": {
      "get": {
        "operationId": "distributions_container_container_read",
        "description": "The Container Distribution will serve the latest version of a Repository if\n``repository`` is specified. The Container Distribution will serve a specific\nrepository version if ``repository_version``. Note that **either**\n``repository`` or ``repository_version`` can be set on a Container\nDistribution, but not both.",
        "summary": "Inspect a container distribution",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container distribution.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Distributions: Container"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerDistributionResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "distributions_container_container_update",
        "description": "Trigger an asynchronous update task",
        "summary": "Update a container distribution",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container distribution.",
            "required": true
          }
        ],
        "tags": ["Distributions: Container"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/container.ContainerDistribution"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/container.ContainerDistribution"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/container.ContainerDistribution"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "distributions_container_container_partial_update",
        "description": "Trigger an asynchronous partial update task",
        "summary": "Update a container distribution",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container distribution.",
            "required": true
          }
        ],
        "tags": ["Distributions: Container"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Patchedcontainer.ContainerDistribution"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Patchedcontainer.ContainerDistribution"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Patchedcontainer.ContainerDistribution"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "distributions_container_container_delete",
        "description": "Trigger an asynchronous delete task",
        "summary": "Delete a container distribution",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container distribution.",
            "required": true
          }
        ],
        "tags": ["Distributions: Container"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/distributions/container/container/{pulp_id}/add_role/": {
      "post": {
        "operationId": "distributions_container_container_add_role",
        "description": "Add a role for this object to users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container distribution.",
            "required": true
          }
        ],
        "tags": ["Distributions: Container"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/distributions/container/container/{pulp_id}/list_roles/": {
      "get": {
        "operationId": "distributions_container_container_list_roles",
        "description": "List roles assigned to this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container distribution.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Distributions: Container"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectRolesResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/distributions/container/container/{pulp_id}/my_permissions/": {
      "get": {
        "operationId": "distributions_container_container_my_permissions",
        "description": "List permissions available to the current user on this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container distribution.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Distributions: Container"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyPermissionsResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/distributions/container/container/{pulp_id}/remove_role/": {
      "post": {
        "operationId": "distributions_container_container_remove_role",
        "description": "Remove a role for this object from users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container distribution.",
            "required": true
          }
        ],
        "tags": ["Distributions: Container"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/distributions/core/artifacts/": {
      "get": {
        "operationId": "distributions_core_artifacts_list",
        "description": "ViewSet for ArtifactDistribution.",
        "summary": "List artifact distributions",
        "parameters": [
          {
            "in": "query",
            "name": "base_path",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where base_path matches value"
          },
          {
            "in": "query",
            "name": "base_path__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where base_path contains value"
          },
          {
            "in": "query",
            "name": "base_path__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where base_path contains value"
          },
          {
            "in": "query",
            "name": "base_path__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where base_path is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-base_path",
                  "-hidden",
                  "-name",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_labels",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "base_path",
                  "hidden",
                  "name",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_labels",
                  "pulp_last_updated",
                  "pulp_type"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pulp_labels` - Pulp labels\n* `-pulp_labels` - Pulp labels (descending)\n* `base_path` - Base path\n* `-base_path` - Base path (descending)\n* `hidden` - Hidden\n* `-hidden` - Hidden (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_label_select",
            "schema": {
              "type": "string"
            },
            "description": "Filter labels by search string"
          },
          {
            "in": "query",
            "name": "repository",
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "description": "Filter results where repository matches value"
          },
          {
            "in": "query",
            "name": "repository__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uri"
              }
            },
            "description": "Filter results where repository is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "with_content",
            "schema": {
              "type": "string"
            },
            "description": "Filter distributions based on the content served by them"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Distributions: Artifacts"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedArtifactDistributionResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/distributions/core/artifacts/{pulp_id}/": {
      "get": {
        "operationId": "distributions_core_artifacts_read",
        "description": "ViewSet for ArtifactDistribution.",
        "summary": "Inspect an artifact distribution",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this artifact distribution.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Distributions: Artifacts"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArtifactDistributionResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/docs/api.json": {
      "get": {
        "operationId": "docs_api.json_get",
        "description": "OpenApi3 schema for this API. Format can be selected via content negotiation.\n\n- YAML: application/vnd.oai.openapi\n- JSON: application/vnd.oai.openapi+json",
        "parameters": [
          {
            "in": "query",
            "name": "lang",
            "schema": {
              "type": "string",
              "enum": ["en-us", "es", "fr", "ja", "ko", "nl", "zh-hans"]
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Docs: Api.Json"],
        "responses": {
          "200": {
            "content": {
              "application/vnd.oai.openapi+json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/docs/api.yaml": {
      "get": {
        "operationId": "docs_api.yaml_get",
        "description": "OpenApi3 schema for this API. Format can be selected via content negotiation.\n\n- YAML: application/vnd.oai.openapi\n- JSON: application/vnd.oai.openapi+json",
        "parameters": [
          {
            "in": "query",
            "name": "lang",
            "schema": {
              "type": "string",
              "enum": ["en-us", "es", "fr", "ja", "ko", "nl", "zh-hans"]
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Docs: Api.Yaml"],
        "responses": {
          "200": {
            "content": {
              "application/vnd.oai.openapi": {
                "schema": {
                  "type": "object"
                }
              },
              "application/yaml": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/domains/": {
      "get": {
        "operationId": "domains_list",
        "description": "ViewSet for Domain.\n\nNOTE: This API endpoint is in \"tech preview\" and subject to change",
        "summary": "List domains",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-description",
                  "-hide_guarded_distributions",
                  "-name",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-redirect_to_object_storage",
                  "-storage_class",
                  "-storage_settings",
                  "description",
                  "hide_guarded_distributions",
                  "name",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "redirect_to_object_storage",
                  "storage_class",
                  "storage_settings"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `storage_class` - Storage class\n* `-storage_class` - Storage class (descending)\n* `storage_settings` - Storage settings\n* `-storage_settings` - Storage settings (descending)\n* `redirect_to_object_storage` - Redirect to object storage\n* `-redirect_to_object_storage` - Redirect to object storage (descending)\n* `hide_guarded_distributions` - Hide guarded distributions\n* `-hide_guarded_distributions` - Hide guarded distributions (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Domains"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedDomainResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "domains_create",
        "description": "ViewSet for Domain.\n\nNOTE: This API endpoint is in \"tech preview\" and subject to change",
        "summary": "Create a domain",
        "tags": ["Domains"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Domain"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Domain"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Domain"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/domains/{pulp_id}/": {
      "get": {
        "operationId": "domains_read",
        "description": "ViewSet for Domain.\n\nNOTE: This API endpoint is in \"tech preview\" and subject to change",
        "summary": "Inspect a domain",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this domain.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Domains"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "domains_update",
        "description": "Trigger an asynchronous update task",
        "summary": "Update a domain",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this domain.",
            "required": true
          }
        ],
        "tags": ["Domains"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Domain"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Domain"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Domain"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "domains_partial_update",
        "description": "Trigger an asynchronous partial update task",
        "summary": "Update a domain",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this domain.",
            "required": true
          }
        ],
        "tags": ["Domains"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedDomain"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedDomain"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedDomain"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "domains_delete",
        "description": "Trigger an asynchronous delete task",
        "summary": "Delete a domain",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this domain.",
            "required": true
          }
        ],
        "tags": ["Domains"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/exporters/core/filesystem/": {
      "get": {
        "operationId": "exporters_core_filesystem_list",
        "description": "Endpoint for managing FilesystemExporters.",
        "summary": "List filesystem exporters",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-method",
                  "-name",
                  "-path",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "method",
                  "name",
                  "path",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `path` - Path\n* `-path` - Path (descending)\n* `method` - Method\n* `-method` - Method (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Exporters: Filesystem"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFilesystemExporterResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "exporters_core_filesystem_create",
        "description": "Endpoint for managing FilesystemExporters.",
        "summary": "Create a filesystem exporter",
        "tags": ["Exporters: Filesystem"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilesystemExporter"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/FilesystemExporter"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FilesystemExporter"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesystemExporterResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/": {
      "get": {
        "operationId": "exporters_core_filesystem_exports_list",
        "description": "Endpoint for managing FilesystemExports.",
        "summary": "List filesystem exports",
        "parameters": [
          {
            "in": "path",
            "name": "exporter_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Exporters: Filesystem Exports"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFilesystemExportResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "exporters_core_filesystem_exports_create",
        "description": "Trigger an asynchronous task to export files to the filesystem",
        "summary": "Create a filesystem export",
        "parameters": [
          {
            "in": "path",
            "name": "exporter_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Exporters: Filesystem Exports"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilesystemExport"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/FilesystemExport"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FilesystemExport"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/{pulp_id}/": {
      "get": {
        "operationId": "exporters_core_filesystem_exports_read",
        "description": "Endpoint for managing FilesystemExports.",
        "summary": "Inspect a filesystem export",
        "parameters": [
          {
            "in": "path",
            "name": "exporter_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this filesystem export.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Exporters: Filesystem Exports"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesystemExportResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "exporters_core_filesystem_exports_delete",
        "description": "Endpoint for managing FilesystemExports.",
        "summary": "Delete a filesystem export",
        "parameters": [
          {
            "in": "path",
            "name": "exporter_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this filesystem export.",
            "required": true
          }
        ],
        "tags": ["Exporters: Filesystem Exports"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/pulp/api/v3/exporters/core/filesystem/{pulp_id}/": {
      "get": {
        "operationId": "exporters_core_filesystem_read",
        "description": "Endpoint for managing FilesystemExporters.",
        "summary": "Inspect a filesystem exporter",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this filesystem exporter.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Exporters: Filesystem"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesystemExporterResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "exporters_core_filesystem_update",
        "description": "Trigger an asynchronous update task",
        "summary": "Update a filesystem exporter",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this filesystem exporter.",
            "required": true
          }
        ],
        "tags": ["Exporters: Filesystem"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilesystemExporter"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/FilesystemExporter"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FilesystemExporter"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "exporters_core_filesystem_partial_update",
        "description": "Trigger an asynchronous partial update task",
        "summary": "Update a filesystem exporter",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this filesystem exporter.",
            "required": true
          }
        ],
        "tags": ["Exporters: Filesystem"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedFilesystemExporter"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedFilesystemExporter"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedFilesystemExporter"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "exporters_core_filesystem_delete",
        "description": "Trigger an asynchronous delete task",
        "summary": "Delete a filesystem exporter",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this filesystem exporter.",
            "required": true
          }
        ],
        "tags": ["Exporters: Filesystem"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/exporters/core/pulp/": {
      "get": {
        "operationId": "exporters_core_pulp_list",
        "description": "ViewSet for viewing PulpExporters.",
        "summary": "List pulp exporters",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-name",
                  "-path",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "name",
                  "path",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `path` - Path\n* `-path` - Path (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Exporters: Pulp"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPulpExporterResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "exporters_core_pulp_create",
        "description": "ViewSet for viewing PulpExporters.",
        "summary": "Create a pulp exporter",
        "tags": ["Exporters: Pulp"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PulpExporter"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PulpExporter"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PulpExporter"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PulpExporterResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/": {
      "get": {
        "operationId": "exporters_core_pulp_exports_list",
        "description": "ViewSet for viewing exports from a PulpExporter.",
        "summary": "List pulp exports",
        "parameters": [
          {
            "in": "path",
            "name": "exporter_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Exporters: Pulp Exports"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPulpExportResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "exporters_core_pulp_exports_create",
        "description": "Trigger an asynchronous task to export a set of repositories",
        "summary": "Create a pulp export",
        "parameters": [
          {
            "in": "path",
            "name": "exporter_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Exporters: Pulp Exports"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PulpExport"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PulpExport"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PulpExport"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/{pulp_id}/": {
      "get": {
        "operationId": "exporters_core_pulp_exports_read",
        "description": "ViewSet for viewing exports from a PulpExporter.",
        "summary": "Inspect a pulp export",
        "parameters": [
          {
            "in": "path",
            "name": "exporter_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this pulp export.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Exporters: Pulp Exports"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PulpExportResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "exporters_core_pulp_exports_delete",
        "description": "ViewSet for viewing exports from a PulpExporter.",
        "summary": "Delete a pulp export",
        "parameters": [
          {
            "in": "path",
            "name": "exporter_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this pulp export.",
            "required": true
          }
        ],
        "tags": ["Exporters: Pulp Exports"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/pulp/api/v3/exporters/core/pulp/{pulp_id}/": {
      "get": {
        "operationId": "exporters_core_pulp_read",
        "description": "ViewSet for viewing PulpExporters.",
        "summary": "Inspect a pulp exporter",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this pulp exporter.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Exporters: Pulp"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PulpExporterResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "exporters_core_pulp_update",
        "description": "Trigger an asynchronous update task",
        "summary": "Update a pulp exporter",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this pulp exporter.",
            "required": true
          }
        ],
        "tags": ["Exporters: Pulp"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PulpExporter"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PulpExporter"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PulpExporter"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "exporters_core_pulp_partial_update",
        "description": "Trigger an asynchronous partial update task",
        "summary": "Update a pulp exporter",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this pulp exporter.",
            "required": true
          }
        ],
        "tags": ["Exporters: Pulp"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPulpExporter"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPulpExporter"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPulpExporter"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "exporters_core_pulp_delete",
        "description": "Trigger an asynchronous delete task",
        "summary": "Delete a pulp exporter",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this pulp exporter.",
            "required": true
          }
        ],
        "tags": ["Exporters: Pulp"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/galaxy_ng/container-distribution-proxy/{pulp_id}/": {
      "get": {
        "operationId": "galaxy_ng_container_distribution_proxy_read",
        "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
        "summary": "Inspect a container distribution",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container distribution.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Galaxy_Ng: Container-Distribution-Proxy"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerRepositoryResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/galaxy_ng/registry-remote/{pulp_id}/": {
      "get": {
        "operationId": "galaxy_ng_registry_remote_read",
        "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
        "summary": "Inspect a container registry remote",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container registry remote.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Galaxy_Ng: Registry-Remote"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/galaxy.ContainerRegistryRemoteResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/groups/": {
      "get": {
        "operationId": "_api_pulp_api_v3_groups_groups_list",
        "description": "ViewSet for Group.",
        "summary": "List groups",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where id matches value"
          },
          {
            "in": "query",
            "name": "id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter results where id is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__iexact",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["-id", "-name", "-pk", "id", "name", "pk"]
              }
            },
            "description": "Ordering\n\n* `id` - Id\n* `-id` - Id (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Groups"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedGroupResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "_api_pulp_api_v3_groups_groups_create",
        "description": "ViewSet for Group.",
        "summary": "Create a group",
        "tags": ["Groups"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Group"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Group"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Group"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/groups/{group_pk}/roles/": {
      "get": {
        "operationId": "groups_roles_list",
        "description": "ViewSet for GroupRole.",
        "summary": "List group roles",
        "parameters": [
          {
            "in": "query",
            "name": "content_object",
            "schema": {
              "type": "string"
            },
            "description": "content_object"
          },
          {
            "in": "query",
            "name": "domain",
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "description": "Foreign Key referenced by HREF"
          },
          {
            "in": "path",
            "name": "group_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-description",
                  "-pk",
                  "-pulp_created",
                  "-role",
                  "description",
                  "pk",
                  "pulp_created",
                  "role"
                ]
              }
            },
            "description": "Ordering\n\n* `role` - Role\n* `-role` - Role (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "role__contains",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "role__icontains",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "role__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "role__startswith",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Groups: Roles"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedGroupRoleResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "groups_roles_create",
        "description": "ViewSet for GroupRole.",
        "summary": "Create a group role",
        "parameters": [
          {
            "in": "path",
            "name": "group_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Groups: Roles"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/GroupRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/GroupRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/groups/{group_pk}/roles/{pulp_id}/": {
      "get": {
        "operationId": "groups_roles_read",
        "description": "ViewSet for GroupRole.",
        "summary": "Inspect a group role",
        "parameters": [
          {
            "in": "path",
            "name": "group_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this group role.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Groups: Roles"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "groups_roles_delete",
        "description": "ViewSet for GroupRole.",
        "summary": "Delete a group role",
        "parameters": [
          {
            "in": "path",
            "name": "group_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this group role.",
            "required": true
          }
        ],
        "tags": ["Groups: Roles"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/pulp/api/v3/groups/{group_pk}/users/": {
      "get": {
        "operationId": "_api_pulp_api_v3_groups_{group_pk}_users_groups_users_list",
        "description": "List group users.",
        "summary": "List users",
        "parameters": [
          {
            "in": "path",
            "name": "group_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Groups: Users"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedGroupUserResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "_api_pulp_api_v3_groups_{group_pk}_users_groups_users_create",
        "description": "Add a user to a group.",
        "summary": "Create an user",
        "parameters": [
          {
            "in": "path",
            "name": "group_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Groups: Users"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupUser"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/GroupUser"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/GroupUser"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupUserResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/groups/{group_pk}/users/{id}/": {
      "delete": {
        "operationId": "_api_pulp_api_v3_groups_{group_pk}_users_{id}_groups_users_delete",
        "description": "Remove a user from a group.",
        "summary": "Delete an user",
        "parameters": [
          {
            "in": "path",
            "name": "group_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A unique integer value identifying this user.",
            "required": true
          }
        ],
        "tags": ["Groups: Users"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/pulp/api/v3/groups/{id}/": {
      "get": {
        "operationId": "_api_pulp_api_v3_groups_{id}_groups_read",
        "description": "ViewSet for Group.",
        "summary": "Inspect a group",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A unique integer value identifying this group.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Groups"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "groups_update",
        "description": "ViewSet for Group.",
        "summary": "Update a group",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A unique integer value identifying this group.",
            "required": true
          }
        ],
        "tags": ["Groups"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Group"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Group"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Group"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "groups_partial_update",
        "description": "ViewSet for Group.",
        "summary": "Update a group",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A unique integer value identifying this group.",
            "required": true
          }
        ],
        "tags": ["Groups"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedGroup"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedGroup"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedGroup"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "_api_pulp_api_v3_groups_{id}_groups_delete",
        "description": "ViewSet for Group.",
        "summary": "Delete a group",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A unique integer value identifying this group.",
            "required": true
          }
        ],
        "tags": ["Groups"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/pulp/api/v3/groups/{id}/add_role/": {
      "post": {
        "operationId": "groups_add_role",
        "description": "Add a role for this object to users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A unique integer value identifying this group.",
            "required": true
          }
        ],
        "tags": ["Groups"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/groups/{id}/list_roles/": {
      "get": {
        "operationId": "groups_list_roles",
        "description": "List roles assigned to this object.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A unique integer value identifying this group.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Groups"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectRolesResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/groups/{id}/my_permissions/": {
      "get": {
        "operationId": "groups_my_permissions",
        "description": "List permissions available to the current user on this object.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A unique integer value identifying this group.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Groups"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyPermissionsResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/groups/{id}/remove_role/": {
      "post": {
        "operationId": "groups_remove_role",
        "description": "Remove a role for this object from users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A unique integer value identifying this group.",
            "required": true
          }
        ],
        "tags": ["Groups"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/importers/core/pulp/": {
      "get": {
        "operationId": "importers_core_pulp_list",
        "description": "ViewSet for PulpImporters.",
        "summary": "List pulp importers",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-name",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "name",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Importers: Pulp"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPulpImporterResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "importers_core_pulp_create",
        "description": "ViewSet for PulpImporters.",
        "summary": "Create a pulp importer",
        "tags": ["Importers: Pulp"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PulpImporter"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PulpImporter"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PulpImporter"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PulpImporterResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/": {
      "get": {
        "operationId": "importers_core_pulp_imports_list",
        "description": "ViewSet for PulpImports.",
        "summary": "List pulp imports",
        "parameters": [
          {
            "in": "path",
            "name": "importer_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Importers: Pulp Imports"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedImportResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "importers_core_pulp_imports_create",
        "description": "Trigger an asynchronous task to import a Pulp export.",
        "summary": "Create a pulp import",
        "parameters": [
          {
            "in": "path",
            "name": "importer_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Importers: Pulp Imports"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PulpImport"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PulpImport"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PulpImport"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskGroupOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/{pulp_id}/": {
      "get": {
        "operationId": "importers_core_pulp_imports_read",
        "description": "ViewSet for PulpImports.",
        "summary": "Inspect a pulp import",
        "parameters": [
          {
            "in": "path",
            "name": "importer_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this pulp import.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Importers: Pulp Imports"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "importers_core_pulp_imports_delete",
        "description": "ViewSet for PulpImports.",
        "summary": "Delete a pulp import",
        "parameters": [
          {
            "in": "path",
            "name": "importer_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this pulp import.",
            "required": true
          }
        ],
        "tags": ["Importers: Pulp Imports"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/pulp/api/v3/importers/core/pulp/{pulp_id}/": {
      "get": {
        "operationId": "importers_core_pulp_read",
        "description": "ViewSet for PulpImporters.",
        "summary": "Inspect a pulp importer",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this pulp importer.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Importers: Pulp"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PulpImporterResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "importers_core_pulp_update",
        "description": "ViewSet for PulpImporters.",
        "summary": "Update a pulp importer",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this pulp importer.",
            "required": true
          }
        ],
        "tags": ["Importers: Pulp"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PulpImporter"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PulpImporter"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PulpImporter"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PulpImporterResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "importers_core_pulp_partial_update",
        "description": "ViewSet for PulpImporters.",
        "summary": "Update a pulp importer",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this pulp importer.",
            "required": true
          }
        ],
        "tags": ["Importers: Pulp"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPulpImporter"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPulpImporter"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPulpImporter"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PulpImporterResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "importers_core_pulp_delete",
        "description": "ViewSet for PulpImporters.",
        "summary": "Delete a pulp importer",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this pulp importer.",
            "required": true
          }
        ],
        "tags": ["Importers: Pulp"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/pulp/api/v3/importers/core/pulp/import-check/": {
      "post": {
        "operationId": "pulp_import_check_post",
        "description": "Evaluates validity of proposed PulpImport parameters 'toc', 'path', and 'repo_mapping'.\n\n* Checks that toc, path are in ALLOWED_IMPORT_PATHS\n* if ALLOWED:\n  * Checks that toc, path exist and are readable\n  * If toc specified, checks that containing dir is writeable\n* Checks that repo_mapping is valid JSON",
        "summary": "Validate the parameters to be used for a PulpImport call",
        "tags": ["Importers: Pulp Import-Check"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PulpImportCheck"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PulpImportCheck"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PulpImportCheck"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PulpImportCheckResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/orphans/": {
      "delete": {
        "operationId": "orphans_delete",
        "description": "DEPRECATED! Trigger an asynchronous task that deletes all orphaned content and artifacts. Use the `POST /pulp/api/v3/orphans/cleanup/` call instead.",
        "summary": "Delete orphans",
        "tags": ["Orphans"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/orphans/cleanup/": {
      "post": {
        "operationId": "orphans_cleanup_cleanup",
        "description": "Trigger an asynchronous orphan cleanup operation.",
        "tags": ["Orphans: Cleanup"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrphansCleanup"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/OrphansCleanup"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/OrphansCleanup"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/publications/": {
      "get": {
        "operationId": "publications_list",
        "description": "A base class for any publication viewset.",
        "summary": "List publications",
        "parameters": [
          {
            "in": "query",
            "name": "content",
            "schema": {
              "type": "string"
            },
            "description": "Content Unit referenced by HREF"
          },
          {
            "in": "query",
            "name": "content__in",
            "schema": {
              "type": "string"
            },
            "description": "Content Unit referenced by HREF"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-complete",
                  "-pass_through",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "complete",
                  "pass_through",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `complete` - Complete\n* `-complete` - Complete (descending)\n* `pass_through` - Pass through\n* `-pass_through` - Pass through (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_created",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_created matches value"
          },
          {
            "in": "query",
            "name": "pulp_created__gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_created is greater than value"
          },
          {
            "in": "query",
            "name": "pulp_created__gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_created is greater than or equal to value"
          },
          {
            "in": "query",
            "name": "pulp_created__lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_created is less than value"
          },
          {
            "in": "query",
            "name": "pulp_created__lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_created is less than or equal to value"
          },
          {
            "in": "query",
            "name": "pulp_created__range",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            },
            "description": "Filter results where pulp_created is between two comma separated values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_type__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Pulp type is in",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "repository",
            "schema": {
              "type": "string"
            },
            "description": "Repository referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Publications"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPublicationResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/pulp_ansible/namespaces/": {
      "get": {
        "operationId": "pulp_ansible_namespaces_list",
        "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
        "summary": "List namespaces",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedNamespaceSummaryResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/pulp_ansible/namespaces/{id}/": {
      "get": {
        "operationId": "pulp_ansible_namespaces_read",
        "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
        "summary": "Inspect a namespace",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A unique integer value identifying this namespace.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NamespaceSummaryResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/pulp_ansible/tags/": {
      "get": {
        "operationId": "pulp_ansible_tags_list",
        "description": "ViewSet for Tag models.",
        "summary": "List tags",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Tags"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTagResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/pulp_container/namespaces/": {
      "get": {
        "operationId": "pulp_container_namespaces_list",
        "description": "ViewSet for ContainerNamespaces.",
        "summary": "List container namespaces",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-name",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "name",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Container: Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedcontainer.ContainerNamespaceResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "pulp_container_namespaces_create",
        "description": "ViewSet for ContainerNamespaces.",
        "summary": "Create a container namespace",
        "tags": ["Pulp_Container: Namespaces"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/container.ContainerNamespace"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/container.ContainerNamespace"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/container.ContainerNamespace"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerNamespaceResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/pulp_container/namespaces/{pulp_id}/": {
      "get": {
        "operationId": "pulp_container_namespaces_read",
        "description": "ViewSet for ContainerNamespaces.",
        "summary": "Inspect a container namespace",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container namespace.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Container: Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerNamespaceResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "pulp_container_namespaces_delete",
        "description": "Trigger an asynchronous delete task",
        "summary": "Delete a container namespace",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container namespace.",
            "required": true
          }
        ],
        "tags": ["Pulp_Container: Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/pulp_container/namespaces/{pulp_id}/add_role/": {
      "post": {
        "operationId": "pulp_container_namespaces_add_role",
        "description": "Add a role for this object to users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container namespace.",
            "required": true
          }
        ],
        "tags": ["Pulp_Container: Namespaces"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/pulp_container/namespaces/{pulp_id}/list_roles/": {
      "get": {
        "operationId": "pulp_container_namespaces_list_roles",
        "description": "List roles assigned to this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container namespace.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Container: Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectRolesResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/pulp_container/namespaces/{pulp_id}/my_permissions/": {
      "get": {
        "operationId": "pulp_container_namespaces_my_permissions",
        "description": "List permissions available to the current user on this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container namespace.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Container: Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyPermissionsResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/pulp_container/namespaces/{pulp_id}/remove_role/": {
      "post": {
        "operationId": "pulp_container_namespaces_remove_role",
        "description": "Remove a role for this object from users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container namespace.",
            "required": true
          }
        ],
        "tags": ["Pulp_Container: Namespaces"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/remotes/": {
      "get": {
        "operationId": "remotes_list",
        "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
        "summary": "List remotes",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-ca_cert",
                  "-client_cert",
                  "-client_key",
                  "-connect_timeout",
                  "-download_concurrency",
                  "-headers",
                  "-max_retries",
                  "-name",
                  "-password",
                  "-pk",
                  "-policy",
                  "-proxy_password",
                  "-proxy_url",
                  "-proxy_username",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_labels",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-rate_limit",
                  "-sock_connect_timeout",
                  "-sock_read_timeout",
                  "-tls_validation",
                  "-total_timeout",
                  "-url",
                  "-username",
                  "ca_cert",
                  "client_cert",
                  "client_key",
                  "connect_timeout",
                  "download_concurrency",
                  "headers",
                  "max_retries",
                  "name",
                  "password",
                  "pk",
                  "policy",
                  "proxy_password",
                  "proxy_url",
                  "proxy_username",
                  "pulp_created",
                  "pulp_id",
                  "pulp_labels",
                  "pulp_last_updated",
                  "pulp_type",
                  "rate_limit",
                  "sock_connect_timeout",
                  "sock_read_timeout",
                  "tls_validation",
                  "total_timeout",
                  "url",
                  "username"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pulp_labels` - Pulp labels\n* `-pulp_labels` - Pulp labels (descending)\n* `url` - Url\n* `-url` - Url (descending)\n* `ca_cert` - Ca cert\n* `-ca_cert` - Ca cert (descending)\n* `client_cert` - Client cert\n* `-client_cert` - Client cert (descending)\n* `client_key` - Client key\n* `-client_key` - Client key (descending)\n* `tls_validation` - Tls validation\n* `-tls_validation` - Tls validation (descending)\n* `username` - Username\n* `-username` - Username (descending)\n* `password` - Password\n* `-password` - Password (descending)\n* `proxy_url` - Proxy url\n* `-proxy_url` - Proxy url (descending)\n* `proxy_username` - Proxy username\n* `-proxy_username` - Proxy username (descending)\n* `proxy_password` - Proxy password\n* `-proxy_password` - Proxy password (descending)\n* `download_concurrency` - Download concurrency\n* `-download_concurrency` - Download concurrency (descending)\n* `max_retries` - Max retries\n* `-max_retries` - Max retries (descending)\n* `policy` - Policy\n* `-policy` - Policy (descending)\n* `total_timeout` - Total timeout\n* `-total_timeout` - Total timeout (descending)\n* `connect_timeout` - Connect timeout\n* `-connect_timeout` - Connect timeout (descending)\n* `sock_connect_timeout` - Sock connect timeout\n* `-sock_connect_timeout` - Sock connect timeout (descending)\n* `sock_read_timeout` - Sock read timeout\n* `-sock_read_timeout` - Sock read timeout (descending)\n* `headers` - Headers\n* `-headers` - Headers (descending)\n* `rate_limit` - Rate limit\n* `-rate_limit` - Rate limit (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_label_select",
            "schema": {
              "type": "string"
            },
            "description": "Filter labels by search string"
          },
          {
            "in": "query",
            "name": "pulp_last_updated",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_last_updated matches value"
          },
          {
            "in": "query",
            "name": "pulp_last_updated__gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_last_updated is greater than value"
          },
          {
            "in": "query",
            "name": "pulp_last_updated__gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_last_updated is greater than or equal to value"
          },
          {
            "in": "query",
            "name": "pulp_last_updated__lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_last_updated is less than value"
          },
          {
            "in": "query",
            "name": "pulp_last_updated__lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_last_updated is less than or equal to value"
          },
          {
            "in": "query",
            "name": "pulp_last_updated__range",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            },
            "description": "Filter results where pulp_last_updated is between two comma separated values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_type__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "ansible.collection",
                  "ansible.git",
                  "ansible.role",
                  "container.container",
                  "galaxy.remote"
                ]
              }
            },
            "description": "Pulp type is in\n\n* `container.container` - container.container\n* `ansible.role` - ansible.role\n* `ansible.collection` - ansible.collection\n* `ansible.git` - ansible.git\n* `galaxy.remote` - galaxy.remote",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Remotes"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRemoteResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/remotes/ansible/collection/": {
      "get": {
        "operationId": "remotes_ansible_collection_list",
        "description": "ViewSet for Collection Remotes.",
        "summary": "List collection remotes",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-auth_url",
                  "-ca_cert",
                  "-client_cert",
                  "-client_key",
                  "-connect_timeout",
                  "-download_concurrency",
                  "-headers",
                  "-max_retries",
                  "-name",
                  "-password",
                  "-pk",
                  "-policy",
                  "-proxy_password",
                  "-proxy_url",
                  "-proxy_username",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_labels",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-rate_limit",
                  "-requirements_file",
                  "-signed_only",
                  "-sock_connect_timeout",
                  "-sock_read_timeout",
                  "-sync_dependencies",
                  "-tls_validation",
                  "-token",
                  "-total_timeout",
                  "-url",
                  "-username",
                  "auth_url",
                  "ca_cert",
                  "client_cert",
                  "client_key",
                  "connect_timeout",
                  "download_concurrency",
                  "headers",
                  "max_retries",
                  "name",
                  "password",
                  "pk",
                  "policy",
                  "proxy_password",
                  "proxy_url",
                  "proxy_username",
                  "pulp_created",
                  "pulp_id",
                  "pulp_labels",
                  "pulp_last_updated",
                  "pulp_type",
                  "rate_limit",
                  "requirements_file",
                  "signed_only",
                  "sock_connect_timeout",
                  "sock_read_timeout",
                  "sync_dependencies",
                  "tls_validation",
                  "token",
                  "total_timeout",
                  "url",
                  "username"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pulp_labels` - Pulp labels\n* `-pulp_labels` - Pulp labels (descending)\n* `url` - Url\n* `-url` - Url (descending)\n* `ca_cert` - Ca cert\n* `-ca_cert` - Ca cert (descending)\n* `client_cert` - Client cert\n* `-client_cert` - Client cert (descending)\n* `client_key` - Client key\n* `-client_key` - Client key (descending)\n* `tls_validation` - Tls validation\n* `-tls_validation` - Tls validation (descending)\n* `username` - Username\n* `-username` - Username (descending)\n* `password` - Password\n* `-password` - Password (descending)\n* `proxy_url` - Proxy url\n* `-proxy_url` - Proxy url (descending)\n* `proxy_username` - Proxy username\n* `-proxy_username` - Proxy username (descending)\n* `proxy_password` - Proxy password\n* `-proxy_password` - Proxy password (descending)\n* `download_concurrency` - Download concurrency\n* `-download_concurrency` - Download concurrency (descending)\n* `max_retries` - Max retries\n* `-max_retries` - Max retries (descending)\n* `policy` - Policy\n* `-policy` - Policy (descending)\n* `total_timeout` - Total timeout\n* `-total_timeout` - Total timeout (descending)\n* `connect_timeout` - Connect timeout\n* `-connect_timeout` - Connect timeout (descending)\n* `sock_connect_timeout` - Sock connect timeout\n* `-sock_connect_timeout` - Sock connect timeout (descending)\n* `sock_read_timeout` - Sock read timeout\n* `-sock_read_timeout` - Sock read timeout (descending)\n* `headers` - Headers\n* `-headers` - Headers (descending)\n* `rate_limit` - Rate limit\n* `-rate_limit` - Rate limit (descending)\n* `requirements_file` - Requirements file\n* `-requirements_file` - Requirements file (descending)\n* `auth_url` - Auth url\n* `-auth_url` - Auth url (descending)\n* `token` - Token\n* `-token` - Token (descending)\n* `sync_dependencies` - Sync dependencies\n* `-sync_dependencies` - Sync dependencies (descending)\n* `signed_only` - Signed only\n* `-signed_only` - Signed only (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_label_select",
            "schema": {
              "type": "string"
            },
            "description": "Filter labels by search string"
          },
          {
            "in": "query",
            "name": "pulp_last_updated",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_last_updated matches value"
          },
          {
            "in": "query",
            "name": "pulp_last_updated__gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_last_updated is greater than value"
          },
          {
            "in": "query",
            "name": "pulp_last_updated__gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_last_updated is greater than or equal to value"
          },
          {
            "in": "query",
            "name": "pulp_last_updated__lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_last_updated is less than value"
          },
          {
            "in": "query",
            "name": "pulp_last_updated__lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_last_updated is less than or equal to value"
          },
          {
            "in": "query",
            "name": "pulp_last_updated__range",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            },
            "description": "Filter results where pulp_last_updated is between two comma separated values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "url",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where url matches value"
          },
          {
            "in": "query",
            "name": "url__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where url contains value"
          },
          {
            "in": "query",
            "name": "url__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where url contains value"
          },
          {
            "in": "query",
            "name": "url__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where url is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Remotes: Collection"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedansible.CollectionRemoteResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "remotes_ansible_collection_create",
        "description": "ViewSet for Collection Remotes.",
        "summary": "Create a collection remote",
        "tags": ["Remotes: Collection"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ansible.CollectionRemote"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ansible.CollectionRemote"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ansible.CollectionRemote"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionRemoteResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/remotes/ansible/collection/{pulp_id}/": {
      "get": {
        "operationId": "remotes_ansible_collection_read",
        "description": "ViewSet for Collection Remotes.",
        "summary": "Inspect a collection remote",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this collection remote.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Remotes: Collection"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionRemoteResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "remotes_ansible_collection_update",
        "description": "Trigger an asynchronous update task",
        "summary": "Update a collection remote",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this collection remote.",
            "required": true
          }
        ],
        "tags": ["Remotes: Collection"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ansible.CollectionRemote"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ansible.CollectionRemote"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ansible.CollectionRemote"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "remotes_ansible_collection_partial_update",
        "description": "Trigger an asynchronous partial update task",
        "summary": "Update a collection remote",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this collection remote.",
            "required": true
          }
        ],
        "tags": ["Remotes: Collection"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Patchedansible.CollectionRemote"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Patchedansible.CollectionRemote"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Patchedansible.CollectionRemote"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "remotes_ansible_collection_delete",
        "description": "Trigger an asynchronous delete task",
        "summary": "Delete a collection remote",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this collection remote.",
            "required": true
          }
        ],
        "tags": ["Remotes: Collection"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/remotes/ansible/collection/{pulp_id}/add_role/": {
      "post": {
        "operationId": "remotes_ansible_collection_add_role",
        "description": "Add a role for this object to users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this collection remote.",
            "required": true
          }
        ],
        "tags": ["Remotes: Collection"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/remotes/ansible/collection/{pulp_id}/list_roles/": {
      "get": {
        "operationId": "remotes_ansible_collection_list_roles",
        "description": "List roles assigned to this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this collection remote.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Remotes: Collection"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectRolesResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/remotes/ansible/collection/{pulp_id}/my_permissions/": {
      "get": {
        "operationId": "remotes_ansible_collection_my_permissions",
        "description": "List permissions available to the current user on this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this collection remote.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Remotes: Collection"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyPermissionsResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/remotes/ansible/collection/{pulp_id}/remove_role/": {
      "post": {
        "operationId": "remotes_ansible_collection_remove_role",
        "description": "Remove a role for this object from users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this collection remote.",
            "required": true
          }
        ],
        "tags": ["Remotes: Collection"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/remotes/ansible/git/": {
      "get": {
        "operationId": "remotes_ansible_git_list",
        "description": "ViewSet for Ansible Remotes.\n\nThis is a tech preview feature. The functionality may change in the future.",
        "summary": "List git remotes",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-ca_cert",
                  "-client_cert",
                  "-client_key",
                  "-connect_timeout",
                  "-download_concurrency",
                  "-headers",
                  "-max_retries",
                  "-name",
                  "-password",
                  "-pk",
                  "-policy",
                  "-proxy_password",
                  "-proxy_url",
                  "-proxy_username",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_labels",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-rate_limit",
                  "-sock_connect_timeout",
                  "-sock_read_timeout",
                  "-tls_validation",
                  "-total_timeout",
                  "-url",
                  "-username",
                  "ca_cert",
                  "client_cert",
                  "client_key",
                  "connect_timeout",
                  "download_concurrency",
                  "headers",
                  "max_retries",
                  "name",
                  "password",
                  "pk",
                  "policy",
                  "proxy_password",
                  "proxy_url",
                  "proxy_username",
                  "pulp_created",
                  "pulp_id",
                  "pulp_labels",
                  "pulp_last_updated",
                  "pulp_type",
                  "rate_limit",
                  "sock_connect_timeout",
                  "sock_read_timeout",
                  "tls_validation",
                  "total_timeout",
                  "url",
                  "username"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pulp_labels` - Pulp labels\n* `-pulp_labels` - Pulp labels (descending)\n* `url` - Url\n* `-url` - Url (descending)\n* `ca_cert` - Ca cert\n* `-ca_cert` - Ca cert (descending)\n* `client_cert` - Client cert\n* `-client_cert` - Client cert (descending)\n* `client_key` - Client key\n* `-client_key` - Client key (descending)\n* `tls_validation` - Tls validation\n* `-tls_validation` - Tls validation (descending)\n* `username` - Username\n* `-username` - Username (descending)\n* `password` - Password\n* `-password` - Password (descending)\n* `proxy_url` - Proxy url\n* `-proxy_url` - Proxy url (descending)\n* `proxy_username` - Proxy username\n* `-proxy_username` - Proxy username (descending)\n* `proxy_password` - Proxy password\n* `-proxy_password` - Proxy password (descending)\n* `download_concurrency` - Download concurrency\n* `-download_concurrency` - Download concurrency (descending)\n* `max_retries` - Max retries\n* `-max_retries` - Max retries (descending)\n* `policy` - Policy\n* `-policy` - Policy (descending)\n* `total_timeout` - Total timeout\n* `-total_timeout` - Total timeout (descending)\n* `connect_timeout` - Connect timeout\n* `-connect_timeout` - Connect timeout (descending)\n* `sock_connect_timeout` - Sock connect timeout\n* `-sock_connect_timeout` - Sock connect timeout (descending)\n* `sock_read_timeout` - Sock read timeout\n* `-sock_read_timeout` - Sock read timeout (descending)\n* `headers` - Headers\n* `-headers` - Headers (descending)\n* `rate_limit` - Rate limit\n* `-rate_limit` - Rate limit (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_label_select",
            "schema": {
              "type": "string"
            },
            "description": "Filter labels by search string"
          },
          {
            "in": "query",
            "name": "pulp_last_updated",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_last_updated matches value"
          },
          {
            "in": "query",
            "name": "pulp_last_updated__gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_last_updated is greater than value"
          },
          {
            "in": "query",
            "name": "pulp_last_updated__gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_last_updated is greater than or equal to value"
          },
          {
            "in": "query",
            "name": "pulp_last_updated__lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_last_updated is less than value"
          },
          {
            "in": "query",
            "name": "pulp_last_updated__lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_last_updated is less than or equal to value"
          },
          {
            "in": "query",
            "name": "pulp_last_updated__range",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            },
            "description": "Filter results where pulp_last_updated is between two comma separated values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Remotes: Git"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedansible.GitRemoteResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "remotes_ansible_git_create",
        "description": "ViewSet for Ansible Remotes.\n\nThis is a tech preview feature. The functionality may change in the future.",
        "summary": "Create a git remote",
        "tags": ["Remotes: Git"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ansible.GitRemote"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ansible.GitRemote"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ansible.GitRemote"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.GitRemoteResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/remotes/ansible/git/{pulp_id}/": {
      "get": {
        "operationId": "remotes_ansible_git_read",
        "description": "ViewSet for Ansible Remotes.\n\nThis is a tech preview feature. The functionality may change in the future.",
        "summary": "Inspect a git remote",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this git remote.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Remotes: Git"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.GitRemoteResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "remotes_ansible_git_update",
        "description": "Trigger an asynchronous update task",
        "summary": "Update a git remote",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this git remote.",
            "required": true
          }
        ],
        "tags": ["Remotes: Git"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ansible.GitRemote"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ansible.GitRemote"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ansible.GitRemote"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "remotes_ansible_git_partial_update",
        "description": "Trigger an asynchronous partial update task",
        "summary": "Update a git remote",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this git remote.",
            "required": true
          }
        ],
        "tags": ["Remotes: Git"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Patchedansible.GitRemote"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Patchedansible.GitRemote"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Patchedansible.GitRemote"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "remotes_ansible_git_delete",
        "description": "Trigger an asynchronous delete task",
        "summary": "Delete a git remote",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this git remote.",
            "required": true
          }
        ],
        "tags": ["Remotes: Git"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/remotes/ansible/git/{pulp_id}/add_role/": {
      "post": {
        "operationId": "remotes_ansible_git_add_role",
        "description": "Add a role for this object to users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this git remote.",
            "required": true
          }
        ],
        "tags": ["Remotes: Git"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/remotes/ansible/git/{pulp_id}/list_roles/": {
      "get": {
        "operationId": "remotes_ansible_git_list_roles",
        "description": "List roles assigned to this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this git remote.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Remotes: Git"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectRolesResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/remotes/ansible/git/{pulp_id}/my_permissions/": {
      "get": {
        "operationId": "remotes_ansible_git_my_permissions",
        "description": "List permissions available to the current user on this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this git remote.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Remotes: Git"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyPermissionsResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/remotes/ansible/git/{pulp_id}/remove_role/": {
      "post": {
        "operationId": "remotes_ansible_git_remove_role",
        "description": "Remove a role for this object from users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this git remote.",
            "required": true
          }
        ],
        "tags": ["Remotes: Git"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/remotes/ansible/role/": {
      "get": {
        "operationId": "remotes_ansible_role_list",
        "description": "ViewSet for Role Remotes.",
        "summary": "List role remotes",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-ca_cert",
                  "-client_cert",
                  "-client_key",
                  "-connect_timeout",
                  "-download_concurrency",
                  "-headers",
                  "-max_retries",
                  "-name",
                  "-password",
                  "-pk",
                  "-policy",
                  "-proxy_password",
                  "-proxy_url",
                  "-proxy_username",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_labels",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-rate_limit",
                  "-sock_connect_timeout",
                  "-sock_read_timeout",
                  "-tls_validation",
                  "-total_timeout",
                  "-url",
                  "-username",
                  "ca_cert",
                  "client_cert",
                  "client_key",
                  "connect_timeout",
                  "download_concurrency",
                  "headers",
                  "max_retries",
                  "name",
                  "password",
                  "pk",
                  "policy",
                  "proxy_password",
                  "proxy_url",
                  "proxy_username",
                  "pulp_created",
                  "pulp_id",
                  "pulp_labels",
                  "pulp_last_updated",
                  "pulp_type",
                  "rate_limit",
                  "sock_connect_timeout",
                  "sock_read_timeout",
                  "tls_validation",
                  "total_timeout",
                  "url",
                  "username"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pulp_labels` - Pulp labels\n* `-pulp_labels` - Pulp labels (descending)\n* `url` - Url\n* `-url` - Url (descending)\n* `ca_cert` - Ca cert\n* `-ca_cert` - Ca cert (descending)\n* `client_cert` - Client cert\n* `-client_cert` - Client cert (descending)\n* `client_key` - Client key\n* `-client_key` - Client key (descending)\n* `tls_validation` - Tls validation\n* `-tls_validation` - Tls validation (descending)\n* `username` - Username\n* `-username` - Username (descending)\n* `password` - Password\n* `-password` - Password (descending)\n* `proxy_url` - Proxy url\n* `-proxy_url` - Proxy url (descending)\n* `proxy_username` - Proxy username\n* `-proxy_username` - Proxy username (descending)\n* `proxy_password` - Proxy password\n* `-proxy_password` - Proxy password (descending)\n* `download_concurrency` - Download concurrency\n* `-download_concurrency` - Download concurrency (descending)\n* `max_retries` - Max retries\n* `-max_retries` - Max retries (descending)\n* `policy` - Policy\n* `-policy` - Policy (descending)\n* `total_timeout` - Total timeout\n* `-total_timeout` - Total timeout (descending)\n* `connect_timeout` - Connect timeout\n* `-connect_timeout` - Connect timeout (descending)\n* `sock_connect_timeout` - Sock connect timeout\n* `-sock_connect_timeout` - Sock connect timeout (descending)\n* `sock_read_timeout` - Sock read timeout\n* `-sock_read_timeout` - Sock read timeout (descending)\n* `headers` - Headers\n* `-headers` - Headers (descending)\n* `rate_limit` - Rate limit\n* `-rate_limit` - Rate limit (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_label_select",
            "schema": {
              "type": "string"
            },
            "description": "Filter labels by search string"
          },
          {
            "in": "query",
            "name": "pulp_last_updated",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_last_updated matches value"
          },
          {
            "in": "query",
            "name": "pulp_last_updated__gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_last_updated is greater than value"
          },
          {
            "in": "query",
            "name": "pulp_last_updated__gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_last_updated is greater than or equal to value"
          },
          {
            "in": "query",
            "name": "pulp_last_updated__lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_last_updated is less than value"
          },
          {
            "in": "query",
            "name": "pulp_last_updated__lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_last_updated is less than or equal to value"
          },
          {
            "in": "query",
            "name": "pulp_last_updated__range",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            },
            "description": "Filter results where pulp_last_updated is between two comma separated values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Remotes: Role"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedansible.RoleRemoteResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "remotes_ansible_role_create",
        "description": "ViewSet for Role Remotes.",
        "summary": "Create a role remote",
        "tags": ["Remotes: Role"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ansible.RoleRemote"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ansible.RoleRemote"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ansible.RoleRemote"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.RoleRemoteResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/remotes/ansible/role/{pulp_id}/": {
      "get": {
        "operationId": "remotes_ansible_role_read",
        "description": "ViewSet for Role Remotes.",
        "summary": "Inspect a role remote",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this role remote.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Remotes: Role"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.RoleRemoteResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "remotes_ansible_role_update",
        "description": "Trigger an asynchronous update task",
        "summary": "Update a role remote",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this role remote.",
            "required": true
          }
        ],
        "tags": ["Remotes: Role"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ansible.RoleRemote"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ansible.RoleRemote"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ansible.RoleRemote"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "remotes_ansible_role_partial_update",
        "description": "Trigger an asynchronous partial update task",
        "summary": "Update a role remote",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this role remote.",
            "required": true
          }
        ],
        "tags": ["Remotes: Role"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Patchedansible.RoleRemote"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Patchedansible.RoleRemote"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Patchedansible.RoleRemote"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "remotes_ansible_role_delete",
        "description": "Trigger an asynchronous delete task",
        "summary": "Delete a role remote",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this role remote.",
            "required": true
          }
        ],
        "tags": ["Remotes: Role"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/remotes/ansible/role/{pulp_id}/add_role/": {
      "post": {
        "operationId": "remotes_ansible_role_add_role",
        "description": "Add a role for this object to users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this role remote.",
            "required": true
          }
        ],
        "tags": ["Remotes: Role"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/remotes/ansible/role/{pulp_id}/list_roles/": {
      "get": {
        "operationId": "remotes_ansible_role_list_roles",
        "description": "List roles assigned to this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this role remote.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Remotes: Role"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectRolesResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/remotes/ansible/role/{pulp_id}/my_permissions/": {
      "get": {
        "operationId": "remotes_ansible_role_my_permissions",
        "description": "List permissions available to the current user on this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this role remote.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Remotes: Role"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyPermissionsResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/remotes/ansible/role/{pulp_id}/remove_role/": {
      "post": {
        "operationId": "remotes_ansible_role_remove_role",
        "description": "Remove a role for this object from users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this role remote.",
            "required": true
          }
        ],
        "tags": ["Remotes: Role"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/remotes/container/container/": {
      "get": {
        "operationId": "remotes_container_container_list",
        "description": "Container remotes represent an external repository that implements the Container\nRegistry API. Container remotes support deferred downloading by configuring\nthe ``policy`` field.  ``on_demand`` and ``streamed`` policies can provide\nsignificant disk space savings.",
        "summary": "List container remotes",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-ca_cert",
                  "-client_cert",
                  "-client_key",
                  "-connect_timeout",
                  "-download_concurrency",
                  "-headers",
                  "-max_retries",
                  "-name",
                  "-password",
                  "-pk",
                  "-policy",
                  "-proxy_password",
                  "-proxy_url",
                  "-proxy_username",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_labels",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-rate_limit",
                  "-sock_connect_timeout",
                  "-sock_read_timeout",
                  "-tls_validation",
                  "-total_timeout",
                  "-url",
                  "-username",
                  "ca_cert",
                  "client_cert",
                  "client_key",
                  "connect_timeout",
                  "download_concurrency",
                  "headers",
                  "max_retries",
                  "name",
                  "password",
                  "pk",
                  "policy",
                  "proxy_password",
                  "proxy_url",
                  "proxy_username",
                  "pulp_created",
                  "pulp_id",
                  "pulp_labels",
                  "pulp_last_updated",
                  "pulp_type",
                  "rate_limit",
                  "sock_connect_timeout",
                  "sock_read_timeout",
                  "tls_validation",
                  "total_timeout",
                  "url",
                  "username"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pulp_labels` - Pulp labels\n* `-pulp_labels` - Pulp labels (descending)\n* `url` - Url\n* `-url` - Url (descending)\n* `ca_cert` - Ca cert\n* `-ca_cert` - Ca cert (descending)\n* `client_cert` - Client cert\n* `-client_cert` - Client cert (descending)\n* `client_key` - Client key\n* `-client_key` - Client key (descending)\n* `tls_validation` - Tls validation\n* `-tls_validation` - Tls validation (descending)\n* `username` - Username\n* `-username` - Username (descending)\n* `password` - Password\n* `-password` - Password (descending)\n* `proxy_url` - Proxy url\n* `-proxy_url` - Proxy url (descending)\n* `proxy_username` - Proxy username\n* `-proxy_username` - Proxy username (descending)\n* `proxy_password` - Proxy password\n* `-proxy_password` - Proxy password (descending)\n* `download_concurrency` - Download concurrency\n* `-download_concurrency` - Download concurrency (descending)\n* `max_retries` - Max retries\n* `-max_retries` - Max retries (descending)\n* `policy` - Policy\n* `-policy` - Policy (descending)\n* `total_timeout` - Total timeout\n* `-total_timeout` - Total timeout (descending)\n* `connect_timeout` - Connect timeout\n* `-connect_timeout` - Connect timeout (descending)\n* `sock_connect_timeout` - Sock connect timeout\n* `-sock_connect_timeout` - Sock connect timeout (descending)\n* `sock_read_timeout` - Sock read timeout\n* `-sock_read_timeout` - Sock read timeout (descending)\n* `headers` - Headers\n* `-headers` - Headers (descending)\n* `rate_limit` - Rate limit\n* `-rate_limit` - Rate limit (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_label_select",
            "schema": {
              "type": "string"
            },
            "description": "Filter labels by search string"
          },
          {
            "in": "query",
            "name": "pulp_last_updated",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_last_updated matches value"
          },
          {
            "in": "query",
            "name": "pulp_last_updated__gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_last_updated is greater than value"
          },
          {
            "in": "query",
            "name": "pulp_last_updated__gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_last_updated is greater than or equal to value"
          },
          {
            "in": "query",
            "name": "pulp_last_updated__lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_last_updated is less than value"
          },
          {
            "in": "query",
            "name": "pulp_last_updated__lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_last_updated is less than or equal to value"
          },
          {
            "in": "query",
            "name": "pulp_last_updated__range",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            },
            "description": "Filter results where pulp_last_updated is between two comma separated values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Remotes: Container"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedcontainer.ContainerRemoteResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "remotes_container_container_create",
        "description": "Container remotes represent an external repository that implements the Container\nRegistry API. Container remotes support deferred downloading by configuring\nthe ``policy`` field.  ``on_demand`` and ``streamed`` policies can provide\nsignificant disk space savings.",
        "summary": "Create a container remote",
        "tags": ["Remotes: Container"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/container.ContainerRemote"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/container.ContainerRemote"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/container.ContainerRemote"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerRemoteResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/remotes/container/container/{pulp_id}/": {
      "get": {
        "operationId": "remotes_container_container_read",
        "description": "Container remotes represent an external repository that implements the Container\nRegistry API. Container remotes support deferred downloading by configuring\nthe ``policy`` field.  ``on_demand`` and ``streamed`` policies can provide\nsignificant disk space savings.",
        "summary": "Inspect a container remote",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container remote.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Remotes: Container"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerRemoteResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "remotes_container_container_update",
        "description": "Trigger an asynchronous update task",
        "summary": "Update a container remote",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container remote.",
            "required": true
          }
        ],
        "tags": ["Remotes: Container"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/container.ContainerRemote"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/container.ContainerRemote"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/container.ContainerRemote"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "remotes_container_container_partial_update",
        "description": "Trigger an asynchronous partial update task",
        "summary": "Update a container remote",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container remote.",
            "required": true
          }
        ],
        "tags": ["Remotes: Container"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Patchedcontainer.ContainerRemote"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Patchedcontainer.ContainerRemote"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Patchedcontainer.ContainerRemote"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "remotes_container_container_delete",
        "description": "Trigger an asynchronous delete task",
        "summary": "Delete a container remote",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container remote.",
            "required": true
          }
        ],
        "tags": ["Remotes: Container"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/remotes/container/container/{pulp_id}/add_role/": {
      "post": {
        "operationId": "remotes_container_container_add_role",
        "description": "Add a role for this object to users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container remote.",
            "required": true
          }
        ],
        "tags": ["Remotes: Container"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/remotes/container/container/{pulp_id}/list_roles/": {
      "get": {
        "operationId": "remotes_container_container_list_roles",
        "description": "List roles assigned to this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container remote.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Remotes: Container"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectRolesResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/remotes/container/container/{pulp_id}/my_permissions/": {
      "get": {
        "operationId": "remotes_container_container_my_permissions",
        "description": "List permissions available to the current user on this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container remote.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Remotes: Container"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyPermissionsResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/remotes/container/container/{pulp_id}/remove_role/": {
      "post": {
        "operationId": "remotes_container_container_remove_role",
        "description": "Remove a role for this object from users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container remote.",
            "required": true
          }
        ],
        "tags": ["Remotes: Container"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repair/": {
      "post": {
        "operationId": "repair_post",
        "description": "Trigger an asynchronous task that checks for missing or corrupted artifacts, and attempts to redownload them.",
        "summary": "Repair Artifact Storage",
        "tags": ["Repair"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Repair"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Repair"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Repair"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/": {
      "get": {
        "operationId": "repositories_list",
        "description": "Endpoint to list all repositories.",
        "summary": "List repositories",
        "parameters": [
          {
            "in": "query",
            "name": "latest_with_content",
            "schema": {
              "type": "string"
            },
            "description": "Content Unit referenced by HREF"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-description",
                  "-name",
                  "-next_version",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_labels",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-retain_repo_versions",
                  "-user_hidden",
                  "description",
                  "name",
                  "next_version",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_labels",
                  "pulp_last_updated",
                  "pulp_type",
                  "retain_repo_versions",
                  "user_hidden"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pulp_labels` - Pulp labels\n* `-pulp_labels` - Pulp labels (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `next_version` - Next version\n* `-next_version` - Next version (descending)\n* `retain_repo_versions` - Retain repo versions\n* `-retain_repo_versions` - Retain repo versions (descending)\n* `user_hidden` - User hidden\n* `-user_hidden` - User hidden (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_label_select",
            "schema": {
              "type": "string"
            },
            "description": "Filter labels by search string"
          },
          {
            "in": "query",
            "name": "pulp_type__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["ansible.ansible", "container.container", "container.container-push"]
              }
            },
            "description": "Pulp type is in\n\n* `container.container` - container.container\n* `container.container-push` - container.container-push\n* `ansible.ansible` - ansible.ansible",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "remote",
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "description": "Foreign Key referenced by HREF"
          },
          {
            "in": "query",
            "name": "retain_repo_versions",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where retain_repo_versions matches value"
          },
          {
            "in": "query",
            "name": "retain_repo_versions__gt",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where retain_repo_versions is greater than value"
          },
          {
            "in": "query",
            "name": "retain_repo_versions__gte",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where retain_repo_versions is greater than or equal to value"
          },
          {
            "in": "query",
            "name": "retain_repo_versions__isnull",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter results where retain_repo_versions has a null value"
          },
          {
            "in": "query",
            "name": "retain_repo_versions__lt",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where retain_repo_versions is less than value"
          },
          {
            "in": "query",
            "name": "retain_repo_versions__lte",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where retain_repo_versions is less than or equal to value"
          },
          {
            "in": "query",
            "name": "retain_repo_versions__ne",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where retain_repo_versions not equal to value"
          },
          {
            "in": "query",
            "name": "retain_repo_versions__range",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter results where retain_repo_versions is between two comma separated values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "with_content",
            "schema": {
              "type": "string"
            },
            "description": "Content Unit referenced by HREF"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Repositories"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRepositoryResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/ansible/ansible/": {
      "get": {
        "operationId": "repositories_ansible_ansible_list",
        "description": "ViewSet for Ansible Repositories.",
        "summary": "List ansible repositorys",
        "parameters": [
          {
            "in": "query",
            "name": "latest_with_content",
            "schema": {
              "type": "string"
            },
            "description": "Content Unit referenced by HREF"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-description",
                  "-name",
                  "-next_version",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_labels",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-retain_repo_versions",
                  "-user_hidden",
                  "description",
                  "name",
                  "next_version",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_labels",
                  "pulp_last_updated",
                  "pulp_type",
                  "retain_repo_versions",
                  "user_hidden"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pulp_labels` - Pulp labels\n* `-pulp_labels` - Pulp labels (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `next_version` - Next version\n* `-next_version` - Next version (descending)\n* `retain_repo_versions` - Retain repo versions\n* `-retain_repo_versions` - Retain repo versions (descending)\n* `user_hidden` - User hidden\n* `-user_hidden` - User hidden (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_label_select",
            "schema": {
              "type": "string"
            },
            "description": "Filter labels by search string"
          },
          {
            "in": "query",
            "name": "remote",
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "description": "Foreign Key referenced by HREF"
          },
          {
            "in": "query",
            "name": "retain_repo_versions",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where retain_repo_versions matches value"
          },
          {
            "in": "query",
            "name": "retain_repo_versions__gt",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where retain_repo_versions is greater than value"
          },
          {
            "in": "query",
            "name": "retain_repo_versions__gte",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where retain_repo_versions is greater than or equal to value"
          },
          {
            "in": "query",
            "name": "retain_repo_versions__isnull",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter results where retain_repo_versions has a null value"
          },
          {
            "in": "query",
            "name": "retain_repo_versions__lt",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where retain_repo_versions is less than value"
          },
          {
            "in": "query",
            "name": "retain_repo_versions__lte",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where retain_repo_versions is less than or equal to value"
          },
          {
            "in": "query",
            "name": "retain_repo_versions__ne",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where retain_repo_versions not equal to value"
          },
          {
            "in": "query",
            "name": "retain_repo_versions__range",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter results where retain_repo_versions is between two comma separated values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "with_content",
            "schema": {
              "type": "string"
            },
            "description": "Content Unit referenced by HREF"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Repositories: Ansible"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedansible.AnsibleRepositoryResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "repositories_ansible_ansible_create",
        "description": "ViewSet for Ansible Repositories.",
        "summary": "Create an ansible repository",
        "tags": ["Repositories: Ansible"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ansible.AnsibleRepository"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ansible.AnsibleRepository"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ansible.AnsibleRepository"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.AnsibleRepositoryResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/": {
      "get": {
        "operationId": "repositories_ansible_ansible_read",
        "description": "ViewSet for Ansible Repositories.",
        "summary": "Inspect an ansible repository",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this ansible repository.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Repositories: Ansible"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.AnsibleRepositoryResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "repositories_ansible_ansible_update",
        "description": "Trigger an asynchronous update task",
        "summary": "Update an ansible repository",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this ansible repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Ansible"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ansible.AnsibleRepository"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ansible.AnsibleRepository"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ansible.AnsibleRepository"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "repositories_ansible_ansible_partial_update",
        "description": "Trigger an asynchronous partial update task",
        "summary": "Update an ansible repository",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this ansible repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Ansible"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Patchedansible.AnsibleRepository"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Patchedansible.AnsibleRepository"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Patchedansible.AnsibleRepository"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "repositories_ansible_ansible_delete",
        "description": "Trigger an asynchronous delete task",
        "summary": "Delete an ansible repository",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this ansible repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Ansible"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/add_role/": {
      "post": {
        "operationId": "repositories_ansible_ansible_add_role",
        "description": "Add a role for this object to users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this ansible repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Ansible"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/copy_collection_version/": {
      "post": {
        "operationId": "repositories_ansible_ansible_copy_collection_version",
        "description": "Trigger an asynchronous task to copy collection versions.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this ansible repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Ansible"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionVersionCopyMove"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CollectionVersionCopyMove"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CollectionVersionCopyMove"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/list_roles/": {
      "get": {
        "operationId": "repositories_ansible_ansible_list_roles",
        "description": "List roles assigned to this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this ansible repository.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Repositories: Ansible"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectRolesResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/mark/": {
      "post": {
        "operationId": "repositories_ansible_ansible_mark",
        "description": "Trigger an asynchronous task to mark Ansible content.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this ansible repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Ansible"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnsibleRepositoryMark"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AnsibleRepositoryMark"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AnsibleRepositoryMark"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/modify/": {
      "post": {
        "operationId": "repositories_ansible_ansible_modify",
        "description": "Trigger an asynchronous task to create a new repository version.",
        "summary": "Modify Repository Content",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this ansible repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Ansible"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepositoryAddRemoveContent"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RepositoryAddRemoveContent"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/RepositoryAddRemoveContent"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/move_collection_version/": {
      "post": {
        "operationId": "repositories_ansible_ansible_move_collection_version",
        "description": "Trigger an asynchronous task to move collection versions.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this ansible repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Ansible"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionVersionCopyMove"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CollectionVersionCopyMove"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CollectionVersionCopyMove"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/my_permissions/": {
      "get": {
        "operationId": "repositories_ansible_ansible_my_permissions",
        "description": "List permissions available to the current user on this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this ansible repository.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Repositories: Ansible"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyPermissionsResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/rebuild_metadata/": {
      "post": {
        "operationId": "repositories_ansible_ansible_rebuild_metadata",
        "description": "Trigger an asynchronous task to rebuild Ansible content meta.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this ansible repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Ansible"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnsibleRepositoryRebuild"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AnsibleRepositoryRebuild"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AnsibleRepositoryRebuild"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/remove_role/": {
      "post": {
        "operationId": "repositories_ansible_ansible_remove_role",
        "description": "Remove a role for this object from users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this ansible repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Ansible"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/sign/": {
      "post": {
        "operationId": "repositories_ansible_ansible_sign",
        "description": "Trigger an asynchronous task to sign Ansible content.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this ansible repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Ansible"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnsibleRepositorySignature"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AnsibleRepositorySignature"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AnsibleRepositorySignature"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/sync/": {
      "post": {
        "operationId": "repositories_ansible_ansible_sync",
        "description": "Trigger an asynchronous task to sync Ansible content.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this ansible repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Ansible"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnsibleRepositorySyncURL"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AnsibleRepositorySyncURL"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AnsibleRepositorySyncURL"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/unmark/": {
      "post": {
        "operationId": "repositories_ansible_ansible_unmark",
        "description": "Trigger an asynchronous task to unmark Ansible content.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this ansible repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Ansible"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnsibleRepositoryMark"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AnsibleRepositoryMark"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AnsibleRepositoryMark"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/": {
      "get": {
        "operationId": "repositories_ansible_ansible_versions_list",
        "description": "AnsibleRepositoryVersion represents a single file repository version.",
        "summary": "List repository versions",
        "parameters": [
          {
            "in": "query",
            "name": "content",
            "schema": {
              "type": "string"
            },
            "description": "Content Unit referenced by HREF"
          },
          {
            "in": "query",
            "name": "content__in",
            "schema": {
              "type": "string"
            },
            "description": "Content Unit referenced by HREF"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "number",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where number matches value"
          },
          {
            "in": "query",
            "name": "number__gt",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where number is greater than value"
          },
          {
            "in": "query",
            "name": "number__gte",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where number is greater than or equal to value"
          },
          {
            "in": "query",
            "name": "number__lt",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where number is less than value"
          },
          {
            "in": "query",
            "name": "number__lte",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where number is less than or equal to value"
          },
          {
            "in": "query",
            "name": "number__range",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter results where number is between two comma separated values",
            "explode": false,
            "style": "form"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-complete",
                  "-info",
                  "-number",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "complete",
                  "info",
                  "number",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `number` - Number\n* `-number` - Number (descending)\n* `complete` - Complete\n* `-complete` - Complete (descending)\n* `info` - Info\n* `-info` - Info (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_created",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_created matches value"
          },
          {
            "in": "query",
            "name": "pulp_created__gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_created is greater than value"
          },
          {
            "in": "query",
            "name": "pulp_created__gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_created is greater than or equal to value"
          },
          {
            "in": "query",
            "name": "pulp_created__lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_created is less than value"
          },
          {
            "in": "query",
            "name": "pulp_created__lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_created is less than or equal to value"
          },
          {
            "in": "query",
            "name": "pulp_created__range",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            },
            "description": "Filter results where pulp_created is between two comma separated values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "path",
            "name": "repository_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Repositories: Ansible Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRepositoryVersionResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/": {
      "get": {
        "operationId": "repositories_ansible_ansible_versions_read",
        "description": "AnsibleRepositoryVersion represents a single file repository version.",
        "summary": "Inspect a repository version",
        "parameters": [
          {
            "in": "path",
            "name": "number",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "repository_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Repositories: Ansible Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryVersionResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "repositories_ansible_ansible_versions_delete",
        "description": "Trigger an asynchronous task to delete a repository version.",
        "summary": "Delete a repository version",
        "parameters": [
          {
            "in": "path",
            "name": "number",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "repository_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Repositories: Ansible Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/rebuild_metadata/": {
      "post": {
        "operationId": "repositories_ansible_ansible_versions_rebuild_metadata",
        "description": "Trigger an asynchronous task to rebuild Ansible content meta.",
        "parameters": [
          {
            "in": "path",
            "name": "number",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "repository_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Repositories: Ansible Versions"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnsibleRepositoryRebuild"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AnsibleRepositoryRebuild"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AnsibleRepositoryRebuild"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/repair/": {
      "post": {
        "operationId": "repositories_ansible_ansible_versions_repair",
        "description": "Trigger an asynchronous task to repair a repository version.",
        "parameters": [
          {
            "in": "path",
            "name": "number",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "repository_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Repositories: Ansible Versions"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Repair"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Repair"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Repair"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container/": {
      "get": {
        "operationId": "repositories_container_container_list",
        "description": "ViewSet for container repo.",
        "summary": "List container repositorys",
        "parameters": [
          {
            "in": "query",
            "name": "latest_with_content",
            "schema": {
              "type": "string"
            },
            "description": "Content Unit referenced by HREF"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-description",
                  "-name",
                  "-next_version",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_labels",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-retain_repo_versions",
                  "-user_hidden",
                  "description",
                  "name",
                  "next_version",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_labels",
                  "pulp_last_updated",
                  "pulp_type",
                  "retain_repo_versions",
                  "user_hidden"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pulp_labels` - Pulp labels\n* `-pulp_labels` - Pulp labels (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `next_version` - Next version\n* `-next_version` - Next version (descending)\n* `retain_repo_versions` - Retain repo versions\n* `-retain_repo_versions` - Retain repo versions (descending)\n* `user_hidden` - User hidden\n* `-user_hidden` - User hidden (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_label_select",
            "schema": {
              "type": "string"
            },
            "description": "Filter labels by search string"
          },
          {
            "in": "query",
            "name": "remote",
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "description": "Foreign Key referenced by HREF"
          },
          {
            "in": "query",
            "name": "retain_repo_versions",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where retain_repo_versions matches value"
          },
          {
            "in": "query",
            "name": "retain_repo_versions__gt",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where retain_repo_versions is greater than value"
          },
          {
            "in": "query",
            "name": "retain_repo_versions__gte",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where retain_repo_versions is greater than or equal to value"
          },
          {
            "in": "query",
            "name": "retain_repo_versions__isnull",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter results where retain_repo_versions has a null value"
          },
          {
            "in": "query",
            "name": "retain_repo_versions__lt",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where retain_repo_versions is less than value"
          },
          {
            "in": "query",
            "name": "retain_repo_versions__lte",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where retain_repo_versions is less than or equal to value"
          },
          {
            "in": "query",
            "name": "retain_repo_versions__ne",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where retain_repo_versions not equal to value"
          },
          {
            "in": "query",
            "name": "retain_repo_versions__range",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter results where retain_repo_versions is between two comma separated values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "with_content",
            "schema": {
              "type": "string"
            },
            "description": "Content Unit referenced by HREF"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Repositories: Container"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedcontainer.ContainerRepositoryResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "repositories_container_container_create",
        "description": "ViewSet for container repo.",
        "summary": "Create a container repository",
        "tags": ["Repositories: Container"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/container.ContainerRepository"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/container.ContainerRepository"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/container.ContainerRepository"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerRepositoryResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container-push/": {
      "get": {
        "operationId": "repositories_container_container_push_list",
        "description": "ViewSet for a container push repository.\n\nPOST and DELETE are disallowed because a push repository is tightly coupled with a\nContainerDistribution which handles it automatically.\nCreated - during push operation, removed - with ContainerDistribution removal.",
        "summary": "List container push repositorys",
        "parameters": [
          {
            "in": "query",
            "name": "latest_with_content",
            "schema": {
              "type": "string"
            },
            "description": "Content Unit referenced by HREF"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-description",
                  "-name",
                  "-next_version",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_labels",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-retain_repo_versions",
                  "-user_hidden",
                  "description",
                  "name",
                  "next_version",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_labels",
                  "pulp_last_updated",
                  "pulp_type",
                  "retain_repo_versions",
                  "user_hidden"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pulp_labels` - Pulp labels\n* `-pulp_labels` - Pulp labels (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `next_version` - Next version\n* `-next_version` - Next version (descending)\n* `retain_repo_versions` - Retain repo versions\n* `-retain_repo_versions` - Retain repo versions (descending)\n* `user_hidden` - User hidden\n* `-user_hidden` - User hidden (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_label_select",
            "schema": {
              "type": "string"
            },
            "description": "Filter labels by search string"
          },
          {
            "in": "query",
            "name": "remote",
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "description": "Foreign Key referenced by HREF"
          },
          {
            "in": "query",
            "name": "retain_repo_versions",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where retain_repo_versions matches value"
          },
          {
            "in": "query",
            "name": "retain_repo_versions__gt",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where retain_repo_versions is greater than value"
          },
          {
            "in": "query",
            "name": "retain_repo_versions__gte",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where retain_repo_versions is greater than or equal to value"
          },
          {
            "in": "query",
            "name": "retain_repo_versions__isnull",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter results where retain_repo_versions has a null value"
          },
          {
            "in": "query",
            "name": "retain_repo_versions__lt",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where retain_repo_versions is less than value"
          },
          {
            "in": "query",
            "name": "retain_repo_versions__lte",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where retain_repo_versions is less than or equal to value"
          },
          {
            "in": "query",
            "name": "retain_repo_versions__ne",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where retain_repo_versions not equal to value"
          },
          {
            "in": "query",
            "name": "retain_repo_versions__range",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter results where retain_repo_versions is between two comma separated values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "with_content",
            "schema": {
              "type": "string"
            },
            "description": "Content Unit referenced by HREF"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Repositories: Container-Push"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedcontainer.ContainerPushRepositoryResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container-push/{pulp_id}/": {
      "get": {
        "operationId": "repositories_container_container_push_read",
        "description": "ViewSet for a container push repository.\n\nPOST and DELETE are disallowed because a push repository is tightly coupled with a\nContainerDistribution which handles it automatically.\nCreated - during push operation, removed - with ContainerDistribution removal.",
        "summary": "Inspect a container push repository",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container push repository.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Repositories: Container-Push"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerPushRepositoryResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "repositories_container_container_push_update",
        "description": "Trigger an asynchronous update task",
        "summary": "Update a container push repository",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container push repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Container-Push"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/container.ContainerPushRepository"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/container.ContainerPushRepository"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/container.ContainerPushRepository"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "repositories_container_container_push_partial_update",
        "description": "Trigger an asynchronous partial update task",
        "summary": "Update a container push repository",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container push repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Container-Push"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Patchedcontainer.ContainerPushRepository"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Patchedcontainer.ContainerPushRepository"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Patchedcontainer.ContainerPushRepository"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container-push/{pulp_id}/add_role/": {
      "post": {
        "operationId": "repositories_container_container_push_add_role",
        "description": "Add a role for this object to users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container push repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Container-Push"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container-push/{pulp_id}/list_roles/": {
      "get": {
        "operationId": "repositories_container_container_push_list_roles",
        "description": "List roles assigned to this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container push repository.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Repositories: Container-Push"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectRolesResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container-push/{pulp_id}/my_permissions/": {
      "get": {
        "operationId": "repositories_container_container_push_my_permissions",
        "description": "List permissions available to the current user on this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container push repository.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Repositories: Container-Push"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyPermissionsResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_image/": {
      "post": {
        "operationId": "repositories_container_container_push_remove_image",
        "description": "Trigger an asynchronous task to remove a manifest and all its associated data by a digest",
        "summary": "Delete an image from a repository",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container push repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Container-Push"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveImage"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RemoveImage"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/RemoveImage"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_role/": {
      "post": {
        "operationId": "repositories_container_container_push_remove_role",
        "description": "Remove a role for this object from users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container push repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Container-Push"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_signatures/": {
      "post": {
        "operationId": "repositories_container_container_push_remove_signatures",
        "description": "Create a task which deletes signatures by the passed key_id.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container push repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Container-Push"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveSignatures"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RemoveSignatures"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/RemoveSignatures"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveSignaturesResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container-push/{pulp_id}/sign/": {
      "post": {
        "operationId": "repositories_container_container_push_sign",
        "description": "Trigger an asynchronous task to sign content.",
        "summary": "Sign images in the repo",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container push repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Container-Push"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepositorySign"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RepositorySign"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/RepositorySign"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container-push/{pulp_id}/tag/": {
      "post": {
        "operationId": "repositories_container_container_push_tag",
        "description": "Trigger an asynchronous task to tag an image in the repository",
        "summary": "Create a Tag",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container push repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Container-Push"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagImage"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TagImage"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/TagImage"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container-push/{pulp_id}/untag/": {
      "post": {
        "operationId": "repositories_container_container_push_untag",
        "description": "Trigger an asynchronous task to untag an image in the repository",
        "summary": "Delete a tag",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container push repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Container-Push"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnTagImage"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UnTagImage"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UnTagImage"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/": {
      "get": {
        "operationId": "repositories_container_container_push_versions_list",
        "description": "ContainerPushRepositoryVersion represents a single container push repository version.\n\nRepository versions of a push repository are not allowed to be deleted. Versioning of such\nrepositories, as well as creation/removal, happens automatically without explicit user actions.\nUsers could make a repository not functional by accident if allowed to delete repository\nversions.",
        "summary": "List repository versions",
        "parameters": [
          {
            "in": "query",
            "name": "content",
            "schema": {
              "type": "string"
            },
            "description": "Content Unit referenced by HREF"
          },
          {
            "in": "query",
            "name": "content__in",
            "schema": {
              "type": "string"
            },
            "description": "Content Unit referenced by HREF"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "number",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where number matches value"
          },
          {
            "in": "query",
            "name": "number__gt",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where number is greater than value"
          },
          {
            "in": "query",
            "name": "number__gte",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where number is greater than or equal to value"
          },
          {
            "in": "query",
            "name": "number__lt",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where number is less than value"
          },
          {
            "in": "query",
            "name": "number__lte",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where number is less than or equal to value"
          },
          {
            "in": "query",
            "name": "number__range",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter results where number is between two comma separated values",
            "explode": false,
            "style": "form"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-complete",
                  "-info",
                  "-number",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "complete",
                  "info",
                  "number",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `number` - Number\n* `-number` - Number (descending)\n* `complete` - Complete\n* `-complete` - Complete (descending)\n* `info` - Info\n* `-info` - Info (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_created",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_created matches value"
          },
          {
            "in": "query",
            "name": "pulp_created__gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_created is greater than value"
          },
          {
            "in": "query",
            "name": "pulp_created__gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_created is greater than or equal to value"
          },
          {
            "in": "query",
            "name": "pulp_created__lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_created is less than value"
          },
          {
            "in": "query",
            "name": "pulp_created__lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_created is less than or equal to value"
          },
          {
            "in": "query",
            "name": "pulp_created__range",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            },
            "description": "Filter results where pulp_created is between two comma separated values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "path",
            "name": "repository_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Repositories: Container-Push Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRepositoryVersionResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/": {
      "get": {
        "operationId": "repositories_container_container_push_versions_read",
        "description": "ContainerPushRepositoryVersion represents a single container push repository version.\n\nRepository versions of a push repository are not allowed to be deleted. Versioning of such\nrepositories, as well as creation/removal, happens automatically without explicit user actions.\nUsers could make a repository not functional by accident if allowed to delete repository\nversions.",
        "summary": "Inspect a repository version",
        "parameters": [
          {
            "in": "path",
            "name": "number",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "repository_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Repositories: Container-Push Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryVersionResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "repositories_container_container_push_versions_delete",
        "description": "Trigger an asynchronous task to delete a repository version.",
        "summary": "Delete a repository version",
        "parameters": [
          {
            "in": "path",
            "name": "number",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "repository_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Repositories: Container-Push Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/repair/": {
      "post": {
        "operationId": "repositories_container_container_push_versions_repair",
        "description": "Trigger an asynchronous task to repair a repository version.",
        "parameters": [
          {
            "in": "path",
            "name": "number",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "repository_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Repositories: Container-Push Versions"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Repair"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Repair"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Repair"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container/{pulp_id}/": {
      "get": {
        "operationId": "repositories_container_container_read",
        "description": "ViewSet for container repo.",
        "summary": "Inspect a container repository",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container repository.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Repositories: Container"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerRepositoryResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "repositories_container_container_update",
        "description": "Trigger an asynchronous update task",
        "summary": "Update a container repository",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Container"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/container.ContainerRepository"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/container.ContainerRepository"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/container.ContainerRepository"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "repositories_container_container_partial_update",
        "description": "Trigger an asynchronous partial update task",
        "summary": "Update a container repository",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Container"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Patchedcontainer.ContainerRepository"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Patchedcontainer.ContainerRepository"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Patchedcontainer.ContainerRepository"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "repositories_container_container_delete",
        "description": "Trigger an asynchronous delete task",
        "summary": "Delete a container repository",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Container"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container/{pulp_id}/add/": {
      "post": {
        "operationId": "repositories_container_container_add",
        "description": "Trigger an asynchronous task to recursively add container content.",
        "summary": "Add content",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Container"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecursiveManage"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RecursiveManage"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/RecursiveManage"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container/{pulp_id}/add_role/": {
      "post": {
        "operationId": "repositories_container_container_add_role",
        "description": "Add a role for this object to users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Container"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container/{pulp_id}/build_image/": {
      "post": {
        "operationId": "repositories_container_container_build_image",
        "description": "Trigger an asynchronous task to build an OCI image from a Containerfile. A new repository version is created with the new image and tag. This API is tech preview in Pulp Container 1.1. Backwards compatibility when upgrading is not guaranteed.",
        "summary": "Build an Image",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Container"],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/OCIBuildImage"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/OCIBuildImage"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container/{pulp_id}/copy_manifests/": {
      "post": {
        "operationId": "repositories_container_container_copy_manifests",
        "description": "Trigger an asynchronous task to copy manifests",
        "summary": "Copy manifests",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Container"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManifestCopy"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ManifestCopy"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ManifestCopy"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container/{pulp_id}/copy_tags/": {
      "post": {
        "operationId": "repositories_container_container_copy_tags",
        "description": "Trigger an asynchronous task to copy tags",
        "summary": "Copy tags",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Container"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagCopy"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TagCopy"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/TagCopy"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container/{pulp_id}/list_roles/": {
      "get": {
        "operationId": "repositories_container_container_list_roles",
        "description": "List roles assigned to this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container repository.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Repositories: Container"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectRolesResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container/{pulp_id}/my_permissions/": {
      "get": {
        "operationId": "repositories_container_container_my_permissions",
        "description": "List permissions available to the current user on this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container repository.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Repositories: Container"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyPermissionsResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container/{pulp_id}/remove/": {
      "post": {
        "operationId": "repositories_container_container_remove",
        "description": "Trigger an async task to recursively remove container content.",
        "summary": "Remove content",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Container"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecursiveManage"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RecursiveManage"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/RecursiveManage"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container/{pulp_id}/remove_role/": {
      "post": {
        "operationId": "repositories_container_container_remove_role",
        "description": "Remove a role for this object from users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Container"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container/{pulp_id}/sign/": {
      "post": {
        "operationId": "repositories_container_container_sign",
        "description": "Trigger an asynchronous task to sign content.",
        "summary": "Sign images in the repo",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Container"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepositorySign"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RepositorySign"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/RepositorySign"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container/{pulp_id}/sync/": {
      "post": {
        "operationId": "repositories_container_container_sync",
        "description": "Trigger an asynchronous task to sync content.",
        "summary": "Sync from a remote",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Container"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContainerRepositorySyncURL"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ContainerRepositorySyncURL"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ContainerRepositorySyncURL"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container/{pulp_id}/tag/": {
      "post": {
        "operationId": "repositories_container_container_tag",
        "description": "Trigger an asynchronous task to tag an image in the repository",
        "summary": "Create a Tag",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Container"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagImage"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TagImage"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/TagImage"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container/{pulp_id}/untag/": {
      "post": {
        "operationId": "repositories_container_container_untag",
        "description": "Trigger an asynchronous task to untag an image in the repository",
        "summary": "Delete a tag",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this container repository.",
            "required": true
          }
        ],
        "tags": ["Repositories: Container"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnTagImage"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UnTagImage"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UnTagImage"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container/{repository_pk}/versions/": {
      "get": {
        "operationId": "repositories_container_container_versions_list",
        "description": "ContainerRepositoryVersion represents a single container repository version.",
        "summary": "List repository versions",
        "parameters": [
          {
            "in": "query",
            "name": "content",
            "schema": {
              "type": "string"
            },
            "description": "Content Unit referenced by HREF"
          },
          {
            "in": "query",
            "name": "content__in",
            "schema": {
              "type": "string"
            },
            "description": "Content Unit referenced by HREF"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "number",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where number matches value"
          },
          {
            "in": "query",
            "name": "number__gt",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where number is greater than value"
          },
          {
            "in": "query",
            "name": "number__gte",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where number is greater than or equal to value"
          },
          {
            "in": "query",
            "name": "number__lt",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where number is less than value"
          },
          {
            "in": "query",
            "name": "number__lte",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where number is less than or equal to value"
          },
          {
            "in": "query",
            "name": "number__range",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter results where number is between two comma separated values",
            "explode": false,
            "style": "form"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-complete",
                  "-info",
                  "-number",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "complete",
                  "info",
                  "number",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `number` - Number\n* `-number` - Number (descending)\n* `complete` - Complete\n* `-complete` - Complete (descending)\n* `info` - Info\n* `-info` - Info (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_created",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_created matches value"
          },
          {
            "in": "query",
            "name": "pulp_created__gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_created is greater than value"
          },
          {
            "in": "query",
            "name": "pulp_created__gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_created is greater than or equal to value"
          },
          {
            "in": "query",
            "name": "pulp_created__lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_created is less than value"
          },
          {
            "in": "query",
            "name": "pulp_created__lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_created is less than or equal to value"
          },
          {
            "in": "query",
            "name": "pulp_created__range",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            },
            "description": "Filter results where pulp_created is between two comma separated values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "path",
            "name": "repository_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Repositories: Container Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRepositoryVersionResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/": {
      "get": {
        "operationId": "repositories_container_container_versions_read",
        "description": "ContainerRepositoryVersion represents a single container repository version.",
        "summary": "Inspect a repository version",
        "parameters": [
          {
            "in": "path",
            "name": "number",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "repository_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Repositories: Container Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryVersionResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "repositories_container_container_versions_delete",
        "description": "Trigger an asynchronous task to delete a repository version.",
        "summary": "Delete a repository version",
        "parameters": [
          {
            "in": "path",
            "name": "number",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "repository_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Repositories: Container Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/repair/": {
      "post": {
        "operationId": "repositories_container_container_versions_repair",
        "description": "Trigger an asynchronous task to repair a repository version.",
        "parameters": [
          {
            "in": "path",
            "name": "number",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "repository_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Repositories: Container Versions"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Repair"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Repair"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Repair"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repositories/reclaim_space/": {
      "post": {
        "operationId": "repositories_reclaim_space_reclaim",
        "description": "Trigger an asynchronous space reclaim operation.",
        "tags": ["Repositories: Reclaim_Space"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReclaimSpace"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ReclaimSpace"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ReclaimSpace"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/repository_versions/": {
      "get": {
        "operationId": "repository_versions_list",
        "description": "A mixin to hold the shared get_queryset logic used by RepositoryVersionViewSets.",
        "summary": "List repository versions",
        "parameters": [
          {
            "in": "query",
            "name": "content",
            "schema": {
              "type": "string"
            },
            "description": "Content Unit referenced by HREF"
          },
          {
            "in": "query",
            "name": "content__in",
            "schema": {
              "type": "string"
            },
            "description": "Content Unit referenced by HREF"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "number",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where number matches value"
          },
          {
            "in": "query",
            "name": "number__gt",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where number is greater than value"
          },
          {
            "in": "query",
            "name": "number__gte",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where number is greater than or equal to value"
          },
          {
            "in": "query",
            "name": "number__lt",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where number is less than value"
          },
          {
            "in": "query",
            "name": "number__lte",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where number is less than or equal to value"
          },
          {
            "in": "query",
            "name": "number__range",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter results where number is between two comma separated values",
            "explode": false,
            "style": "form"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-complete",
                  "-info",
                  "-number",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "complete",
                  "info",
                  "number",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `number` - Number\n* `-number` - Number (descending)\n* `complete` - Complete\n* `-complete` - Complete (descending)\n* `info` - Info\n* `-info` - Info (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_created",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_created matches value"
          },
          {
            "in": "query",
            "name": "pulp_created__gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_created is greater than value"
          },
          {
            "in": "query",
            "name": "pulp_created__gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_created is greater than or equal to value"
          },
          {
            "in": "query",
            "name": "pulp_created__lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_created is less than value"
          },
          {
            "in": "query",
            "name": "pulp_created__lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where pulp_created is less than or equal to value"
          },
          {
            "in": "query",
            "name": "pulp_created__range",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            },
            "description": "Filter results where pulp_created is between two comma separated values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Repository_Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRepositoryVersionResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/roles/": {
      "get": {
        "operationId": "roles_list",
        "description": "ViewSet for Role.",
        "summary": "List roles",
        "parameters": [
          {
            "in": "query",
            "name": "contains_permission",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter roles that have any of the permissions in the list.",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where description matches value"
          },
          {
            "in": "query",
            "name": "description__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where description contains value"
          },
          {
            "in": "query",
            "name": "description__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where description contains value"
          },
          {
            "in": "query",
            "name": "description__iexact",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where description matches value"
          },
          {
            "in": "query",
            "name": "for_object_type",
            "schema": {
              "type": "string"
            },
            "description": "Filter roles that only have permissions for the specified object HREF."
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "locked",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter results where locked matches value"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-description",
                  "-locked",
                  "-name",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "description",
                  "locked",
                  "name",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `locked` - Locked\n* `-locked` - Locked (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Roles"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRoleResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "roles_create",
        "description": "ViewSet for Role.",
        "summary": "Create a role",
        "tags": ["Roles"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/roles/{pulp_id}/": {
      "get": {
        "operationId": "roles_read",
        "description": "ViewSet for Role.",
        "summary": "Inspect a role",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this role.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Roles"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "roles_update",
        "description": "ViewSet for Role.",
        "summary": "Update a role",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this role.",
            "required": true
          }
        ],
        "tags": ["Roles"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "roles_partial_update",
        "description": "ViewSet for Role.",
        "summary": "Update a role",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this role.",
            "required": true
          }
        ],
        "tags": ["Roles"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "roles_delete",
        "description": "ViewSet for Role.",
        "summary": "Delete a role",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this role.",
            "required": true
          }
        ],
        "tags": ["Roles"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/pulp/api/v3/signing-services/": {
      "get": {
        "operationId": "signing_services_list",
        "description": "A ViewSet that supports browsing of existing signing services.",
        "summary": "List signing services",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-name",
                  "-pk",
                  "-pubkey_fingerprint",
                  "-public_key",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-script",
                  "name",
                  "pk",
                  "pubkey_fingerprint",
                  "public_key",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "script"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `public_key` - Public key\n* `-public_key` - Public key (descending)\n* `pubkey_fingerprint` - Pubkey fingerprint\n* `-pubkey_fingerprint` - Pubkey fingerprint (descending)\n* `script` - Script\n* `-script` - Script (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Signing-Services"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedSigningServiceResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/signing-services/{pulp_id}/": {
      "get": {
        "operationId": "signing_services_read",
        "description": "A ViewSet that supports browsing of existing signing services.",
        "summary": "Inspect a signing service",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this signing service.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Signing-Services"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigningServiceResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/status/": {
      "get": {
        "operationId": "status_read",
        "description": "Returns status and app information about Pulp.\n\nInformation includes:\n * version of pulpcore and loaded pulp plugins\n * known workers\n * known content apps\n * database connection status\n * redis connection status\n * disk usage information",
        "summary": "Inspect status of Pulp",
        "tags": ["Status"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/task-groups/": {
      "get": {
        "operationId": "task_groups_list",
        "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
        "summary": "List task groups",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Task-Groups"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTaskGroupResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/task-groups/{pulp_id}/": {
      "get": {
        "operationId": "task_groups_read",
        "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
        "summary": "Inspect a task group",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this task group.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Task-Groups"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskGroupResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/task-schedules/": {
      "get": {
        "operationId": "task_schedules_list",
        "description": "ViewSet to monitor task schedules.",
        "summary": "List task schedules",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-dispatch_interval",
                  "-name",
                  "-next_dispatch",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-task_name",
                  "dispatch_interval",
                  "name",
                  "next_dispatch",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "task_name"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `next_dispatch` - Next dispatch\n* `-next_dispatch` - Next dispatch (descending)\n* `dispatch_interval` - Dispatch interval\n* `-dispatch_interval` - Dispatch interval (descending)\n* `task_name` - Task name\n* `-task_name` - Task name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "task_name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where task_name matches value"
          },
          {
            "in": "query",
            "name": "task_name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where task_name contains value"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Task-Schedules"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTaskScheduleResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/task-schedules/{pulp_id}/": {
      "get": {
        "operationId": "task_schedules_read",
        "description": "ViewSet to monitor task schedules.",
        "summary": "Inspect a task schedule",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this task schedule.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Task-Schedules"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskScheduleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/task-schedules/{pulp_id}/add_role/": {
      "post": {
        "operationId": "task_schedules_add_role",
        "description": "Add a role for this object to users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this task schedule.",
            "required": true
          }
        ],
        "tags": ["Task-Schedules"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/task-schedules/{pulp_id}/list_roles/": {
      "get": {
        "operationId": "task_schedules_list_roles",
        "description": "List roles assigned to this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this task schedule.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Task-Schedules"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectRolesResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/task-schedules/{pulp_id}/my_permissions/": {
      "get": {
        "operationId": "task_schedules_my_permissions",
        "description": "List permissions available to the current user on this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this task schedule.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Task-Schedules"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyPermissionsResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/task-schedules/{pulp_id}/remove_role/": {
      "post": {
        "operationId": "task_schedules_remove_role",
        "description": "Remove a role for this object from users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this task schedule.",
            "required": true
          }
        ],
        "tags": ["Task-Schedules"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/tasks/": {
      "get": {
        "operationId": "_api_pulp_api_v3_tasks_tasks_list",
        "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
        "summary": "List tasks",
        "parameters": [
          {
            "in": "query",
            "name": "child_tasks",
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "description": "Filter results where child_tasks matches value"
          },
          {
            "in": "query",
            "name": "created_resources",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "exclusive_resources",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exclusive_resources__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "finished_at",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where finished_at matches value"
          },
          {
            "in": "query",
            "name": "finished_at__gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where finished_at is greater than value"
          },
          {
            "in": "query",
            "name": "finished_at__gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where finished_at is greater than or equal to value"
          },
          {
            "in": "query",
            "name": "finished_at__lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where finished_at is less than value"
          },
          {
            "in": "query",
            "name": "finished_at__lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where finished_at is less than or equal to value"
          },
          {
            "in": "query",
            "name": "finished_at__range",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            },
            "description": "Filter results where finished_at is between two comma separated values",
            "explode": false,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "logging_cid",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where logging_cid matches value"
          },
          {
            "in": "query",
            "name": "logging_cid__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where logging_cid contains value"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-args",
                  "-error",
                  "-finished_at",
                  "-kwargs",
                  "-logging_cid",
                  "-name",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-reserved_resources_record",
                  "-started_at",
                  "-state",
                  "args",
                  "error",
                  "finished_at",
                  "kwargs",
                  "logging_cid",
                  "name",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "reserved_resources_record",
                  "started_at",
                  "state"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `state` - State\n* `-state` - State (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `logging_cid` - Logging cid\n* `-logging_cid` - Logging cid (descending)\n* `started_at` - Started at\n* `-started_at` - Started at (descending)\n* `finished_at` - Finished at\n* `-finished_at` - Finished at (descending)\n* `error` - Error\n* `-error` - Error (descending)\n* `args` - Args\n* `-args` - Args (descending)\n* `kwargs` - Kwargs\n* `-kwargs` - Kwargs (descending)\n* `reserved_resources_record` - Reserved resources record\n* `-reserved_resources_record` - Reserved resources record (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "parent_task",
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "description": "Filter results where parent_task matches value"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "reserved_resources",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "reserved_resources__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "reserved_resources_record",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "shared_resources",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "shared_resources__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "started_at",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where started_at matches value"
          },
          {
            "in": "query",
            "name": "started_at__gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where started_at is greater than value"
          },
          {
            "in": "query",
            "name": "started_at__gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where started_at is greater than or equal to value"
          },
          {
            "in": "query",
            "name": "started_at__lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where started_at is less than value"
          },
          {
            "in": "query",
            "name": "started_at__lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where started_at is less than or equal to value"
          },
          {
            "in": "query",
            "name": "started_at__range",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            },
            "description": "Filter results where started_at is between two comma separated values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "state",
            "schema": {
              "type": "string",
              "enum": [
                "canceled",
                "canceling",
                "completed",
                "failed",
                "running",
                "skipped",
                "waiting"
              ]
            },
            "description": "Filter results where state matches value\n\n* `waiting` - Waiting\n* `skipped` - Skipped\n* `running` - Running\n* `completed` - Completed\n* `failed` - Failed\n* `canceled` - Canceled\n* `canceling` - Canceling"
          },
          {
            "in": "query",
            "name": "state__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where state is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "task_group",
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "description": "Filter results where task_group matches value"
          },
          {
            "in": "query",
            "name": "worker",
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "description": "Filter results where worker matches value"
          },
          {
            "in": "query",
            "name": "worker__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uri"
              }
            },
            "description": "Filter results where worker is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Tasks"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTaskResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/tasks/{pulp_id}/": {
      "get": {
        "operationId": "_api_pulp_api_v3_tasks_{pulp_id}_tasks_read",
        "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
        "summary": "Inspect a task",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this task.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Tasks"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "tasks_cancel",
        "description": "This operation cancels a task.",
        "summary": "Cancel a task",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this task.",
            "required": true
          }
        ],
        "tags": ["Tasks"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTaskCancel"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTaskCancel"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTaskCancel"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            },
            "description": ""
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "tasks_delete",
        "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
        "summary": "Delete a task",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this task.",
            "required": true
          }
        ],
        "tags": ["Tasks"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/pulp/api/v3/tasks/{pulp_id}/add_role/": {
      "post": {
        "operationId": "tasks_add_role",
        "description": "Add a role for this object to users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this task.",
            "required": true
          }
        ],
        "tags": ["Tasks"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/tasks/{pulp_id}/list_roles/": {
      "get": {
        "operationId": "tasks_list_roles",
        "description": "List roles assigned to this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this task.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Tasks"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectRolesResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/tasks/{pulp_id}/my_permissions/": {
      "get": {
        "operationId": "tasks_my_permissions",
        "description": "List permissions available to the current user on this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this task.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Tasks"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyPermissionsResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/tasks/{pulp_id}/remove_role/": {
      "post": {
        "operationId": "tasks_remove_role",
        "description": "Remove a role for this object from users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this task.",
            "required": true
          }
        ],
        "tags": ["Tasks"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NestedRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/tasks/purge/": {
      "post": {
        "operationId": "tasks_purge",
        "description": "Trigger an asynchronous task that deletes completed tasks that finished prior to a specified timestamp.",
        "summary": "Purge Completed Tasks",
        "tags": ["Tasks"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Purge"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Purge"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Purge"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/uploads/": {
      "get": {
        "operationId": "uploads_list",
        "description": "View for chunked uploads.",
        "summary": "List uploads",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-size",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "size"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `size` - Size\n* `-size` - Size (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where size matches value"
          },
          {
            "in": "query",
            "name": "size__gt",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where size is greater than value"
          },
          {
            "in": "query",
            "name": "size__lt",
            "schema": {
              "type": "integer"
            },
            "description": "Filter results where size is less than value"
          },
          {
            "in": "query",
            "name": "size__range",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter results where size is between two comma separated values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Uploads"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUploadResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "uploads_create",
        "description": "View for chunked uploads.",
        "summary": "Create an upload",
        "tags": ["Uploads"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Upload"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Upload"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Upload"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/uploads/{pulp_id}/": {
      "get": {
        "operationId": "uploads_read",
        "description": "View for chunked uploads.",
        "summary": "Inspect an upload",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this upload.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Uploads"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadDetailResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "uploads_update",
        "description": "Upload a chunk for an upload.",
        "summary": "Upload a file chunk",
        "parameters": [
          {
            "in": "header",
            "name": "Content-Range",
            "schema": {
              "type": "string"
            },
            "description": "The Content-Range header specifies the location of the file chunk within the file.",
            "required": true
          },
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this upload.",
            "required": true
          }
        ],
        "tags": ["Uploads"],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadChunk"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UploadChunk"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "uploads_delete",
        "description": "View for chunked uploads.",
        "summary": "Delete an upload",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this upload.",
            "required": true
          }
        ],
        "tags": ["Uploads"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/pulp/api/v3/uploads/{pulp_id}/add_role/": {
      "post": {
        "operationId": "uploads_add_role",
        "description": "Add a role for this object to users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this upload.",
            "required": true
          }
        ],
        "tags": ["Uploads"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Upload"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Upload"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Upload"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/uploads/{pulp_id}/commit/": {
      "post": {
        "operationId": "uploads_commit",
        "description": "Queues a Task that creates an Artifact, and the Upload gets deleted and cannot be re-used.",
        "summary": "Finish an Upload",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this upload.",
            "required": true
          }
        ],
        "tags": ["Uploads"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadCommit"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UploadCommit"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadCommit"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/uploads/{pulp_id}/list_roles/": {
      "get": {
        "operationId": "uploads_list_roles",
        "description": "List roles assigned to this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this upload.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Uploads"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectRolesResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/uploads/{pulp_id}/my_permissions/": {
      "get": {
        "operationId": "uploads_my_permissions",
        "description": "List permissions available to the current user on this object.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this upload.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Uploads"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyPermissionsResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/uploads/{pulp_id}/remove_role/": {
      "post": {
        "operationId": "uploads_remove_role",
        "description": "Remove a role for this object from users/groups.",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this upload.",
            "required": true
          }
        ],
        "tags": ["Uploads"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Upload"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Upload"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Upload"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/upstream-pulps/": {
      "get": {
        "operationId": "upstream_pulps_list",
        "description": "API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.",
        "summary": "List upstream pulps",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Upstream-Pulps"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUpstreamPulpResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "upstream_pulps_create",
        "description": "API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.",
        "summary": "Create an upstream pulp",
        "tags": ["Upstream-Pulps"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpstreamPulp"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpstreamPulp"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpstreamPulp"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpstreamPulpResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/upstream-pulps/{pulp_id}/": {
      "get": {
        "operationId": "upstream_pulps_read",
        "description": "API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.",
        "summary": "Inspect an upstream pulp",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this upstream pulp.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Upstream-Pulps"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpstreamPulpResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "upstream_pulps_update",
        "description": "API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.",
        "summary": "Update an upstream pulp",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this upstream pulp.",
            "required": true
          }
        ],
        "tags": ["Upstream-Pulps"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpstreamPulp"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpstreamPulp"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpstreamPulp"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpstreamPulpResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "upstream_pulps_partial_update",
        "description": "API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.",
        "summary": "Update an upstream pulp",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this upstream pulp.",
            "required": true
          }
        ],
        "tags": ["Upstream-Pulps"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUpstreamPulp"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUpstreamPulp"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUpstreamPulp"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpstreamPulpResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "upstream_pulps_delete",
        "description": "API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.",
        "summary": "Delete an upstream pulp",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this upstream pulp.",
            "required": true
          }
        ],
        "tags": ["Upstream-Pulps"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/pulp/api/v3/upstream-pulps/{pulp_id}/replicate/": {
      "post": {
        "operationId": "upstream_pulps_replicate",
        "description": "Trigger an asynchronous repository replication task group. This API is provided as a tech preview.",
        "summary": "Replicate",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this upstream pulp.",
            "required": true
          }
        ],
        "tags": ["Upstream-Pulps"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpstreamPulp"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpstreamPulp"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpstreamPulp"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/users/": {
      "get": {
        "operationId": "users_list",
        "description": "ViewSet for User.",
        "summary": "List users",
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where email matches value"
          },
          {
            "in": "query",
            "name": "email__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where email contains value"
          },
          {
            "in": "query",
            "name": "email__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where email contains value"
          },
          {
            "in": "query",
            "name": "email__iexact",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where email matches value"
          },
          {
            "in": "query",
            "name": "email__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where email is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "first_name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where first_name matches value"
          },
          {
            "in": "query",
            "name": "first_name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where first_name contains value"
          },
          {
            "in": "query",
            "name": "first_name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where first_name contains value"
          },
          {
            "in": "query",
            "name": "first_name__iexact",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where first_name matches value"
          },
          {
            "in": "query",
            "name": "first_name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where first_name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "is_active",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter results where is_active matches value"
          },
          {
            "in": "query",
            "name": "is_staff",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter results where is_staff matches value"
          },
          {
            "in": "query",
            "name": "last_name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where last_name matches value"
          },
          {
            "in": "query",
            "name": "last_name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where last_name contains value"
          },
          {
            "in": "query",
            "name": "last_name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where last_name contains value"
          },
          {
            "in": "query",
            "name": "last_name__iexact",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where last_name matches value"
          },
          {
            "in": "query",
            "name": "last_name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where last_name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-date_joined",
                  "-email",
                  "-first_name",
                  "-id",
                  "-is_active",
                  "-is_staff",
                  "-is_superuser",
                  "-last_login",
                  "-last_name",
                  "-password",
                  "-pk",
                  "-username",
                  "date_joined",
                  "email",
                  "first_name",
                  "id",
                  "is_active",
                  "is_staff",
                  "is_superuser",
                  "last_login",
                  "last_name",
                  "password",
                  "pk",
                  "username"
                ]
              }
            },
            "description": "Ordering\n\n* `id` - Id\n* `-id` - Id (descending)\n* `password` - Password\n* `-password` - Password (descending)\n* `last_login` - Last login\n* `-last_login` - Last login (descending)\n* `is_superuser` - Is superuser\n* `-is_superuser` - Is superuser (descending)\n* `username` - Username\n* `-username` - Username (descending)\n* `first_name` - First name\n* `-first_name` - First name (descending)\n* `last_name` - Last name\n* `-last_name` - Last name (descending)\n* `email` - Email\n* `-email` - Email (descending)\n* `is_staff` - Is staff\n* `-is_staff` - Is staff (descending)\n* `is_active` - Is active\n* `-is_active` - Is active (descending)\n* `date_joined` - Date joined\n* `-date_joined` - Date joined (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "username",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where username matches value"
          },
          {
            "in": "query",
            "name": "username__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where username contains value"
          },
          {
            "in": "query",
            "name": "username__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where username contains value"
          },
          {
            "in": "query",
            "name": "username__iexact",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where username matches value"
          },
          {
            "in": "query",
            "name": "username__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where username is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Users"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUserResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "users_create",
        "description": "ViewSet for User.",
        "summary": "Create an user",
        "tags": ["Users"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/users/{id}/": {
      "get": {
        "operationId": "users_read",
        "description": "ViewSet for User.",
        "summary": "Inspect an user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A unique integer value identifying this user.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Users"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "users_update",
        "description": "ViewSet for User.",
        "summary": "Update an user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A unique integer value identifying this user.",
            "required": true
          }
        ],
        "tags": ["Users"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "users_partial_update",
        "description": "ViewSet for User.",
        "summary": "Update an user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A unique integer value identifying this user.",
            "required": true
          }
        ],
        "tags": ["Users"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUser"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUser"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUser"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "users_delete",
        "description": "ViewSet for User.",
        "summary": "Delete an user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A unique integer value identifying this user.",
            "required": true
          }
        ],
        "tags": ["Users"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/pulp/api/v3/users/{user_pk}/roles/": {
      "get": {
        "operationId": "users_roles_list",
        "description": "ViewSet for UserRole.",
        "summary": "List user roles",
        "parameters": [
          {
            "in": "query",
            "name": "content_object",
            "schema": {
              "type": "string"
            },
            "description": "content_object"
          },
          {
            "in": "query",
            "name": "domain",
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "description": "Foreign Key referenced by HREF"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-description",
                  "-pk",
                  "-pulp_created",
                  "-role",
                  "description",
                  "pk",
                  "pulp_created",
                  "role"
                ]
              }
            },
            "description": "Ordering\n\n* `role` - Role\n* `-role` - Role (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "role__contains",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "role__icontains",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "role__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "role__startswith",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "user_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Users: Roles"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUserRoleResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "users_roles_create",
        "description": "ViewSet for UserRole.",
        "summary": "Create an user role",
        "parameters": [
          {
            "in": "path",
            "name": "user_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Users: Roles"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UserRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UserRole"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/users/{user_pk}/roles/{pulp_id}/": {
      "get": {
        "operationId": "users_roles_read",
        "description": "ViewSet for UserRole.",
        "summary": "Inspect an user role",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this user role.",
            "required": true
          },
          {
            "in": "path",
            "name": "user_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Users: Roles"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "users_roles_delete",
        "description": "ViewSet for UserRole.",
        "summary": "Delete an user role",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this user role.",
            "required": true
          },
          {
            "in": "path",
            "name": "user_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Users: Roles"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/pulp/api/v3/workers/": {
      "get": {
        "operationId": "workers_list",
        "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
        "summary": "List workers",
        "parameters": [
          {
            "in": "query",
            "name": "last_heartbeat",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where last_heartbeat matches value"
          },
          {
            "in": "query",
            "name": "last_heartbeat__gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where last_heartbeat is greater than value"
          },
          {
            "in": "query",
            "name": "last_heartbeat__gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where last_heartbeat is greater than or equal to value"
          },
          {
            "in": "query",
            "name": "last_heartbeat__lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where last_heartbeat is less than value"
          },
          {
            "in": "query",
            "name": "last_heartbeat__lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where last_heartbeat is less than or equal to value"
          },
          {
            "in": "query",
            "name": "last_heartbeat__range",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            },
            "description": "Filter results where last_heartbeat is between two comma separated values",
            "explode": false,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "missing",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "online",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-last_heartbeat",
                  "-name",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-versions",
                  "last_heartbeat",
                  "name",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "versions"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `last_heartbeat` - Last heartbeat\n* `-last_heartbeat` - Last heartbeat (descending)\n* `versions` - Versions\n* `-versions` - Versions (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Workers"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedWorkerResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/pulp/api/v3/workers/{pulp_id}/": {
      "get": {
        "operationId": "workers_read",
        "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
        "summary": "Inspect a worker",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this worker.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Workers"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkerResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v1/": {
      "get": {
        "operationId": "api_v1_get",
        "tags": ["Api: V1"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/v1/imports/": {
      "get": {
        "operationId": "api_v1_imports_get_task",
        "description": "Get a pulp task via the transformed v1 integer task id.",
        "tags": ["Api: Imports"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegacyTaskDetailResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "api_v1_imports_create",
        "description": "Legacy role imports.",
        "tags": ["Api: Imports"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LegacyImport"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/LegacyImport"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/LegacyImport"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegacyImportResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v1/namespaces/": {
      "get": {
        "operationId": "api_v1_namespaces_list",
        "description": "A list of legacy namespaces.\n\nThe community UI has a view to list all legacy authors.\nEach author is clickable and brings the browser to a\npage with a list of roles created by the author.\n\nRather than make a hacky unmaintable viewset that\naggregates usernames from the roles, this viewset\ngoes directly to the legacy namespace/user table.\n\nWe do not want to create this view from v3 namespaces\nbecause many/most legacy namespaces do not conform\nto the v3 namespace character requirements.\n\nTODO: allow edits of the avatar url\nTODO: allow mapping to a real namespace",
        "summary": "List legacy namespaces",
        "parameters": [
          {
            "in": "query",
            "name": "created",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "keywords",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["-created", "-name", "created", "name"]
              }
            },
            "description": "Ordering\n\n* `created` - Created\n* `-created` - Created (descending)\n* `name` - Name\n* `-name` - Name (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedLegacyNamespacesResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v1/namespaces/{id}/": {
      "get": {
        "operationId": "api_v1_namespaces_read",
        "description": "A list of legacy namespaces.\n\nThe community UI has a view to list all legacy authors.\nEach author is clickable and brings the browser to a\npage with a list of roles created by the author.\n\nRather than make a hacky unmaintable viewset that\naggregates usernames from the roles, this viewset\ngoes directly to the legacy namespace/user table.\n\nWe do not want to create this view from v3 namespaces\nbecause many/most legacy namespaces do not conform\nto the v3 namespace character requirements.\n\nTODO: allow edits of the avatar url\nTODO: allow mapping to a real namespace",
        "summary": "Inspect a legacy namespace",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegacyNamespacesResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "api_v1_namespaces_delete",
        "description": "A list of legacy namespaces.\n\nThe community UI has a view to list all legacy authors.\nEach author is clickable and brings the browser to a\npage with a list of roles created by the author.\n\nRather than make a hacky unmaintable viewset that\naggregates usernames from the roles, this viewset\ngoes directly to the legacy namespace/user table.\n\nWe do not want to create this view from v3 namespaces\nbecause many/most legacy namespaces do not conform\nto the v3 namespace character requirements.\n\nTODO: allow edits of the avatar url\nTODO: allow mapping to a real namespace",
        "summary": "Delete a legacy namespace",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": ["Api: Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/v1/namespaces/{id}/owners/": {
      "get": {
        "operationId": "api_v1_namespaces_owners_list",
        "description": "LegacyNamespace owners.\n\nEach owner has the permissions to:\n    * modify the namespace owners\n    * delete the namespace and it's roles\n    * import new roles and versions for the namespace",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Namespaces Owners"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LegacyUserResponse"
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "api_v1_namespaces_owners_update",
        "description": "LegacyNamespace owners.\n\nEach owner has the permissions to:\n    * modify the namespace owners\n    * delete the namespace and it's roles\n    * import new roles and versions for the namespace",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": ["Api: Namespaces Owners"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LegacyNamespaceOwner"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LegacyNamespaceOwner"
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LegacyNamespaceOwner"
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LegacyUserResponse"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v1/removerole/": {
      "delete": {
        "operationId": "api_v1_removerole_delete_by_url_params",
        "description": "A list of legacy roles.",
        "tags": ["Api: Removerole"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/v1/roles/": {
      "get": {
        "operationId": "api_v1_roles_list",
        "description": "A list of legacy roles.",
        "summary": "List legacy roles",
        "parameters": [
          {
            "in": "query",
            "name": "autocomplete",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "github_user",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keywords",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "owner__username",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["-full_metadata__created", "full_metadata__created"]
              }
            },
            "description": "Ordering\n\n* `full_metadata__created` - Full metadata  created\n* `-full_metadata__created` - Full metadata  created (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "tag",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Roles"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedLegacyRoleResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v1/roles/{id}/": {
      "get": {
        "operationId": "api_v1_roles_read",
        "description": "A list of legacy roles.",
        "summary": "Inspect a legacy role",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Roles"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegacyRoleResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "api_v1_roles_delete",
        "description": "Delete a single role.",
        "summary": "Delete a legacy role",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": ["Api: Roles"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/v1/roles/{id}/content/": {
      "get": {
        "operationId": "api_v1_roles_content_read",
        "description": "Documentation for a single legacy role.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Roles Content"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegacyRoleContentResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v1/roles/{id}/versions/": {
      "get": {
        "operationId": "api_v1_roles_versions_read",
        "description": "A list of versions for a single legacy role.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Roles Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegacyRoleVersionsResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v1/search/roles/": {
      "get": {
        "operationId": "api_v1_search_roles_list",
        "description": "A list of legacy roles.",
        "summary": "List legacy roles",
        "parameters": [
          {
            "in": "query",
            "name": "autocomplete",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "github_user",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keywords",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "owner__username",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["-full_metadata__created", "full_metadata__created"]
              }
            },
            "description": "Ordering\n\n* `full_metadata__created` - Full metadata  created\n* `-full_metadata__created` - Full metadata  created (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "tag",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Search Roles"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedLegacyRoleResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v1/sync/": {
      "post": {
        "operationId": "api_v1_sync_create",
        "description": "Load roles from an upstream v1 source.",
        "tags": ["Api: Sync"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LegacySync"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/LegacySync"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/LegacySync"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegacySyncTaskResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v1/sync/{id}/": {
      "get": {
        "operationId": "api_v1_sync_get_task",
        "description": "Get a pulp task via the transformed v1 integer task id.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Sync"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegacyTaskDetailResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v1/tasks/{id}/": {
      "get": {
        "operationId": "api_v1_tasks_get_task",
        "description": "Get a pulp task via the transformed v1 integer task id.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Tasks"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegacyTaskDetailResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v1/users/": {
      "get": {
        "operationId": "api_v1_users_list",
        "description": "A list of legacy users.\n\nThe community UI has a view to list all legacy users.\nEach user is clickable and brings the browser to a\npage with a list of roles created by the user.",
        "summary": "List users",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["-username", "username"]
              }
            },
            "description": "Ordering\n\n* `username` - Username\n* `-username` - Username (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "username",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Users"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedLegacyUserResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v1/users/{id}/": {
      "get": {
        "operationId": "api_v1_users_read",
        "description": "Get a single user.",
        "summary": "Inspect an user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Users"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegacyUserResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v3/": {
      "get": {
        "operationId": "api_v3_read",
        "description": "Legacy v3 endpoint.",
        "tags": ["Api: V3"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoMetadataResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v3/artifacts/collections/": {
      "post": {
        "operationId": "api_v3_artifacts_collections_create",
        "description": "Create an artifact and trigger an asynchronous task to create Collection content from it.",
        "summary": "Upload a collection",
        "tags": ["Pulp_Ansible: Artifacts Collections V3"],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CollectionUploadWithDownloadUrl"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CollectionUploadWithDownloadUrl"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v3/artifacts/collections/{path}/{filename}": {
      "get": {
        "operationId": "api_v3_artifacts_collections_get",
        "description": "Download collection.",
        "parameters": [
          {
            "in": "path",
            "name": "filename",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Artifacts Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/v3/auth/token/": {
      "post": {
        "operationId": "api_v3_auth_token_post",
        "description": "Create or refresh user token.",
        "tags": ["Api: Auth Token"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      },
      "delete": {
        "operationId": "api_v3_auth_token_delete",
        "description": "Invalidate user token.",
        "tags": ["Api: Auth Token"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/v3/collection_versions/all/": {
      "get": {
        "operationId": "api_v3_collection_versions_all_get",
        "tags": ["Api: Collection_Versions All"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/v3/collections/": {
      "get": {
        "operationId": "api_v3_collections_list",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "query",
            "name": "deprecated",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-name",
                  "-namespace",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "name",
                  "namespace",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCollectionResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v3/collections/{namespace}/{name}/": {
      "get": {
        "operationId": "api_v3_collections_read",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "api_v3_collections_update",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: Collections"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCollection"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCollection"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCollection"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "api_v3_collections_delete",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v3/collections/{namespace}/{name}/versions/": {
      "get": {
        "operationId": "api_v3_collections_versions_list",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "query",
            "name": "is_highest",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-authors",
                  "-contents",
                  "-dependencies",
                  "-description",
                  "-docs_blob",
                  "-documentation",
                  "-files",
                  "-homepage",
                  "-is_highest",
                  "-issues",
                  "-license",
                  "-manifest",
                  "-name",
                  "-namespace",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-repository",
                  "-requires_ansible",
                  "-search_vector",
                  "-timestamp_of_interest",
                  "-upstream_id",
                  "-version",
                  "authors",
                  "contents",
                  "dependencies",
                  "description",
                  "docs_blob",
                  "documentation",
                  "files",
                  "homepage",
                  "is_highest",
                  "issues",
                  "license",
                  "manifest",
                  "name",
                  "namespace",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type",
                  "repository",
                  "requires_ansible",
                  "search_vector",
                  "timestamp_of_interest",
                  "upstream_id",
                  "version"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `authors` - Authors\n* `-authors` - Authors (descending)\n* `contents` - Contents\n* `-contents` - Contents (descending)\n* `dependencies` - Dependencies\n* `-dependencies` - Dependencies (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `docs_blob` - Docs blob\n* `-docs_blob` - Docs blob (descending)\n* `manifest` - Manifest\n* `-manifest` - Manifest (descending)\n* `files` - Files\n* `-files` - Files (descending)\n* `documentation` - Documentation\n* `-documentation` - Documentation (descending)\n* `homepage` - Homepage\n* `-homepage` - Homepage (descending)\n* `issues` - Issues\n* `-issues` - Issues (descending)\n* `license` - License\n* `-license` - License (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `repository` - Repository\n* `-repository` - Repository (descending)\n* `version` - Version\n* `-version` - Version (descending)\n* `requires_ansible` - Requires ansible\n* `-requires_ansible` - Requires ansible (descending)\n* `is_highest` - Is highest\n* `-is_highest` - Is highest (descending)\n* `search_vector` - Search vector\n* `-search_vector` - Search vector (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "repository_version",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_added",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_removed",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "string"
            },
            "description": "Filter by comma separate list of tags that must all be matched"
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where version matches value"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Collections Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCollectionVersionListResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v3/collections/{namespace}/{name}/versions/{version}/": {
      "get": {
        "operationId": "api_v3_collections_versions_read",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Collections Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "api_v3_collections_versions_delete",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: Collections Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v3/collections/{namespace}/{name}/versions/{version}/copy/{source_path}/{dest_path}/": {
      "post": {
        "operationId": "api_v3_collections_versions_copy_copy_content",
        "description": "Copy collection version from one  repository to another.",
        "parameters": [
          {
            "in": "path",
            "name": "dest_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "source_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: Collections Versions Copy"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/": {
      "get": {
        "operationId": "api_v3_collections_versions_docs_blob_read",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Collections Versions Docs-Blob"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionDocsResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v3/collections/{namespace}/{name}/versions/{version}/move/{source_path}/{dest_path}/": {
      "post": {
        "operationId": "api_v3_collections_versions_move_move_content",
        "description": "Remove content from source repo and add to destination repo.\n\nCreates new RepositoryVersion of source repo without content included.\nCreates new RepositoryVersion of destination repo with content included.",
        "parameters": [
          {
            "in": "path",
            "name": "dest_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "source_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: Collections Versions Move"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/v3/collections/all/": {
      "get": {
        "operationId": "api_v3_collections_all_get",
        "tags": ["Api: Collections All"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/v3/excludes/": {
      "get": {
        "operationId": "api_v3_excludes_read",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["json", "yaml"]
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Excludes"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/v3/imports/collections/{task}/": {
      "get": {
        "operationId": "api_v3_imports_collections_read",
        "description": "Legacy v3 endpoint.",
        "summary": "Inspect a collection import",
        "parameters": [
          {
            "in": "path",
            "name": "task",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A unique value identifying this collection import.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Imports Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionImportDetailResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v3/namespaces/": {
      "get": {
        "operationId": "api_v3_namespaces_list",
        "summary": "List namespaces",
        "parameters": [
          {
            "in": "query",
            "name": "company",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keywords",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["-company", "-id", "-name", "company", "id", "name"]
              }
            },
            "description": "Ordering\n\n* `name` - Name\n* `-name` - Name (descending)\n* `company` - Company\n* `-company` - Company (descending)\n* `id` - Id\n* `-id` - Id (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedNamespaceSummaryResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "api_v3_namespaces_create",
        "description": "Override to validate for name duplication before serializer validation.",
        "summary": "Create a namespace",
        "tags": ["Api: Namespaces"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Namespace"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Namespace"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Namespace"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NamespaceResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v3/namespaces/{name}/": {
      "get": {
        "operationId": "api_v3_namespaces_read",
        "summary": "Inspect a namespace",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NamespaceResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "api_v3_namespaces_update",
        "summary": "Update a namespace",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: Namespaces"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Namespace"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Namespace"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Namespace"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NamespaceResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "api_v3_namespaces_partial_update",
        "summary": "Update a namespace",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: Namespaces"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedNamespace"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedNamespace"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedNamespace"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NamespaceResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "api_v3_namespaces_delete",
        "description": "Delete a namespace.\n\n1. Perform a check to see if there are any collections in the namespace.\n   If there are, return a failure.\n2. Delete the pulp distro and repository\n3. Delete the namespace object.\n\nreturn: Response(status=204)",
        "summary": "Delete a namespace",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/v3/openapi.json": {
      "get": {
        "operationId": "api_v3_openapi.json_get",
        "description": "OpenApi3 schema for this API. Format can be selected via content negotiation.\n\n- YAML: application/vnd.oai.openapi\n- JSON: application/vnd.oai.openapi+json",
        "parameters": [
          {
            "in": "query",
            "name": "lang",
            "schema": {
              "type": "string",
              "enum": ["en-us", "es", "fr", "ja", "ko", "nl", "zh-hans"]
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Openapi.Json"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.oai.openapi+json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v3/openapi.yaml": {
      "get": {
        "operationId": "api_v3_openapi.yaml_get",
        "description": "OpenApi3 schema for this API. Format can be selected via content negotiation.\n\n- YAML: application/vnd.oai.openapi\n- JSON: application/vnd.oai.openapi+json",
        "parameters": [
          {
            "in": "query",
            "name": "lang",
            "schema": {
              "type": "string",
              "enum": ["en-us", "es", "fr", "ja", "ko", "nl", "zh-hans"]
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Openapi.Yaml"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.oai.openapi": {
                "schema": {
                  "type": "object"
                }
              },
              "application/yaml": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v3/plugin/ansible/client-configuration/": {
      "get": {
        "operationId": "api_v3_plugin_ansible_client_configuration_read",
        "description": "Return configurations for the ansible-galaxy client.",
        "tags": ["Api: Plugin Ansible Client-Configuration"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientConfigurationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v3/plugin/ansible/content/{distro_base_path}/collections/": {
      "get": {
        "operationId": "api_v3_plugin_ansible_content_collections_read",
        "description": "ViewSet for Repository Metadata.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Plugin Ansible Content Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoMetadataResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/": {
      "get": {
        "operationId": "api_v3_plugin_ansible_content_collections_all_collections_list",
        "description": "Unpaginated ViewSet for Collections.",
        "parameters": [
          {
            "in": "query",
            "name": "deprecated",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-name",
                  "-namespace",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "name",
                  "namespace",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Plugin Ansible Content Collections All-Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CollectionResponse"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/": {
      "get": {
        "operationId": "api_v3_plugin_ansible_content_collections_all_versions_list",
        "description": "Returns paginated CollectionVersions list.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Plugin Ansible Content Collections All-Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UnpaginatedCollectionVersionResponse"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/": {
      "post": {
        "operationId": "api_v3_plugin_ansible_content_collections_artifacts_create",
        "description": "Create an artifact and trigger an asynchronous task to create Collection content from it.",
        "summary": "Upload a collection",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Pulp_Ansible: Artifacts Collections V3"],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CollectionUploadWithDownloadUrl"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CollectionUploadWithDownloadUrl"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}": {
      "get": {
        "operationId": "api_v3_plugin_ansible_content_collections_artifacts_download",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "filename",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Plugin Ansible Content Collections Artifacts"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/": {
      "get": {
        "operationId": "api_v3_plugin_ansible_content_collections_index_list",
        "description": "ViewSet for Collections.",
        "parameters": [
          {
            "in": "query",
            "name": "deprecated",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-name",
                  "-namespace",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "name",
                  "namespace",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Plugin Ansible Content Collections Index"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCollectionResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/": {
      "get": {
        "operationId": "api_v3_plugin_ansible_content_collections_index_read",
        "description": "ViewSet for Collections.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Plugin Ansible Content Collections Index"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "api_v3_plugin_ansible_content_collections_index_update",
        "description": "Trigger an asynchronous update task",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: Plugin Ansible Content Collections Index"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCollection"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCollection"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCollection"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "api_v3_plugin_ansible_content_collections_index_delete",
        "description": "Trigger an asynchronous delete task",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: Plugin Ansible Content Collections Index"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/": {
      "get": {
        "operationId": "api_v3_plugin_ansible_content_collections_index_versions_list",
        "description": "Returns paginated CollectionVersions list.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "is_highest",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-authors",
                  "-contents",
                  "-dependencies",
                  "-description",
                  "-docs_blob",
                  "-documentation",
                  "-files",
                  "-homepage",
                  "-is_highest",
                  "-issues",
                  "-license",
                  "-manifest",
                  "-name",
                  "-namespace",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-repository",
                  "-requires_ansible",
                  "-search_vector",
                  "-timestamp_of_interest",
                  "-upstream_id",
                  "-version",
                  "authors",
                  "contents",
                  "dependencies",
                  "description",
                  "docs_blob",
                  "documentation",
                  "files",
                  "homepage",
                  "is_highest",
                  "issues",
                  "license",
                  "manifest",
                  "name",
                  "namespace",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type",
                  "repository",
                  "requires_ansible",
                  "search_vector",
                  "timestamp_of_interest",
                  "upstream_id",
                  "version"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `authors` - Authors\n* `-authors` - Authors (descending)\n* `contents` - Contents\n* `-contents` - Contents (descending)\n* `dependencies` - Dependencies\n* `-dependencies` - Dependencies (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `docs_blob` - Docs blob\n* `-docs_blob` - Docs blob (descending)\n* `manifest` - Manifest\n* `-manifest` - Manifest (descending)\n* `files` - Files\n* `-files` - Files (descending)\n* `documentation` - Documentation\n* `-documentation` - Documentation (descending)\n* `homepage` - Homepage\n* `-homepage` - Homepage (descending)\n* `issues` - Issues\n* `-issues` - Issues (descending)\n* `license` - License\n* `-license` - License (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `repository` - Repository\n* `-repository` - Repository (descending)\n* `version` - Version\n* `-version` - Version (descending)\n* `requires_ansible` - Requires ansible\n* `-requires_ansible` - Requires ansible (descending)\n* `is_highest` - Is highest\n* `-is_highest` - Is highest (descending)\n* `search_vector` - Search vector\n* `-search_vector` - Search vector (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "repository_version",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_added",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_removed",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "string"
            },
            "description": "Filter by comma separate list of tags that must all be matched"
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where version matches value"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Plugin Ansible Content Collections Index Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCollectionVersionListResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/": {
      "get": {
        "operationId": "api_v3_plugin_ansible_content_collections_index_versions_read",
        "description": "Returns a CollectionVersion object.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Plugin Ansible Content Collections Index Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "api_v3_plugin_ansible_content_collections_index_versions_delete",
        "description": "Trigger an asynchronous delete task",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: Plugin Ansible Content Collections Index Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/": {
      "get": {
        "operationId": "api_v3_plugin_ansible_content_collections_index_versions_docs_blob_read",
        "description": "Returns a CollectionVersion object.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Plugin Ansible Content Collections Index Versions Docs-Blob"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionDocsResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v3/plugin/ansible/content/{distro_base_path}/namespaces/": {
      "get": {
        "operationId": "api_v3_plugin_ansible_content_namespaces_list",
        "description": "Custom exception handler mixin class.",
        "parameters": [
          {
            "in": "query",
            "name": "company",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company matches value"
          },
          {
            "in": "query",
            "name": "company__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company contains value"
          },
          {
            "in": "query",
            "name": "company__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company contains value"
          },
          {
            "in": "query",
            "name": "company__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where company is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "company__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company starts with value"
          },
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "metadata_sha256",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where metadata_sha256 matches value"
          },
          {
            "in": "query",
            "name": "metadata_sha256__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where metadata_sha256 is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-avatar_sha256",
                  "-company",
                  "-description",
                  "-email",
                  "-links",
                  "-metadata_sha256",
                  "-name",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-resources",
                  "-timestamp_of_interest",
                  "-upstream_id",
                  "avatar_sha256",
                  "company",
                  "description",
                  "email",
                  "links",
                  "metadata_sha256",
                  "name",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type",
                  "resources",
                  "timestamp_of_interest",
                  "upstream_id"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `company` - Company\n* `-company` - Company (descending)\n* `email` - Email\n* `-email` - Email (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `resources` - Resources\n* `-resources` - Resources (descending)\n* `links` - Links\n* `-links` - Links (descending)\n* `avatar_sha256` - Avatar sha256\n* `-avatar_sha256` - Avatar sha256 (descending)\n* `metadata_sha256` - Metadata sha256\n* `-metadata_sha256` - Metadata sha256 (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Plugin Ansible Content Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedansible.AnsibleNamespaceMetadataResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "api_v3_plugin_ansible_content_namespaces_create",
        "description": "Custom exception handler mixin class.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: Plugin Ansible Content Namespaces"],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadata"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadata"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v3/plugin/ansible/content/{distro_base_path}/namespaces/{name}/": {
      "get": {
        "operationId": "api_v3_plugin_ansible_content_namespaces_read",
        "description": "Custom exception handler mixin class.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Plugin Ansible Content Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadataResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "api_v3_plugin_ansible_content_namespaces_partial_update",
        "description": "Custom exception handler mixin class.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: Plugin Ansible Content Namespaces"],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Patchedansible.AnsibleNamespaceMetadata"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Patchedansible.AnsibleNamespaceMetadata"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "api_v3_plugin_ansible_content_namespaces_delete",
        "description": "Try to remove the Namespace if no Collections under Namespace are present.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Api: Plugin Ansible Content Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v3/plugin/ansible/imports/collections/{task}/": {
      "get": {
        "operationId": "api_v3_plugin_ansible_imports_collections_read",
        "description": "Returns a CollectionImport object.",
        "summary": "Inspect a collection import",
        "parameters": [
          {
            "in": "query",
            "name": "since",
            "schema": {
              "type": "string"
            },
            "description": "Filter messages since a given timestamp"
          },
          {
            "in": "path",
            "name": "task",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A unique value identifying this collection import.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Plugin Ansible Imports Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionImportDetailResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v3/plugin/ansible/search/collection-versions/": {
      "get": {
        "operationId": "api_v3_plugin_ansible_search_collection_versions_list",
        "description": "A viewset for cross-repo searches.",
        "parameters": [
          {
            "in": "query",
            "name": "dependency",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "deprecated",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "distribution",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter collectionversions that are in these distrubtion ids.",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "distribution_base_path",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter collectionversions that are in these base paths.",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "highest",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "is_deprecated",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "is_highest",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "is_signed",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "keywords",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-name",
                  "-namespace",
                  "-pulp_created",
                  "-version",
                  "name",
                  "namespace",
                  "pulp_created",
                  "version"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_created` - by CV created\n* `-pulp_created` - by CV created (descending)\n* `namespace` - by CV namespace\n* `-namespace` - by CV namespace (descending)\n* `name` - by CV name\n* `-name` - by CV name (descending)\n* `version` - by CV version\n* `-version` - by CV version (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "repository",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter collectionversions that are in these repository ids.",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "repository_label",
            "schema": {
              "type": "string"
            },
            "description": "Filter labels by search string"
          },
          {
            "in": "query",
            "name": "repository_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter collectionversions that are in these repositories.",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "repository_version",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "signed",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "string"
            },
            "description": "Filter by comma separate list of tags that must all be matched"
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "version_range",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Api: Plugin Ansible Search Collection-Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCollectionVersionSearchListResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "api_v3_plugin_ansible_search_collection_versions_rebuild",
        "description": "A viewset for cross-repo searches.",
        "tags": ["Api: Plugin Ansible Search Collection-Versions"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionVersionSearchList"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CollectionVersionSearchList"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CollectionVersionSearchList"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionSearchListResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v3/tasks/": {
      "get": {
        "operationId": "_api_v3_tasks_tasks_list",
        "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
        "summary": "List tasks",
        "parameters": [
          {
            "in": "query",
            "name": "child_tasks",
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "description": "Filter results where child_tasks matches value"
          },
          {
            "in": "query",
            "name": "created_resources",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "exclusive_resources",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exclusive_resources__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "finished_at",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where finished_at matches value"
          },
          {
            "in": "query",
            "name": "finished_at__gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where finished_at is greater than value"
          },
          {
            "in": "query",
            "name": "finished_at__gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where finished_at is greater than or equal to value"
          },
          {
            "in": "query",
            "name": "finished_at__lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where finished_at is less than value"
          },
          {
            "in": "query",
            "name": "finished_at__lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where finished_at is less than or equal to value"
          },
          {
            "in": "query",
            "name": "finished_at__range",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            },
            "description": "Filter results where finished_at is between two comma separated values",
            "explode": false,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "logging_cid",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where logging_cid matches value"
          },
          {
            "in": "query",
            "name": "logging_cid__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where logging_cid contains value"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-args",
                  "-error",
                  "-finished_at",
                  "-kwargs",
                  "-logging_cid",
                  "-name",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-reserved_resources_record",
                  "-started_at",
                  "-state",
                  "args",
                  "error",
                  "finished_at",
                  "kwargs",
                  "logging_cid",
                  "name",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "reserved_resources_record",
                  "started_at",
                  "state"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `state` - State\n* `-state` - State (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `logging_cid` - Logging cid\n* `-logging_cid` - Logging cid (descending)\n* `started_at` - Started at\n* `-started_at` - Started at (descending)\n* `finished_at` - Finished at\n* `-finished_at` - Finished at (descending)\n* `error` - Error\n* `-error` - Error (descending)\n* `args` - Args\n* `-args` - Args (descending)\n* `kwargs` - Kwargs\n* `-kwargs` - Kwargs (descending)\n* `reserved_resources_record` - Reserved resources record\n* `-reserved_resources_record` - Reserved resources record (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "parent_task",
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "description": "Filter results where parent_task matches value"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "reserved_resources",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "reserved_resources__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "reserved_resources_record",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "shared_resources",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "shared_resources__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "started_at",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where started_at matches value"
          },
          {
            "in": "query",
            "name": "started_at__gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where started_at is greater than value"
          },
          {
            "in": "query",
            "name": "started_at__gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where started_at is greater than or equal to value"
          },
          {
            "in": "query",
            "name": "started_at__lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where started_at is less than value"
          },
          {
            "in": "query",
            "name": "started_at__lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter results where started_at is less than or equal to value"
          },
          {
            "in": "query",
            "name": "started_at__range",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            },
            "description": "Filter results where started_at is between two comma separated values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "state",
            "schema": {
              "type": "string",
              "enum": [
                "canceled",
                "canceling",
                "completed",
                "failed",
                "running",
                "skipped",
                "waiting"
              ]
            },
            "description": "Filter results where state matches value\n\n* `waiting` - Waiting\n* `skipped` - Skipped\n* `running` - Running\n* `completed` - Completed\n* `failed` - Failed\n* `canceled` - Canceled\n* `canceling` - Canceling"
          },
          {
            "in": "query",
            "name": "state__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where state is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "task_group",
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "description": "Filter results where task_group matches value"
          },
          {
            "in": "query",
            "name": "worker",
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "description": "Filter results where worker matches value"
          },
          {
            "in": "query",
            "name": "worker__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uri"
              }
            },
            "description": "Filter results where worker is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Tasks"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTaskSummaryResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/v3/tasks/{pulp_id}/": {
      "get": {
        "operationId": "_api_v3_tasks_{pulp_id}_tasks_read",
        "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
        "summary": "Inspect a task",
        "parameters": [
          {
            "in": "path",
            "name": "pulp_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this task.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Tasks"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp/api/{api_path}": {
      "get": {
        "operationId": "pulp_api_get",
        "parameters": [
          {
            "in": "path",
            "name": "api_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp: Api"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/pulp/api/v3/ansible/copy/": {
      "post": {
        "operationId": "copy_content",
        "description": "Trigger an asynchronous task to copy ansible content from one repository into another, creating a new repository version.",
        "summary": "Copy content",
        "tags": ["Pulp: V3 Ansible Copy"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Copy"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Copy"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Copy"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_api_get",
        "description": "Return a response to the \"GET\" action.",
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api"],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v1/roles/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_api_v1_roles_get",
        "description": "APIView for Roles.",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V1 Roles"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedGalaxyRoleResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v1/roles/{role_pk}/versions/": {
      "get": {
        "operationId": "api_v1_roles_versions_list",
        "description": "APIView for Role Versions.",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "role_pk",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V1 Roles Versions"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedGalaxyRoleVersionResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v2/collection-imports/{task}/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_api_v2_collection_imports_read",
        "description": "Returns a CollectionImport object.",
        "summary": "Inspect a collection import",
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "since",
            "schema": {
              "type": "string"
            },
            "description": "Filter messages since a given timestamp"
          },
          {
            "in": "path",
            "name": "task",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A unique value identifying this collection import.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V2 Collection-Imports"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionImportDetailResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v2/collections/": {
      "get": {
        "operationId": "_pulp_ansible_galaxy_{path}_api_v2_collections_pulp_ansible_galaxy_api_v2_collections_get",
        "description": "View for Collection models.",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V2 Collections"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedGalaxyCollectionResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "pulp_ansible_galaxy_api_v2_collections_post",
        "description": "Queues a task that creates a new Collection from an uploaded artifact.",
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Pulp_Ansible: Api V2 Collections"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GalaxyCollection"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/GalaxyCollection"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/GalaxyCollection"
              }
            }
          },
          "required": true
        },
        "deprecated": true,
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GalaxyCollectionResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/": {
      "get": {
        "operationId": "_pulp_ansible_galaxy_{path}_api_v2_collections_{namespace}_{name}_pulp_ansible_galaxy_api_v2_collections_get",
        "description": "Get the detail view of a Collection.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V2 Collections"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GalaxyCollectionResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/versions/": {
      "get": {
        "operationId": "api_v2_collection_versions_list",
        "description": "APIView for Collections by namespace/name.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V2 Collections Versions"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedGalaxyCollectionVersionResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/versions/{version}/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_api_v2_collections_versions_get",
        "description": "Return a response to the \"GET\" action.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V2 Collections Versions"],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v3/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_api_v3_read",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V3"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoMetadataResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v3/artifacts/collections/": {
      "post": {
        "operationId": "pulp_ansible_galaxy_api_v3_artifacts_collections_create",
        "description": "Create an artifact and trigger an asynchronous task to create Collection content from it.",
        "summary": "Upload a collection",
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Pulp_Ansible: Artifacts Collections V3"],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CollectionOneShot"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CollectionOneShot"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v3/artifacts/collections/{path}/{filename}": {
      "get": {
        "operationId": "pulp_ansible_galaxy_api_v3_artifacts_collections_get",
        "description": "Download collection.",
        "parameters": [
          {
            "in": "path",
            "name": "filename",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Artifacts Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v3/collection_versions/all/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_api_v3_collection_versions_all_list",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Collection_Versions All"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UnpaginatedCollectionVersionResponse"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v3/collections/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_api_v3_collections_list",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "query",
            "name": "deprecated",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-name",
                  "-namespace",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "name",
                  "namespace",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCollectionResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_api_v3_collections_read",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "pulp_ansible_galaxy_api_v3_collections_update",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Collections"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCollection"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCollection"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCollection"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "pulp_ansible_galaxy_api_v3_collections_delete",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_api_v3_collections_versions_list",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "query",
            "name": "is_highest",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-authors",
                  "-contents",
                  "-dependencies",
                  "-description",
                  "-docs_blob",
                  "-documentation",
                  "-files",
                  "-homepage",
                  "-is_highest",
                  "-issues",
                  "-license",
                  "-manifest",
                  "-name",
                  "-namespace",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-repository",
                  "-requires_ansible",
                  "-search_vector",
                  "-timestamp_of_interest",
                  "-upstream_id",
                  "-version",
                  "authors",
                  "contents",
                  "dependencies",
                  "description",
                  "docs_blob",
                  "documentation",
                  "files",
                  "homepage",
                  "is_highest",
                  "issues",
                  "license",
                  "manifest",
                  "name",
                  "namespace",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type",
                  "repository",
                  "requires_ansible",
                  "search_vector",
                  "timestamp_of_interest",
                  "upstream_id",
                  "version"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `authors` - Authors\n* `-authors` - Authors (descending)\n* `contents` - Contents\n* `-contents` - Contents (descending)\n* `dependencies` - Dependencies\n* `-dependencies` - Dependencies (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `docs_blob` - Docs blob\n* `-docs_blob` - Docs blob (descending)\n* `manifest` - Manifest\n* `-manifest` - Manifest (descending)\n* `files` - Files\n* `-files` - Files (descending)\n* `documentation` - Documentation\n* `-documentation` - Documentation (descending)\n* `homepage` - Homepage\n* `-homepage` - Homepage (descending)\n* `issues` - Issues\n* `-issues` - Issues (descending)\n* `license` - License\n* `-license` - License (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `repository` - Repository\n* `-repository` - Repository (descending)\n* `version` - Version\n* `-version` - Version (descending)\n* `requires_ansible` - Requires ansible\n* `-requires_ansible` - Requires ansible (descending)\n* `is_highest` - Is highest\n* `-is_highest` - Is highest (descending)\n* `search_vector` - Search vector\n* `-search_vector` - Search vector (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "repository_version",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_added",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_removed",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "string"
            },
            "description": "Filter by comma separate list of tags that must all be matched"
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where version matches value"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Collections Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCollectionVersionListResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_api_v3_collections_versions_read",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Collections Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "pulp_ansible_galaxy_api_v3_collections_versions_delete",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Collections Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_api_v3_collections_versions_docs_blob_read",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Collections Versions Docs-Blob"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionDocsResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v3/collections/all/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_api_v3_collections_all_list",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "query",
            "name": "deprecated",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-name",
                  "-namespace",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "name",
                  "namespace",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Collections All"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CollectionResponse"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v3/imports/collections/{task}/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_api_v3_imports_collections_read",
        "description": "Legacy v3 endpoint.",
        "summary": "Inspect a collection import",
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "task",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A unique value identifying this collection import.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Imports Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionImportDetailResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v3/namespaces/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_api_v3_namespaces_list",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "query",
            "name": "company",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company matches value"
          },
          {
            "in": "query",
            "name": "company__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company contains value"
          },
          {
            "in": "query",
            "name": "company__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company contains value"
          },
          {
            "in": "query",
            "name": "company__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where company is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "company__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company starts with value"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "metadata_sha256",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where metadata_sha256 matches value"
          },
          {
            "in": "query",
            "name": "metadata_sha256__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where metadata_sha256 is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-avatar_sha256",
                  "-company",
                  "-description",
                  "-email",
                  "-links",
                  "-metadata_sha256",
                  "-name",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-resources",
                  "-timestamp_of_interest",
                  "-upstream_id",
                  "avatar_sha256",
                  "company",
                  "description",
                  "email",
                  "links",
                  "metadata_sha256",
                  "name",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type",
                  "resources",
                  "timestamp_of_interest",
                  "upstream_id"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `company` - Company\n* `-company` - Company (descending)\n* `email` - Email\n* `-email` - Email (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `resources` - Resources\n* `-resources` - Resources (descending)\n* `links` - Links\n* `-links` - Links (descending)\n* `avatar_sha256` - Avatar sha256\n* `-avatar_sha256` - Avatar sha256 (descending)\n* `metadata_sha256` - Metadata sha256\n* `-metadata_sha256` - Metadata sha256 (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedansible.AnsibleNamespaceMetadataResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v3/namespaces/{name}/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_api_v3_namespaces_read",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadataResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/client-configuration/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_client_configuration_read",
        "description": "Return configurations for the ansible-galaxy client.",
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Plugin Ansible Client-Configuration"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientConfigurationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_read",
        "description": "ViewSet for Repository Metadata.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Plugin Ansible Content Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoMetadataResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_all_collections_list",
        "description": "Unpaginated ViewSet for Collections.",
        "parameters": [
          {
            "in": "query",
            "name": "deprecated",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-name",
                  "-namespace",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "name",
                  "namespace",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Plugin Ansible Content Collections All-Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CollectionResponse"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_all_versions_list",
        "description": "Returns paginated CollectionVersions list.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Plugin Ansible Content Collections All-Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UnpaginatedCollectionVersionResponse"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/": {
      "post": {
        "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_artifacts_create",
        "description": "Create an artifact and trigger an asynchronous task to create Collection content from it.",
        "summary": "Upload a collection",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Pulp_Ansible: Artifacts Collections V3"],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CollectionOneShot"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CollectionOneShot"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}": {
      "get": {
        "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_artifacts_download",
        "description": "Collection download endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "filename",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Plugin Ansible Content Collections Artifacts"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_list",
        "description": "ViewSet for Collections.",
        "parameters": [
          {
            "in": "query",
            "name": "deprecated",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-name",
                  "-namespace",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "name",
                  "namespace",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Plugin Ansible Content Collections Index"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCollectionResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_read",
        "description": "ViewSet for Collections.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Plugin Ansible Content Collections Index"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_update",
        "description": "Trigger an asynchronous update task",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Plugin Ansible Content Collections Index"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCollection"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCollection"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCollection"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_delete",
        "description": "Trigger an asynchronous delete task",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Plugin Ansible Content Collections Index"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_versions_list",
        "description": "Returns paginated CollectionVersions list.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "is_highest",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-authors",
                  "-contents",
                  "-dependencies",
                  "-description",
                  "-docs_blob",
                  "-documentation",
                  "-files",
                  "-homepage",
                  "-is_highest",
                  "-issues",
                  "-license",
                  "-manifest",
                  "-name",
                  "-namespace",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-repository",
                  "-requires_ansible",
                  "-search_vector",
                  "-timestamp_of_interest",
                  "-upstream_id",
                  "-version",
                  "authors",
                  "contents",
                  "dependencies",
                  "description",
                  "docs_blob",
                  "documentation",
                  "files",
                  "homepage",
                  "is_highest",
                  "issues",
                  "license",
                  "manifest",
                  "name",
                  "namespace",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type",
                  "repository",
                  "requires_ansible",
                  "search_vector",
                  "timestamp_of_interest",
                  "upstream_id",
                  "version"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `authors` - Authors\n* `-authors` - Authors (descending)\n* `contents` - Contents\n* `-contents` - Contents (descending)\n* `dependencies` - Dependencies\n* `-dependencies` - Dependencies (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `docs_blob` - Docs blob\n* `-docs_blob` - Docs blob (descending)\n* `manifest` - Manifest\n* `-manifest` - Manifest (descending)\n* `files` - Files\n* `-files` - Files (descending)\n* `documentation` - Documentation\n* `-documentation` - Documentation (descending)\n* `homepage` - Homepage\n* `-homepage` - Homepage (descending)\n* `issues` - Issues\n* `-issues` - Issues (descending)\n* `license` - License\n* `-license` - License (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `repository` - Repository\n* `-repository` - Repository (descending)\n* `version` - Version\n* `-version` - Version (descending)\n* `requires_ansible` - Requires ansible\n* `-requires_ansible` - Requires ansible (descending)\n* `is_highest` - Is highest\n* `-is_highest` - Is highest (descending)\n* `search_vector` - Search vector\n* `-search_vector` - Search vector (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "repository_version",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_added",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_removed",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "string"
            },
            "description": "Filter by comma separate list of tags that must all be matched"
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where version matches value"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Plugin Ansible Content Collections Index Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCollectionVersionListResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_versions_read",
        "description": "Returns a CollectionVersion object.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Plugin Ansible Content Collections Index Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_versions_delete",
        "description": "Trigger an asynchronous delete task",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Plugin Ansible Content Collections Index Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_versions_docs_blob_read",
        "description": "Returns a CollectionVersion object.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": [
          "Pulp_Ansible: Api V3 Plugin Ansible Content Collections Index Versions Docs-Blob"
        ],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionDocsResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/namespaces/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_namespaces_list",
        "description": "Custom exception handler mixin class.",
        "parameters": [
          {
            "in": "query",
            "name": "company",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company matches value"
          },
          {
            "in": "query",
            "name": "company__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company contains value"
          },
          {
            "in": "query",
            "name": "company__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company contains value"
          },
          {
            "in": "query",
            "name": "company__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where company is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "company__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company starts with value"
          },
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "metadata_sha256",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where metadata_sha256 matches value"
          },
          {
            "in": "query",
            "name": "metadata_sha256__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where metadata_sha256 is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-avatar_sha256",
                  "-company",
                  "-description",
                  "-email",
                  "-links",
                  "-metadata_sha256",
                  "-name",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-resources",
                  "-timestamp_of_interest",
                  "-upstream_id",
                  "avatar_sha256",
                  "company",
                  "description",
                  "email",
                  "links",
                  "metadata_sha256",
                  "name",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type",
                  "resources",
                  "timestamp_of_interest",
                  "upstream_id"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `company` - Company\n* `-company` - Company (descending)\n* `email` - Email\n* `-email` - Email (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `resources` - Resources\n* `-resources` - Resources (descending)\n* `links` - Links\n* `-links` - Links (descending)\n* `avatar_sha256` - Avatar sha256\n* `-avatar_sha256` - Avatar sha256 (descending)\n* `metadata_sha256` - Metadata sha256\n* `-metadata_sha256` - Metadata sha256 (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Plugin Ansible Content Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedansible.AnsibleNamespaceMetadataResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_namespaces_create",
        "description": "Custom exception handler mixin class.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Plugin Ansible Content Namespaces"],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadata"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadata"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/namespaces/{name}/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_namespaces_read",
        "description": "Custom exception handler mixin class.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Plugin Ansible Content Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadataResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_namespaces_partial_update",
        "description": "Custom exception handler mixin class.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Plugin Ansible Content Namespaces"],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Patchedansible.AnsibleNamespaceMetadata"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Patchedansible.AnsibleNamespaceMetadata"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_namespaces_delete",
        "description": "Try to remove the Namespace if no Collections under Namespace are present.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Plugin Ansible Content Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/imports/collections/{task}/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_imports_collections_read",
        "description": "Returns a CollectionImport object.",
        "summary": "Inspect a collection import",
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "since",
            "schema": {
              "type": "string"
            },
            "description": "Filter messages since a given timestamp"
          },
          {
            "in": "path",
            "name": "task",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A unique value identifying this collection import.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Plugin Ansible Imports Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionImportDetailResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/search/collection-versions/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_search_collection_versions_list",
        "description": "A viewset for cross-repo searches.",
        "parameters": [
          {
            "in": "query",
            "name": "dependency",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "deprecated",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "distribution",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter collectionversions that are in these distrubtion ids.",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "distribution_base_path",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter collectionversions that are in these base paths.",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "highest",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "is_deprecated",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "is_highest",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "is_signed",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "keywords",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-name",
                  "-namespace",
                  "-pulp_created",
                  "-version",
                  "name",
                  "namespace",
                  "pulp_created",
                  "version"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_created` - by CV created\n* `-pulp_created` - by CV created (descending)\n* `namespace` - by CV namespace\n* `-namespace` - by CV namespace (descending)\n* `name` - by CV name\n* `-name` - by CV name (descending)\n* `version` - by CV version\n* `-version` - by CV version (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "repository",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter collectionversions that are in these repository ids.",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "repository_label",
            "schema": {
              "type": "string"
            },
            "description": "Filter labels by search string"
          },
          {
            "in": "query",
            "name": "repository_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter collectionversions that are in these repositories.",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "repository_version",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "signed",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "string"
            },
            "description": "Filter by comma separate list of tags that must all be matched"
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "version_range",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Plugin Ansible Search Collection-Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCollectionVersionSearchListResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_search_collection_versions_rebuild",
        "description": "A viewset for cross-repo searches.",
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Pulp_Ansible: Api V3 Plugin Ansible Search Collection-Versions"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionVersionSearchList"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CollectionVersionSearchList"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CollectionVersionSearchList"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionSearchListResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/default/api/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_default_api_get",
        "description": "Return a response to the \"GET\" action.",
        "tags": ["Pulp_Ansible: Default Api"],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/pulp_ansible/galaxy/default/api/v3/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_read",
        "description": "Legacy v3 endpoint.",
        "tags": ["Pulp_Ansible: Default Api V3"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoMetadataResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/default/api/v3/artifacts/collections/": {
      "post": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_artifacts_collections_create",
        "description": "Create an artifact and trigger an asynchronous task to create Collection content from it.",
        "summary": "Upload a collection",
        "tags": ["Pulp_Ansible: Artifacts Collections V3"],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CollectionOneShot"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CollectionOneShot"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/default/api/v3/artifacts/collections/{path}/{filename}": {
      "get": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_artifacts_collections_get",
        "description": "Download collection.",
        "parameters": [
          {
            "in": "path",
            "name": "filename",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Default Api V3 Artifacts Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/pulp_ansible/galaxy/default/api/v3/collection_versions/all/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_collection_versions_all_list",
        "description": "Legacy v3 endpoint.",
        "tags": ["Pulp_Ansible: Default Api V3 Collection_Versions All"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UnpaginatedCollectionVersionResponse"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/default/api/v3/collections/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_collections_list",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "query",
            "name": "deprecated",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-name",
                  "-namespace",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "name",
                  "namespace",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Default Api V3 Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCollectionResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_collections_read",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Default Api V3 Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_collections_update",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Pulp_Ansible: Default Api V3 Collections"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCollection"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCollection"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCollection"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_collections_delete",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Pulp_Ansible: Default Api V3 Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_collections_versions_list",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "query",
            "name": "is_highest",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-authors",
                  "-contents",
                  "-dependencies",
                  "-description",
                  "-docs_blob",
                  "-documentation",
                  "-files",
                  "-homepage",
                  "-is_highest",
                  "-issues",
                  "-license",
                  "-manifest",
                  "-name",
                  "-namespace",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-repository",
                  "-requires_ansible",
                  "-search_vector",
                  "-timestamp_of_interest",
                  "-upstream_id",
                  "-version",
                  "authors",
                  "contents",
                  "dependencies",
                  "description",
                  "docs_blob",
                  "documentation",
                  "files",
                  "homepage",
                  "is_highest",
                  "issues",
                  "license",
                  "manifest",
                  "name",
                  "namespace",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type",
                  "repository",
                  "requires_ansible",
                  "search_vector",
                  "timestamp_of_interest",
                  "upstream_id",
                  "version"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `authors` - Authors\n* `-authors` - Authors (descending)\n* `contents` - Contents\n* `-contents` - Contents (descending)\n* `dependencies` - Dependencies\n* `-dependencies` - Dependencies (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `docs_blob` - Docs blob\n* `-docs_blob` - Docs blob (descending)\n* `manifest` - Manifest\n* `-manifest` - Manifest (descending)\n* `files` - Files\n* `-files` - Files (descending)\n* `documentation` - Documentation\n* `-documentation` - Documentation (descending)\n* `homepage` - Homepage\n* `-homepage` - Homepage (descending)\n* `issues` - Issues\n* `-issues` - Issues (descending)\n* `license` - License\n* `-license` - License (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `repository` - Repository\n* `-repository` - Repository (descending)\n* `version` - Version\n* `-version` - Version (descending)\n* `requires_ansible` - Requires ansible\n* `-requires_ansible` - Requires ansible (descending)\n* `is_highest` - Is highest\n* `-is_highest` - Is highest (descending)\n* `search_vector` - Search vector\n* `-search_vector` - Search vector (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "repository_version",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_added",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_removed",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "string"
            },
            "description": "Filter by comma separate list of tags that must all be matched"
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where version matches value"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Default Api V3 Collections Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCollectionVersionListResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_collections_versions_read",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Default Api V3 Collections Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_collections_versions_delete",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Pulp_Ansible: Default Api V3 Collections Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_collections_versions_docs_blob_read",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Default Api V3 Collections Versions Docs-Blob"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionDocsResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/default/api/v3/collections/all/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_collections_all_list",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "query",
            "name": "deprecated",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-name",
                  "-namespace",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "name",
                  "namespace",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Default Api V3 Collections All"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CollectionResponse"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/default/api/v3/imports/collections/{task}/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_imports_collections_read",
        "description": "Legacy v3 endpoint.",
        "summary": "Inspect a collection import",
        "parameters": [
          {
            "in": "path",
            "name": "task",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A unique value identifying this collection import.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Default Api V3 Imports Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionImportDetailResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/default/api/v3/namespaces/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_namespaces_list",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "query",
            "name": "company",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company matches value"
          },
          {
            "in": "query",
            "name": "company__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company contains value"
          },
          {
            "in": "query",
            "name": "company__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company contains value"
          },
          {
            "in": "query",
            "name": "company__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where company is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "company__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company starts with value"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "metadata_sha256",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where metadata_sha256 matches value"
          },
          {
            "in": "query",
            "name": "metadata_sha256__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where metadata_sha256 is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-avatar_sha256",
                  "-company",
                  "-description",
                  "-email",
                  "-links",
                  "-metadata_sha256",
                  "-name",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-resources",
                  "-timestamp_of_interest",
                  "-upstream_id",
                  "avatar_sha256",
                  "company",
                  "description",
                  "email",
                  "links",
                  "metadata_sha256",
                  "name",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type",
                  "resources",
                  "timestamp_of_interest",
                  "upstream_id"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `company` - Company\n* `-company` - Company (descending)\n* `email` - Email\n* `-email` - Email (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `resources` - Resources\n* `-resources` - Resources (descending)\n* `links` - Links\n* `-links` - Links (descending)\n* `avatar_sha256` - Avatar sha256\n* `-avatar_sha256` - Avatar sha256 (descending)\n* `metadata_sha256` - Metadata sha256\n* `-metadata_sha256` - Metadata sha256 (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Default Api V3 Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedansible.AnsibleNamespaceMetadataResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/default/api/v3/namespaces/{name}/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_namespaces_read",
        "description": "Legacy v3 endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Default Api V3 Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "deprecated": true,
        "responses": {
          "302": {
            "description": "No response body"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadataResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/default/api/v3/plugin/ansible/client-configuration/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_client_configuration_read",
        "description": "Return configurations for the ansible-galaxy client.",
        "tags": ["Pulp_Ansible: Default Api V3 Plugin Ansible Client-Configuration"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientConfigurationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_read",
        "description": "ViewSet for Repository Metadata.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Default Api V3 Plugin Ansible Content Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoMetadataResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_all_collections_list",
        "description": "Unpaginated ViewSet for Collections.",
        "parameters": [
          {
            "in": "query",
            "name": "deprecated",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-name",
                  "-namespace",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "name",
                  "namespace",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Default Api V3 Plugin Ansible Content Collections All-Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CollectionResponse"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_all_versions_list",
        "description": "Returns paginated CollectionVersions list.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Default Api V3 Plugin Ansible Content Collections All-Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UnpaginatedCollectionVersionResponse"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/": {
      "post": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_artifacts_create",
        "description": "Create an artifact and trigger an asynchronous task to create Collection content from it.",
        "summary": "Upload a collection",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Pulp_Ansible: Artifacts Collections V3"],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CollectionOneShot"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CollectionOneShot"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}": {
      "get": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_artifacts_download",
        "description": "Collection download endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "filename",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Default Api V3 Plugin Ansible Content Collections Artifacts"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_list",
        "description": "ViewSet for Collections.",
        "parameters": [
          {
            "in": "query",
            "name": "deprecated",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-name",
                  "-namespace",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "name",
                  "namespace",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Default Api V3 Plugin Ansible Content Collections Index"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCollectionResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_read",
        "description": "ViewSet for Collections.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Default Api V3 Plugin Ansible Content Collections Index"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_update",
        "description": "Trigger an asynchronous update task",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Pulp_Ansible: Default Api V3 Plugin Ansible Content Collections Index"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCollection"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCollection"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCollection"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_delete",
        "description": "Trigger an asynchronous delete task",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Pulp_Ansible: Default Api V3 Plugin Ansible Content Collections Index"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_versions_list",
        "description": "Returns paginated CollectionVersions list.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "is_highest",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-authors",
                  "-contents",
                  "-dependencies",
                  "-description",
                  "-docs_blob",
                  "-documentation",
                  "-files",
                  "-homepage",
                  "-is_highest",
                  "-issues",
                  "-license",
                  "-manifest",
                  "-name",
                  "-namespace",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-repository",
                  "-requires_ansible",
                  "-search_vector",
                  "-timestamp_of_interest",
                  "-upstream_id",
                  "-version",
                  "authors",
                  "contents",
                  "dependencies",
                  "description",
                  "docs_blob",
                  "documentation",
                  "files",
                  "homepage",
                  "is_highest",
                  "issues",
                  "license",
                  "manifest",
                  "name",
                  "namespace",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type",
                  "repository",
                  "requires_ansible",
                  "search_vector",
                  "timestamp_of_interest",
                  "upstream_id",
                  "version"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `authors` - Authors\n* `-authors` - Authors (descending)\n* `contents` - Contents\n* `-contents` - Contents (descending)\n* `dependencies` - Dependencies\n* `-dependencies` - Dependencies (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `docs_blob` - Docs blob\n* `-docs_blob` - Docs blob (descending)\n* `manifest` - Manifest\n* `-manifest` - Manifest (descending)\n* `files` - Files\n* `-files` - Files (descending)\n* `documentation` - Documentation\n* `-documentation` - Documentation (descending)\n* `homepage` - Homepage\n* `-homepage` - Homepage (descending)\n* `issues` - Issues\n* `-issues` - Issues (descending)\n* `license` - License\n* `-license` - License (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `repository` - Repository\n* `-repository` - Repository (descending)\n* `version` - Version\n* `-version` - Version (descending)\n* `requires_ansible` - Requires ansible\n* `-requires_ansible` - Requires ansible (descending)\n* `is_highest` - Is highest\n* `-is_highest` - Is highest (descending)\n* `search_vector` - Search vector\n* `-search_vector` - Search vector (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "repository_version",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_added",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "repository_version_removed",
            "schema": {
              "type": "string"
            },
            "description": "Repository Version referenced by HREF"
          },
          {
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "string"
            },
            "description": "Filter by comma separate list of tags that must all be matched"
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where version matches value"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Default Api V3 Plugin Ansible Content Collections Index Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCollectionVersionListResponseList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_versions_read",
        "description": "Returns a CollectionVersion object.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Default Api V3 Plugin Ansible Content Collections Index Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_versions_delete",
        "description": "Trigger an asynchronous delete task",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Pulp_Ansible: Default Api V3 Plugin Ansible Content Collections Index Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_versions_docs_blob_read",
        "description": "Returns a CollectionVersion object.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": [
          "Pulp_Ansible: Default Api V3 Plugin Ansible Content Collections Index Versions Docs-Blob"
        ],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionDocsResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/namespaces/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_namespaces_list",
        "description": "Custom exception handler mixin class.",
        "parameters": [
          {
            "in": "query",
            "name": "company",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company matches value"
          },
          {
            "in": "query",
            "name": "company__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company contains value"
          },
          {
            "in": "query",
            "name": "company__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company contains value"
          },
          {
            "in": "query",
            "name": "company__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where company is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "company__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where company starts with value"
          },
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "metadata_sha256",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where metadata_sha256 matches value"
          },
          {
            "in": "query",
            "name": "metadata_sha256__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where metadata_sha256 is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name matches value"
          },
          {
            "in": "query",
            "name": "name__contains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__icontains",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name contains value"
          },
          {
            "in": "query",
            "name": "name__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter results where name is in a comma-separated list of values",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name__startswith",
            "schema": {
              "type": "string"
            },
            "description": "Filter results where name starts with value"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-avatar_sha256",
                  "-company",
                  "-description",
                  "-email",
                  "-links",
                  "-metadata_sha256",
                  "-name",
                  "-pk",
                  "-pulp_created",
                  "-pulp_id",
                  "-pulp_last_updated",
                  "-pulp_type",
                  "-resources",
                  "-timestamp_of_interest",
                  "-upstream_id",
                  "avatar_sha256",
                  "company",
                  "description",
                  "email",
                  "links",
                  "metadata_sha256",
                  "name",
                  "pk",
                  "pulp_created",
                  "pulp_id",
                  "pulp_last_updated",
                  "pulp_type",
                  "resources",
                  "timestamp_of_interest",
                  "upstream_id"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `company` - Company\n* `-company` - Company (descending)\n* `email` - Email\n* `-email` - Email (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `resources` - Resources\n* `-resources` - Resources (descending)\n* `links` - Links\n* `-links` - Links (descending)\n* `avatar_sha256` - Avatar sha256\n* `-avatar_sha256` - Avatar sha256 (descending)\n* `metadata_sha256` - Metadata sha256\n* `-metadata_sha256` - Metadata sha256 (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_href__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pulp_id__in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "Multiple values may be separated by commas.",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Default Api V3 Plugin Ansible Content Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedansible.AnsibleNamespaceMetadataResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_namespaces_create",
        "description": "Custom exception handler mixin class.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Pulp_Ansible: Default Api V3 Plugin Ansible Content Namespaces"],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadata"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadata"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/namespaces/{name}/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_namespaces_read",
        "description": "Custom exception handler mixin class.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Default Api V3 Plugin Ansible Content Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadataResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_namespaces_partial_update",
        "description": "Custom exception handler mixin class.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Pulp_Ansible: Default Api V3 Plugin Ansible Content Namespaces"],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Patchedansible.AnsibleNamespaceMetadata"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Patchedansible.AnsibleNamespaceMetadata"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_namespaces_delete",
        "description": "Try to remove the Namespace if no Collections under Namespace are present.",
        "parameters": [
          {
            "in": "path",
            "name": "distro_base_path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["Pulp_Ansible: Default Api V3 Plugin Ansible Content Namespaces"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/default/api/v3/plugin/ansible/imports/collections/{task}/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_imports_collections_read",
        "description": "Returns a CollectionImport object.",
        "summary": "Inspect a collection import",
        "parameters": [
          {
            "in": "query",
            "name": "since",
            "schema": {
              "type": "string"
            },
            "description": "Filter messages since a given timestamp"
          },
          {
            "in": "path",
            "name": "task",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A unique value identifying this collection import.",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Default Api V3 Plugin Ansible Imports Collections"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionImportDetailResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/pulp_ansible/galaxy/default/api/v3/plugin/ansible/search/collection-versions/": {
      "get": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_search_collection_versions_list",
        "description": "A viewset for cross-repo searches.",
        "parameters": [
          {
            "in": "query",
            "name": "dependency",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "deprecated",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "distribution",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter collectionversions that are in these distrubtion ids.",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "distribution_base_path",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter collectionversions that are in these base paths.",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "highest",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "is_deprecated",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "is_highest",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "is_signed",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "keywords",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-name",
                  "-namespace",
                  "-pulp_created",
                  "-version",
                  "name",
                  "namespace",
                  "pulp_created",
                  "version"
                ]
              }
            },
            "description": "Ordering\n\n* `pulp_created` - by CV created\n* `-pulp_created` - by CV created (descending)\n* `namespace` - by CV namespace\n* `-namespace` - by CV namespace (descending)\n* `name` - by CV name\n* `-name` - by CV name (descending)\n* `version` - by CV version\n* `-version` - by CV version (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "repository",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter collectionversions that are in these repository ids.",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "repository_label",
            "schema": {
              "type": "string"
            },
            "description": "Filter labels by search string"
          },
          {
            "in": "query",
            "name": "repository_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter collectionversions that are in these repositories.",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "repository_version",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "signed",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "string"
            },
            "description": "Filter by comma separate list of tags that must all be matched"
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "version_range",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to include in the response."
          },
          {
            "in": "query",
            "name": "exclude_fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "A list of fields to exclude from the response."
          }
        ],
        "tags": ["Pulp_Ansible: Default Api V3 Plugin Ansible Search Collection-Versions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCollectionVersionSearchListResponseList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_search_collection_versions_rebuild",
        "description": "A viewset for cross-repo searches.",
        "tags": ["Pulp_Ansible: Default Api V3 Plugin Ansible Search Collection-Versions"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionVersionSearchList"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CollectionVersionSearchList"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CollectionVersionSearchList"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionSearchListResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/token/": {
      "get": {
        "operationId": "token_get",
        "description": "Handles GET requests for the /token/ endpoint.",
        "tags": ["Token"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "tokenAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AIIndexDenyListResponse": {
        "type": "object",
        "properties": {
          "scope": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          }
        },
        "required": ["reference", "scope"]
      },
      "AIIndexDenyResultsResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AIIndexDenyListResponse"
            }
          },
          "count": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["count", "results"]
      },
      "AccessPolicy": {
        "type": "object",
        "description": "Serializer for AccessPolicy.",
        "properties": {
          "permissions_assignment": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "List of callables that define the new permissions to be created for new objects.This is deprecated. Use `creation_hooks` instead."
          },
          "creation_hooks": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "List of callables that may associate user roles for new objects."
          },
          "statements": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "List of policy statements defining the policy."
          },
          "queryset_scoping": {
            "type": "object",
            "description": "A callable for performing queryset scoping. See plugin documentation for valid callables. Set to blank to turn off queryset scoping."
          }
        },
        "required": ["statements"]
      },
      "AccessPolicyResponse": {
        "type": "object",
        "description": "Serializer for AccessPolicy.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "permissions_assignment": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "List of callables that define the new permissions to be created for new objects.This is deprecated. Use `creation_hooks` instead."
          },
          "creation_hooks": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "List of callables that may associate user roles for new objects."
          },
          "statements": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "List of policy statements defining the policy."
          },
          "viewset_name": {
            "type": "string",
            "readOnly": true,
            "description": "The name of ViewSet this AccessPolicy authorizes."
          },
          "customized": {
            "type": "boolean",
            "readOnly": true,
            "description": "True if the AccessPolicy has been user-modified. False otherwise."
          },
          "queryset_scoping": {
            "type": "object",
            "description": "A callable for performing queryset scoping. See plugin documentation for valid callables. Set to blank to turn off queryset scoping."
          }
        },
        "required": ["statements"]
      },
      "AddToAIIndexDenyList": {
        "type": "object",
        "properties": {
          "reference": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": ["reference"]
      },
      "AddedToAIIndexDenyListResponse": {
        "type": "object"
      },
      "AnsibleDistributionResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "base_path": {
            "type": "string"
          },
          "content_guard": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["base_path", "created_at", "name", "updated_at"]
      },
      "AnsibleRepositoryMark": {
        "type": "object",
        "description": "A serializer for the mark action.",
        "properties": {
          "content_units": {
            "type": "array",
            "items": {},
            "description": "List of collection version hrefs to mark, use * to mark all content in repository"
          },
          "value": {
            "type": "string",
            "minLength": 1,
            "description": "The string value of this mark.",
            "pattern": "^[-a-zA-Z0-9_]+$"
          }
        },
        "required": ["content_units", "value"]
      },
      "AnsibleRepositoryRebuild": {
        "type": "object",
        "description": "Serializer for Ansible Repository Rebuild.",
        "properties": {
          "namespace": {
            "type": "string",
            "nullable": true,
            "minLength": 1
          },
          "name": {
            "type": "string",
            "nullable": true,
            "minLength": 1
          },
          "version": {
            "type": "string",
            "nullable": true,
            "minLength": 1
          }
        }
      },
      "AnsibleRepositoryResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "next_version": {
            "type": "integer",
            "format": "int64",
            "maximum": 2147483647,
            "minimum": 0
          },
          "distributions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnsibleDistributionResponse"
            },
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_sync_task": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": ["created_at", "name", "updated_at"]
      },
      "AnsibleRepositorySignature": {
        "type": "object",
        "description": "A serializer for the signing action.",
        "properties": {
          "content_units": {
            "type": "array",
            "items": {},
            "description": "List of collection version hrefs to sign, use * to sign all content in repository"
          },
          "signing_service": {
            "type": "string",
            "format": "uri",
            "description": "A signing service to use to sign the collections"
          }
        },
        "required": ["content_units", "signing_service"]
      },
      "AnsibleRepositorySyncURL": {
        "type": "object",
        "description": "Serializer for Ansible Repository Sync URL.",
        "properties": {
          "remote": {
            "type": "string",
            "format": "uri",
            "description": "A remote to sync from. This will override a remote set on repository."
          },
          "mirror": {
            "type": "boolean",
            "default": false,
            "description": "If ``True``, synchronization will remove all content that is not present in the remote repository. If ``False``, sync will be additive only."
          },
          "optimize": {
            "type": "boolean",
            "default": true,
            "description": "Whether to optimize sync or not."
          }
        }
      },
      "Artifact": {
        "type": "object",
        "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "description": "The stored file."
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "description": "The size of the file in bytes."
          },
          "md5": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "The MD5 checksum of the file if available."
          },
          "sha1": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "The SHA-1 checksum of the file if available."
          },
          "sha224": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "The SHA-224 checksum of the file if available."
          },
          "sha256": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "The SHA-256 checksum of the file if available."
          },
          "sha384": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "The SHA-384 checksum of the file if available."
          },
          "sha512": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "The SHA-512 checksum of the file if available."
          }
        },
        "required": ["file"]
      },
      "ArtifactDistributionResponse": {
        "type": "object",
        "description": "A serializer for ArtifactDistribution.",
        "properties": {
          "base_path": {
            "type": "string",
            "description": "The base (relative) path component of the published url. Avoid paths that                     overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\")"
          },
          "name": {
            "type": "string",
            "description": "A unique name. Ex, `rawhide` and `stable`."
          },
          "pulp_labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          },
          "hidden": {
            "type": "boolean",
            "default": false,
            "description": "Whether this distribution should be shown in the content app."
          },
          "base_url": {
            "type": "string",
            "readOnly": true,
            "description": "The URL for accessing the publication as defined by this distribution."
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "content_guard": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "An optional content-guard."
          },
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          }
        },
        "required": ["base_path", "name"]
      },
      "ArtifactRefResponse": {
        "type": "object",
        "description": "A serializer for an Artifact reference.",
        "properties": {
          "filename": {
            "type": "string"
          },
          "sha256": {
            "type": "string"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["filename", "sha256", "size"]
      },
      "ArtifactResponse": {
        "type": "object",
        "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "file": {
            "type": "string",
            "description": "The stored file."
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "description": "The size of the file in bytes."
          },
          "md5": {
            "type": "string",
            "nullable": true,
            "description": "The MD5 checksum of the file if available."
          },
          "sha1": {
            "type": "string",
            "nullable": true,
            "description": "The SHA-1 checksum of the file if available."
          },
          "sha224": {
            "type": "string",
            "nullable": true,
            "description": "The SHA-224 checksum of the file if available."
          },
          "sha256": {
            "type": "string",
            "nullable": true,
            "description": "The SHA-256 checksum of the file if available."
          },
          "sha384": {
            "type": "string",
            "nullable": true,
            "description": "The SHA-384 checksum of the file if available."
          },
          "sha512": {
            "type": "string",
            "nullable": true,
            "description": "The SHA-512 checksum of the file if available."
          }
        },
        "required": ["file"]
      },
      "AsyncOperationResponse": {
        "type": "object",
        "description": "Serializer for asynchronous operations.",
        "properties": {
          "task": {
            "type": "string",
            "format": "uri",
            "description": "The href of the task."
          }
        },
        "required": ["task"]
      },
      "ClientConfigurationResponse": {
        "type": "object",
        "description": "Configuration settings for the ansible-galaxy client.",
        "properties": {
          "default_distribution_path": {
            "type": "string",
            "nullable": true
          }
        },
        "required": ["default_distribution_path"]
      },
      "CollectionImportDetailResponse": {
        "type": "object",
        "description": "A serializer for a CollectionImport detail view.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "state": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "finished_at": {
            "type": "string",
            "format": "date-time"
          },
          "error": {
            "type": "object"
          },
          "messages": {
            "type": "object"
          }
        },
        "required": ["created_at", "id", "messages", "started_at", "state", "updated_at"]
      },
      "CollectionMetadataResponse": {
        "type": "object",
        "description": "A serializer for a CollectionVersion metadata.",
        "properties": {
          "authors": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 64
            },
            "readOnly": true
          },
          "contents": {
            "type": "object",
            "readOnly": true
          },
          "dependencies": {
            "type": "object",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "readOnly": true
          },
          "documentation": {
            "type": "string",
            "readOnly": true
          },
          "homepage": {
            "type": "string",
            "readOnly": true
          },
          "issues": {
            "type": "string",
            "readOnly": true
          },
          "license": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 32
            },
            "readOnly": true
          },
          "repository": {
            "type": "string",
            "readOnly": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["tags"]
      },
      "CollectionNamespaceResponse": {
        "type": "object",
        "description": "A serializer for a Collection Version namespace field.",
        "properties": {
          "name": {
            "type": "string"
          },
          "metadata_sha256": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": ["name"]
      },
      "CollectionOneShot": {
        "type": "object",
        "description": "A serializer for the Collection One Shot Upload API.",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "description": "The Collection tarball."
          },
          "sha256": {
            "type": "string",
            "minLength": 1,
            "description": "An optional sha256 checksum of the uploaded file."
          },
          "expected_namespace": {
            "type": "string",
            "minLength": 1,
            "description": "The expected 'namespace' of the Collection to be verified against the metadata during import."
          },
          "expected_name": {
            "type": "string",
            "minLength": 1,
            "description": "The expected 'name' of the Collection to be verified against the metadata during import."
          },
          "expected_version": {
            "type": "string",
            "minLength": 1,
            "description": "The expected version of the Collection to be verified against the metadata during import."
          }
        },
        "required": ["file"]
      },
      "CollectionRefResponse": {
        "type": "object",
        "description": "A serializer for a Collection reference.",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "href": {
            "type": "string",
            "description": "Returns link to a collection.",
            "readOnly": true
          }
        },
        "required": ["id", "name"]
      },
      "CollectionResponse": {
        "type": "object",
        "description": "A serializer for a Collection.",
        "properties": {
          "href": {
            "type": "string",
            "description": "Get href.",
            "readOnly": true
          },
          "namespace": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "deprecated": {
            "type": "boolean",
            "description": "Get deprecated.",
            "readOnly": true
          },
          "versions_url": {
            "type": "string",
            "description": "Get a link to a collection versions list.",
            "readOnly": true
          },
          "highest_version": {
            "type": "object",
            "description": "Get a highest version and its link.",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Get the timestamp of the lowest version CollectionVersion's created timestamp.",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Get the timestamp of the highest version CollectionVersion's created timestamp.",
            "readOnly": true
          }
        }
      },
      "CollectionSummary": {
        "type": "object",
        "description": "Collection Version serializer without docs blob.",
        "properties": {}
      },
      "CollectionSummaryResponse": {
        "type": "object",
        "description": "Collection Version serializer without docs blob.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "namespace": {
            "type": "string",
            "readOnly": true,
            "description": "The namespace of the collection.",
            "maxLength": 64
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "The name of the collection.",
            "maxLength": 64
          },
          "version": {
            "type": "string",
            "readOnly": true,
            "description": "The version of the collection.",
            "maxLength": 128
          },
          "requires_ansible": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "description": "The version of Ansible required to use the collection. Multiple versions can be separated with a comma.",
            "maxLength": 255
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "contents": {
            "type": "object",
            "readOnly": true,
            "description": "A JSON field with data about the contents."
          },
          "dependencies": {
            "type": "object",
            "readOnly": true,
            "description": "A dict declaring Collections that this collection requires to be installed for it to be usable."
          },
          "description": {
            "type": "string",
            "readOnly": true,
            "description": "A short summary description of the collection."
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ansible.TagResponse"
            },
            "readOnly": true
          }
        }
      },
      "CollectionUploadWithDownloadUrl": {
        "type": "object",
        "description": "A serializer for the Collection One Shot Upload API.",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary"
          },
          "sha256": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": ["file"]
      },
      "CollectionVersionCopyMove": {
        "type": "object",
        "description": "Copy or move collections from a source repository into one or more destinations.\n\nThis will carry associated content like Signatures and Marks along.",
        "properties": {
          "collection_versions": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "description": "A list of collection versions to move or copy."
          },
          "destination_repositories": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "description": "List of repository HREFs to put content in."
          },
          "signing_service": {
            "type": "string",
            "format": "uri",
            "description": "HREF for a signing service. This will be used to sign the collection before moving putting it in any new repositories."
          }
        },
        "required": ["collection_versions", "destination_repositories"]
      },
      "CollectionVersionDocsResponse": {
        "type": "object",
        "description": "A serializer to display the docs_blob of a CollectionVersion.",
        "properties": {
          "docs_blob": {
            "type": "object"
          }
        },
        "required": ["docs_blob"]
      },
      "CollectionVersionListResponse": {
        "type": "object",
        "description": "A serializer for a CollectionVersion list item.",
        "properties": {
          "version": {
            "type": "string",
            "readOnly": true
          },
          "href": {
            "type": "string",
            "description": "Get href.",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "requires_ansible": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "marks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Get a list of mark values filtering only those in the current repo.",
            "readOnly": true
          }
        },
        "required": ["created_at", "updated_at"]
      },
      "CollectionVersionResponse": {
        "type": "object",
        "description": "A serializer for a CollectionVersion.",
        "properties": {
          "version": {
            "type": "string",
            "readOnly": true
          },
          "href": {
            "type": "string",
            "description": "Get href.",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "requires_ansible": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "marks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Get a list of mark values filtering only those in the current repo.",
            "readOnly": true
          },
          "artifact": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ArtifactRefResponse"
              }
            ],
            "readOnly": true
          },
          "collection": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CollectionRefResponse"
              }
            ],
            "readOnly": true
          },
          "download_url": {
            "type": "string",
            "description": "Get artifact download URL.",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "namespace": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CollectionNamespaceResponse"
              }
            ],
            "readOnly": true
          },
          "signatures": {
            "type": "string",
            "readOnly": true
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CollectionMetadataResponse"
              }
            ],
            "readOnly": true
          },
          "git_url": {
            "type": "string",
            "description": "Get the git URL.",
            "readOnly": true
          },
          "git_commit_sha": {
            "type": "string",
            "description": "Get the git commit sha.",
            "readOnly": true
          },
          "manifest": {
            "type": "object",
            "readOnly": true,
            "description": "A JSON field holding MANIFEST.json data."
          },
          "files": {
            "type": "object",
            "readOnly": true,
            "description": "A JSON field holding FILES.json data."
          }
        },
        "required": ["created_at", "updated_at"]
      },
      "CollectionVersionSearchList": {
        "type": "object",
        "description": "Cross-repo search results.",
        "properties": {
          "repository": {
            "$ref": "#/components/schemas/Repository"
          },
          "collection_version": {
            "$ref": "#/components/schemas/CollectionSummary"
          },
          "namespace_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadata"
              }
            ],
            "nullable": true
          },
          "is_highest": {
            "type": "boolean"
          },
          "is_deprecated": {
            "type": "boolean"
          },
          "is_signed": {
            "type": "boolean"
          }
        },
        "required": [
          "collection_version",
          "is_deprecated",
          "is_highest",
          "is_signed",
          "namespace_metadata",
          "repository"
        ]
      },
      "CollectionVersionSearchListResponse": {
        "type": "object",
        "description": "Cross-repo search results.",
        "properties": {
          "repository": {
            "$ref": "#/components/schemas/RepositoryResponse"
          },
          "collection_version": {
            "$ref": "#/components/schemas/CollectionSummaryResponse"
          },
          "repository_version": {
            "type": "string",
            "readOnly": true
          },
          "namespace_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadataResponse"
              }
            ],
            "nullable": true
          },
          "is_highest": {
            "type": "boolean"
          },
          "is_deprecated": {
            "type": "boolean"
          },
          "is_signed": {
            "type": "boolean"
          }
        },
        "required": [
          "collection_version",
          "is_deprecated",
          "is_highest",
          "is_signed",
          "namespace_metadata",
          "repository"
        ]
      },
      "ContainerNamespaceResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "my_permissions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MyPermissionsFieldResponse"
              }
            ],
            "readOnly": true
          },
          "owners": {
            "type": "array",
            "items": {},
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["created_at", "id", "updated_at"]
      },
      "ContainerRepositoryResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "pulp": {
            "type": "object",
            "readOnly": true
          },
          "namespace": {
            "$ref": "#/components/schemas/ContainerNamespaceResponse"
          },
          "description": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": ["namespace"]
      },
      "ContainerRepositorySyncURL": {
        "type": "object",
        "description": "Serializer for Container Sync.",
        "properties": {
          "remote": {
            "type": "string",
            "format": "uri",
            "description": "A remote to sync from. This will override a remote set on repository."
          },
          "mirror": {
            "type": "boolean",
            "default": false,
            "description": "If ``True``, synchronization will remove all content that is not present in the remote repository. If ``False``, sync will be additive only."
          },
          "signed_only": {
            "type": "boolean",
            "default": false,
            "description": "If ``True``, only signed content will be synced. Signatures are not verified."
          }
        }
      },
      "ContentAppStatusResponse": {
        "type": "object",
        "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "The name of the worker."
          },
          "last_heartbeat": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of the last time the worker talked to the service."
          }
        }
      },
      "ContentGuardResponse": {
        "type": "object",
        "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "name": {
            "type": "string",
            "description": "The unique name."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "An optional description."
          }
        },
        "required": ["name"]
      },
      "ContentRedirectContentGuard": {
        "type": "object",
        "description": "A serializer for ContentRedirectContentGuard.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "The unique name."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "An optional description."
          }
        },
        "required": ["name"]
      },
      "ContentRedirectContentGuardResponse": {
        "type": "object",
        "description": "A serializer for ContentRedirectContentGuard.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "name": {
            "type": "string",
            "description": "The unique name."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "An optional description."
          }
        },
        "required": ["name"]
      },
      "ContentSettingsResponse": {
        "type": "object",
        "description": "Serializer for information about content-app-settings for the pulp instance",
        "properties": {
          "content_origin": {
            "type": "string",
            "description": "The CONTENT_ORIGIN setting for this Pulp instance"
          },
          "content_path_prefix": {
            "type": "string",
            "description": "The CONTENT_PATH_PREFIX setting for this Pulp instance"
          }
        },
        "required": ["content_origin", "content_path_prefix"]
      },
      "ContentSummaryResponse": {
        "type": "object",
        "description": "Serializer for the RepositoryVersion content summary",
        "properties": {
          "added": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "removed": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "present": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": ["added", "present", "removed"]
      },
      "Copy": {
        "type": "object",
        "description": "A serializer for Content Copy API.",
        "properties": {
          "config": {
            "type": "object",
            "description": "A JSON document describing sources, destinations, and content to be copied"
          }
        },
        "required": ["config"]
      },
      "CurrentUser": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "minLength": 1,
            "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
            "pattern": "^[\\w.@+-]+$",
            "maxLength": 150
          },
          "first_name": {
            "type": "string",
            "maxLength": 150
          },
          "last_name": {
            "type": "string",
            "maxLength": 150
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email address",
            "maxLength": 254
          },
          "password": {
            "type": "string",
            "writeOnly": true,
            "maxLength": 128
          },
          "is_superuser": {
            "type": "boolean",
            "title": "Superuser status",
            "description": "Designates that this user has all permissions without explicitly assigning them."
          }
        },
        "required": ["username"]
      },
      "CurrentUserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "username": {
            "type": "string",
            "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
            "pattern": "^[\\w.@+-]+$",
            "maxLength": 150
          },
          "first_name": {
            "type": "string",
            "maxLength": 150
          },
          "last_name": {
            "type": "string",
            "maxLength": 150
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email address",
            "maxLength": 254
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "readOnly": true,
            "description": "The groups this user belongs to. A user will get all permissions granted to each of their groups."
          },
          "date_joined": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "is_superuser": {
            "type": "boolean",
            "title": "Superuser status",
            "description": "Designates that this user has all permissions without explicitly assigning them."
          },
          "auth_provider": {
            "type": "string",
            "readOnly": true
          },
          "model_permissions": {
            "type": "object",
            "readOnly": true
          },
          "is_anonymous": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": ["username"]
      },
      "DatabaseConnectionResponse": {
        "type": "object",
        "description": "Serializer for the database connection information",
        "properties": {
          "connected": {
            "type": "boolean",
            "description": "Info about whether the app can connect to the database"
          }
        },
        "required": ["connected"]
      },
      "DistributionResponse": {
        "type": "object",
        "properties": {
          "pulp_id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "base_path": {
            "type": "string"
          },
          "repository": {
            "$ref": "#/components/schemas/RepositoryResponse"
          }
        },
        "required": ["base_path", "name", "repository"]
      },
      "Domain": {
        "type": "object",
        "description": "Serializer for Domain.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "A name for this domain.",
            "pattern": "^[-a-zA-Z0-9_]+$"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "An optional description."
          },
          "storage_class": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StorageClassEnum"
              }
            ],
            "description": "Backend storage class for domain.\n\n* `pulpcore.app.models.storage.FileSystem` - Use local filesystem as storage\n* `storages.backends.s3boto3.S3Boto3Storage` - Use Amazon S3 as storage\n* `storages.backends.azure_storage.AzureStorage` - Use Azure Blob as storage"
          },
          "storage_settings": {
            "type": "object",
            "description": "Settings for storage class."
          },
          "redirect_to_object_storage": {
            "type": "boolean",
            "default": true,
            "description": "Boolean to have the content app redirect to object storage."
          },
          "hide_guarded_distributions": {
            "type": "boolean",
            "default": false,
            "description": "Boolean to hide distributions with a content guard in the content app."
          }
        },
        "required": ["name", "storage_class", "storage_settings"]
      },
      "DomainResponse": {
        "type": "object",
        "description": "Serializer for Domain.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "name": {
            "type": "string",
            "description": "A name for this domain.",
            "pattern": "^[-a-zA-Z0-9_]+$"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "An optional description."
          },
          "storage_class": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StorageClassEnum"
              }
            ],
            "description": "Backend storage class for domain.\n\n* `pulpcore.app.models.storage.FileSystem` - Use local filesystem as storage\n* `storages.backends.s3boto3.S3Boto3Storage` - Use Amazon S3 as storage\n* `storages.backends.azure_storage.AzureStorage` - Use Azure Blob as storage"
          },
          "storage_settings": {
            "type": "object",
            "description": "Settings for storage class."
          },
          "redirect_to_object_storage": {
            "type": "boolean",
            "default": true,
            "description": "Boolean to have the content app redirect to object storage."
          },
          "hide_guarded_distributions": {
            "type": "boolean",
            "default": false,
            "description": "Boolean to hide distributions with a content guard in the content app."
          }
        },
        "required": ["name", "storage_class", "storage_settings"]
      },
      "EvaluationResponse": {
        "type": "object",
        "description": "Results from evaluating a proposed parameter to a PulpImport call.",
        "properties": {
          "context": {
            "type": "string",
            "description": "Parameter value being evaluated."
          },
          "is_valid": {
            "type": "boolean",
            "description": "True if evaluation passed, false otherwise."
          },
          "messages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Messages describing results of all evaluations done. May be an empty list."
          }
        },
        "required": ["context", "is_valid", "messages"]
      },
      "FilesystemExport": {
        "type": "object",
        "description": "Serializer for FilesystemExports.",
        "properties": {
          "task": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "A URI of the task that ran the Export."
          },
          "publication": {
            "type": "string",
            "format": "uri",
            "writeOnly": true,
            "description": "A URI of the publication to be exported."
          },
          "repository_version": {
            "type": "string",
            "format": "uri",
            "writeOnly": true,
            "description": "A URI of the repository version export."
          },
          "start_repository_version": {
            "type": "string",
            "format": "uri",
            "writeOnly": true,
            "description": "The URI of the last-exported-repo-version."
          }
        }
      },
      "FilesystemExportResponse": {
        "type": "object",
        "description": "Serializer for FilesystemExports.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "task": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "A URI of the task that ran the Export."
          },
          "exported_resources": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "readOnly": true,
            "description": "Resources that were exported."
          },
          "params": {
            "type": "object",
            "readOnly": true,
            "description": "Any additional parameters that were used to create the export."
          }
        }
      },
      "FilesystemExporter": {
        "type": "object",
        "description": "Serializer for FilesystemExporters.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Unique name of the file system exporter."
          },
          "path": {
            "type": "string",
            "minLength": 1,
            "description": "File system location to export to."
          },
          "method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MethodEnum"
              }
            ],
            "default": "write",
            "description": "Method of exporting\n\n* `write` - Export by writing\n* `hardlink` - Export by hardlinking\n* `symlink` - Export by symlinking"
          }
        },
        "required": ["name", "path"]
      },
      "FilesystemExporterResponse": {
        "type": "object",
        "description": "Serializer for FilesystemExporters.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "name": {
            "type": "string",
            "description": "Unique name of the file system exporter."
          },
          "path": {
            "type": "string",
            "description": "File system location to export to."
          },
          "method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MethodEnum"
              }
            ],
            "default": "write",
            "description": "Method of exporting\n\n* `write` - Export by writing\n* `hardlink` - Export by hardlinking\n* `symlink` - Export by symlinking"
          }
        },
        "required": ["name", "path"]
      },
      "GalaxyCollection": {
        "type": "object",
        "description": "A serializer for a Collection.",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "minLength": 1
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["created", "id", "modified", "name"]
      },
      "GalaxyCollectionResponse": {
        "type": "object",
        "description": "A serializer for a Collection.",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "object",
            "description": "Create a namespace dict.",
            "readOnly": true
          },
          "href": {
            "type": "string",
            "description": "Get href.",
            "readOnly": true
          },
          "versions_url": {
            "type": "string",
            "description": "Get versions_url.",
            "readOnly": true
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "format": "date-time"
          },
          "latest_version": {
            "type": "object",
            "description": "Get latest version.",
            "readOnly": true
          }
        },
        "required": ["created", "id", "modified", "name"]
      },
      "GalaxyCollectionVersionResponse": {
        "type": "object",
        "description": "A serializer for a CollectionVersion.",
        "properties": {
          "version": {
            "type": "string"
          },
          "href": {
            "type": "string",
            "description": "Get href.",
            "readOnly": true
          },
          "namespace": {
            "type": "object",
            "description": "Create a namespace dict.",
            "readOnly": true
          },
          "collection": {
            "type": "object",
            "description": "Create a collection dict.",
            "readOnly": true
          },
          "artifact": {
            "type": "object",
            "description": "Create an artifact dict.",
            "readOnly": true
          },
          "metadata": {
            "$ref": "#/components/schemas/CollectionMetadataResponse"
          }
        },
        "required": ["metadata", "version"]
      },
      "GalaxyRoleResponse": {
        "type": "object",
        "description": "A serializer for Galaxy's representation of Roles.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Get id.",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          }
        },
        "required": ["name", "namespace"]
      },
      "GalaxyRoleVersionResponse": {
        "type": "object",
        "description": "A serializer for Galaxy's representation of Role versions.",
        "properties": {
          "name": {
            "type": "string"
          },
          "source": {
            "type": "string",
            "description": "Get source.",
            "readOnly": true
          }
        },
        "required": ["name"]
      },
      "Group": {
        "type": "object",
        "description": "Serializer for Group.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Name",
            "maxLength": 150
          }
        },
        "required": ["name"]
      },
      "GroupProgressReportResponse": {
        "type": "object",
        "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
        "properties": {
          "message": {
            "type": "string",
            "readOnly": true,
            "description": "The message shown to the user for the group progress report."
          },
          "code": {
            "type": "string",
            "readOnly": true,
            "description": "Identifies the type of group progress report'."
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "The total count of items."
          },
          "done": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "The count of items already processed. Defaults to 0."
          },
          "suffix": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "description": "The suffix to be shown with the group progress report."
          }
        }
      },
      "GroupResponse": {
        "type": "object",
        "description": "Serializer for Group.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name",
            "maxLength": 150
          },
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          }
        },
        "required": ["name"]
      },
      "GroupRole": {
        "type": "object",
        "description": "Serializer for GroupRole.",
        "properties": {
          "role": {
            "type": "string",
            "minLength": 1
          },
          "content_object": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "pulp_href of the object for which role permissions should be asserted. If set to 'null', permissions will act on the model-level."
          },
          "domain": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "Domain this role should be applied on, mutually exclusive with content_object."
          }
        },
        "required": ["content_object", "role"]
      },
      "GroupRoleResponse": {
        "type": "object",
        "description": "Serializer for GroupRole.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "role": {
            "type": "string"
          },
          "content_object": {
            "type": "string",
            "nullable": true,
            "description": "pulp_href of the object for which role permissions should be asserted. If set to 'null', permissions will act on the model-level."
          },
          "description": {
            "type": "string",
            "readOnly": true
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "readOnly": true
          },
          "domain": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "Domain this role should be applied on, mutually exclusive with content_object."
          }
        },
        "required": ["content_object", "role"]
      },
      "GroupUser": {
        "type": "object",
        "description": "Serializer for Users that belong to a Group.",
        "properties": {
          "username": {
            "type": "string",
            "minLength": 1,
            "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
            "maxLength": 150
          }
        },
        "required": ["username"]
      },
      "GroupUserResponse": {
        "type": "object",
        "description": "Serializer for Users that belong to a Group.",
        "properties": {
          "username": {
            "type": "string",
            "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
            "maxLength": 150
          },
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          }
        },
        "required": ["username"]
      },
      "ImportResponse": {
        "type": "object",
        "description": "Serializer for Imports.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "task": {
            "type": "string",
            "format": "uri",
            "description": "A URI of the Task that ran the Import."
          },
          "params": {
            "type": "object",
            "description": "Any parameters that were used to create the import."
          }
        },
        "required": ["params", "task"]
      },
      "ImportTaskDetailResponse": {
        "type": "object",
        "description": "A serializer for a CollectionImport list view.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "state": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "finished_at": {
            "type": "string",
            "format": "date-time"
          },
          "error": {
            "type": "object"
          },
          "messages": {
            "type": "object"
          }
        },
        "required": [
          "created_at",
          "error",
          "finished_at",
          "id",
          "messages",
          "name",
          "namespace",
          "started_at",
          "state",
          "updated_at",
          "version"
        ]
      },
      "ImportTaskListResponse": {
        "type": "object",
        "description": "A serializer for a CollectionImport list view.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "state": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "finished_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "created_at",
          "finished_at",
          "id",
          "name",
          "namespace",
          "started_at",
          "state",
          "updated_at",
          "version"
        ]
      },
      "LegacyImport": {
        "type": "object",
        "properties": {
          "github_user": {
            "type": "string",
            "minLength": 1
          },
          "github_repo": {
            "type": "string",
            "minLength": 1
          },
          "alternate_role_name": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": ["github_repo", "github_user"]
      },
      "LegacyImportResponse": {
        "type": "object",
        "properties": {
          "github_user": {
            "type": "string"
          },
          "github_repo": {
            "type": "string"
          },
          "alternate_role_name": {
            "type": "string"
          }
        },
        "required": ["github_repo", "github_user"]
      },
      "LegacyNamespaceOwner": {
        "type": "object",
        "properties": {}
      },
      "LegacyNamespacesResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "summary_fields": {
            "type": "string",
            "readOnly": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "avatar_url": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "LegacyRoleContentResponse": {
        "type": "object",
        "properties": {
          "readme": {
            "type": "string",
            "readOnly": true
          },
          "readme_html": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "LegacyRoleResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "upstream_id": {
            "type": "string",
            "readOnly": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "github_user": {
            "type": "string",
            "readOnly": true
          },
          "username": {
            "type": "string",
            "readOnly": true
          },
          "github_repo": {
            "type": "string",
            "readOnly": true
          },
          "github_branch": {
            "type": "string",
            "readOnly": true
          },
          "commit": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 64
          },
          "description": {
            "type": "string",
            "readOnly": true
          },
          "summary_fields": {
            "type": "string",
            "readOnly": true
          },
          "download_count": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": ["name"]
      },
      "LegacyRoleVersionsResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "string",
            "readOnly": true
          },
          "next": {
            "type": "string",
            "readOnly": true
          },
          "next_link": {
            "type": "string",
            "readOnly": true
          },
          "previous": {
            "type": "string",
            "readOnly": true
          },
          "previous_link": {
            "type": "string",
            "readOnly": true
          },
          "results": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "LegacySync": {
        "type": "object",
        "properties": {
          "baseurl": {
            "type": "string",
            "minLength": 1,
            "default": "https://galaxy.ansible.com/api/v1/roles/"
          },
          "github_user": {
            "type": "string",
            "minLength": 1
          },
          "role_name": {
            "type": "string",
            "minLength": 1
          },
          "role_version": {
            "type": "string",
            "minLength": 1
          },
          "limit": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "LegacySyncTaskResponse": {
        "type": "object",
        "properties": {
          "task": {
            "type": "string"
          }
        },
        "required": ["task"]
      },
      "LegacyTaskDetailResponse": {
        "type": "object",
        "properties": {
          "results": {
            "$ref": "#/components/schemas/LegacyTaskResultsResponse"
          }
        },
        "required": ["results"]
      },
      "LegacyTaskResultsResponse": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "summary_fields": {
            "$ref": "#/components/schemas/LegacyTaskSummaryFieldsResponse"
          }
        },
        "required": ["id", "state", "summary_fields"]
      },
      "LegacyTaskSummaryFieldsResponse": {
        "type": "object",
        "properties": {
          "task_messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LegacyTaskSummaryTaskMessagesFieldsResponse"
            }
          }
        },
        "required": ["task_messages"]
      },
      "LegacyTaskSummaryTaskMessagesFieldsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "date-time"
          },
          "message_type": {
            "type": "string"
          },
          "message_text": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        },
        "required": ["id", "message_text", "message_type", "state"]
      },
      "LegacyUserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "summary_fields": {
            "type": "string",
            "readOnly": true
          },
          "created": {
            "type": "string",
            "readOnly": true
          },
          "username": {
            "type": "string",
            "readOnly": true
          },
          "full_name": {
            "type": "string",
            "readOnly": true
          },
          "date_joined": {
            "type": "string",
            "readOnly": true
          },
          "avatar_url": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "ManifestCopy": {
        "type": "object",
        "description": "Serializer for copying manifests from a source repository to a destination repository.",
        "properties": {
          "source_repository": {
            "type": "string",
            "format": "uri",
            "title": "Repository",
            "description": "A URI of the repository to copy content from."
          },
          "source_repository_version": {
            "type": "string",
            "format": "uri",
            "description": "A URI of the repository version to copy content from."
          },
          "digests": {
            "type": "array",
            "items": {},
            "description": "A list of manifest digests to copy."
          },
          "media_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaTypesEnum"
            },
            "description": "A list of media_types to copy."
          }
        }
      },
      "MediaTypesEnum": {
        "enum": [
          "application/vnd.docker.distribution.manifest.v1+json",
          "application/vnd.docker.distribution.manifest.v2+json",
          "application/vnd.docker.distribution.manifest.list.v2+json",
          "application/vnd.oci.image.manifest.v1+json",
          "application/vnd.oci.image.index.v1+json"
        ],
        "type": "string",
        "description": "* `application/vnd.docker.distribution.manifest.v1+json` - application/vnd.docker.distribution.manifest.v1+json\n* `application/vnd.docker.distribution.manifest.v2+json` - application/vnd.docker.distribution.manifest.v2+json\n* `application/vnd.docker.distribution.manifest.list.v2+json` - application/vnd.docker.distribution.manifest.list.v2+json\n* `application/vnd.oci.image.manifest.v1+json` - application/vnd.oci.image.manifest.v1+json\n* `application/vnd.oci.image.index.v1+json` - application/vnd.oci.image.index.v1+json"
      },
      "MethodEnum": {
        "enum": ["write", "hardlink", "symlink"],
        "type": "string",
        "description": "* `write` - Export by writing\n* `hardlink` - Export by hardlinking\n* `symlink` - Export by symlinking"
      },
      "MinimalTaskResponse": {
        "type": "object",
        "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "name": {
            "type": "string",
            "description": "The name of task."
          },
          "state": {
            "type": "string",
            "readOnly": true,
            "description": "The current state of the task. The possible values include: 'waiting', 'skipped', 'running', 'completed', 'failed', 'canceled' and 'canceling'."
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of the when this task started execution."
          },
          "finished_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of the when this task stopped execution."
          },
          "worker": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "The worker associated with this task. This field is empty if a worker is not yet assigned."
          }
        },
        "required": ["name"]
      },
      "MultipleArtifactContentResponse": {
        "type": "object",
        "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "artifacts": {
            "type": "object",
            "description": "A dict mapping relative paths inside the Content to the correspondingArtifact URLs. E.g.: {'relative/path': '/artifacts/1/'"
          }
        },
        "required": ["artifacts"]
      },
      "MyPermissionsField": {
        "type": "object"
      },
      "MyPermissionsFieldResponse": {
        "type": "object"
      },
      "MyPermissionsResponse": {
        "type": "object",
        "properties": {
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["permissions"]
      },
      "Namespace": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64
          },
          "company": {
            "type": "string",
            "maxLength": 64
          },
          "email": {
            "type": "string",
            "maxLength": 256
          },
          "avatar_url": {
            "type": "string",
            "format": "uri"
          },
          "description": {
            "type": "string",
            "maxLength": 256
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NamespaceLink"
            }
          },
          "groups": {
            "type": "string"
          },
          "resources": {
            "type": "string"
          }
        },
        "required": ["groups", "name"]
      },
      "NamespaceLink": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 32
          },
          "url": {
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          }
        },
        "required": ["name", "url"]
      },
      "NamespaceLinkResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 32
          },
          "url": {
            "type": "string",
            "maxLength": 256
          }
        },
        "required": ["name", "url"]
      },
      "NamespaceRelatedField": {
        "type": "object",
        "description": "Serializer only returns fields specified in 'include_related' query param.\n\nThis allows for fields that require more database queries to be optionally\nincluded in API responses, which lowers the load on the backend. This is\nintended as a way to include extra data in list views.\n\nUsage:\n\nThis functions the same as DRF's base `serializers.Serializer` class with the\nexception that it will only return fields specified in the `?include_related=`\nquery parameter.\n\nExample:\n\nMySerializer(RelatedFieldsBaseSerializer):\n    foo = CharField()\n    bar = CharField()\n\nMySerializer will return:\n\n{\"foo\": None} when called with `?include_related=foo` and {\"foo\": None, \"bar\" None}\nwhen called with `?include_related=foo&include_related=bar`.",
        "properties": {}
      },
      "NamespaceRelatedFieldResponse": {
        "type": "object",
        "description": "Serializer only returns fields specified in 'include_related' query param.\n\nThis allows for fields that require more database queries to be optionally\nincluded in API responses, which lowers the load on the backend. This is\nintended as a way to include extra data in list views.\n\nUsage:\n\nThis functions the same as DRF's base `serializers.Serializer` class with the\nexception that it will only return fields specified in the `?include_related=`\nquery parameter.\n\nExample:\n\nMySerializer(RelatedFieldsBaseSerializer):\n    foo = CharField()\n    bar = CharField()\n\nMySerializer will return:\n\n{\"foo\": None} when called with `?include_related=foo` and {\"foo\": None, \"bar\" None}\nwhen called with `?include_related=foo&include_related=bar`.",
        "properties": {
          "my_permissions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MyPermissionsFieldResponse"
              }
            ],
            "readOnly": true
          }
        }
      },
      "NamespaceResponse": {
        "type": "object",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 64
          },
          "company": {
            "type": "string",
            "maxLength": 64
          },
          "email": {
            "type": "string",
            "maxLength": 256
          },
          "avatar_url": {
            "type": "string",
            "format": "uri"
          },
          "description": {
            "type": "string",
            "maxLength": 256
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NamespaceLinkResponse"
            }
          },
          "groups": {
            "type": "string"
          },
          "resources": {
            "type": "string"
          },
          "related_fields": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NamespaceRelatedFieldResponse"
              }
            ],
            "readOnly": true
          },
          "metadata_sha256": {
            "type": "string",
            "readOnly": true
          },
          "avatar_sha256": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": ["groups", "name"]
      },
      "NamespaceSummaryResponse": {
        "type": "object",
        "description": "NamespaceSerializer but without 'links' or 'resources'.\n\nFor use in _ui/collection detail views.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "company": {
            "type": "string",
            "maxLength": 64
          },
          "email": {
            "type": "string",
            "maxLength": 256
          },
          "avatar_url": {
            "type": "string",
            "format": "uri"
          },
          "description": {
            "type": "string",
            "maxLength": 256
          },
          "groups": {
            "type": "string"
          },
          "related_fields": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NamespaceRelatedFieldResponse"
              }
            ],
            "readOnly": true
          },
          "metadata_sha256": {
            "type": "string",
            "readOnly": true
          },
          "avatar_sha256": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": ["groups"]
      },
      "NestedRole": {
        "type": "object",
        "description": "Serializer to add/remove object roles to/from users/groups.\n\nThis is used in conjunction with ``pulpcore.app.viewsets.base.RolesMixin`` and requires the\nunderlying object to be passed as ``content_object`` in the context.",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1,
              "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
            },
            "default": []
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "default": []
          },
          "role": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": ["role"]
      },
      "NestedRoleResponse": {
        "type": "object",
        "description": "Serializer to add/remove object roles to/from users/groups.\n\nThis is used in conjunction with ``pulpcore.app.viewsets.base.RolesMixin`` and requires the\nunderlying object to be passed as ``content_object`` in the context.",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
            },
            "default": []
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "role": {
            "type": "string"
          }
        },
        "required": ["role"]
      },
      "OCIBuildImage": {
        "type": "object",
        "description": "Serializer for building an OCI container image from a Containerfile.\n\nThe Containerfile can either be specified via an artifact url, or a new file can be uploaded.\nA repository must be specified, to which the container image content will be added.",
        "properties": {
          "containerfile_artifact": {
            "type": "string",
            "format": "uri",
            "description": "Artifact representing the Containerfile that should be used to run podman-build."
          },
          "containerfile": {
            "type": "string",
            "format": "binary",
            "description": "An uploaded Containerfile that should be used to run podman-build."
          },
          "tag": {
            "type": "string",
            "minLength": 1,
            "default": "latest",
            "description": "A tag name for the new image being built."
          },
          "artifacts": {
            "type": "object",
            "description": "A JSON string where each key is an artifact href and the value is it's relative path (name) inside the /pulp_working_directory of the build container executing the Containerfile."
          }
        }
      },
      "ObjectRolesResponse": {
        "type": "object",
        "properties": {
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NestedRoleResponse"
            }
          }
        },
        "required": ["roles"]
      },
      "OrphansCleanup": {
        "type": "object",
        "properties": {
          "content_hrefs": {
            "type": "array",
            "items": {},
            "description": "Will delete specified content and associated Artifacts if they are orphans."
          },
          "orphan_protection_time": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "The time in minutes for how long Pulp will hold orphan Content and Artifacts before they become candidates for deletion by this orphan cleanup task. This should ideally be longer than your longest running task otherwise any content created during that task could be cleaned up before the task finishes. If not specified, a default value is taken from the setting ORPHAN_PROTECTION_TIME."
          }
        }
      },
      "PaginatedAccessPolicyResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessPolicyResponse"
            }
          }
        }
      },
      "PaginatedArtifactDistributionResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ArtifactDistributionResponse"
            }
          }
        }
      },
      "PaginatedArtifactResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ArtifactResponse"
            }
          }
        }
      },
      "PaginatedCollectionResponseList": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer",
                "example": 123
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "first": {
                "type": "string",
                "nullable": true
              },
              "previous": {
                "type": "string",
                "nullable": true
              },
              "next": {
                "type": "string",
                "nullable": true
              },
              "last": {
                "type": "string",
                "nullable": true
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CollectionResponse"
            }
          }
        }
      },
      "PaginatedCollectionVersionListResponseList": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer",
                "example": 123
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "first": {
                "type": "string",
                "nullable": true
              },
              "previous": {
                "type": "string",
                "nullable": true
              },
              "next": {
                "type": "string",
                "nullable": true
              },
              "last": {
                "type": "string",
                "nullable": true
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CollectionVersionListResponse"
            }
          }
        }
      },
      "PaginatedCollectionVersionSearchListResponseList": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer",
                "example": 123
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "first": {
                "type": "string",
                "nullable": true
              },
              "previous": {
                "type": "string",
                "nullable": true
              },
              "next": {
                "type": "string",
                "nullable": true
              },
              "last": {
                "type": "string",
                "nullable": true
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CollectionVersionSearchListResponse"
            }
          }
        }
      },
      "PaginatedContentGuardResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContentGuardResponse"
            }
          }
        }
      },
      "PaginatedContentRedirectContentGuardResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContentRedirectContentGuardResponse"
            }
          }
        }
      },
      "PaginatedDistributionResponseList": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer",
                "example": 123
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "first": {
                "type": "string",
                "nullable": true
              },
              "previous": {
                "type": "string",
                "nullable": true
              },
              "next": {
                "type": "string",
                "nullable": true
              },
              "last": {
                "type": "string",
                "nullable": true
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DistributionResponse"
            }
          }
        }
      },
      "PaginatedDomainResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DomainResponse"
            }
          }
        }
      },
      "PaginatedFilesystemExportResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilesystemExportResponse"
            }
          }
        }
      },
      "PaginatedFilesystemExporterResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilesystemExporterResponse"
            }
          }
        }
      },
      "PaginatedGalaxyCollectionResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GalaxyCollectionResponse"
            }
          }
        }
      },
      "PaginatedGalaxyCollectionVersionResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GalaxyCollectionVersionResponse"
            }
          }
        }
      },
      "PaginatedGalaxyRoleResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GalaxyRoleResponse"
            }
          }
        }
      },
      "PaginatedGalaxyRoleVersionResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GalaxyRoleVersionResponse"
            }
          }
        }
      },
      "PaginatedGroupResponseList": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer",
                "example": 123
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "first": {
                "type": "string",
                "nullable": true
              },
              "previous": {
                "type": "string",
                "nullable": true
              },
              "next": {
                "type": "string",
                "nullable": true
              },
              "last": {
                "type": "string",
                "nullable": true
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupResponse"
            }
          }
        }
      },
      "PaginatedGroupRoleResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupRoleResponse"
            }
          }
        }
      },
      "PaginatedGroupUserResponseList": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer",
                "example": 123
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "first": {
                "type": "string",
                "nullable": true
              },
              "previous": {
                "type": "string",
                "nullable": true
              },
              "next": {
                "type": "string",
                "nullable": true
              },
              "last": {
                "type": "string",
                "nullable": true
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupUserResponse"
            }
          }
        }
      },
      "PaginatedImportResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportResponse"
            }
          }
        }
      },
      "PaginatedImportTaskListResponseList": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer",
                "example": 123
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "first": {
                "type": "string",
                "nullable": true
              },
              "previous": {
                "type": "string",
                "nullable": true
              },
              "next": {
                "type": "string",
                "nullable": true
              },
              "last": {
                "type": "string",
                "nullable": true
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportTaskListResponse"
            }
          }
        }
      },
      "PaginatedLegacyNamespacesResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LegacyNamespacesResponse"
            }
          }
        }
      },
      "PaginatedLegacyRoleResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LegacyRoleResponse"
            }
          }
        }
      },
      "PaginatedLegacyUserResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LegacyUserResponse"
            }
          }
        }
      },
      "PaginatedMultipleArtifactContentResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MultipleArtifactContentResponse"
            }
          }
        }
      },
      "PaginatedNamespaceSummaryResponseList": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer",
                "example": 123
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "first": {
                "type": "string",
                "nullable": true
              },
              "previous": {
                "type": "string",
                "nullable": true
              },
              "next": {
                "type": "string",
                "nullable": true
              },
              "last": {
                "type": "string",
                "nullable": true
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NamespaceSummaryResponse"
            }
          }
        }
      },
      "PaginatedPublicationResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicationResponse"
            }
          }
        }
      },
      "PaginatedPulpExportResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PulpExportResponse"
            }
          }
        }
      },
      "PaginatedPulpExporterResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PulpExporterResponse"
            }
          }
        }
      },
      "PaginatedPulpImporterResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PulpImporterResponse"
            }
          }
        }
      },
      "PaginatedRBACContentGuardResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RBACContentGuardResponse"
            }
          }
        }
      },
      "PaginatedRemoteResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RemoteResponse"
            }
          }
        }
      },
      "PaginatedRepositoryResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RepositoryResponse"
            }
          }
        }
      },
      "PaginatedRepositoryVersionResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RepositoryVersionResponse"
            }
          }
        }
      },
      "PaginatedRoleResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleResponse"
            }
          }
        }
      },
      "PaginatedSigningServiceResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigningServiceResponse"
            }
          }
        }
      },
      "PaginatedSyncListResponseList": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer",
                "example": 123
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "first": {
                "type": "string",
                "nullable": true
              },
              "previous": {
                "type": "string",
                "nullable": true
              },
              "next": {
                "type": "string",
                "nullable": true
              },
              "last": {
                "type": "string",
                "nullable": true
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SyncListResponse"
            }
          }
        }
      },
      "PaginatedTagResponseList": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer",
                "example": 123
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "first": {
                "type": "string",
                "nullable": true
              },
              "previous": {
                "type": "string",
                "nullable": true
              },
              "next": {
                "type": "string",
                "nullable": true
              },
              "last": {
                "type": "string",
                "nullable": true
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagResponse"
            }
          }
        }
      },
      "PaginatedTaskGroupResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskGroupResponse"
            }
          }
        }
      },
      "PaginatedTaskResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskResponse"
            }
          }
        }
      },
      "PaginatedTaskScheduleResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskScheduleResponse"
            }
          }
        }
      },
      "PaginatedTaskSummaryResponseList": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer",
                "example": 123
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "first": {
                "type": "string",
                "nullable": true
              },
              "previous": {
                "type": "string",
                "nullable": true
              },
              "next": {
                "type": "string",
                "nullable": true
              },
              "last": {
                "type": "string",
                "nullable": true
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskSummaryResponse"
            }
          }
        }
      },
      "PaginatedUploadResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UploadResponse"
            }
          }
        }
      },
      "PaginatedUpstreamPulpResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpstreamPulpResponse"
            }
          }
        }
      },
      "PaginatedUserResponseList": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer",
                "example": 123
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "first": {
                "type": "string",
                "nullable": true
              },
              "previous": {
                "type": "string",
                "nullable": true
              },
              "next": {
                "type": "string",
                "nullable": true
              },
              "last": {
                "type": "string",
                "nullable": true
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserResponse"
            }
          }
        }
      },
      "PaginatedUserRoleResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRoleResponse"
            }
          }
        }
      },
      "PaginatedWorkerResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkerResponse"
            }
          }
        }
      },
      "Paginatedansible.AnsibleDistributionResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ansible.AnsibleDistributionResponse"
            }
          }
        }
      },
      "Paginatedansible.AnsibleNamespaceMetadataResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadataResponse"
            }
          }
        }
      },
      "Paginatedansible.AnsibleRepositoryResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ansible.AnsibleRepositoryResponse"
            }
          }
        }
      },
      "Paginatedansible.CollectionRemoteResponseList": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer",
                "example": 123
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "first": {
                "type": "string",
                "nullable": true
              },
              "previous": {
                "type": "string",
                "nullable": true
              },
              "next": {
                "type": "string",
                "nullable": true
              },
              "last": {
                "type": "string",
                "nullable": true
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ansible.CollectionRemoteResponse"
            }
          }
        }
      },
      "Paginatedansible.CollectionResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ansible.CollectionResponse"
            }
          }
        }
      },
      "Paginatedansible.CollectionVersionMarkResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ansible.CollectionVersionMarkResponse"
            }
          }
        }
      },
      "Paginatedansible.CollectionVersionResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ansible.CollectionVersionResponse"
            }
          }
        }
      },
      "Paginatedansible.CollectionVersionSignatureResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ansible.CollectionVersionSignatureResponse"
            }
          }
        }
      },
      "Paginatedansible.GitRemoteResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ansible.GitRemoteResponse"
            }
          }
        }
      },
      "Paginatedansible.RoleRemoteResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ansible.RoleRemoteResponse"
            }
          }
        }
      },
      "Paginatedansible.RoleResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ansible.RoleResponse"
            }
          }
        }
      },
      "Paginatedcontainer.BlobResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/container.BlobResponse"
            }
          }
        }
      },
      "Paginatedcontainer.ContainerDistributionResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/container.ContainerDistributionResponse"
            }
          }
        }
      },
      "Paginatedcontainer.ContainerNamespaceResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/container.ContainerNamespaceResponse"
            }
          }
        }
      },
      "Paginatedcontainer.ContainerPushRepositoryResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/container.ContainerPushRepositoryResponse"
            }
          }
        }
      },
      "Paginatedcontainer.ContainerRemoteResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/container.ContainerRemoteResponse"
            }
          }
        }
      },
      "Paginatedcontainer.ContainerRepositoryResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/container.ContainerRepositoryResponse"
            }
          }
        }
      },
      "Paginatedcontainer.ManifestResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/container.ManifestResponse"
            }
          }
        }
      },
      "Paginatedcontainer.ManifestSignatureResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/container.ManifestSignatureResponse"
            }
          }
        }
      },
      "Paginatedcontainer.TagResponseList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/container.TagResponse"
            }
          }
        }
      },
      "Paginatedgalaxy.LoginResponseList": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer",
                "example": 123
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "first": {
                "type": "string",
                "nullable": true
              },
              "previous": {
                "type": "string",
                "nullable": true
              },
              "next": {
                "type": "string",
                "nullable": true
              },
              "last": {
                "type": "string",
                "nullable": true
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/galaxy.LoginResponse"
            }
          }
        }
      },
      "PatchedAccessPolicy": {
        "type": "object",
        "description": "Serializer for AccessPolicy.",
        "properties": {
          "permissions_assignment": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "List of callables that define the new permissions to be created for new objects.This is deprecated. Use `creation_hooks` instead."
          },
          "creation_hooks": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "List of callables that may associate user roles for new objects."
          },
          "statements": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "List of policy statements defining the policy."
          },
          "queryset_scoping": {
            "type": "object",
            "description": "A callable for performing queryset scoping. See plugin documentation for valid callables. Set to blank to turn off queryset scoping."
          }
        }
      },
      "PatchedCollection": {
        "type": "object",
        "description": "A serializer for a Collection.",
        "properties": {}
      },
      "PatchedContentRedirectContentGuard": {
        "type": "object",
        "description": "A serializer for ContentRedirectContentGuard.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "The unique name."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "An optional description."
          }
        }
      },
      "PatchedDomain": {
        "type": "object",
        "description": "Serializer for Domain.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "A name for this domain.",
            "pattern": "^[-a-zA-Z0-9_]+$"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "An optional description."
          },
          "storage_class": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StorageClassEnum"
              }
            ],
            "description": "Backend storage class for domain.\n\n* `pulpcore.app.models.storage.FileSystem` - Use local filesystem as storage\n* `storages.backends.s3boto3.S3Boto3Storage` - Use Amazon S3 as storage\n* `storages.backends.azure_storage.AzureStorage` - Use Azure Blob as storage"
          },
          "storage_settings": {
            "type": "object",
            "description": "Settings for storage class."
          },
          "redirect_to_object_storage": {
            "type": "boolean",
            "default": true,
            "description": "Boolean to have the content app redirect to object storage."
          },
          "hide_guarded_distributions": {
            "type": "boolean",
            "default": false,
            "description": "Boolean to hide distributions with a content guard in the content app."
          }
        }
      },
      "PatchedFilesystemExporter": {
        "type": "object",
        "description": "Serializer for FilesystemExporters.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Unique name of the file system exporter."
          },
          "path": {
            "type": "string",
            "minLength": 1,
            "description": "File system location to export to."
          },
          "method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MethodEnum"
              }
            ],
            "default": "write",
            "description": "Method of exporting\n\n* `write` - Export by writing\n* `hardlink` - Export by hardlinking\n* `symlink` - Export by symlinking"
          }
        }
      },
      "PatchedGroup": {
        "type": "object",
        "description": "Serializer for Group.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Name",
            "maxLength": 150
          }
        }
      },
      "PatchedNamespace": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64
          },
          "company": {
            "type": "string",
            "maxLength": 64
          },
          "email": {
            "type": "string",
            "maxLength": 256
          },
          "avatar_url": {
            "type": "string",
            "format": "uri"
          },
          "description": {
            "type": "string",
            "maxLength": 256
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NamespaceLink"
            }
          },
          "groups": {
            "type": "string"
          },
          "resources": {
            "type": "string"
          }
        }
      },
      "PatchedPulpExporter": {
        "type": "object",
        "description": "Serializer for pulp exporters.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Unique name of the file system exporter."
          },
          "path": {
            "type": "string",
            "minLength": 1,
            "description": "File system directory to store exported tar.gzs."
          },
          "repositories": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "last_export": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "Last attempted export for this PulpExporter"
          }
        }
      },
      "PatchedPulpImporter": {
        "type": "object",
        "description": "Serializer for PulpImporters.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Unique name of the Importer."
          },
          "repo_mapping": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "minLength": 1
            },
            "description": "Mapping of repo names in an export file to the repo names in Pulp. For example, if the export has a repo named 'foo' and the repo to import content into was 'bar', the mapping would be \"{'foo': 'bar'}\"."
          }
        }
      },
      "PatchedRBACContentGuard": {
        "type": "object",
        "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "The unique name."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "An optional description."
          }
        }
      },
      "PatchedRole": {
        "type": "object",
        "description": "Serializer for Role.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "The name of this role."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "An optional description."
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of permissions defining the role."
          }
        }
      },
      "PatchedSyncList": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64
          },
          "policy": {
            "$ref": "#/components/schemas/Policy8baEnum"
          },
          "upstream_repository": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "distribution": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "collections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SyncListCollectionSummary"
            }
          },
          "namespaces": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "groups": {
            "type": "string"
          }
        }
      },
      "PatchedTaskCancel": {
        "type": "object",
        "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
        "properties": {
          "state": {
            "type": "string",
            "minLength": 1,
            "description": "The desired state of the task. Only 'canceled' is accepted."
          }
        }
      },
      "PatchedUpstreamPulp": {
        "type": "object",
        "description": "Serializer for a Server.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "A unique name for this Pulp server."
          },
          "base_url": {
            "type": "string",
            "minLength": 1,
            "description": "The transport, hostname, and an optional port of the Pulp server. e.g. https://example.com"
          },
          "api_root": {
            "type": "string",
            "minLength": 1,
            "description": "The API root. Defaults to '/pulp/'."
          },
          "domain": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "The domain of the Pulp server if enabled."
          },
          "ca_cert": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server."
          },
          "client_cert": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "A PEM encoded client certificate used for authentication."
          },
          "client_key": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "A PEM encoded private key used for authentication."
          },
          "tls_validation": {
            "type": "boolean",
            "description": "If True, TLS peer validation must be performed."
          },
          "username": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "The username to be used for authentication when syncing."
          },
          "password": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed."
          },
          "pulp_label_select": {
            "type": "string",
            "nullable": true,
            "description": "One or more comma separated labels that will be used to filter distributions on the upstream Pulp. E.g. \"foo=bar,key=val\" or \"foo,key\""
          }
        }
      },
      "PatchedUser": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "minLength": 1,
            "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
            "pattern": "^[\\w.@+-]+$",
            "maxLength": 150
          },
          "first_name": {
            "type": "string",
            "maxLength": 150
          },
          "last_name": {
            "type": "string",
            "maxLength": 150
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email address",
            "maxLength": 254
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "The groups this user belongs to. A user will get all permissions granted to each of their groups."
          },
          "password": {
            "type": "string",
            "writeOnly": true,
            "maxLength": 128
          },
          "is_superuser": {
            "type": "boolean",
            "title": "Superuser status",
            "description": "Designates that this user has all permissions without explicitly assigning them."
          }
        }
      },
      "Patchedansible.AnsibleDistribution": {
        "type": "object",
        "description": "Serializer for Ansible Distributions.",
        "properties": {
          "base_path": {
            "type": "string",
            "minLength": 1,
            "description": "The base (relative) path component of the published url. Avoid paths that                     overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\")"
          },
          "content_guard": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "An optional content-guard."
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "A unique name. Ex, `rawhide` and `stable`."
          },
          "repository": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "The latest RepositoryVersion for this Repository will be served."
          },
          "repository_version": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "RepositoryVersion to be served"
          },
          "pulp_labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          }
        }
      },
      "Patchedansible.AnsibleNamespaceMetadata": {
        "type": "object",
        "description": "A serializer for Namespaces.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "description": "Required named, only accepts lowercase, numbers and underscores.",
            "maxLength": 64,
            "pattern": "^(?!.*__)[a-z]+[0-9a-z_]*$"
          },
          "company": {
            "type": "string",
            "description": "Optional namespace company owner.",
            "maxLength": 64
          },
          "email": {
            "type": "string",
            "description": "Optional namespace contact email.",
            "maxLength": 256
          },
          "description": {
            "type": "string",
            "description": "Optional short description.",
            "maxLength": 256
          },
          "resources": {
            "type": "string",
            "description": "Optional resource page in markdown format."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NamespaceLink"
            },
            "description": "Labeled related links."
          },
          "avatar": {
            "type": "string",
            "format": "binary",
            "writeOnly": true,
            "description": "Optional avatar image for Namespace"
          }
        }
      },
      "Patchedansible.AnsibleRepository": {
        "type": "object",
        "description": "Serializer for Ansible Repositories.",
        "properties": {
          "pulp_labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "A unique name for this repository."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "An optional description."
          },
          "retain_repo_versions": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Retain X versions of the repository. Default is null which retains all versions.",
            "minimum": 1
          },
          "remote": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "An optional remote to use by default when syncing."
          },
          "last_synced_metadata_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Last synced metadata time."
          },
          "gpgkey": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "Gpg public key to verify collection signatures against"
          },
          "private": {
            "type": "boolean"
          }
        }
      },
      "Patchedansible.CollectionRemote": {
        "type": "object",
        "description": "A serializer for Collection Remotes.",
        "properties": {
          "url": {
            "type": "string",
            "minLength": 1,
            "description": "The URL of an external content source."
          },
          "auth_url": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "The URL to receive a session token from, e.g. used with Automation Hub.",
            "maxLength": 255
          },
          "token": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "maxLength": 2000
          },
          "policy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PolicyDb6Enum"
              }
            ],
            "default": "immediate",
            "description": "The policy to use when downloading content.\n\n* `immediate` - immediate\n* `When syncing, download all metadata and content now.` - When syncing, download all metadata and content now."
          },
          "requirements_file": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "The string version of Collection requirements yaml."
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "username": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "Remote user."
          },
          "password": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "Remote password."
          },
          "tls_validation": {
            "type": "boolean",
            "description": "If True, TLS peer validation must be performed."
          },
          "client_key": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "A PEM encoded private key used for authentication."
          },
          "client_cert": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "A PEM encoded client certificate used for authentication."
          },
          "ca_cert": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server."
          },
          "download_concurrency": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Total number of simultaneous connections. If not set then the default value will be used.",
            "minimum": 1
          },
          "proxy_url": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "The proxy URL. Format: scheme://host:port"
          },
          "proxy_username": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "User for proxy authentication."
          },
          "proxy_password": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "Password for proxy authentication."
          },
          "rate_limit": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Limits requests per second for each concurrent downloader"
          },
          "signed_only": {
            "type": "boolean",
            "default": false,
            "description": "Sync only collections that have a signature"
          }
        }
      },
      "Patchedansible.GitRemote": {
        "type": "object",
        "description": "A serializer for Git Collection Remotes.",
        "properties": {
          "sock_read_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "A unique name for this remote."
          },
          "pulp_labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          },
          "sock_connect_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "connect_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "tls_validation": {
            "type": "boolean",
            "description": "If True, TLS peer validation must be performed."
          },
          "download_concurrency": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Total number of simultaneous connections. If not set then the default value will be used.",
            "minimum": 1
          },
          "max_retries": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used."
          },
          "ca_cert": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server."
          },
          "url": {
            "type": "string",
            "minLength": 1,
            "description": "The URL of an external content source."
          },
          "password": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed."
          },
          "username": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "The username to be used for authentication when syncing."
          },
          "client_key": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "A PEM encoded private key used for authentication."
          },
          "proxy_username": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "The username to authenticte to the proxy."
          },
          "headers": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Headers for aiohttp.Clientsession"
          },
          "client_cert": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "A PEM encoded client certificate used for authentication."
          },
          "proxy_password": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "The password to authenticate to the proxy. Extra leading and trailing whitespace characters are not trimmed."
          },
          "total_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "rate_limit": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Limits requests per second for each concurrent downloader"
          },
          "proxy_url": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "The proxy URL. Format: scheme://host:port"
          },
          "metadata_only": {
            "type": "boolean",
            "description": "If True, only metadata about the content will be stored in Pulp. Clients will retrieve content from the remote URL."
          },
          "git_ref": {
            "type": "string",
            "minLength": 1,
            "description": "A git ref. e.g.: branch, tag, or commit sha."
          }
        }
      },
      "Patchedansible.RoleRemote": {
        "type": "object",
        "description": "A serializer for Ansible Remotes.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "A unique name for this remote."
          },
          "url": {
            "type": "string",
            "minLength": 1,
            "description": "The URL of an external content source."
          },
          "ca_cert": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server."
          },
          "client_cert": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "A PEM encoded client certificate used for authentication."
          },
          "client_key": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "A PEM encoded private key used for authentication."
          },
          "tls_validation": {
            "type": "boolean",
            "description": "If True, TLS peer validation must be performed."
          },
          "proxy_url": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "The proxy URL. Format: scheme://host:port"
          },
          "proxy_username": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "The username to authenticte to the proxy."
          },
          "proxy_password": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "The password to authenticate to the proxy. Extra leading and trailing whitespace characters are not trimmed."
          },
          "username": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "The username to be used for authentication when syncing."
          },
          "password": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed."
          },
          "pulp_labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          },
          "download_concurrency": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Total number of simultaneous connections. If not set then the default value will be used.",
            "minimum": 1
          },
          "max_retries": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used."
          },
          "policy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PolicyDb6Enum"
              }
            ],
            "default": "immediate",
            "description": "The policy to use when downloading content.\n\n* `immediate` - immediate\n* `When syncing, download all metadata and content now.` - When syncing, download all metadata and content now."
          },
          "total_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "connect_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "sock_connect_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "sock_read_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "headers": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Headers for aiohttp.Clientsession"
          },
          "rate_limit": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Limits requests per second for each concurrent downloader"
          }
        }
      },
      "Patchedcontainer.ContainerDistribution": {
        "type": "object",
        "description": "A serializer for ContainerDistribution.",
        "properties": {
          "base_path": {
            "type": "string",
            "minLength": 1,
            "description": "The base (relative) path component of the published url. Avoid paths that                     overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\")"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "A unique name. Ex, `rawhide` and `stable`."
          },
          "pulp_labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          },
          "hidden": {
            "type": "boolean",
            "default": false,
            "description": "Whether this distribution should be shown in the content app."
          },
          "repository": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "The latest RepositoryVersion for this Repository will be served."
          },
          "content_guard": {
            "type": "string",
            "format": "uri",
            "description": "An optional content-guard. If none is specified, a default one will be used."
          },
          "repository_version": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "RepositoryVersion to be served"
          },
          "private": {
            "type": "boolean",
            "description": "Restrict pull access to explicitly authorized users. Defaults to unrestricted pull access."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "An optional description."
          }
        }
      },
      "Patchedcontainer.ContainerPushRepository": {
        "type": "object",
        "description": "Serializer for Container Push Repositories.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "A unique name for this repository."
          },
          "pulp_labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          },
          "manifest_signing_service": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "A reference to an associated signing service."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "An optional description."
          },
          "retain_repo_versions": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Retain X versions of the repository. Default is null which retains all versions.",
            "minimum": 1
          }
        }
      },
      "Patchedcontainer.ContainerRemote": {
        "type": "object",
        "description": "A Serializer for ContainerRemote.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "A unique name for this remote."
          },
          "url": {
            "type": "string",
            "minLength": 1,
            "description": "The URL of an external content source."
          },
          "ca_cert": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server."
          },
          "client_cert": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "A PEM encoded client certificate used for authentication."
          },
          "client_key": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "A PEM encoded private key used for authentication."
          },
          "tls_validation": {
            "type": "boolean",
            "description": "If True, TLS peer validation must be performed."
          },
          "proxy_url": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "The proxy URL. Format: scheme://host:port"
          },
          "proxy_username": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "The username to authenticte to the proxy."
          },
          "proxy_password": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "The password to authenticate to the proxy. Extra leading and trailing whitespace characters are not trimmed."
          },
          "username": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "The username to be used for authentication when syncing."
          },
          "password": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed."
          },
          "pulp_labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          },
          "download_concurrency": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Total number of simultaneous connections. If not set then the default value will be used.",
            "minimum": 1
          },
          "max_retries": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used."
          },
          "policy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Policy762Enum"
              }
            ],
            "default": "immediate",
            "description": "\n        immediate - All manifests and blobs are downloaded and saved during a sync.\n        on_demand - Only tags and manifests are downloaded. Blobs are not\n                    downloaded until they are requested for the first time by a client.\n        streamed - Blobs are streamed to the client with every request and never saved.\n        \n\n* `immediate` - When syncing, download all metadata and content now.\n* `on_demand` - When syncing, download metadata, but do not download content now. Instead, download content as clients request it, and save it in Pulp to be served for future client requests.\n* `streamed` - When syncing, download metadata, but do not download content now. Instead,download content as clients request it, but never save it in Pulp. This causes future requests for that same content to have to be downloaded again."
          },
          "total_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "connect_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "sock_connect_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "sock_read_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "headers": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Headers for aiohttp.Clientsession"
          },
          "rate_limit": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Limits requests per second for each concurrent downloader"
          },
          "upstream_name": {
            "type": "string",
            "minLength": 1,
            "description": "Name of the upstream repository"
          },
          "include_tags": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255
            },
            "nullable": true,
            "description": "\n            A list of tags to include during sync.\n            Wildcards *, ? are recognized.\n            'include_tags' is evaluated before 'exclude_tags'.\n            "
          },
          "exclude_tags": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255
            },
            "nullable": true,
            "description": "\n            A list of tags to exclude during sync.\n            Wildcards *, ? are recognized.\n            'exclude_tags' is evaluated after 'include_tags'.\n            "
          },
          "sigstore": {
            "type": "string",
            "minLength": 1,
            "description": "A URL to a sigstore to download image signatures from",
            "format": "uri"
          }
        }
      },
      "Patchedcontainer.ContainerRepository": {
        "type": "object",
        "description": "Serializer for Container Repositories.",
        "properties": {
          "pulp_labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "A unique name for this repository."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "An optional description."
          },
          "retain_repo_versions": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Retain X versions of the repository. Default is null which retains all versions.",
            "minimum": 1
          },
          "remote": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "An optional remote to use by default when syncing."
          },
          "manifest_signing_service": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "A reference to an associated signing service."
          }
        }
      },
      "Policy762Enum": {
        "enum": ["immediate", "on_demand", "streamed"],
        "type": "string",
        "description": "* `immediate` - When syncing, download all metadata and content now.\n* `on_demand` - When syncing, download metadata, but do not download content now. Instead, download content as clients request it, and save it in Pulp to be served for future client requests.\n* `streamed` - When syncing, download metadata, but do not download content now. Instead,download content as clients request it, but never save it in Pulp. This causes future requests for that same content to have to be downloaded again."
      },
      "Policy8baEnum": {
        "enum": ["exclude", "include"],
        "type": "string",
        "description": "* `exclude` - exclude\n* `include` - include"
      },
      "PolicyDb6Enum": {
        "enum": ["immediate", "When syncing, download all metadata and content now."],
        "type": "string",
        "description": "* `immediate` - immediate\n* `When syncing, download all metadata and content now.` - When syncing, download all metadata and content now."
      },
      "ProgressReport": {
        "type": "object",
        "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
        "properties": {}
      },
      "ProgressReportResponse": {
        "type": "object",
        "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
        "properties": {
          "message": {
            "type": "string",
            "readOnly": true,
            "description": "The message shown to the user for the progress report."
          },
          "code": {
            "type": "string",
            "readOnly": true,
            "description": "Identifies the type of progress report'."
          },
          "state": {
            "type": "string",
            "readOnly": true,
            "description": "The current state of the progress report. The possible values are: 'waiting', 'skipped', 'running', 'completed', 'failed', 'canceled' and 'canceling'. The default is 'waiting'."
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "The total count of items."
          },
          "done": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "The count of items already processed. Defaults to 0."
          },
          "suffix": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "description": "The suffix to be shown with the progress report."
          }
        }
      },
      "PublicationResponse": {
        "type": "object",
        "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "repository_version": {
            "type": "string",
            "format": "uri"
          },
          "repository": {
            "type": "string",
            "format": "uri",
            "description": "A URI of the repository to be published."
          }
        }
      },
      "PulpExport": {
        "type": "object",
        "description": "Serializer for PulpExports.",
        "properties": {
          "task": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "A URI of the task that ran the Export."
          },
          "full": {
            "type": "boolean",
            "writeOnly": true,
            "default": true,
            "description": "Do a Full (true) or Incremental (false) export."
          },
          "dry_run": {
            "type": "boolean",
            "writeOnly": true,
            "default": false,
            "description": "Generate report on what would be exported and disk-space required."
          },
          "versions": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri",
              "writeOnly": true
            },
            "writeOnly": true,
            "description": "List of explicit repo-version hrefs to export (replaces current_version)."
          },
          "chunk_size": {
            "type": "string",
            "writeOnly": true,
            "minLength": 1,
            "description": "Chunk export-tarfile into pieces of chunk_size bytes. Recognizes units of B/KB/MB/GB/TB. A chunk has a maximum size of 1TB."
          },
          "start_versions": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri",
              "writeOnly": true
            },
            "writeOnly": true,
            "description": "List of explicit last-exported-repo-version hrefs (replaces last_export)."
          }
        }
      },
      "PulpExportResponse": {
        "type": "object",
        "description": "Serializer for PulpExports.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "task": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "A URI of the task that ran the Export."
          },
          "exported_resources": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "readOnly": true,
            "description": "Resources that were exported."
          },
          "params": {
            "type": "object",
            "readOnly": true,
            "description": "Any additional parameters that were used to create the export."
          },
          "output_file_info": {
            "type": "object",
            "readOnly": true,
            "description": "Dictionary of filename: sha256hash entries for export-output-file(s)"
          },
          "toc_info": {
            "type": "object",
            "readOnly": true,
            "description": "Filename and sha256-checksum of table-of-contents for this export"
          }
        }
      },
      "PulpExporter": {
        "type": "object",
        "description": "Serializer for pulp exporters.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Unique name of the file system exporter."
          },
          "path": {
            "type": "string",
            "minLength": 1,
            "description": "File system directory to store exported tar.gzs."
          },
          "repositories": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "last_export": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "Last attempted export for this PulpExporter"
          }
        },
        "required": ["name", "path", "repositories"]
      },
      "PulpExporterResponse": {
        "type": "object",
        "description": "Serializer for pulp exporters.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "name": {
            "type": "string",
            "description": "Unique name of the file system exporter."
          },
          "path": {
            "type": "string",
            "description": "File system directory to store exported tar.gzs."
          },
          "repositories": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "last_export": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "Last attempted export for this PulpExporter"
          }
        },
        "required": ["name", "path", "repositories"]
      },
      "PulpImport": {
        "type": "object",
        "description": "Serializer for call to import into Pulp.",
        "properties": {
          "path": {
            "type": "string",
            "minLength": 1,
            "description": "Path to export that will be imported."
          },
          "toc": {
            "type": "string",
            "minLength": 1,
            "description": "Path to a table-of-contents file describing chunks to be validated, reassembled, and imported."
          },
          "create_repositories": {
            "type": "boolean",
            "default": false,
            "description": "If True, missing repositories will be automatically created during the import."
          }
        }
      },
      "PulpImportCheck": {
        "type": "object",
        "description": "Check validity of provided import-options.\n\nProvides the ability to check that an import is 'sane' without having to actually\ncreate an importer.",
        "properties": {
          "path": {
            "type": "string",
            "minLength": 1,
            "description": "Path to export-tar-gz that will be imported."
          },
          "toc": {
            "type": "string",
            "minLength": 1,
            "description": "Path to a table-of-contents file describing chunks to be validated, reassembled, and imported."
          },
          "repo_mapping": {
            "type": "string",
            "minLength": 1,
            "description": "Mapping of repo names in an export file to the repo names in Pulp. For example, if the export has a repo named 'foo' and the repo to import content into was 'bar', the mapping would be \"{'foo': 'bar'}\"."
          }
        }
      },
      "PulpImportCheckResponse": {
        "type": "object",
        "description": "Return the response to a PulpImport import-check call.",
        "properties": {
          "toc": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluationResponse"
              }
            ],
            "description": "Evaluation of proposed 'toc' file for PulpImport"
          },
          "path": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluationResponse"
              }
            ],
            "description": "Evaluation of proposed 'path' file for PulpImport"
          },
          "repo_mapping": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluationResponse"
              }
            ],
            "description": "Evaluation of proposed 'repo_mapping' file for PulpImport"
          }
        }
      },
      "PulpImporter": {
        "type": "object",
        "description": "Serializer for PulpImporters.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Unique name of the Importer."
          },
          "repo_mapping": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "minLength": 1
            },
            "description": "Mapping of repo names in an export file to the repo names in Pulp. For example, if the export has a repo named 'foo' and the repo to import content into was 'bar', the mapping would be \"{'foo': 'bar'}\"."
          }
        },
        "required": ["name"]
      },
      "PulpImporterResponse": {
        "type": "object",
        "description": "Serializer for PulpImporters.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "name": {
            "type": "string",
            "description": "Unique name of the Importer."
          },
          "repo_mapping": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Mapping of repo names in an export file to the repo names in Pulp. For example, if the export has a repo named 'foo' and the repo to import content into was 'bar', the mapping would be \"{'foo': 'bar'}\"."
          }
        },
        "required": ["name"]
      },
      "Purge": {
        "type": "object",
        "properties": {
          "finished_before": {
            "type": "string",
            "format": "date-time",
            "default": "2023-06-16",
            "description": "Purge tasks completed earlier than this timestamp. Format '%Y-%m-%d[T%H:%M:%S]'"
          },
          "states": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatesEnum"
            },
            "default": ["completed"],
            "description": "List of task-states to be purged. Only 'final' states are allowed."
          }
        }
      },
      "RBACContentGuard": {
        "type": "object",
        "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "The unique name."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "An optional description."
          }
        },
        "required": ["name"]
      },
      "RBACContentGuardResponse": {
        "type": "object",
        "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "name": {
            "type": "string",
            "description": "The unique name."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "An optional description."
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupUserResponse"
            },
            "readOnly": true
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupResponse"
            },
            "readOnly": true
          }
        },
        "required": ["name"]
      },
      "ReclaimSpace": {
        "type": "object",
        "description": "Serializer for reclaim disk space operation.",
        "properties": {
          "repo_hrefs": {
            "type": "array",
            "items": {},
            "description": "Will reclaim space for the specified list of repos. Use ['*'] to specify all repos."
          },
          "repo_versions_keeplist": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "description": "Will exclude repo versions from space reclaim."
          }
        },
        "required": ["repo_hrefs"]
      },
      "RecursiveManage": {
        "type": "object",
        "description": "Serializer for adding and removing content to/from a Container repository.",
        "properties": {
          "content_units": {
            "type": "array",
            "items": {},
            "description": "A list of content units to operate on."
          }
        }
      },
      "RedisConnectionResponse": {
        "type": "object",
        "description": "Serializer for information about the Redis connection",
        "properties": {
          "connected": {
            "type": "boolean",
            "description": "Info about whether the app can connect to Redis"
          }
        },
        "required": ["connected"]
      },
      "RemoteResponse": {
        "type": "object",
        "description": "Every remote defined by a plugin should have a Remote serializer that inherits from this\nclass. Please import from `pulpcore.plugin.serializers` rather than from this module directly.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "name": {
            "type": "string",
            "description": "A unique name for this remote."
          },
          "url": {
            "type": "string",
            "description": "The URL of an external content source."
          },
          "ca_cert": {
            "type": "string",
            "nullable": true,
            "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server."
          },
          "client_cert": {
            "type": "string",
            "nullable": true,
            "description": "A PEM encoded client certificate used for authentication."
          },
          "tls_validation": {
            "type": "boolean",
            "description": "If True, TLS peer validation must be performed."
          },
          "proxy_url": {
            "type": "string",
            "nullable": true,
            "description": "The proxy URL. Format: scheme://host:port"
          },
          "pulp_labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          },
          "pulp_last_updated": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of the most recent update of the remote."
          },
          "download_concurrency": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Total number of simultaneous connections. If not set then the default value will be used.",
            "minimum": 1
          },
          "max_retries": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used."
          },
          "policy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PolicyDb6Enum"
              }
            ],
            "default": "immediate",
            "description": "The policy to use when downloading content.\n\n* `immediate` - immediate\n* `When syncing, download all metadata and content now.` - When syncing, download all metadata and content now."
          },
          "total_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "connect_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "sock_connect_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "sock_read_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "headers": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Headers for aiohttp.Clientsession"
          },
          "rate_limit": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Limits requests per second for each concurrent downloader"
          },
          "hidden_fields": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "is_set": {
                  "type": "boolean"
                }
              },
              "required": ["is_set", "name"]
            },
            "readOnly": true,
            "description": "List of hidden (write only) fields"
          }
        },
        "required": ["name", "url"]
      },
      "RemoveImage": {
        "type": "object",
        "description": "A serializer for parsing and validating data associated with the image removal.",
        "properties": {
          "digest": {
            "type": "string",
            "minLength": 1,
            "description": "sha256 of the Manifest file"
          }
        },
        "required": ["digest"]
      },
      "RemoveSignatures": {
        "type": "object",
        "description": "A serializer for parsing and validating data associated with the signatures removal.",
        "properties": {
          "signed_with_key_id": {
            "type": "string",
            "minLength": 1,
            "description": "key_id of the key the signatures were produced with"
          }
        },
        "required": ["signed_with_key_id"]
      },
      "RemoveSignaturesResponse": {
        "type": "object",
        "description": "A serializer for parsing and validating data associated with the signatures removal.",
        "properties": {
          "signed_with_key_id": {
            "type": "string",
            "description": "key_id of the key the signatures were produced with"
          }
        },
        "required": ["signed_with_key_id"]
      },
      "Repair": {
        "type": "object",
        "properties": {
          "verify_checksums": {
            "type": "boolean",
            "default": true,
            "description": "Will verify that the checksum of all stored files matches what saved in the database. Otherwise only the existence of the files will be checked. Enabled by default"
          }
        }
      },
      "RepoMetadataResponse": {
        "type": "object",
        "description": "A serializer to display RepositoryVersion metadata.",
        "properties": {
          "published": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["published"]
      },
      "Repository": {
        "type": "object",
        "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
        "properties": {
          "pulp_labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "A unique name for this repository."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "An optional description."
          },
          "retain_repo_versions": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Retain X versions of the repository. Default is null which retains all versions.",
            "minimum": 1
          },
          "remote": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "An optional remote to use by default when syncing."
          }
        },
        "required": ["name"]
      },
      "RepositoryAddRemoveContent": {
        "type": "object",
        "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
        "properties": {
          "add_content_units": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "description": "A list of content units to add to a new repository version. This content is added after remove_content_units are removed."
          },
          "remove_content_units": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "description": "A list of content units to remove from the latest repository version. You may also specify '*' as an entry to remove all content. This content is removed before add_content_units are added."
          },
          "base_version": {
            "type": "string",
            "format": "uri",
            "description": "A repository version whose content will be used as the initial set of content for the new repository version"
          }
        }
      },
      "RepositoryResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "pulp_id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "pulp_last_updated": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "content_count": {
            "type": "integer",
            "readOnly": true
          },
          "gpgkey": {
            "type": "string"
          }
        },
        "required": ["gpgkey", "name"]
      },
      "RepositorySign": {
        "type": "object",
        "description": "Serializer for container images signing.",
        "properties": {
          "manifest_signing_service": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "A signing service to sign with. This will override a signing service set on the repo."
          },
          "future_base_path": {
            "type": "string",
            "minLength": 1,
            "description": "Future base path content will be distributed at for sync repos"
          },
          "tags_list": {
            "type": "array",
            "items": {},
            "description": "A list of tags to sign."
          }
        }
      },
      "RepositoryVersionResponse": {
        "type": "object",
        "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "number": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "repository": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "base_version": {
            "type": "string",
            "format": "uri",
            "description": "A repository version whose content was used as the initial set of content for this repository version"
          },
          "content_summary": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContentSummaryResponse"
              }
            ],
            "readOnly": true,
            "description": "Various count summaries of the content in the version and the HREF to view them."
          }
        }
      },
      "Role": {
        "type": "object",
        "description": "Serializer for Role.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "The name of this role."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "An optional description."
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of permissions defining the role."
          }
        },
        "required": ["name", "permissions"]
      },
      "RoleResponse": {
        "type": "object",
        "description": "Serializer for Role.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "name": {
            "type": "string",
            "description": "The name of this role."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "An optional description."
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of permissions defining the role."
          },
          "locked": {
            "type": "boolean",
            "readOnly": true,
            "description": "True if the role is system managed."
          }
        },
        "required": ["name", "permissions"]
      },
      "SigningServiceResponse": {
        "type": "object",
        "description": "A serializer for the model declaring a signing service.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "name": {
            "type": "string",
            "description": "A unique name used to recognize a script."
          },
          "public_key": {
            "type": "string",
            "description": "The value of a public key used for the repository verification."
          },
          "pubkey_fingerprint": {
            "type": "string",
            "description": "The fingerprint of the public key."
          },
          "script": {
            "type": "string",
            "description": "An absolute path to a script which is going to be used for the signing."
          }
        },
        "required": ["name", "pubkey_fingerprint", "public_key", "script"]
      },
      "StatesEnum": {
        "enum": ["skipped", "completed", "failed", "canceled"],
        "type": "string",
        "description": "* `skipped` - skipped\n* `completed` - completed\n* `failed` - failed\n* `canceled` - canceled"
      },
      "StatusResponse": {
        "type": "object",
        "description": "Serializer for the status information of the app",
        "properties": {
          "versions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VersionResponse"
            },
            "description": "Version information of Pulp components"
          },
          "online_workers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkerResponse"
            },
            "description": "List of online workers known to the application. An online worker is actively heartbeating and can respond to new work"
          },
          "online_content_apps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContentAppStatusResponse"
            },
            "description": "List of online content apps known to the application. An online content app is actively heartbeating and can serve data to clients"
          },
          "database_connection": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DatabaseConnectionResponse"
              }
            ],
            "description": "Database connection information"
          },
          "redis_connection": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RedisConnectionResponse"
              }
            ],
            "description": "Redis connection information"
          },
          "storage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StorageResponse"
              }
            ],
            "description": "Storage information"
          },
          "content_settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContentSettingsResponse"
              }
            ],
            "description": "Content-app settings"
          },
          "domain_enabled": {
            "type": "boolean",
            "description": "Is Domains enabled"
          }
        },
        "required": [
          "content_settings",
          "database_connection",
          "domain_enabled",
          "online_content_apps",
          "online_workers",
          "versions"
        ]
      },
      "StorageClassEnum": {
        "enum": [
          "pulpcore.app.models.storage.FileSystem",
          "storages.backends.s3boto3.S3Boto3Storage",
          "storages.backends.azure_storage.AzureStorage"
        ],
        "type": "string",
        "description": "* `pulpcore.app.models.storage.FileSystem` - Use local filesystem as storage\n* `storages.backends.s3boto3.S3Boto3Storage` - Use Amazon S3 as storage\n* `storages.backends.azure_storage.AzureStorage` - Use Azure Blob as storage"
      },
      "StorageResponse": {
        "type": "object",
        "description": "Serializer for information about the storage system",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int64",
            "description": "Total number of bytes",
            "minimum": 0
          },
          "used": {
            "type": "integer",
            "format": "int64",
            "description": "Number of bytes in use",
            "minimum": 0
          },
          "free": {
            "type": "integer",
            "format": "int64",
            "description": "Number of free bytes",
            "minimum": 0
          }
        },
        "required": ["free", "total", "used"]
      },
      "SyncList": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64
          },
          "policy": {
            "$ref": "#/components/schemas/Policy8baEnum"
          },
          "upstream_repository": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "distribution": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "collections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SyncListCollectionSummary"
            }
          },
          "namespaces": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "groups": {
            "type": "string"
          }
        },
        "required": ["collections", "groups", "name", "namespaces"]
      },
      "SyncListCollectionSummary": {
        "type": "object",
        "properties": {
          "namespace": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64
          }
        },
        "required": ["name", "namespace"]
      },
      "SyncListCollectionSummaryResponse": {
        "type": "object",
        "properties": {
          "namespace": {
            "type": "string",
            "maxLength": 64
          },
          "name": {
            "type": "string",
            "maxLength": 64
          }
        },
        "required": ["name", "namespace"]
      },
      "SyncListResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 64
          },
          "policy": {
            "$ref": "#/components/schemas/Policy8baEnum"
          },
          "upstream_repository": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "repository": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "nullable": true
          },
          "distribution": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "collections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SyncListCollectionSummaryResponse"
            }
          },
          "namespaces": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "groups": {
            "type": "string"
          }
        },
        "required": ["collections", "groups", "name", "namespaces"]
      },
      "TagCopy": {
        "type": "object",
        "description": "Serializer for copying tags from a source repository to a destination repository.",
        "properties": {
          "source_repository": {
            "type": "string",
            "format": "uri",
            "title": "Repository",
            "description": "A URI of the repository to copy content from."
          },
          "source_repository_version": {
            "type": "string",
            "format": "uri",
            "description": "A URI of the repository version to copy content from."
          },
          "names": {
            "type": "array",
            "items": {},
            "description": "A list of tag names to copy."
          }
        }
      },
      "TagImage": {
        "type": "object",
        "description": "A serializer for parsing and validating data associated with a manifest tagging.",
        "properties": {
          "tag": {
            "type": "string",
            "minLength": 1,
            "description": "A tag name",
            "pattern": "^[A-Za-z0-9][A-Za-z0-9._-]*$"
          },
          "digest": {
            "type": "string",
            "minLength": 1,
            "description": "sha256 of the Manifest file"
          }
        },
        "required": ["digest", "tag"]
      },
      "TagResponse": {
        "type": "object",
        "description": "A serializer for the Tag model.",
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "Task": {
        "type": "object",
        "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "The name of task."
          },
          "logging_cid": {
            "type": "string",
            "minLength": 1,
            "description": "The logging correlation id associated with this task"
          }
        },
        "required": ["logging_cid", "name"]
      },
      "TaskGroupOperationResponse": {
        "type": "object",
        "description": "Serializer for asynchronous operations that return a task group.",
        "properties": {
          "task_group": {
            "type": "string",
            "format": "uri",
            "description": "The href of the task group."
          }
        },
        "required": ["task_group"]
      },
      "TaskGroupResponse": {
        "type": "object",
        "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "A description of the task group."
          },
          "all_tasks_dispatched": {
            "type": "boolean",
            "description": "Whether all tasks have been spawned for this task group."
          },
          "waiting": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Number of tasks in the 'waiting' state"
          },
          "skipped": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Number of tasks in the 'skipped' state"
          },
          "running": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Number of tasks in the 'running' state"
          },
          "completed": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Number of tasks in the 'completed' state"
          },
          "canceled": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Number of tasks in the 'canceled' state"
          },
          "failed": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Number of tasks in the 'failed' state"
          },
          "canceling": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Number of tasks in the 'canceling' state"
          },
          "group_progress_reports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupProgressReportResponse"
            },
            "readOnly": true
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MinimalTaskResponse"
            },
            "readOnly": true
          }
        },
        "required": ["all_tasks_dispatched", "description"]
      },
      "TaskResponse": {
        "type": "object",
        "properties": {
          "pulp_id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "finished_at": {
            "type": "string",
            "format": "date-time"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "type": "string"
          },
          "error": {
            "type": "object",
            "nullable": true
          },
          "worker": {
            "type": "object",
            "nullable": true,
            "readOnly": true
          },
          "parent_task": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "child_tasks": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "progress_reports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProgressReportResponse"
            },
            "readOnly": true
          }
        },
        "required": [
          "child_tasks",
          "created_at",
          "finished_at",
          "name",
          "pulp_id",
          "started_at",
          "state",
          "updated_at"
        ]
      },
      "TaskScheduleResponse": {
        "type": "object",
        "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "name": {
            "type": "string",
            "description": "The name of the task schedule."
          },
          "task_name": {
            "type": "string",
            "description": "The name of the task to be scheduled."
          },
          "dispatch_interval": {
            "type": "string",
            "description": "Periodicity of the schedule."
          },
          "next_dispatch": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of the next time the task will be dispatched."
          },
          "last_task": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "The last task dispatched by this schedule."
          }
        },
        "required": ["dispatch_interval", "name", "task_name"]
      },
      "TaskSummaryResponse": {
        "type": "object",
        "description": "TaskSerializer but without detail fields.\n\nFor use in /tasks/<str:pk>/ detail views.",
        "properties": {
          "pulp_id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "finished_at": {
            "type": "string",
            "format": "date-time"
          },
          "href": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": ["finished_at", "name", "pulp_id", "started_at", "state"]
      },
      "UnTagImage": {
        "type": "object",
        "description": "A serializer for parsing and validating data associated with a manifest untagging.",
        "properties": {
          "tag": {
            "type": "string",
            "minLength": 1,
            "description": "A tag name",
            "pattern": "^[A-Za-z0-9][A-Za-z0-9._-]*$"
          }
        },
        "required": ["tag"]
      },
      "UnpaginatedCollectionVersionResponse": {
        "type": "object",
        "description": "A serializer for unpaginated CollectionVersion.",
        "properties": {
          "version": {
            "type": "string",
            "readOnly": true
          },
          "href": {
            "type": "string",
            "description": "Get href.",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "requires_ansible": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "marks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Get a list of mark values filtering only those in the current repo.",
            "readOnly": true
          },
          "artifact": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ArtifactRefResponse"
              }
            ],
            "readOnly": true
          },
          "collection": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CollectionRefResponse"
              }
            ],
            "readOnly": true
          },
          "download_url": {
            "type": "string",
            "description": "Get artifact download URL.",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "namespace": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CollectionNamespaceResponse"
              }
            ],
            "readOnly": true
          },
          "signatures": {
            "type": "string",
            "readOnly": true
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CollectionMetadataResponse"
              }
            ],
            "readOnly": true
          },
          "git_url": {
            "type": "string",
            "description": "Get the git URL.",
            "readOnly": true
          },
          "git_commit_sha": {
            "type": "string",
            "description": "Get the git commit sha.",
            "readOnly": true
          }
        },
        "required": ["created_at", "updated_at"]
      },
      "Upload": {
        "type": "object",
        "description": "Serializer for chunked uploads.",
        "properties": {
          "size": {
            "type": "integer",
            "format": "int64",
            "description": "The size of the upload in bytes."
          }
        },
        "required": ["size"]
      },
      "UploadChunk": {
        "type": "object",
        "description": "A mixin for validating unknown serializers' fields.",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "writeOnly": true,
            "description": "A chunk of the uploaded file."
          },
          "sha256": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "The SHA-256 checksum of the chunk if available."
          }
        },
        "required": ["file"]
      },
      "UploadChunkResponse": {
        "type": "object",
        "description": "A mixin for validating unknown serializers' fields.",
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          }
        }
      },
      "UploadCommit": {
        "type": "object",
        "description": "A mixin for validating unknown serializers' fields.",
        "properties": {
          "sha256": {
            "type": "string",
            "minLength": 1,
            "description": "The expected sha256 checksum for the file."
          }
        },
        "required": ["sha256"]
      },
      "UploadDetailResponse": {
        "type": "object",
        "description": "Serializer for chunked uploads.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "description": "The size of the upload in bytes."
          },
          "completed": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp when upload is committed."
          },
          "chunks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UploadChunkResponse"
            },
            "readOnly": true
          }
        },
        "required": ["size"]
      },
      "UploadResponse": {
        "type": "object",
        "description": "Serializer for chunked uploads.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "description": "The size of the upload in bytes."
          },
          "completed": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp when upload is committed."
          }
        },
        "required": ["size"]
      },
      "UpstreamPulp": {
        "type": "object",
        "description": "Serializer for a Server.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "A unique name for this Pulp server."
          },
          "base_url": {
            "type": "string",
            "minLength": 1,
            "description": "The transport, hostname, and an optional port of the Pulp server. e.g. https://example.com"
          },
          "api_root": {
            "type": "string",
            "minLength": 1,
            "description": "The API root. Defaults to '/pulp/'."
          },
          "domain": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "The domain of the Pulp server if enabled."
          },
          "ca_cert": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server."
          },
          "client_cert": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "A PEM encoded client certificate used for authentication."
          },
          "client_key": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "A PEM encoded private key used for authentication."
          },
          "tls_validation": {
            "type": "boolean",
            "description": "If True, TLS peer validation must be performed."
          },
          "username": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "The username to be used for authentication when syncing."
          },
          "password": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed."
          },
          "pulp_label_select": {
            "type": "string",
            "nullable": true,
            "description": "One or more comma separated labels that will be used to filter distributions on the upstream Pulp. E.g. \"foo=bar,key=val\" or \"foo,key\""
          }
        },
        "required": ["api_root", "base_url", "name"]
      },
      "UpstreamPulpResponse": {
        "type": "object",
        "description": "Serializer for a Server.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "name": {
            "type": "string",
            "description": "A unique name for this Pulp server."
          },
          "base_url": {
            "type": "string",
            "description": "The transport, hostname, and an optional port of the Pulp server. e.g. https://example.com"
          },
          "api_root": {
            "type": "string",
            "description": "The API root. Defaults to '/pulp/'."
          },
          "domain": {
            "type": "string",
            "nullable": true,
            "description": "The domain of the Pulp server if enabled."
          },
          "ca_cert": {
            "type": "string",
            "nullable": true,
            "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server."
          },
          "client_cert": {
            "type": "string",
            "nullable": true,
            "description": "A PEM encoded client certificate used for authentication."
          },
          "tls_validation": {
            "type": "boolean",
            "description": "If True, TLS peer validation must be performed."
          },
          "pulp_last_updated": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of the most recent update of the remote."
          },
          "hidden_fields": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "is_set": {
                  "type": "boolean"
                }
              },
              "required": ["is_set", "name"]
            },
            "readOnly": true,
            "description": "List of hidden (write only) fields"
          },
          "pulp_label_select": {
            "type": "string",
            "nullable": true,
            "description": "One or more comma separated labels that will be used to filter distributions on the upstream Pulp. E.g. \"foo=bar,key=val\" or \"foo,key\""
          }
        },
        "required": ["api_root", "base_url", "name"]
      },
      "User": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "minLength": 1,
            "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
            "pattern": "^[\\w.@+-]+$",
            "maxLength": 150
          },
          "first_name": {
            "type": "string",
            "maxLength": 150
          },
          "last_name": {
            "type": "string",
            "maxLength": 150
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email address",
            "maxLength": 254
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "The groups this user belongs to. A user will get all permissions granted to each of their groups."
          },
          "password": {
            "type": "string",
            "writeOnly": true,
            "maxLength": 128
          },
          "is_superuser": {
            "type": "boolean",
            "title": "Superuser status",
            "description": "Designates that this user has all permissions without explicitly assigning them."
          }
        },
        "required": ["username"]
      },
      "UserGroup": {
        "type": "object",
        "description": "Serializer for Groups that belong to an User.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Name.",
            "maxLength": 150
          }
        },
        "required": ["name"]
      },
      "UserGroupResponse": {
        "type": "object",
        "description": "Serializer for Groups that belong to an User.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name.",
            "maxLength": 150
          },
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          }
        },
        "required": ["name"]
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "username": {
            "type": "string",
            "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
            "pattern": "^[\\w.@+-]+$",
            "maxLength": 150
          },
          "first_name": {
            "type": "string",
            "maxLength": 150
          },
          "last_name": {
            "type": "string",
            "maxLength": 150
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email address",
            "maxLength": 254
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "The groups this user belongs to. A user will get all permissions granted to each of their groups."
          },
          "date_joined": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "is_superuser": {
            "type": "boolean",
            "title": "Superuser status",
            "description": "Designates that this user has all permissions without explicitly assigning them."
          },
          "auth_provider": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": ["username"]
      },
      "UserRole": {
        "type": "object",
        "description": "Serializer for UserRole.",
        "properties": {
          "role": {
            "type": "string",
            "minLength": 1
          },
          "content_object": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "pulp_href of the object for which role permissions should be asserted. If set to 'null', permissions will act on either domain or model-level."
          },
          "domain": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "Domain this role should be applied on, mutually exclusive with content_object."
          }
        },
        "required": ["content_object", "role"]
      },
      "UserRoleResponse": {
        "type": "object",
        "description": "Serializer for UserRole.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "role": {
            "type": "string"
          },
          "content_object": {
            "type": "string",
            "nullable": true,
            "description": "pulp_href of the object for which role permissions should be asserted. If set to 'null', permissions will act on either domain or model-level."
          },
          "description": {
            "type": "string",
            "readOnly": true
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "readOnly": true
          },
          "domain": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "Domain this role should be applied on, mutually exclusive with content_object."
          }
        },
        "required": ["content_object", "role"]
      },
      "VersionResponse": {
        "type": "object",
        "description": "Serializer for the version information of Pulp components",
        "properties": {
          "component": {
            "type": "string",
            "description": "Name of a versioned component of Pulp"
          },
          "version": {
            "type": "string",
            "description": "Version of the component (e.g. 3.0.0)"
          },
          "package": {
            "type": "string",
            "description": "Python package name providing the component"
          },
          "domain_compatible": {
            "type": "boolean",
            "description": "Domain feature compatibility of component"
          }
        },
        "required": ["component", "domain_compatible", "package", "version"]
      },
      "WorkerResponse": {
        "type": "object",
        "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "The name of the worker."
          },
          "last_heartbeat": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of the last time the worker talked to the service."
          },
          "current_task": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "The task this worker is currently executing, or empty if the worker is not currently assigned to a task."
          }
        }
      },
      "ansible.AnsibleDistribution": {
        "type": "object",
        "description": "Serializer for Ansible Distributions.",
        "properties": {
          "base_path": {
            "type": "string",
            "minLength": 1,
            "description": "The base (relative) path component of the published url. Avoid paths that                     overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\")"
          },
          "content_guard": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "An optional content-guard."
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "A unique name. Ex, `rawhide` and `stable`."
          },
          "repository": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "The latest RepositoryVersion for this Repository will be served."
          },
          "repository_version": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "RepositoryVersion to be served"
          },
          "pulp_labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          }
        },
        "required": ["base_path", "name"]
      },
      "ansible.AnsibleDistributionResponse": {
        "type": "object",
        "description": "Serializer for Ansible Distributions.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "base_path": {
            "type": "string",
            "description": "The base (relative) path component of the published url. Avoid paths that                     overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\")"
          },
          "content_guard": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "An optional content-guard."
          },
          "name": {
            "type": "string",
            "description": "A unique name. Ex, `rawhide` and `stable`."
          },
          "repository": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "The latest RepositoryVersion for this Repository will be served."
          },
          "repository_version": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "RepositoryVersion to be served"
          },
          "client_url": {
            "type": "string",
            "description": "The URL of a Collection content source.",
            "readOnly": true
          },
          "pulp_labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          }
        },
        "required": ["base_path", "name"]
      },
      "ansible.AnsibleNamespaceMetadata": {
        "type": "object",
        "description": "A serializer for Namespaces.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "description": "Required named, only accepts lowercase, numbers and underscores.",
            "maxLength": 64,
            "pattern": "^(?!.*__)[a-z]+[0-9a-z_]*$"
          },
          "company": {
            "type": "string",
            "description": "Optional namespace company owner.",
            "maxLength": 64
          },
          "email": {
            "type": "string",
            "description": "Optional namespace contact email.",
            "maxLength": 256
          },
          "description": {
            "type": "string",
            "description": "Optional short description.",
            "maxLength": 256
          },
          "resources": {
            "type": "string",
            "description": "Optional resource page in markdown format."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NamespaceLink"
            },
            "description": "Labeled related links."
          },
          "avatar": {
            "type": "string",
            "format": "binary",
            "writeOnly": true,
            "description": "Optional avatar image for Namespace"
          }
        },
        "required": ["name"]
      },
      "ansible.AnsibleNamespaceMetadataResponse": {
        "type": "object",
        "description": "A serializer for Namespaces.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Required named, only accepts lowercase, numbers and underscores.",
            "maxLength": 64,
            "minLength": 3,
            "pattern": "^(?!.*__)[a-z]+[0-9a-z_]*$"
          },
          "company": {
            "type": "string",
            "description": "Optional namespace company owner.",
            "maxLength": 64
          },
          "email": {
            "type": "string",
            "description": "Optional namespace contact email.",
            "maxLength": 256
          },
          "description": {
            "type": "string",
            "description": "Optional short description.",
            "maxLength": 256
          },
          "resources": {
            "type": "string",
            "description": "Optional resource page in markdown format."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NamespaceLinkResponse"
            },
            "description": "Labeled related links."
          },
          "avatar_sha256": {
            "type": "string",
            "readOnly": true,
            "description": "SHA256 digest of avatar image if present.",
            "maxLength": 64
          },
          "avatar_url": {
            "type": "string",
            "readOnly": true,
            "description": "Download link for avatar image if present."
          },
          "metadata_sha256": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": ["name"]
      },
      "ansible.AnsibleRepository": {
        "type": "object",
        "description": "Serializer for Ansible Repositories.",
        "properties": {
          "pulp_labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "A unique name for this repository."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "An optional description."
          },
          "retain_repo_versions": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Retain X versions of the repository. Default is null which retains all versions.",
            "minimum": 1
          },
          "remote": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "An optional remote to use by default when syncing."
          },
          "last_synced_metadata_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Last synced metadata time."
          },
          "gpgkey": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "Gpg public key to verify collection signatures against"
          },
          "private": {
            "type": "boolean"
          }
        },
        "required": ["name"]
      },
      "ansible.AnsibleRepositoryResponse": {
        "type": "object",
        "description": "Serializer for Ansible Repositories.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "versions_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          },
          "latest_version_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "A unique name for this repository."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "An optional description."
          },
          "retain_repo_versions": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Retain X versions of the repository. Default is null which retains all versions.",
            "minimum": 1
          },
          "remote": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "An optional remote to use by default when syncing."
          },
          "last_synced_metadata_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Last synced metadata time."
          },
          "gpgkey": {
            "type": "string",
            "nullable": true,
            "description": "Gpg public key to verify collection signatures against"
          },
          "last_sync_task": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskResponse"
              }
            ],
            "readOnly": true
          },
          "private": {
            "type": "boolean"
          }
        },
        "required": ["name"]
      },
      "ansible.Collection": {
        "type": "object",
        "description": "A serializer for Ansible Collections.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "The name of the Collection."
          },
          "namespace": {
            "type": "string",
            "minLength": 1,
            "description": "The namespace of the Collection."
          }
        },
        "required": ["name", "namespace"]
      },
      "ansible.CollectionRemote": {
        "type": "object",
        "description": "A serializer for Collection Remotes.",
        "properties": {
          "url": {
            "type": "string",
            "minLength": 1,
            "description": "The URL of an external content source."
          },
          "auth_url": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "The URL to receive a session token from, e.g. used with Automation Hub.",
            "maxLength": 255
          },
          "token": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "maxLength": 2000
          },
          "policy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PolicyDb6Enum"
              }
            ],
            "default": "immediate",
            "description": "The policy to use when downloading content.\n\n* `immediate` - immediate\n* `When syncing, download all metadata and content now.` - When syncing, download all metadata and content now."
          },
          "requirements_file": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "The string version of Collection requirements yaml."
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "username": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "Remote user."
          },
          "password": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "Remote password."
          },
          "tls_validation": {
            "type": "boolean",
            "description": "If True, TLS peer validation must be performed."
          },
          "client_key": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "A PEM encoded private key used for authentication."
          },
          "client_cert": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "A PEM encoded client certificate used for authentication."
          },
          "ca_cert": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server."
          },
          "download_concurrency": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Total number of simultaneous connections. If not set then the default value will be used.",
            "minimum": 1
          },
          "proxy_url": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "The proxy URL. Format: scheme://host:port"
          },
          "proxy_username": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "User for proxy authentication."
          },
          "proxy_password": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "Password for proxy authentication."
          },
          "rate_limit": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Limits requests per second for each concurrent downloader"
          },
          "signed_only": {
            "type": "boolean",
            "default": false,
            "description": "Sync only collections that have a signature"
          }
        },
        "required": ["url"]
      },
      "ansible.CollectionRemoteResponse": {
        "type": "object",
        "description": "A serializer for Collection Remotes.",
        "properties": {
          "pk": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "title": "Pulp id"
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "description": "The URL of an external content source."
          },
          "auth_url": {
            "type": "string",
            "nullable": true,
            "description": "The URL to receive a session token from, e.g. used with Automation Hub.",
            "maxLength": 255
          },
          "policy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PolicyDb6Enum"
              }
            ],
            "default": "immediate",
            "description": "The policy to use when downloading content.\n\n* `immediate` - immediate\n* `When syncing, download all metadata and content now.` - When syncing, download all metadata and content now."
          },
          "requirements_file": {
            "type": "string",
            "nullable": true,
            "description": "The string version of Collection requirements yaml."
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "username": {
            "type": "string",
            "nullable": true,
            "description": "Remote user."
          },
          "tls_validation": {
            "type": "boolean",
            "description": "If True, TLS peer validation must be performed."
          },
          "client_cert": {
            "type": "string",
            "nullable": true,
            "description": "A PEM encoded client certificate used for authentication."
          },
          "ca_cert": {
            "type": "string",
            "nullable": true,
            "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server."
          },
          "last_sync_task": {
            "type": "string",
            "readOnly": true
          },
          "repositories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnsibleRepositoryResponse"
            },
            "readOnly": true
          },
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "download_concurrency": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Total number of simultaneous connections. If not set then the default value will be used.",
            "minimum": 1
          },
          "proxy_url": {
            "type": "string",
            "nullable": true,
            "description": "The proxy URL. Format: scheme://host:port"
          },
          "proxy_username": {
            "type": "string",
            "nullable": true,
            "description": "User for proxy authentication."
          },
          "write_only_fields": {
            "type": "array",
            "items": {},
            "readOnly": true
          },
          "rate_limit": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Limits requests per second for each concurrent downloader"
          },
          "signed_only": {
            "type": "boolean",
            "default": false,
            "description": "Sync only collections that have a signature"
          }
        },
        "required": ["url"]
      },
      "ansible.CollectionResponse": {
        "type": "object",
        "description": "A serializer for Ansible Collections.",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the Collection."
          },
          "namespace": {
            "type": "string",
            "description": "The namespace of the Collection."
          }
        },
        "required": ["name", "namespace"]
      },
      "ansible.CollectionVersion": {
        "type": "object",
        "description": "A serializer for CollectionVersion Content.",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "writeOnly": true,
            "description": "An uploaded file that may be turned into the artifact of the content unit."
          },
          "repository": {
            "type": "string",
            "format": "uri",
            "writeOnly": true,
            "description": "A URI of a repository the new content unit should be associated with."
          },
          "artifact": {
            "type": "string",
            "format": "uri",
            "description": "Artifact file representing the physical content"
          },
          "upload": {
            "type": "string",
            "format": "uri",
            "writeOnly": true,
            "description": "An uncommitted upload that may be turned into the artifact of the content unit."
          },
          "expected_name": {
            "type": "string",
            "writeOnly": true,
            "minLength": 1,
            "description": "The name of the collection.",
            "maxLength": 64
          },
          "expected_namespace": {
            "type": "string",
            "writeOnly": true,
            "minLength": 1,
            "description": "The namespace of the collection.",
            "maxLength": 64
          },
          "expected_version": {
            "type": "string",
            "writeOnly": true,
            "minLength": 1,
            "description": "The version of the collection.",
            "maxLength": 128
          }
        }
      },
      "ansible.CollectionVersionMark": {
        "type": "object",
        "description": "A serializer for mark models.",
        "properties": {
          "marked_collection": {
            "type": "string",
            "format": "uri",
            "description": "The content this mark is pointing to."
          },
          "value": {
            "type": "string",
            "minLength": 1,
            "description": "The string value of this mark.",
            "pattern": "^[-a-zA-Z0-9_]+$"
          }
        },
        "required": ["marked_collection", "value"]
      },
      "ansible.CollectionVersionMarkResponse": {
        "type": "object",
        "description": "A serializer for mark models.",
        "properties": {
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "marked_collection": {
            "type": "string",
            "format": "uri",
            "description": "The content this mark is pointing to."
          },
          "value": {
            "type": "string",
            "description": "The string value of this mark.",
            "pattern": "^[-a-zA-Z0-9_]+$"
          }
        },
        "required": ["marked_collection", "value"]
      },
      "ansible.CollectionVersionResponse": {
        "type": "object",
        "description": "A serializer for CollectionVersion Content.",
        "properties": {
          "artifact": {
            "type": "string",
            "format": "uri",
            "description": "Artifact file representing the physical content"
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "sha256": {
            "type": "string",
            "readOnly": true,
            "description": "The SHA-256 checksum if available."
          },
          "md5": {
            "type": "string",
            "readOnly": true,
            "description": "The MD5 checksum if available."
          },
          "sha1": {
            "type": "string",
            "readOnly": true,
            "description": "The SHA-1 checksum if available."
          },
          "sha224": {
            "type": "string",
            "readOnly": true,
            "description": "The SHA-224 checksum if available."
          },
          "sha384": {
            "type": "string",
            "readOnly": true,
            "description": "The SHA-384 checksum if available."
          },
          "sha512": {
            "type": "string",
            "readOnly": true,
            "description": "The SHA-512 checksum if available."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "description": "A collection identifier."
          },
          "authors": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 64
            },
            "readOnly": true,
            "description": "A list of the CollectionVersion content's authors."
          },
          "contents": {
            "type": "object",
            "readOnly": true,
            "description": "A JSON field with data about the contents."
          },
          "dependencies": {
            "type": "object",
            "readOnly": true,
            "description": "A dict declaring Collections that this collection requires to be installed for it to be usable."
          },
          "description": {
            "type": "string",
            "readOnly": true,
            "description": "A short summary description of the collection."
          },
          "docs_blob": {
            "type": "object",
            "readOnly": true,
            "description": "A JSON field holding the various documentation blobs in the collection."
          },
          "manifest": {
            "type": "object",
            "readOnly": true,
            "description": "A JSON field holding MANIFEST.json data."
          },
          "files": {
            "type": "object",
            "readOnly": true,
            "description": "A JSON field holding FILES.json data."
          },
          "documentation": {
            "type": "string",
            "readOnly": true,
            "description": "The URL to any online docs.",
            "maxLength": 2000
          },
          "homepage": {
            "type": "string",
            "readOnly": true,
            "description": "The URL to the homepage of the collection/project.",
            "maxLength": 2000
          },
          "issues": {
            "type": "string",
            "readOnly": true,
            "description": "The URL to the collection issue tracker.",
            "maxLength": 2000
          },
          "license": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 32
            },
            "readOnly": true,
            "description": "A list of licenses for content inside of a collection."
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "The name of the collection.",
            "maxLength": 64
          },
          "namespace": {
            "type": "string",
            "readOnly": true,
            "description": "The namespace of the collection.",
            "maxLength": 64
          },
          "origin_repository": {
            "type": "string",
            "readOnly": true,
            "description": "The URL of the originating SCM repository.",
            "maxLength": 2000
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ansible.TagResponse"
            },
            "readOnly": true
          },
          "version": {
            "type": "string",
            "readOnly": true,
            "description": "The version of the collection.",
            "maxLength": 128
          },
          "requires_ansible": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "description": "The version of Ansible required to use the collection. Multiple versions can be separated with a comma.",
            "maxLength": 255
          }
        }
      },
      "ansible.CollectionVersionSignature": {
        "type": "object",
        "description": "A serializer for signature models.",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "writeOnly": true,
            "description": "An uploaded file that may be turned into the artifact of the content unit."
          },
          "repository": {
            "type": "string",
            "format": "uri",
            "writeOnly": true,
            "description": "A URI of a repository the new content unit should be associated with."
          },
          "signed_collection": {
            "type": "string",
            "format": "uri",
            "description": "The content this signature is pointing to."
          }
        },
        "required": ["file", "signed_collection"]
      },
      "ansible.CollectionVersionSignatureResponse": {
        "type": "object",
        "description": "A serializer for signature models.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "signed_collection": {
            "type": "string",
            "format": "uri",
            "description": "The content this signature is pointing to."
          },
          "pubkey_fingerprint": {
            "type": "string",
            "readOnly": true,
            "description": "The fingerprint of the public key."
          },
          "signing_service": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "nullable": true,
            "description": "The signing service used to create the signature."
          }
        },
        "required": ["signed_collection"]
      },
      "ansible.GitRemote": {
        "type": "object",
        "description": "A serializer for Git Collection Remotes.",
        "properties": {
          "sock_read_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "A unique name for this remote."
          },
          "pulp_labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          },
          "sock_connect_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "connect_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "tls_validation": {
            "type": "boolean",
            "description": "If True, TLS peer validation must be performed."
          },
          "download_concurrency": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Total number of simultaneous connections. If not set then the default value will be used.",
            "minimum": 1
          },
          "max_retries": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used."
          },
          "ca_cert": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server."
          },
          "url": {
            "type": "string",
            "minLength": 1,
            "description": "The URL of an external content source."
          },
          "password": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed."
          },
          "username": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "The username to be used for authentication when syncing."
          },
          "client_key": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "A PEM encoded private key used for authentication."
          },
          "proxy_username": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "The username to authenticte to the proxy."
          },
          "headers": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Headers for aiohttp.Clientsession"
          },
          "client_cert": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "A PEM encoded client certificate used for authentication."
          },
          "proxy_password": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "The password to authenticate to the proxy. Extra leading and trailing whitespace characters are not trimmed."
          },
          "total_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "rate_limit": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Limits requests per second for each concurrent downloader"
          },
          "proxy_url": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "The proxy URL. Format: scheme://host:port"
          },
          "metadata_only": {
            "type": "boolean",
            "description": "If True, only metadata about the content will be stored in Pulp. Clients will retrieve content from the remote URL."
          },
          "git_ref": {
            "type": "string",
            "minLength": 1,
            "description": "A git ref. e.g.: branch, tag, or commit sha."
          }
        },
        "required": ["name", "url"]
      },
      "ansible.GitRemoteResponse": {
        "type": "object",
        "description": "A serializer for Git Collection Remotes.",
        "properties": {
          "sock_read_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "name": {
            "type": "string",
            "description": "A unique name for this remote."
          },
          "pulp_labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          },
          "sock_connect_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "connect_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "tls_validation": {
            "type": "boolean",
            "description": "If True, TLS peer validation must be performed."
          },
          "download_concurrency": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Total number of simultaneous connections. If not set then the default value will be used.",
            "minimum": 1
          },
          "max_retries": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used."
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "ca_cert": {
            "type": "string",
            "nullable": true,
            "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server."
          },
          "url": {
            "type": "string",
            "description": "The URL of an external content source."
          },
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "hidden_fields": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "is_set": {
                  "type": "boolean"
                }
              },
              "required": ["is_set", "name"]
            },
            "readOnly": true,
            "description": "List of hidden (write only) fields"
          },
          "headers": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Headers for aiohttp.Clientsession"
          },
          "pulp_last_updated": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of the most recent update of the remote."
          },
          "client_cert": {
            "type": "string",
            "nullable": true,
            "description": "A PEM encoded client certificate used for authentication."
          },
          "total_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "rate_limit": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Limits requests per second for each concurrent downloader"
          },
          "proxy_url": {
            "type": "string",
            "nullable": true,
            "description": "The proxy URL. Format: scheme://host:port"
          },
          "metadata_only": {
            "type": "boolean",
            "description": "If True, only metadata about the content will be stored in Pulp. Clients will retrieve content from the remote URL."
          },
          "git_ref": {
            "type": "string",
            "description": "A git ref. e.g.: branch, tag, or commit sha."
          }
        },
        "required": ["name", "url"]
      },
      "ansible.Role": {
        "type": "object",
        "description": "A serializer for Role versions.",
        "properties": {
          "artifact": {
            "type": "string",
            "format": "uri",
            "description": "Artifact file representing the physical content"
          },
          "version": {
            "type": "string",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "minLength": 1
          },
          "namespace": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": ["artifact", "name", "namespace", "version"]
      },
      "ansible.RoleRemote": {
        "type": "object",
        "description": "A serializer for Ansible Remotes.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "A unique name for this remote."
          },
          "url": {
            "type": "string",
            "minLength": 1,
            "description": "The URL of an external content source."
          },
          "ca_cert": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server."
          },
          "client_cert": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "A PEM encoded client certificate used for authentication."
          },
          "client_key": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "A PEM encoded private key used for authentication."
          },
          "tls_validation": {
            "type": "boolean",
            "description": "If True, TLS peer validation must be performed."
          },
          "proxy_url": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "The proxy URL. Format: scheme://host:port"
          },
          "proxy_username": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "The username to authenticte to the proxy."
          },
          "proxy_password": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "The password to authenticate to the proxy. Extra leading and trailing whitespace characters are not trimmed."
          },
          "username": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "The username to be used for authentication when syncing."
          },
          "password": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed."
          },
          "pulp_labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          },
          "download_concurrency": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Total number of simultaneous connections. If not set then the default value will be used.",
            "minimum": 1
          },
          "max_retries": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used."
          },
          "policy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PolicyDb6Enum"
              }
            ],
            "default": "immediate",
            "description": "The policy to use when downloading content.\n\n* `immediate` - immediate\n* `When syncing, download all metadata and content now.` - When syncing, download all metadata and content now."
          },
          "total_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "connect_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "sock_connect_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "sock_read_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "headers": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Headers for aiohttp.Clientsession"
          },
          "rate_limit": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Limits requests per second for each concurrent downloader"
          }
        },
        "required": ["name", "url"]
      },
      "ansible.RoleRemoteResponse": {
        "type": "object",
        "description": "A serializer for Ansible Remotes.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "name": {
            "type": "string",
            "description": "A unique name for this remote."
          },
          "url": {
            "type": "string",
            "description": "The URL of an external content source."
          },
          "ca_cert": {
            "type": "string",
            "nullable": true,
            "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server."
          },
          "client_cert": {
            "type": "string",
            "nullable": true,
            "description": "A PEM encoded client certificate used for authentication."
          },
          "tls_validation": {
            "type": "boolean",
            "description": "If True, TLS peer validation must be performed."
          },
          "proxy_url": {
            "type": "string",
            "nullable": true,
            "description": "The proxy URL. Format: scheme://host:port"
          },
          "pulp_labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          },
          "pulp_last_updated": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of the most recent update of the remote."
          },
          "download_concurrency": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Total number of simultaneous connections. If not set then the default value will be used.",
            "minimum": 1
          },
          "max_retries": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used."
          },
          "policy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PolicyDb6Enum"
              }
            ],
            "default": "immediate",
            "description": "The policy to use when downloading content.\n\n* `immediate` - immediate\n* `When syncing, download all metadata and content now.` - When syncing, download all metadata and content now."
          },
          "total_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "connect_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "sock_connect_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "sock_read_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "headers": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Headers for aiohttp.Clientsession"
          },
          "rate_limit": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Limits requests per second for each concurrent downloader"
          },
          "hidden_fields": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "is_set": {
                  "type": "boolean"
                }
              },
              "required": ["is_set", "name"]
            },
            "readOnly": true,
            "description": "List of hidden (write only) fields"
          }
        },
        "required": ["name", "url"]
      },
      "ansible.RoleResponse": {
        "type": "object",
        "description": "A serializer for Role versions.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "artifact": {
            "type": "string",
            "format": "uri",
            "description": "Artifact file representing the physical content"
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "version": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          }
        },
        "required": ["artifact", "name", "namespace", "version"]
      },
      "ansible.Tag": {
        "type": "object",
        "description": "A serializer for nesting in the CollectionVersion model.",
        "properties": {}
      },
      "ansible.TagResponse": {
        "type": "object",
        "description": "A serializer for nesting in the CollectionVersion model.",
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "The name of the Tag."
          }
        }
      },
      "container.BlobResponse": {
        "type": "object",
        "description": "Serializer for Blobs.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "artifact": {
            "type": "string",
            "format": "uri",
            "description": "Artifact file representing the physical content"
          },
          "digest": {
            "type": "string",
            "description": "sha256 of the Blob file"
          }
        },
        "required": ["artifact", "digest"]
      },
      "container.ContainerDistribution": {
        "type": "object",
        "description": "A serializer for ContainerDistribution.",
        "properties": {
          "base_path": {
            "type": "string",
            "minLength": 1,
            "description": "The base (relative) path component of the published url. Avoid paths that                     overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\")"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "A unique name. Ex, `rawhide` and `stable`."
          },
          "pulp_labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          },
          "hidden": {
            "type": "boolean",
            "default": false,
            "description": "Whether this distribution should be shown in the content app."
          },
          "repository": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "The latest RepositoryVersion for this Repository will be served."
          },
          "content_guard": {
            "type": "string",
            "format": "uri",
            "description": "An optional content-guard. If none is specified, a default one will be used."
          },
          "repository_version": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "RepositoryVersion to be served"
          },
          "private": {
            "type": "boolean",
            "description": "Restrict pull access to explicitly authorized users. Defaults to unrestricted pull access."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "An optional description."
          }
        },
        "required": ["base_path", "name"]
      },
      "container.ContainerDistributionResponse": {
        "type": "object",
        "description": "A serializer for ContainerDistribution.",
        "properties": {
          "base_path": {
            "type": "string",
            "description": "The base (relative) path component of the published url. Avoid paths that                     overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\")"
          },
          "name": {
            "type": "string",
            "description": "A unique name. Ex, `rawhide` and `stable`."
          },
          "pulp_labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          },
          "hidden": {
            "type": "boolean",
            "default": false,
            "description": "Whether this distribution should be shown in the content app."
          },
          "repository": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "The latest RepositoryVersion for this Repository will be served."
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "content_guard": {
            "type": "string",
            "format": "uri",
            "description": "An optional content-guard. If none is specified, a default one will be used."
          },
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "repository_version": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "RepositoryVersion to be served"
          },
          "registry_path": {
            "type": "string",
            "readOnly": true,
            "description": "The Registry hostname/name/ to use with docker pull command defined by this distribution."
          },
          "namespace": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Namespace this distribution belongs to."
          },
          "private": {
            "type": "boolean",
            "description": "Restrict pull access to explicitly authorized users. Defaults to unrestricted pull access."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "An optional description."
          }
        },
        "required": ["base_path", "name"]
      },
      "container.ContainerNamespace": {
        "type": "object",
        "description": "Serializer for ContainerNamespaces.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": ["name"]
      },
      "container.ContainerNamespaceResponse": {
        "type": "object",
        "description": "Serializer for ContainerNamespaces.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "name": {
            "type": "string"
          }
        },
        "required": ["name"]
      },
      "container.ContainerPushRepository": {
        "type": "object",
        "description": "Serializer for Container Push Repositories.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "A unique name for this repository."
          },
          "pulp_labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          },
          "manifest_signing_service": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "A reference to an associated signing service."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "An optional description."
          },
          "retain_repo_versions": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Retain X versions of the repository. Default is null which retains all versions.",
            "minimum": 1
          }
        },
        "required": ["name"]
      },
      "container.ContainerPushRepositoryResponse": {
        "type": "object",
        "description": "Serializer for Container Push Repositories.",
        "properties": {
          "name": {
            "type": "string",
            "description": "A unique name for this repository."
          },
          "pulp_labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          },
          "versions_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "manifest_signing_service": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "A reference to an associated signing service."
          },
          "latest_version_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "An optional description."
          },
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "retain_repo_versions": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Retain X versions of the repository. Default is null which retains all versions.",
            "minimum": 1
          }
        },
        "required": ["name"]
      },
      "container.ContainerRemote": {
        "type": "object",
        "description": "A Serializer for ContainerRemote.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "A unique name for this remote."
          },
          "url": {
            "type": "string",
            "minLength": 1,
            "description": "The URL of an external content source."
          },
          "ca_cert": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server."
          },
          "client_cert": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "A PEM encoded client certificate used for authentication."
          },
          "client_key": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "A PEM encoded private key used for authentication."
          },
          "tls_validation": {
            "type": "boolean",
            "description": "If True, TLS peer validation must be performed."
          },
          "proxy_url": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "The proxy URL. Format: scheme://host:port"
          },
          "proxy_username": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "The username to authenticte to the proxy."
          },
          "proxy_password": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "The password to authenticate to the proxy. Extra leading and trailing whitespace characters are not trimmed."
          },
          "username": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "The username to be used for authentication when syncing."
          },
          "password": {
            "type": "string",
            "writeOnly": true,
            "nullable": true,
            "minLength": 1,
            "description": "The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed."
          },
          "pulp_labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          },
          "download_concurrency": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Total number of simultaneous connections. If not set then the default value will be used.",
            "minimum": 1
          },
          "max_retries": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used."
          },
          "policy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Policy762Enum"
              }
            ],
            "default": "immediate",
            "description": "\n        immediate - All manifests and blobs are downloaded and saved during a sync.\n        on_demand - Only tags and manifests are downloaded. Blobs are not\n                    downloaded until they are requested for the first time by a client.\n        streamed - Blobs are streamed to the client with every request and never saved.\n        \n\n* `immediate` - When syncing, download all metadata and content now.\n* `on_demand` - When syncing, download metadata, but do not download content now. Instead, download content as clients request it, and save it in Pulp to be served for future client requests.\n* `streamed` - When syncing, download metadata, but do not download content now. Instead,download content as clients request it, but never save it in Pulp. This causes future requests for that same content to have to be downloaded again."
          },
          "total_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "connect_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "sock_connect_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "sock_read_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "headers": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Headers for aiohttp.Clientsession"
          },
          "rate_limit": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Limits requests per second for each concurrent downloader"
          },
          "upstream_name": {
            "type": "string",
            "minLength": 1,
            "description": "Name of the upstream repository"
          },
          "include_tags": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255
            },
            "nullable": true,
            "description": "\n            A list of tags to include during sync.\n            Wildcards *, ? are recognized.\n            'include_tags' is evaluated before 'exclude_tags'.\n            "
          },
          "exclude_tags": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255
            },
            "nullable": true,
            "description": "\n            A list of tags to exclude during sync.\n            Wildcards *, ? are recognized.\n            'exclude_tags' is evaluated after 'include_tags'.\n            "
          },
          "sigstore": {
            "type": "string",
            "minLength": 1,
            "description": "A URL to a sigstore to download image signatures from",
            "format": "uri"
          }
        },
        "required": ["name", "upstream_name", "url"]
      },
      "container.ContainerRemoteResponse": {
        "type": "object",
        "description": "A Serializer for ContainerRemote.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "name": {
            "type": "string",
            "description": "A unique name for this remote."
          },
          "url": {
            "type": "string",
            "description": "The URL of an external content source."
          },
          "ca_cert": {
            "type": "string",
            "nullable": true,
            "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server."
          },
          "client_cert": {
            "type": "string",
            "nullable": true,
            "description": "A PEM encoded client certificate used for authentication."
          },
          "tls_validation": {
            "type": "boolean",
            "description": "If True, TLS peer validation must be performed."
          },
          "proxy_url": {
            "type": "string",
            "nullable": true,
            "description": "The proxy URL. Format: scheme://host:port"
          },
          "pulp_labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          },
          "pulp_last_updated": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of the most recent update of the remote."
          },
          "download_concurrency": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Total number of simultaneous connections. If not set then the default value will be used.",
            "minimum": 1
          },
          "max_retries": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used."
          },
          "policy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Policy762Enum"
              }
            ],
            "default": "immediate",
            "description": "\n        immediate - All manifests and blobs are downloaded and saved during a sync.\n        on_demand - Only tags and manifests are downloaded. Blobs are not\n                    downloaded until they are requested for the first time by a client.\n        streamed - Blobs are streamed to the client with every request and never saved.\n        \n\n* `immediate` - When syncing, download all metadata and content now.\n* `on_demand` - When syncing, download metadata, but do not download content now. Instead, download content as clients request it, and save it in Pulp to be served for future client requests.\n* `streamed` - When syncing, download metadata, but do not download content now. Instead,download content as clients request it, but never save it in Pulp. This causes future requests for that same content to have to be downloaded again."
          },
          "total_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "connect_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "sock_connect_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "sock_read_timeout": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "nullable": true,
            "description": "aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used."
          },
          "headers": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Headers for aiohttp.Clientsession"
          },
          "rate_limit": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Limits requests per second for each concurrent downloader"
          },
          "hidden_fields": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "is_set": {
                  "type": "boolean"
                }
              },
              "required": ["is_set", "name"]
            },
            "readOnly": true,
            "description": "List of hidden (write only) fields"
          },
          "upstream_name": {
            "type": "string",
            "description": "Name of the upstream repository"
          },
          "include_tags": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 255
            },
            "nullable": true,
            "description": "\n            A list of tags to include during sync.\n            Wildcards *, ? are recognized.\n            'include_tags' is evaluated before 'exclude_tags'.\n            "
          },
          "exclude_tags": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 255
            },
            "nullable": true,
            "description": "\n            A list of tags to exclude during sync.\n            Wildcards *, ? are recognized.\n            'exclude_tags' is evaluated after 'include_tags'.\n            "
          },
          "sigstore": {
            "type": "string",
            "description": "A URL to a sigstore to download image signatures from",
            "format": "uri"
          }
        },
        "required": ["name", "upstream_name", "url"]
      },
      "container.ContainerRepository": {
        "type": "object",
        "description": "Serializer for Container Repositories.",
        "properties": {
          "pulp_labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "A unique name for this repository."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "An optional description."
          },
          "retain_repo_versions": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Retain X versions of the repository. Default is null which retains all versions.",
            "minimum": 1
          },
          "remote": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "An optional remote to use by default when syncing."
          },
          "manifest_signing_service": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "A reference to an associated signing service."
          }
        },
        "required": ["name"]
      },
      "container.ContainerRepositoryResponse": {
        "type": "object",
        "description": "Serializer for Container Repositories.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "versions_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          },
          "latest_version_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "A unique name for this repository."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "An optional description."
          },
          "retain_repo_versions": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Retain X versions of the repository. Default is null which retains all versions.",
            "minimum": 1
          },
          "remote": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "An optional remote to use by default when syncing."
          },
          "manifest_signing_service": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "A reference to an associated signing service."
          }
        },
        "required": ["name"]
      },
      "container.ManifestResponse": {
        "type": "object",
        "description": "Serializer for Manifests.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "artifact": {
            "type": "string",
            "format": "uri",
            "description": "Artifact file representing the physical content"
          },
          "digest": {
            "type": "string",
            "description": "sha256 of the Manifest file"
          },
          "schema_version": {
            "type": "integer",
            "format": "int64",
            "description": "Manifest schema version"
          },
          "media_type": {
            "type": "string",
            "description": "Manifest media type of the file"
          },
          "listed_manifests": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "description": "Manifests that are referenced by this Manifest List"
          },
          "config_blob": {
            "type": "string",
            "format": "uri",
            "description": "Blob that contains configuration for this Manifest"
          },
          "blobs": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "description": "Blobs that are referenced by this Manifest"
          }
        },
        "required": [
          "artifact",
          "blobs",
          "digest",
          "listed_manifests",
          "media_type",
          "schema_version"
        ]
      },
      "container.ManifestSignatureResponse": {
        "type": "object",
        "description": "Serializer for image manifest signatures.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "name": {
            "type": "string",
            "description": "Signature name in the format of `digest_algo:manifest_digest@random_32_chars`"
          },
          "digest": {
            "type": "string",
            "description": "sha256 digest of the signature blob"
          },
          "type": {
            "type": "string",
            "description": "Container signature type, e.g. 'atomic'"
          },
          "key_id": {
            "type": "string",
            "description": "Signing key ID"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of a signature"
          },
          "creator": {
            "type": "string",
            "description": "Signature creator"
          },
          "signed_manifest": {
            "type": "string",
            "format": "uri",
            "description": "Manifest that is signed"
          }
        },
        "required": ["creator", "digest", "key_id", "name", "signed_manifest", "timestamp", "type"]
      },
      "container.TagResponse": {
        "type": "object",
        "description": "Serializer for Tags.",
        "properties": {
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "pulp_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          },
          "name": {
            "type": "string",
            "description": "Tag name"
          },
          "tagged_manifest": {
            "type": "string",
            "format": "uri",
            "description": "Manifest that is tagged"
          }
        },
        "required": ["name", "tagged_manifest"]
      },
      "galaxy.ContainerRegistryRemoteResponse": {
        "type": "object",
        "description": "Every remote defined by a plugin should have a Remote serializer that inherits from this\nclass. Please import from `pulpcore.plugin.serializers` rather than from this module directly.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "pulp_href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "A unique name for this remote."
          },
          "url": {
            "type": "string",
            "description": "The URL of an external content source."
          },
          "policy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PolicyDb6Enum"
              }
            ],
            "default": "immediate",
            "description": "The policy to use when downloading content.\n\n* `immediate` - immediate\n* `When syncing, download all metadata and content now.` - When syncing, download all metadata and content now."
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "tls_validation": {
            "type": "boolean",
            "description": "If True, TLS peer validation must be performed."
          },
          "client_cert": {
            "type": "string",
            "nullable": true,
            "description": "A PEM encoded client certificate used for authentication."
          },
          "ca_cert": {
            "type": "string",
            "nullable": true,
            "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server."
          },
          "last_sync_task": {
            "type": "string",
            "readOnly": true
          },
          "download_concurrency": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Total number of simultaneous connections. If not set then the default value will be used.",
            "minimum": 1
          },
          "proxy_url": {
            "type": "string",
            "nullable": true,
            "description": "The proxy URL. Format: scheme://host:port"
          },
          "write_only_fields": {
            "type": "array",
            "items": {},
            "readOnly": true
          },
          "rate_limit": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Limits requests per second for each concurrent downloader"
          },
          "is_indexable": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "required": ["name", "url"]
      },
      "galaxy.Login": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "minLength": 1
          },
          "password": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": ["password", "username"]
      },
      "galaxy.LoginResponse": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": ["password", "username"]
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      },
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "sessionid"
      },
      "tokenAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "Token-based authentication with required prefix \"Token\""
      }
    }
  },
  "servers": [
    {
      "url": "http://beta-galaxy.ansible.com/"
    }
  ]
}
