diff --git a/cypress.awx.config.ts b/cypress.awx.config.ts
index 95e69d081..a5ab15cdd 100644
--- a/cypress.awx.config.ts
+++ b/cypress.awx.config.ts
@@ -7,5 +7,4 @@ baseConfig.e2e!.specPattern = 'cypress/e2e/awx/**/*.cy.ts';
 baseConfig.e2e!.baseUrl = 'https://localhost:4101';
 baseConfig.component!.specPattern = 'frontend/awx/**/*.cy.{js,jsx,ts,tsx}';
 setValue(baseConfig, 'component.devServer.webpackConfig.devServer.port', 4201);
-
 module.exports = defineConfig(baseConfig);
diff --git a/cypress.eda.config.ts b/cypress.eda.config.ts
index 4a37890aa..8b7524b3d 100644
--- a/cypress.eda.config.ts
+++ b/cypress.eda.config.ts
@@ -7,5 +7,4 @@ baseConfig.e2e!.specPattern = 'cypress/e2e/eda/**/*.cy.ts';
 baseConfig.e2e!.baseUrl = 'https://localhost:4103';
 baseConfig.component!.specPattern = 'frontend/eda/**/*.cy.{js,jsx,ts,tsx}';
 setValue(baseConfig, 'component.devServer.webpackConfig.devServer.port', 4203);
-
 module.exports = defineConfig(baseConfig);
diff --git a/cypress/e2e/awx/administration/activity-stream.cy.ts b/cypress/e2e/awx/administration/activity-stream.cy.ts
index 73f695199..fb69dbde4 100644
--- a/cypress/e2e/awx/administration/activity-stream.cy.ts
+++ b/cypress/e2e/awx/administration/activity-stream.cy.ts
@@ -1,111 +1,114 @@
-import { AwxItemsResponse } from '../../../../frontend/awx/common/AwxItemsResponse';
-import { awxAPI } from '../../../support/formatApiPathForAwx';
+import { Inventory } from '../../../../frontend/awx/interfaces/Inventory';
 import { Organization } from '../../../../frontend/awx/interfaces/Organization';
-import { Team } from '../../../../frontend/awx/interfaces/Team';
 import { AwxUser } from '../../../../frontend/awx/interfaces/User';
+import { awxAPI } from '../../../support/formatApiPathForAwx';
 
 describe('activity-stream', () => {
-  let team: Team;
-  let activeUser: AwxUser;
+  let inventory: Inventory;
+  let awxOrganization: Organization;
+  let currentUser: AwxUser;
 
   before(function () {
-    cy.createAwxTeam({ organization: (this.globalAwxOrganization as Organization).id }).then(
-      (createdTeam) => {
-        team = createdTeam;
-      }
-    );
-    cy.requestGet<AwxItemsResponse<AwxUser>>(awxAPI`/me/`)
-      .its('results')
-      .then((results) => {
-        activeUser = results[0];
+    cy.createAwxOrganization().then((thisAwxOrg) => {
+      awxOrganization = thisAwxOrg;
+
+      cy.createAwxInventory(awxOrganization).then((inv) => {
+        inventory = inv;
+
+        cy.getCurrentUser().then((user) => {
+          currentUser = user;
+        });
       });
+    });
   });
 
   after(function () {
-    cy.deleteAwxTeam(team, { failOnStatusCode: false });
-  });
-
-  beforeEach(function () {
-    cy.navigateTo('awx', 'activity-stream');
-    cy.verifyPageTitle('Activity Stream');
+    cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
+    cy.deleteAwxOrganization(awxOrganization, { failOnStatusCode: false });
   });
 
-  function openEventDetails(teamName: string) {
-    cy.getTableRow('event', `created team ${teamName}`, { disableFilter: true }).within(() => {
-      cy.getByDataCy('view-event-details').click();
-    });
+  function openEventDetails(inventoryName: string) {
+    cy.getTableRow('event', ` created inventory ${inventoryName}`, { disableFilter: true }).within(
+      () => {
+        cy.getByDataCy('view-event-details').click();
+      }
+    );
   }
 
-  it('can render the activity stream list page', function () {
-    cy.verifyPageTitle('Activity Stream');
-  });
-
   it.skip('event column displays correct info', function () {
-    cy.getTableRow('event', `created team ${team.name}`, { disableFilter: true }).within(() => {
-      cy.getByDataCy('event-column-cell').should('have.text', `created team ${team.name}`);
-    });
+    cy.navigateTo('awx', 'activity-stream');
+    cy.verifyPageTitle('Activity Stream');
+    cy.getTableRow('event', ` created inventory ${inventory.name}`, { disableFilter: true }).within(
+      () => {
+        cy.getByDataCy('event-column-cell').should(
+          'have.text',
+          ` created inventory ${inventory.name}`
+        );
+      }
+    );
   });
 
   it.skip('event details modal displays correct info', function () {
-    openEventDetails(team.name);
+    cy.navigateTo('awx', 'activity-stream');
+    cy.verifyPageTitle('Activity Stream');
+    openEventDetails(inventory.name);
     cy.getModal().within(() => {
-      cy.getByDataCy('initiated-by').should('have.text', activeUser.username);
-      cy.getByDataCy('action').should('have.text', `created team ${team.name}`);
+      cy.getByDataCy('initiated-by').should('have.text', currentUser.username);
+      cy.getByDataCy('action').should('have.text', ` created inventory ${inventory.name}`);
       cy.getByDataCy('time').should('not.be.empty');
     });
     cy.clickModalButton('Close');
   });
 
   it('can navigate to event resource detail page from activity stream list page', function () {
-    cy.filterTableByTextFilter('keyword', team.name);
-    cy.getTableRow('event', `created team ${team.name}`, { disableFilter: true }).within(() => {
-      cy.getByDataCy('source-resource-detail').click();
-    });
-    cy.verifyPageTitle(team.name);
+    cy.navigateTo('awx', 'activity-stream');
+    cy.verifyPageTitle('Activity Stream');
+    cy.filterTableByTextFilter('keyword', inventory.name);
+    cy.getTableRow('event', ` created inventory ${inventory.name}`, { disableFilter: true }).within(
+      () => {
+        cy.getByDataCy('source-resource-detail').click();
+      }
+    );
+    cy.verifyPageTitle(inventory.name);
   });
 
   it('can navigate to event resource detail page from activity stream event details modal', function () {
-    cy.filterTableByTextFilter('keyword', team.name);
-    openEventDetails(team.name);
+    cy.navigateTo('awx', 'activity-stream');
+    cy.verifyPageTitle('Activity Stream');
+    cy.filterTableByTextFilter('keyword', inventory.name);
+    openEventDetails(inventory.name);
     cy.getModal().within(() => {
       cy.getByDataCy('source-resource-detail').click();
     });
-    cy.verifyPageTitle(team.name);
-  });
-
-  it('can navigate to initiator detail page from activity stream list page', function () {
-    cy.filterTableByTextFilter('keyword', team.name);
-    cy.getTableRow('event', `created team ${team.name}`, { disableFilter: true }).within(() => {
-      cy.getBy('[data-cy="initiated-by-column-cell"] a').click();
-    });
-    cy.verifyPageTitle(activeUser.username);
-  });
-
-  it('can navigate to initiator detail page from activity stream event details modal', function () {
-    cy.filterTableByTextFilter('keyword', team.name);
-    openEventDetails(team.name);
-    cy.getModal().within(() => {
-      cy.getBy('dd[data-cy="initiated-by"] a').click();
-    });
-    cy.verifyPageTitle(activeUser.username);
+    cy.verifyPageTitle(inventory.name);
   });
 
   it('can filter by keyword from activity stream list', function () {
-    cy.filterTableByTextFilter('keyword', team.name);
+    cy.navigateTo('awx', 'activity-stream');
+    cy.verifyPageTitle('Activity Stream');
+    cy.filterTableByTextFilter('keyword', inventory.name);
     cy.get('tbody').find('tr').should('have.length', 1);
-    cy.getByDataCy('event-column-cell').should('have.text', `created team ${team.name}`);
+    cy.getByDataCy('event-column-cell').should('have.text', ` created inventory ${inventory.name}`);
   });
 
   it('can filter by initiated by from activity stream list', function () {
-    cy.intercept(awxAPI`/activity_stream/?actor__username__icontains=${activeUser.username}*`).as(
-      'initiatorFilterRequest'
-    );
-    cy.filterTableByTextFilter('initiated-by-(username)', activeUser.username);
+    cy.navigateTo('awx', 'activity-stream');
+    cy.verifyPageTitle('Activity Stream');
+    cy.intercept(
+      'GET',
+      awxAPI`/activity_stream/?actor__username__icontains=${currentUser.username}*`
+    ).as('initiatorFilterRequest');
+    cy.filterTableByTextFilter('initiated-by-(username)', currentUser.username);
     cy.wait('@initiatorFilterRequest')
-      .its('response')
       .then((response) => {
-        expect(response?.statusCode).to.eql(200);
+        expect(response?.response?.statusCode).to.eql(200);
+      })
+      .its('response')
+      .then((activityStream) => {
+        cy.log('ACTIVITY STREAM', activityStream);
       });
-    cy.get('[data-cy="initiated-by-column-cell"]').first().should('have.text', activeUser.username);
+    cy.get('[data-cy="initiated-by-column-cell"]')
+      .first()
+      .should('have.text', currentUser.username);
   });
 });
diff --git a/cypress/e2e/awx/administration/applications.cy.ts b/cypress/e2e/awx/administration/applications.cy.ts
index bd27e17df..3f6ef1337 100644
--- a/cypress/e2e/awx/administration/applications.cy.ts
+++ b/cypress/e2e/awx/administration/applications.cy.ts
@@ -5,8 +5,13 @@ import { awxAPI } from '../../../support/formatApiPathForAwx';
 
 describe('Applications', () => {
   let app: Application;
+  let awxOrganization: Organization;
 
   beforeEach(() => {
+    cy.createAwxOrganization().then((thisAwxOrg) => {
+      awxOrganization = thisAwxOrg;
+    });
+
     cy.createAwxApplication().then((application: Application) => {
       app = application;
     });
@@ -14,6 +19,7 @@ describe('Applications', () => {
 
   afterEach(() => {
     cy.deleteAwxApplication(app.id.toString(), { failOnStatusCode: false });
+    cy.deleteAwxOrganization(awxOrganization, { failOnStatusCode: false });
   });
 
   describe('Applications- CRUD functionality- List View', () => {
@@ -26,7 +32,7 @@ describe('Applications', () => {
       cy.verifyPageTitle('Create Application');
       cy.getByDataCy('name').type(appName);
       cy.getByDataCy('description').type(appDescription);
-      cy.singleSelectByDataCy('organization', (this.globalAwxOrganization as Organization).name);
+      cy.singleSelectByDataCy('organization', awxOrganization.name);
       cy.selectDropdownOptionByResourceName('authorization-grant-type', 'Authorization code');
       cy.selectDropdownOptionByResourceName('client-type', 'Confidential');
       cy.getByDataCy('redirect-uris').type('https://create_from_api.com');
@@ -43,10 +49,7 @@ describe('Applications', () => {
           // Assert application details
           cy.getByDataCy('name').should('have.text', appName);
           cy.getByDataCy('description').should('have.text', appDescription);
-          cy.getByDataCy('organization').should(
-            'have.text',
-            (this.globalAwxOrganization as Organization).name
-          );
+          cy.getByDataCy('organization').should('have.text', awxOrganization.name);
           cy.getByDataCy('authorization-grant-type').should('have.text', 'authorization-code');
           cy.getByDataCy('client-type').should('have.text', 'confidential');
           // Delete application from the list view
@@ -73,7 +76,7 @@ describe('Applications', () => {
       cy.verifyPageTitle('Create Application');
       cy.getByDataCy('name').type(appName);
       cy.getByDataCy('description').type(appDescription);
-      cy.singleSelectByDataCy('organization', (this.globalAwxOrganization as Organization).name);
+      cy.singleSelectByDataCy('organization', awxOrganization.name);
       cy.selectDropdownOptionByResourceName('authorization-grant-type', 'Password');
       cy.selectDropdownOptionByResourceName('client-type', 'Confidential');
       cy.getByDataCy('redirect-uris').type('https://create_from_api.com');
@@ -90,10 +93,7 @@ describe('Applications', () => {
           // Assert application details
           cy.getByDataCy('name').should('have.text', appName);
           cy.getByDataCy('description').should('have.text', appDescription);
-          cy.getByDataCy('organization').should(
-            'have.text',
-            (this.globalAwxOrganization as Organization).name
-          );
+          cy.getByDataCy('organization').should('have.text', awxOrganization.name);
           cy.getByDataCy('authorization-grant-type').should('have.text', 'password');
           cy.getByDataCy('client-type').should('have.text', 'confidential');
           cy.deleteAwxApplication(newApplication.id.toString(), { failOnStatusCode: false });
@@ -109,7 +109,7 @@ describe('Applications', () => {
       cy.verifyPageTitle('Create Application');
       cy.getByDataCy('name').type(appName);
       cy.getByDataCy('description').type(appDescription);
-      cy.singleSelectByDataCy('organization', (this.globalAwxOrganization as Organization).name);
+      cy.singleSelectByDataCy('organization', awxOrganization.name);
       cy.selectDropdownOptionByResourceName('authorization-grant-type', 'Password');
       cy.selectDropdownOptionByResourceName('client-type', 'Public');
       cy.getByDataCy('redirect-uris').type('https://create_from_api.com');
@@ -126,10 +126,7 @@ describe('Applications', () => {
           // Assert application details
           cy.getByDataCy('name').should('have.text', appName);
           cy.getByDataCy('description').should('have.text', appDescription);
-          cy.getByDataCy('organization').should(
-            'have.text',
-            (this.globalAwxOrganization as Organization).name
-          );
+          cy.getByDataCy('organization').should('have.text', awxOrganization.name);
           cy.getByDataCy('authorization-grant-type').should('have.text', 'password');
           cy.getByDataCy('client-type').should('have.text', 'public');
           cy.deleteAwxApplication(newApplication.id.toString(), { failOnStatusCode: false });
@@ -171,7 +168,7 @@ describe('Applications', () => {
       cy.verifyPageTitle('Create Application');
       cy.getByDataCy('name').type(appName);
       cy.getByDataCy('description').type(appDescription);
-      cy.singleSelectByDataCy('organization', (this.globalAwxOrganization as Organization).name);
+      cy.singleSelectByDataCy('organization', awxOrganization.name);
       cy.selectDropdownOptionByResourceName('authorization-grant-type', 'Authorization code');
       cy.selectDropdownOptionByResourceName('client-type', 'Public');
       cy.getByDataCy('redirect-uris').type('https://create_from_api.com');
@@ -188,10 +185,7 @@ describe('Applications', () => {
           // Assert application details
           cy.getByDataCy('name').should('have.text', appName);
           cy.getByDataCy('description').should('have.text', appDescription);
-          cy.getByDataCy('organization').should(
-            'have.text',
-            (this.globalAwxOrganization as Organization).name
-          );
+          cy.getByDataCy('organization').should('have.text', awxOrganization.name);
           cy.getByDataCy('authorization-grant-type').should('have.text', 'authorization-code');
           cy.getByDataCy('client-type').should('have.text', 'public');
           // Delete from Details View
diff --git a/cypress/e2e/awx/administration/credentialTypes.cy.ts b/cypress/e2e/awx/administration/credentialTypes.cy.ts
index fd4398a86..4e8e26212 100644
--- a/cypress/e2e/awx/administration/credentialTypes.cy.ts
+++ b/cypress/e2e/awx/administration/credentialTypes.cy.ts
@@ -10,40 +10,42 @@ describe('Credential Types', () => {
   let inputCredType: string;
   let injectorCredType: string;
   let credential: Credential;
-  let organization: Organization;
+  let awxOrganization: Organization;
 
   describe('Credential Types- List Actions', () => {
     const credentialName = 'E2E Custom Credential ' + randomString(4);
-    before(function () {
-      cy.createAwxCredentialType().then((credentialType: CredentialType) => {
-        credType1 = credentialType;
 
-        cy.createAwxOrganization().then((org) => {
-          organization = org;
+    beforeEach(function () {
+      cy.createAwxOrganization().then((org) => {
+        awxOrganization = org;
+
+        cy.createAwxCredentialType().then((credentialType: CredentialType) => {
+          credType1 = credentialType;
+
           cy.createAWXCredential({
             name: credentialName,
             kind: 'gce',
-            organization: organization.id,
+            organization: awxOrganization.id,
             credential_type: credType1.id,
           }).then((cred) => {
             credential = cred;
           });
         });
-      });
 
-      cy.fixture('credTypes-input-config').then((credentialType: CredentialType) => {
-        inputCredType = JSON.stringify(credentialType);
-      });
+        cy.fixture('credTypes-input-config').then((credentialType: CredentialType) => {
+          inputCredType = JSON.stringify(credentialType);
+        });
 
-      cy.fixture('credTypes-injector-config').then((credentialType: CredentialType) => {
-        injectorCredType = JSON.stringify(credentialType);
+        cy.fixture('credTypes-injector-config').then((credentialType: CredentialType) => {
+          injectorCredType = JSON.stringify(credentialType);
+        });
       });
     });
 
-    after(() => {
+    afterEach(() => {
       cy.deleteAwxCredential(credential, { failOnStatusCode: false });
       cy.deleteAwxCredentialType(credType1, { failOnStatusCode: false });
-      cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
+      cy.deleteAwxOrganization(awxOrganization, { failOnStatusCode: false });
     });
 
     it('can navigate to the details page, then to the credentials tab and view a related credential', function () {
@@ -60,7 +62,7 @@ describe('Credential Types', () => {
         awxAPI`/credential_types/${credType1.id.toString()}/credentials/?order_by=name&page=1&page_size=10`
       ).as('credentialsList');
       cy.intercept('GET', awxAPI`/credential_types/?page=1&page_size=200`).as('credTypeList');
-      cy.getBy(`a[href*="/access/credential-types/${credType1.id}/credentials?"]`).click();
+      cy.clickTab('Credentials', true);
       cy.wait('@credTypeList');
       cy.wait('@credentialsList');
       cy.getBy('tr').should('have.length', 2);
diff --git a/cypress/e2e/awx/administration/instanceGroups.cy.ts b/cypress/e2e/awx/administration/instanceGroups.cy.ts
index 9377122b0..5d8debe05 100644
--- a/cypress/e2e/awx/administration/instanceGroups.cy.ts
+++ b/cypress/e2e/awx/administration/instanceGroups.cy.ts
@@ -2,66 +2,68 @@ import { randomString } from '../../../../framework/utils/random-string';
 import { Instance } from '../../../../frontend/awx/interfaces/Instance';
 import { InstanceGroup } from '../../../../frontend/awx/interfaces/InstanceGroup';
 import { Inventory } from '../../../../frontend/awx/interfaces/Inventory';
+import { Job } from '../../../../frontend/awx/interfaces/Job';
 import { JobTemplate } from '../../../../frontend/awx/interfaces/JobTemplate';
 import { Organization } from '../../../../frontend/awx/interfaces/Organization';
 import { Project } from '../../../../frontend/awx/interfaces/Project';
 import { Team } from '../../../../frontend/awx/interfaces/Team';
 import { AwxUser } from '../../../../frontend/awx/interfaces/User';
 import { awxAPI } from '../../../support/formatApiPathForAwx';
+import { randomE2Ename } from '../../../support/utils';
+import { tag } from '../../../support/tag';
 
-const instanceGroupTypes = ['Instance', 'Container'];
-instanceGroupTypes.forEach((igType) => {
-  describe(`${igType} Groups: List view`, () => {
+describe(`Instance Groups`, () => {
+  let project: Project;
+  let awxOrganization: Organization;
+
+  before(function () {
+    cy.createAwxOrganization().then((thisAwxOrg) => {
+      awxOrganization = thisAwxOrg;
+      cy.createAwxProject(awxOrganization).then((proj) => {
+        project = proj;
+      });
+    });
+  });
+
+  after(() => {
+    cy.deleteAwxProject(project, { failOnStatusCode: false });
+    cy.deleteAwxOrganization(awxOrganization, { failOnStatusCode: false });
+  });
+
+  describe(`Instance Groups: List view`, () => {
     let instanceGroup: InstanceGroup;
-    const testSignature: string = randomString(5, undefined, { isLowercase: true });
-    function generateInstanceGroupName(): string {
-      return `test-${testSignature}-${igType.toLowerCase()}-group-${randomString(5, undefined, { isLowercase: true })}`;
-    }
 
     beforeEach(() => {
-      cy.createAwxInstanceGroup(
-        igType === 'Container'
-          ? {
-              name: 'E2E Container Group ' + randomString(4),
-              is_container_group: true,
-              max_concurrent_jobs: 0,
-              max_forks: 0,
-              pod_spec_override: '',
-            }
-          : {
-              name: 'E2E Instance Group ' + randomString(4),
-              percent_capacity_remaining: 100,
-              policy_instance_minimum: 0,
-            }
-      ).then((ig: InstanceGroup) => {
+      cy.createAwxInstanceGroup({
+        name: 'E2E Instance Group ' + randomString(4),
+        percent_capacity_remaining: 100,
+        policy_instance_minimum: 0,
+      }).then((ig: InstanceGroup) => {
         instanceGroup = ig;
       });
-      cy.navigateTo('awx', 'instance-groups');
-      cy.verifyPageTitle('Instance Groups');
     });
 
     afterEach(() => {
       cy.deleteAwxInstanceGroup(instanceGroup, { failOnStatusCode: false });
     });
 
-    it(`can create new ${igType} Group, assert info on details page and then delete the ${igType.toLowerCase()} group from list view`, () => {
-      const name = `E2E ${igType} Group` + randomString(4);
+    it(`can create new Instance Group, assert info on details page and then delete the Instance group from list view`, () => {
+      const name = `E2E Instance Group` + randomString(4);
+      cy.navigateTo('awx', 'instance-groups');
+      cy.verifyPageTitle('Instance Groups');
       cy.clickButton(/^Create group$/);
-      cy.clickLink(`Create ${igType.toLowerCase()} group`);
+      cy.clickLink(`Create instance group`);
       cy.get('[data-cy="name"]').type(name);
-      if (igType === 'Instance') {
-        cy.get('[data-cy="policy-instance-minimum"]').clear();
-        cy.get('[data-cy="policy-instance-minimum"]').type('1');
-        cy.get('[data-cy="policy-instance-percentage"]').clear();
-        cy.get('[data-cy="policy-instance-percentage"]').type('2%');
-      }
+      cy.get('[data-cy="policy-instance-minimum"]').clear();
+      cy.get('[data-cy="policy-instance-minimum"]').type('1');
+      cy.get('[data-cy="policy-instance-percentage"]').clear();
+      cy.get('[data-cy="policy-instance-percentage"]').type('2%');
       cy.get('[data-cy="max-concurrent-jobs"]').clear();
       cy.get('[data-cy="max-concurrent-jobs"]').type('3');
       cy.get('[data-cy="max-forks"]').clear();
       cy.get('[data-cy="max-forks"]').type('4');
-
       cy.intercept('POST', awxAPI`/instance_groups/`).as('createInstanceGroup');
-      cy.clickButton(`Create ${igType} Group`);
+      cy.clickButton(`Create Instance Group`);
       cy.wait('@createInstanceGroup')
         .its('response')
         .then((response) => {
@@ -72,23 +74,20 @@ instanceGroupTypes.forEach((igType) => {
         expect(currentUrl.includes('details')).to.be.true;
         expect(currentUrl.includes(`infrastructure/instance-groups`)).to.be.true;
       });
-      if (igType === 'Instance') {
-        cy.getByDataCy('policy-instance-minimum').should('have.text', '1');
-        cy.getByDataCy('policy-instance-percentage').should('have.text', '2%');
-      }
+      cy.getByDataCy('policy-instance-minimum').should('have.text', '1');
+      cy.getByDataCy('policy-instance-percentage').should('have.text', '2%');
       cy.getByDataCy('max-concurrent-jobs').should('have.text', '3');
       cy.getByDataCy('max-forks').should('have.text', '4');
-
-      cy.clickPageAction(`delete-${igType.toLowerCase()}-group`);
+      cy.clickPageAction(`delete-instance-group`);
       cy.intercept('DELETE', awxAPI`/instance_groups/*/`).as('deleteInstanceGroup');
       cy.get('[data-ouia-component-type="PF5/ModalContent"]').within(() => {
-        cy.get('header').contains(`Permanently delete ${igType.toLowerCase()} groups`);
+        cy.get('header').contains(`Permanently delete instance groups`);
         cy.get('button')
-          .contains(`Delete ${igType.toLowerCase()} group`)
+          .contains(`Delete instance group`)
           .should('have.attr', 'aria-disabled', 'true');
         cy.getByDataCy('name-column-cell').should('have.text', name);
         cy.get('input[id="confirm"]').click();
-        cy.get('button').contains(`Delete ${igType.toLowerCase()} group`).click();
+        cy.get('button').contains(`Delete instance group`).click();
       });
       cy.wait('@deleteInstanceGroup')
         .its('response')
@@ -97,29 +96,24 @@ instanceGroupTypes.forEach((igType) => {
         });
     });
 
-    it(`can edit ${igType} Group from list view and assert the edited info`, () => {
+    it(`can edit Instance Group from list view and assert the edited info`, () => {
+      cy.navigateTo('awx', 'instance-groups');
+      cy.verifyPageTitle('Instance Groups');
       cy.filterTableBySingleSelect('name', instanceGroup.name);
-      cy.clickTableRowKebabAction(instanceGroup.name, `edit-${igType.toLowerCase()}-group`, false);
+      cy.clickTableRowKebabAction(instanceGroup.name, `edit-instance-group`, false);
       cy.get('[data-cy="name"]').clear();
       cy.get('[data-cy="name"]').type(`${instanceGroup.name}- edited`);
-
-      if (igType === 'Instance') {
-        cy.get('[data-cy="policy-instance-minimum"]').clear();
-        cy.get('[data-cy="policy-instance-minimum"]').type('1');
-
-        cy.get('[data-cy="policy-instance-percentage"]').clear();
-        cy.get('[data-cy="policy-instance-percentage"]').type('2');
-      }
-
+      cy.get('[data-cy="policy-instance-minimum"]').clear();
+      cy.get('[data-cy="policy-instance-minimum"]').type('1');
+      cy.get('[data-cy="policy-instance-percentage"]').clear();
+      cy.get('[data-cy="policy-instance-percentage"]').type('2');
       cy.get('[data-cy="max-concurrent-jobs"]').clear();
       cy.get('[data-cy="max-concurrent-jobs"]').type('3');
-
       cy.get('[data-cy="max-forks"]').clear();
       cy.get('[data-cy="max-forks"]').type('4');
       cy.intercept('PATCH', awxAPI`/instance_groups/${instanceGroup.id.toString()}/`).as(
         'editInstanceGroup'
       );
-
       cy.getByDataCy('Submit').click();
       cy.wait('@editInstanceGroup')
         .then((response) => {
@@ -130,56 +124,43 @@ instanceGroupTypes.forEach((igType) => {
           expect(response.name).contains(instanceGroup.name);
           expect(response.max_concurrent_jobs.toString()).to.equal('3');
           expect(response.max_forks.toString()).to.equal('4');
-          if (igType === 'Instance') {
-            expect(response?.policy_instance_minimum?.toString()).to.equal('1');
-            expect(response?.policy_instance_percentage?.toString()).to.equal('2');
-          }
+          expect(response?.policy_instance_minimum?.toString()).to.equal('1');
+          expect(response?.policy_instance_percentage?.toString()).to.equal('2');
         });
       cy.verifyPageTitle(`${instanceGroup.name}- edited`);
-      if (igType === 'Instance') {
-        cy.getByDataCy('policy-instance-minimum').should('have.text', '1');
-        cy.getByDataCy('policy-instance-percentage').should('have.text', '2%');
-      }
+      cy.getByDataCy('policy-instance-minimum').should('have.text', '1');
+      cy.getByDataCy('policy-instance-percentage').should('have.text', '2%');
       cy.getByDataCy('max-concurrent-jobs').should('have.text', '3');
       cy.getByDataCy('max-forks').should('have.text', '4');
     });
 
-    it(`can bulk delete ${igType} groups from list view and assert the deletion`, () => {
+    it(`can bulk delete Instance groups from list view and assert the deletion`, () => {
       const arrayOfElementText = [];
       for (let i = 0; i < 5; i++) {
-        const instanceGroupName = generateInstanceGroupName();
-        cy.createAwxInstanceGroup(
-          igType === 'Container'
-            ? {
-                name: instanceGroupName,
-                is_container_group: true,
-                max_concurrent_jobs: 0,
-                max_forks: 0,
-                pod_spec_override: '',
-              }
-            : {
-                name: instanceGroupName,
-                percent_capacity_remaining: 100,
-                policy_instance_minimum: 100,
-              }
-        );
+        const instanceGroupName = randomE2Ename();
+        cy.createAwxInstanceGroup({
+          name: instanceGroupName,
+          percent_capacity_remaining: 100,
+          policy_instance_minimum: 100,
+        });
         arrayOfElementText.push(instanceGroupName);
       }
+      cy.navigateTo('awx', 'instance-groups');
+      cy.verifyPageTitle('Instance Groups');
       cy.filterTableByMultiSelect('name', arrayOfElementText);
       cy.get('tbody tr').should('have.length', 5);
       cy.getByDataCy('select-all').click();
       cy.clickToolbarKebabAction('delete-selected-instance-groups');
       cy.intercept('DELETE', awxAPI`/instance_groups/*/`).as('deleteInstanceGroup');
-
       cy.get('[data-ouia-component-type="PF5/ModalContent"]').within(() => {
-        cy.get('header').contains(`Permanently delete ${igType.toLowerCase()} groups`);
+        cy.get('header').contains(`Permanently delete instance groups`);
         cy.get('button')
-          .contains(`Delete ${igType.toLowerCase()} group`)
+          .contains(`Delete instance group`)
           .should('have.attr', 'aria-disabled', 'true');
         cy.get('input[id="confirm"]').click();
-        cy.get('button').contains(`Delete ${igType.toLowerCase()} group`).click();
+        cy.get('button').contains(`Delete instance group`).click();
+        cy.clickButton('Close');
       });
-      cy.clickModalButton('Close');
       cy.wait('@deleteInstanceGroup')
         .its('response')
         .then((response) => {
@@ -187,38 +168,219 @@ instanceGroupTypes.forEach((igType) => {
         });
     });
 
-    it(`bulk deletion dialog shows warnings for ${igType} groups that cannot be deleted`, () => {
-      const arrayOfElementText = [instanceGroup.name];
-      arrayOfElementText.push(igType === 'Container' ? 'default' : 'controlplane');
+    it(`bulk deletion dialog shows warnings for Instance groups that cannot be deleted`, () => {
+      const arrayOfElementText: string[] = [];
+      for (let i = 0; i < 2; i++) {
+        const instanceGroupName = randomE2Ename();
+        cy.createAwxInstanceGroup({
+          name: instanceGroupName,
+          percent_capacity_remaining: 100,
+          policy_instance_minimum: 100,
+        });
+        arrayOfElementText.push(instanceGroupName);
+      }
+      cy.navigateTo('awx', 'instance-groups');
+      cy.verifyPageTitle('Instance Groups');
       cy.filterTableByMultiSelect('name', arrayOfElementText);
       cy.get('tbody tr').should('have.length', 2);
       cy.get('#select-all').click();
       cy.clickToolbarKebabAction('delete-selected-instance-groups');
       cy.intercept('DELETE', awxAPI`/instance_groups/*/`).as('deleteInstanceGroup');
-
       cy.get('[data-ouia-component-type="PF5/ModalContent"]').within(() => {
         cy.contains(
-          'of the selected instance groups cannot be deleted due to insufficient permission.'
+          'Deleting instance groups could impact other resources that rely on them.'
         ).should('be.visible');
+        cy.get('header').contains(`Permanently delete instance groups`);
+        cy.get('button')
+          .contains(`Delete instance group`)
+          .should('have.attr', 'aria-disabled', 'true');
+        cy.get('input[id="confirm"]').click();
+        cy.get('button')
+          .contains(`Delete instance group`)
+          .should('have.attr', 'aria-disabled', 'false')
+          .click();
+      });
+      cy.get('[data-ouia-component-type="PF5/ModalContent"]').within(() => {
+        cy.get('header').contains(`Permanently delete instance groups`);
+        cy.get('[data-cy="name-column-cell"]').should('contain', arrayOfElementText[0]);
+        cy.get('[data-cy="name-column-cell"]').should('contain', arrayOfElementText[1]);
+        cy.clickButton('Close');
+      });
+      cy.wait('@deleteInstanceGroup')
+        .its('response')
+        .then((response) => {
+          expect(response?.statusCode).to.eql(204);
+        });
+    });
+  });
+
+  describe(`Container Groups: List view`, () => {
+    let containerGroup: InstanceGroup;
+    beforeEach(() => {
+      cy.createAwxInstanceGroup({
+        name: 'E2E Container Group ' + randomString(4),
+        is_container_group: true,
+        max_concurrent_jobs: 0,
+        max_forks: 0,
+        pod_spec_override: '',
+      }).then((ig: InstanceGroup) => {
+        containerGroup = ig;
+      });
+    });
+
+    afterEach(() => {
+      cy.deleteAwxInstanceGroup(containerGroup, { failOnStatusCode: false });
+    });
+
+    it(`can create new container Group, assert info on details page and then delete the container group from list view`, () => {
+      const name = `E2E Container Group` + randomString(4);
+      cy.navigateTo('awx', 'instance-groups');
+      cy.verifyPageTitle('Instance Groups');
+      cy.clickButton(/^Create group$/);
+      cy.clickLink(`Create container group`);
+      cy.get('[data-cy="name"]').type(name);
+      cy.get('[data-cy="max-concurrent-jobs"]').clear();
+      cy.get('[data-cy="max-concurrent-jobs"]').type('3');
+      cy.get('[data-cy="max-forks"]').clear();
+      cy.get('[data-cy="max-forks"]').type('4');
+      cy.intercept('POST', awxAPI`/instance_groups/`).as('createInstanceGroup');
+      cy.clickButton(`Create Container Group`);
+      cy.wait('@createInstanceGroup')
+        .its('response')
+        .then((response) => {
+          expect(response?.statusCode).to.eql(201);
+        });
+      cy.verifyPageTitle(name);
+      cy.url().then((currentUrl) => {
+        expect(currentUrl.includes('details')).to.be.true;
+        expect(currentUrl.includes(`infrastructure/instance-groups`)).to.be.true;
+      });
+      cy.getByDataCy('max-concurrent-jobs').should('have.text', '3');
+      cy.getByDataCy('max-forks').should('have.text', '4');
+      cy.clickPageAction(`delete-container-group`);
+      cy.intercept('DELETE', awxAPI`/instance_groups/*/`).as('deleteInstanceGroup');
+      cy.get('[data-ouia-component-type="PF5/ModalContent"]').within(() => {
+        cy.get('header').contains(`Permanently delete container groups`);
+        cy.get('button')
+          .contains(`Delete container group`)
+          .should('have.attr', 'aria-disabled', 'true');
+        cy.getByDataCy('name-column-cell').should('have.text', name);
+        cy.get('input[id="confirm"]').click();
+        cy.get('button').contains(`Delete container group`).click();
+      });
+      cy.wait('@deleteInstanceGroup')
+        .its('response')
+        .then((response) => {
+          expect(response?.statusCode).to.eql(204);
+        });
+    });
+
+    it(`can edit container Group from list view and assert the edited info`, () => {
+      cy.navigateTo('awx', 'instance-groups');
+      cy.verifyPageTitle('Instance Groups');
+      cy.filterTableBySingleSelect('name', containerGroup.name);
+      cy.clickTableRowKebabAction(containerGroup.name, `edit-container-group`, false);
+      cy.get('[data-cy="name"]').clear();
+      cy.get('[data-cy="name"]').type(`${containerGroup.name}- edited`);
+      cy.get('[data-cy="max-concurrent-jobs"]').clear();
+      cy.get('[data-cy="max-concurrent-jobs"]').type('3');
+      cy.get('[data-cy="max-forks"]').clear();
+      cy.get('[data-cy="max-forks"]').type('4');
+      cy.intercept('PATCH', awxAPI`/instance_groups/${containerGroup.id.toString()}/`).as(
+        'editInstanceGroup'
+      );
+      cy.getByDataCy('Submit').click();
+      cy.wait('@editInstanceGroup')
+        .then((response) => {
+          expect(response?.response?.statusCode).to.eql(200);
+        })
+        .its('response.body')
+        .then((response: InstanceGroup) => {
+          expect(response.name).contains(containerGroup.name);
+          expect(response.max_concurrent_jobs.toString()).to.equal('3');
+          expect(response.max_forks.toString()).to.equal('4');
+        });
+      cy.verifyPageTitle(`${containerGroup.name}- edited`);
+      cy.getByDataCy('max-concurrent-jobs').should('have.text', '3');
+      cy.getByDataCy('max-forks').should('have.text', '4');
+    });
+
+    it(`can bulk delete container groups from list view and assert the deletion`, () => {
+      const arrayOfElementText = [];
+      for (let i = 0; i < 5; i++) {
+        const containerGroupName = randomE2Ename();
+        cy.createAwxInstanceGroup({
+          name: containerGroupName,
+          is_container_group: true,
+          max_concurrent_jobs: 0,
+          max_forks: 0,
+          pod_spec_override: '',
+        });
+        arrayOfElementText.push(containerGroupName);
+      }
+      cy.navigateTo('awx', 'instance-groups');
+      cy.verifyPageTitle('Instance Groups');
+      cy.filterTableByMultiSelect('name', arrayOfElementText);
+      cy.get('tbody tr').should('have.length', 5);
+      cy.getByDataCy('select-all').click();
+      cy.clickToolbarKebabAction('delete-selected-instance-groups');
+      cy.intercept('DELETE', awxAPI`/instance_groups/*/`).as('deleteInstanceGroup');
+      cy.get('[data-ouia-component-type="PF5/ModalContent"]').within(() => {
+        cy.get('header').contains(`Permanently delete container groups`);
+        cy.get('button')
+          .contains(`Delete container group`)
+          .should('have.attr', 'aria-disabled', 'true');
+        cy.get('input[id="confirm"]').click();
+        cy.get('button').contains(`Delete container group`).click();
+        cy.clickButton('Close');
+      });
+      cy.wait('@deleteInstanceGroup')
+        .its('response')
+        .then((response) => {
+          expect(response?.statusCode).to.eql(204);
+        });
+    });
+
+    it(`bulk deletion dialog shows warnings for container groups that cannot be deleted`, () => {
+      const arrayOfElementText: string[] = [];
+      for (let i = 0; i < 2; i++) {
+        const containerGroupName = randomE2Ename();
+        cy.createAwxInstanceGroup({
+          name: containerGroupName,
+          is_container_group: true,
+          max_concurrent_jobs: 0,
+          max_forks: 0,
+          pod_spec_override: '',
+        });
+        arrayOfElementText.push(containerGroupName);
+      }
+      cy.navigateTo('awx', 'instance-groups');
+      cy.verifyPageTitle('Instance Groups');
+      cy.filterTableByMultiSelect('name', arrayOfElementText);
+      cy.get('tbody tr').should('have.length', 2);
+      cy.get('#select-all').click();
+      cy.clickToolbarKebabAction('delete-selected-instance-groups');
+      cy.intercept('DELETE', awxAPI`/instance_groups/*/`).as('deleteInstanceGroup');
+      cy.get('[data-ouia-component-type="PF5/ModalContent"]').within(() => {
         cy.contains(
           'Deleting instance groups could impact other resources that rely on them.'
         ).should('be.visible');
-        cy.get('header').contains(`Permanently delete ${igType.toLowerCase()} groups`);
+        cy.get('header').contains(`Permanently delete container groups`);
         cy.get('button')
-          .contains(`Delete ${igType.toLowerCase()} group`)
+          .contains(`Delete container group`)
           .should('have.attr', 'aria-disabled', 'true');
         cy.get('input[id="confirm"]').click();
         cy.get('button')
-          .contains(`Delete ${igType.toLowerCase()} group`)
+          .contains(`Delete container group`)
           .should('have.attr', 'aria-disabled', 'false')
           .click();
       });
       cy.get('[data-ouia-component-type="PF5/ModalContent"]').within(() => {
-        cy.get('header').contains(`Permanently delete ${igType.toLowerCase()} groups`);
-        cy.get('[data-cy="name-column-cell"]').should('have.text', instanceGroup.name);
+        cy.get('header').contains(`Permanently delete container groups`);
+        cy.get('[data-cy="name-column-cell"]').should('contain', arrayOfElementText[0]);
+        cy.get('[data-cy="name-column-cell"]').should('contain', arrayOfElementText[1]);
+        cy.clickButton('Close');
       });
-      cy.assertModalSuccess();
-      cy.clickModalButton('Close');
       cy.wait('@deleteInstanceGroup')
         .its('response')
         .then((response) => {
@@ -227,57 +389,53 @@ instanceGroupTypes.forEach((igType) => {
     });
   });
 
-  describe(`${igType} Groups: Details Tab`, () => {
+  describe(`Instance/Container Groups: Details Tab`, () => {
     let instanceGroup: InstanceGroup;
+    let containerGroup: InstanceGroup;
 
     beforeEach(() => {
-      cy.createAwxInstanceGroup(
-        igType === 'Container'
-          ? {
-              name: 'E2E Container Group ' + randomString(4),
-              is_container_group: true,
-              max_concurrent_jobs: 0,
-              max_forks: 0,
-              pod_spec_override: '',
-            }
-          : {
-              name: 'E2E Instance Group ' + randomString(4),
-              percent_capacity_remaining: 100,
-              policy_instance_minimum: 0,
-            }
-      ).then((ig: InstanceGroup) => {
+      cy.createAwxInstanceGroup({
+        name: 'E2E Instance Group ' + randomString(4),
+        percent_capacity_remaining: 100,
+        policy_instance_minimum: 0,
+      }).then((ig: InstanceGroup) => {
         instanceGroup = ig;
       });
-      cy.navigateTo('awx', 'instance-groups');
-      cy.verifyPageTitle('Instance Groups');
+
+      cy.createAwxInstanceGroup({
+        name: 'E2E Container Group ' + randomString(4),
+        is_container_group: true,
+        max_concurrent_jobs: 0,
+        max_forks: 0,
+        pod_spec_override: '',
+      }).then((ig: InstanceGroup) => {
+        containerGroup = ig;
+      });
     });
 
     afterEach(() => {
       cy.deleteAwxInstanceGroup(instanceGroup, { failOnStatusCode: false });
+      cy.deleteAwxInstanceGroup(containerGroup, { failOnStatusCode: false });
     });
 
-    it(`can edit ${igType} Group from the details page and assert edited info`, () => {
+    it(`can edit instance Group from the details page and assert edited info`, () => {
+      cy.navigateTo('awx', 'instance-groups');
+      cy.verifyPageTitle('Instance Groups');
       cy.filterTableBySingleSelect('name', instanceGroup.name);
       cy.get('[data-cy="name-column-cell"]').click();
       cy.url().then((currentUrl) => {
         expect(currentUrl.includes('details')).to.be.true;
         expect(currentUrl.includes(`infrastructure/instance-groups`)).to.be.true;
       });
-      cy.getByDataCy(`edit-${igType.toLowerCase()}-group`).click();
+      cy.getByDataCy(`edit-instance-group`).click();
       cy.get('[data-cy="name"]').clear();
       cy.get('[data-cy="name"]').type(`${instanceGroup.name}- edited`);
-
-      if (igType === 'Instance') {
-        cy.get('[data-cy="policy-instance-minimum"]').clear();
-        cy.get('[data-cy="policy-instance-minimum"]').type('1');
-
-        cy.get('[data-cy="policy-instance-percentage"]').clear();
-        cy.get('[data-cy="policy-instance-percentage"]').type('2');
-      }
-
+      cy.get('[data-cy="policy-instance-minimum"]').clear();
+      cy.get('[data-cy="policy-instance-minimum"]').type('1');
+      cy.get('[data-cy="policy-instance-percentage"]').clear();
+      cy.get('[data-cy="policy-instance-percentage"]').type('2');
       cy.get('[data-cy="max-concurrent-jobs"]').clear();
       cy.get('[data-cy="max-concurrent-jobs"]').type('3');
-
       cy.get('[data-cy="max-forks"]').clear();
       cy.get('[data-cy="max-forks"]').type('4');
       cy.intercept('PATCH', awxAPI`/instance_groups/${instanceGroup.id.toString()}/`).as(
@@ -293,31 +451,85 @@ instanceGroupTypes.forEach((igType) => {
           expect(response.name).contains(instanceGroup.name);
           expect(response.max_concurrent_jobs.toString()).to.equal('3');
           expect(response.max_forks.toString()).to.equal('4');
-          if (igType === 'Instance') {
-            expect(response?.policy_instance_minimum?.toString()).to.equal('1');
-            expect(response?.policy_instance_percentage?.toString()).to.equal('2');
-          }
+          expect(response?.policy_instance_minimum?.toString()).to.equal('1');
+          expect(response?.policy_instance_percentage?.toString()).to.equal('2');
         });
       cy.verifyPageTitle(`${instanceGroup.name}- edited`);
-      if (igType === 'Instance') {
-        cy.getByDataCy('policy-instance-minimum').should('have.text', '1');
-        cy.getByDataCy('policy-instance-percentage').should('have.text', '2%');
-      }
+      cy.getByDataCy('policy-instance-minimum').should('have.text', '1');
+      cy.getByDataCy('policy-instance-percentage').should('have.text', '2%');
       cy.getByDataCy('max-concurrent-jobs').should('have.text', '3');
       cy.getByDataCy('max-forks').should('have.text', '4');
     });
 
-    it(`can delete ${igType} Group from the details page and assert the deletion`, () => {
+    it(`can delete instance Group from the details page and assert the deletion`, () => {
+      cy.navigateTo('awx', 'instance-groups');
+      cy.verifyPageTitle('Instance Groups');
       cy.filterTableBySingleSelect('name', instanceGroup.name);
       cy.get('[data-cy="name-column-cell"]').click();
       cy.url().then((currentUrl) => {
         expect(currentUrl.includes('details')).to.be.true;
         expect(currentUrl.includes(`infrastructure/instance-groups`)).to.be.true;
       });
-      cy.clickPageAction(`delete-${igType.toLowerCase()}-group`);
+      cy.clickPageAction(`delete-instance-group`);
+      cy.intercept('DELETE', awxAPI`/instance_groups/*/`).as('deleteInstanceGroup');
+      cy.get('#confirm').click();
+      cy.clickButton(`Delete instance group`);
+      cy.verifyPageTitle('Instance Groups');
+      cy.wait('@deleteInstanceGroup')
+        .its('response')
+        .then((response) => {
+          expect(response?.statusCode).to.eql(204);
+        });
+    });
+
+    it(`can edit container Group from the details page and assert edited info`, () => {
+      cy.navigateTo('awx', 'instance-groups');
+      cy.verifyPageTitle('Instance Groups');
+      cy.filterTableBySingleSelect('name', containerGroup.name);
+      cy.get('[data-cy="name-column-cell"]').click();
+      cy.url().then((currentUrl) => {
+        expect(currentUrl.includes('details')).to.be.true;
+        expect(currentUrl.includes(`infrastructure/instance-groups`)).to.be.true;
+      });
+      cy.getByDataCy(`edit-container-group`).click();
+      cy.get('[data-cy="name"]').clear();
+      cy.get('[data-cy="name"]').type(`${containerGroup.name}- edited`);
+      cy.get('[data-cy="max-concurrent-jobs"]').clear();
+      cy.get('[data-cy="max-concurrent-jobs"]').type('3');
+      cy.get('[data-cy="max-forks"]').clear();
+      cy.get('[data-cy="max-forks"]').type('4');
+      cy.intercept('PATCH', awxAPI`/instance_groups/${containerGroup.id.toString()}/`).as(
+        'editInstanceGroup'
+      );
+      cy.getByDataCy('Submit').click();
+      cy.wait('@editInstanceGroup')
+        .then((response) => {
+          expect(response?.response?.statusCode).to.eql(200);
+        })
+        .its('response.body')
+        .then((response: InstanceGroup) => {
+          expect(response.name).contains(containerGroup.name);
+          expect(response.max_concurrent_jobs.toString()).to.equal('3');
+          expect(response.max_forks.toString()).to.equal('4');
+        });
+      cy.verifyPageTitle(`${containerGroup.name}- edited`);
+      cy.getByDataCy('max-concurrent-jobs').should('have.text', '3');
+      cy.getByDataCy('max-forks').should('have.text', '4');
+    });
+
+    it(`can delete container Group from the details page and assert the deletion`, () => {
+      cy.navigateTo('awx', 'instance-groups');
+      cy.verifyPageTitle('Instance Groups');
+      cy.filterTableBySingleSelect('name', containerGroup.name);
+      cy.get('[data-cy="name-column-cell"]').click();
+      cy.url().then((currentUrl) => {
+        expect(currentUrl.includes('details')).to.be.true;
+        expect(currentUrl.includes(`infrastructure/instance-groups`)).to.be.true;
+      });
+      cy.clickPageAction(`delete-container-group`);
       cy.intercept('DELETE', awxAPI`/instance_groups/*/`).as('deleteInstanceGroup');
       cy.get('#confirm').click();
-      cy.clickButton(`Delete ${igType.toLowerCase()} group`);
+      cy.clickButton(`Delete container group`);
       cy.verifyPageTitle('Instance Groups');
       cy.wait('@deleteInstanceGroup')
         .its('response')
@@ -327,49 +539,46 @@ instanceGroupTypes.forEach((igType) => {
     });
   });
 
-  describe(`${igType} Groups: Team access Tab`, () => {
-    let team: Team;
+  describe(`Instance Groups: Team access Tab`, () => {
+    let igTeam: Team;
     let instanceGroup: InstanceGroup;
-    let organization: Organization;
+    let containerGroup: InstanceGroup;
 
     beforeEach(function () {
-      cy.createAwxOrganization().then((o) => {
-        organization = o;
-        cy.createAwxTeam({ organization: organization.id }).then((createdTeam) => {
-          team = createdTeam;
-          cy.createAwxInstanceGroup(
-            igType === 'Container'
-              ? {
-                  name: 'E2E Container Group ' + randomString(4),
-                  is_container_group: true,
-                  max_concurrent_jobs: 0,
-                  max_forks: 0,
-                  pod_spec_override: '',
-                  credential: null,
-                }
-              : {
-                  name: 'E2E Instance Group ' + randomString(4),
-                  policy_instance_minimum: 0,
-                  policy_instance_percentage: 0,
-                  max_concurrent_jobs: 0,
-                  max_forks: 0,
-                }
-          ).then((ig: InstanceGroup) => {
-            instanceGroup = ig;
-          });
+      cy.createAwxTeam({ organization: awxOrganization.id }).then((createdTeam) => {
+        igTeam = createdTeam;
+        cy.createAwxInstanceGroup({
+          name: 'E2E Instance Group ' + randomString(4),
+          policy_instance_minimum: 0,
+          policy_instance_percentage: 0,
+          max_concurrent_jobs: 0,
+          max_forks: 0,
+        }).then((ig: InstanceGroup) => {
+          instanceGroup = ig;
         });
-      });
 
-      cy.navigateTo('awx', 'instance-groups');
-      cy.verifyPageTitle('Instance Groups');
+        cy.createAwxInstanceGroup({
+          name: 'E2E Container Group ' + randomString(4),
+          is_container_group: true,
+          max_concurrent_jobs: 0,
+          max_forks: 0,
+          pod_spec_override: '',
+          credential: null,
+        }).then((ig: InstanceGroup) => {
+          containerGroup = ig;
+        });
+      });
     });
 
     afterEach(() => {
       cy.deleteAwxInstanceGroup(instanceGroup, { failOnStatusCode: false });
-      cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
+      cy.deleteAwxInstanceGroup(containerGroup, { failOnStatusCode: false });
+      cy.deleteAwxTeam(igTeam, { failOnStatusCode: false });
     });
 
-    it(`can visit the ${igType} group -> team access tab, add a team, view the team on the teams list and then delete team`, () => {
+    it(`can visit the instance group -> team access tab, add a team, view the team on the teams list and then delete team`, () => {
+      cy.navigateTo('awx', 'instance-groups');
+      cy.verifyPageTitle('Instance Groups');
       cy.filterTableBySingleSelect('name', instanceGroup.name);
       cy.get('[data-cy="name-column-cell"]').within(() => {
         cy.get('a').click();
@@ -392,7 +601,7 @@ instanceGroupTypes.forEach((igType) => {
       cy.get('[data-cy="wizard-nav"] li').eq(1).should('contain.text', 'Select roles to apply');
       cy.get('[data-cy="wizard-nav"] li').eq(2).should('contain.text', 'Review');
       cy.get('.pf-v5-c-page__main-body > .pf-v5-c-title').should('have.text', 'Select team(s)');
-      cy.filterTableBySingleSelect('name', team.name);
+      cy.filterTableBySingleSelect('name', igTeam.name);
       cy.get('[data-ouia-component-id="simple-table"]').within(() => {
         cy.get('tbody tr').should('have.length', 1);
         cy.get('[data-cy="checkbox-column-cell"] input').click();
@@ -413,7 +622,7 @@ instanceGroupTypes.forEach((igType) => {
         .should('be.visible')
         .within(() => {
           cy.get('tbody tr').should('have.length', 1);
-          cy.get('[data-cy="name-column-cell"]').should('have.text', team.name);
+          cy.get('[data-cy="name-column-cell"]').should('have.text', igTeam.name);
         });
       cy.get('[data-cy="expandable-section-awxRoles"]').should('be.visible');
       cy.intercept('POST', awxAPI`/role_team_assignments/`).as('teamAdded');
@@ -423,9 +632,17 @@ instanceGroupTypes.forEach((igType) => {
         .then((response) => {
           expect(response?.statusCode).to.eql(201);
         });
-      cy.visit(`/infrastructure/instance-groups/${instanceGroup.id}/team-access`);
+      cy.clickModalButton('Close');
+      cy.verifyPageTitle(instanceGroup.name);
+      cy.navigateTo('awx', 'instance-groups');
+      cy.verifyPageTitle('Instance Groups');
+      cy.filterTableBySingleSelect('name', instanceGroup.name);
+      cy.get('[data-cy="name-column-cell"]').within(() => {
+        cy.get('a').click();
+      });
+      cy.get(`a[href*="/infrastructure/instance-groups/${instanceGroup.id}/team-access"]`).click();
       cy.verifyPageTitle(instanceGroup.name);
-      cy.get('[data-cy="text-input"]').find('input').type(team.name);
+      cy.get('[data-cy="text-input"]').find('input').type(igTeam.name);
       cy.get('[data-ouia-component-id="simple-table"]').within(() => {
         cy.get('tbody tr').should('have.length', 1);
         cy.get('[data-cy="remove-role"]').click();
@@ -434,7 +651,7 @@ instanceGroupTypes.forEach((igType) => {
       cy.get('[data-ouia-component-type="PF5/ModalContent"]').within(() => {
         cy.get('header').contains('Remove role');
         cy.get('button').contains('Remove role').should('have.attr', 'aria-disabled', 'true');
-        cy.getByDataCy('team-name-column-cell').should('have.text', team.name);
+        cy.getByDataCy('team-name-column-cell').should('have.text', igTeam.name);
         cy.get('input[id="confirm"]').click();
         cy.get('button').contains('Remove role').click();
       });
@@ -443,49 +660,134 @@ instanceGroupTypes.forEach((igType) => {
         .then((response) => {
           expect(response?.statusCode).to.eql(204);
         });
+      cy.clickModalButton('Close');
     });
-  });
-
-  describe(`${igType} Groups: User access Tab`, () => {
-    let user: AwxUser;
-    let instanceGroup: InstanceGroup;
-    let organization: Organization;
-
-    beforeEach(function () {
-      cy.createAwxOrganization().then((o) => {
-        organization = o;
-        cy.createAwxUser({ organization: organization.id }).then((u) => {
-          user = u;
-          cy.createAwxInstanceGroup(
-            igType === 'Container'
-              ? {
-                  name: 'E2E Container Group ' + randomString(4),
-                  is_container_group: true,
-                  max_concurrent_jobs: 0,
-                  max_forks: 0,
-                  pod_spec_override: '',
-                }
-              : {
-                  name: 'E2E Instance Group ' + randomString(4),
-                  percent_capacity_remaining: 100,
-                  policy_instance_minimum: 0,
-                }
-          ).then((ig: InstanceGroup) => {
-            instanceGroup = ig;
-          });
-        });
-      });
 
+    it(`can visit the container group -> team access tab, add a team, view the team on the teams list and then delete team`, () => {
       cy.navigateTo('awx', 'instance-groups');
       cy.verifyPageTitle('Instance Groups');
-    });
-
-    afterEach(() => {
+      cy.filterTableBySingleSelect('name', containerGroup.name);
+      cy.get('[data-cy="name-column-cell"]').within(() => {
+        cy.get('a').click();
+      });
+      cy.url().then((currentUrl) => {
+        expect(currentUrl.includes('details')).to.be.true;
+        expect(currentUrl.includes(`infrastructure/instance-groups`)).to.be.true;
+      });
+      cy.clickTab(/^Team access$/, true);
+      cy.get('.pf-v5-c-empty-state__title-text').contains(
+        /^There are currently no teams assigned to this instance group./
+      );
+      cy.get('.pf-v5-c-empty-state__body').contains(/^Add a role by clicking the button below./);
+      cy.getByDataCy('add-roles').click();
+      cy.url().then((currentUrl) => {
+        expect(currentUrl.includes('infrastructure/instance-groups/')).to.be.true;
+        expect(currentUrl.includes('instance-groups/teams/add-teams')).to.be.true;
+      });
+      cy.get('[data-cy="wizard-nav"] li').eq(0).should('contain.text', 'Select team(s)');
+      cy.get('[data-cy="wizard-nav"] li').eq(1).should('contain.text', 'Select roles to apply');
+      cy.get('[data-cy="wizard-nav"] li').eq(2).should('contain.text', 'Review');
+      cy.get('.pf-v5-c-page__main-body > .pf-v5-c-title').should('have.text', 'Select team(s)');
+      cy.filterTableBySingleSelect('name', igTeam.name);
+      cy.get('[data-ouia-component-id="simple-table"]').within(() => {
+        cy.get('tbody tr').should('have.length', 1);
+        cy.get('[data-cy="checkbox-column-cell"] input').click();
+      });
+      cy.getByDataCy('Submit').click();
+      cy.get('.pf-v5-c-page__main-body > .pf-v5-c-title').should(
+        'have.text',
+        'Select roles to apply'
+      );
+      cy.searchAndDisplayResource('Admin');
+      cy.get('[data-ouia-component-id="simple-table"]').within(() => {
+        cy.get('tbody tr').should('have.length', 1);
+        cy.get('[data-cy="checkbox-column-cell"] input').click();
+      });
+      cy.getByDataCy('Submit').click();
+      cy.get('.pf-v5-c-page__main-body > .pf-v5-c-title').should('have.text', 'Review');
+      cy.get('[data-cy="expandable-section-teams"]')
+        .should('be.visible')
+        .within(() => {
+          cy.get('tbody tr').should('have.length', 1);
+          cy.get('[data-cy="name-column-cell"]').should('have.text', igTeam.name);
+        });
+      cy.get('[data-cy="expandable-section-awxRoles"]').should('be.visible');
+      cy.intercept('POST', awxAPI`/role_team_assignments/`).as('teamAdded');
+      cy.getByDataCy('Submit').click();
+      cy.wait('@teamAdded')
+        .its('response')
+        .then((response) => {
+          expect(response?.statusCode).to.eql(201);
+        });
+      cy.clickModalButton('Close');
+      cy.verifyPageTitle(containerGroup.name);
+      cy.navigateTo('awx', 'instance-groups');
+      cy.verifyPageTitle('Instance Groups');
+      cy.filterTableBySingleSelect('name', containerGroup.name);
+      cy.get('[data-cy="name-column-cell"]').within(() => {
+        cy.get('a').click();
+      });
+      cy.get(`a[href*="/infrastructure/instance-groups/${containerGroup.id}/team-access"]`).click();
+      cy.verifyPageTitle(containerGroup.name);
+      cy.get('[data-cy="text-input"]').find('input').type(igTeam.name);
+      cy.get('[data-ouia-component-id="simple-table"]').within(() => {
+        cy.get('tbody tr').should('have.length', 1);
+        cy.get('[data-cy="remove-role"]').click();
+      });
+      cy.intercept('DELETE', awxAPI`/role_team_assignments/*/`).as('teamRemoved');
+      cy.get('[data-ouia-component-type="PF5/ModalContent"]').within(() => {
+        cy.get('header').contains('Remove role');
+        cy.get('button').contains('Remove role').should('have.attr', 'aria-disabled', 'true');
+        cy.getByDataCy('team-name-column-cell').should('have.text', igTeam.name);
+        cy.get('input[id="confirm"]').click();
+        cy.get('button').contains('Remove role').click();
+      });
+      cy.wait('@teamRemoved')
+        .its('response')
+        .then((response) => {
+          expect(response?.statusCode).to.eql(204);
+          cy.clickModalButton('Close');
+        });
+    });
+  });
+
+  describe(`Instance/Container Groups: User access Tab`, () => {
+    let user: AwxUser;
+    let instanceGroup: InstanceGroup;
+    let containerGroup: InstanceGroup;
+
+    beforeEach(function () {
+      cy.createAwxUser({ organization: awxOrganization.id }).then((u) => {
+        user = u;
+        cy.createAwxInstanceGroup({
+          name: 'E2E Instance Group ' + randomString(4),
+          percent_capacity_remaining: 100,
+          policy_instance_minimum: 0,
+        }).then((ig: InstanceGroup) => {
+          instanceGroup = ig;
+        });
+
+        cy.createAwxInstanceGroup({
+          name: 'E2E Container Group ' + randomString(4),
+          is_container_group: true,
+          max_concurrent_jobs: 0,
+          max_forks: 0,
+          pod_spec_override: '',
+        }).then((ig: InstanceGroup) => {
+          containerGroup = ig;
+        });
+      });
+    });
+
+    afterEach(() => {
       cy.deleteAwxInstanceGroup(instanceGroup, { failOnStatusCode: false });
-      cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
+      cy.deleteAwxInstanceGroup(containerGroup, { failOnStatusCode: false });
+      cy.deleteAwxUser(user, { failOnStatusCode: false });
     });
 
-    it(`can visit the ${igType} group -> user access tab, add a user, view the user on the user list and then delete user`, () => {
+    it(`can visit the instance group -> user access tab, add a user, view the user on the user list and then delete user`, () => {
+      cy.navigateTo('awx', 'instance-groups');
+      cy.verifyPageTitle('Instance Groups');
       cy.filterTableBySingleSelect('name', instanceGroup.name);
       cy.get('[data-cy="name-column-cell"]').within(() => {
         cy.get('a').click();
@@ -538,8 +840,93 @@ instanceGroupTypes.forEach((igType) => {
         .then((response) => {
           expect(response?.statusCode).to.eql(201);
         });
-      cy.visit(`/infrastructure/instance-groups/${instanceGroup.id}/user-access`);
+      cy.navigateTo('awx', 'instance-groups');
+      cy.verifyPageTitle('Instance Groups');
+      cy.filterTableByMultiSelect('name', [instanceGroup.name]);
+      cy.clickTableRowLink('name', instanceGroup.name, { disableFilter: true });
       cy.verifyPageTitle(instanceGroup.name);
+      cy.get('a[href*="user-access"]').click();
+      cy.get('[data-cy="text-input"]').find('input').type(user.username);
+      cy.get('[data-ouia-component-id="simple-table"]').within(() => {
+        cy.get('tbody tr').should('have.length', 1);
+        cy.get('[data-cy="remove-role"]').click();
+      });
+      cy.intercept('DELETE', awxAPI`/role_user_assignments/*/`).as('userRemoved');
+      cy.get('[data-ouia-component-type="PF5/ModalContent"]').within(() => {
+        cy.get('header').contains('Remove role');
+        cy.get('button').contains('Remove role').should('have.attr', 'aria-disabled', 'true');
+        cy.getByDataCy('username-column-cell').should('have.text', user.username);
+        cy.get('input[id="confirm"]').click();
+        cy.get('button').contains('Remove role').click();
+      });
+      cy.wait('@userRemoved')
+        .its('response')
+        .then((response) => {
+          expect(response?.statusCode).to.eql(204);
+        });
+    });
+
+    it(`can visit the container group -> user access tab, add a user, view the user on the user list and then delete user`, () => {
+      cy.navigateTo('awx', 'instance-groups');
+      cy.verifyPageTitle('Instance Groups');
+      cy.filterTableBySingleSelect('name', containerGroup.name);
+      cy.get('[data-cy="name-column-cell"]').within(() => {
+        cy.get('a').click();
+      });
+      cy.url().then((currentUrl) => {
+        expect(currentUrl.includes('details')).to.be.true;
+        expect(currentUrl.includes(`infrastructure/instance-groups`)).to.be.true;
+      });
+      cy.clickTab(/^User access$/, true);
+      cy.get('.pf-v5-c-empty-state__title-text').contains(
+        /^There are currently no users assigned to this instance group./
+      );
+      cy.get('.pf-v5-c-empty-state__body').contains(/^Add a role by clicking the button below./);
+      cy.getByDataCy('add-roles').click();
+      cy.url().then((currentUrl) => {
+        expect(currentUrl.includes('infrastructure/instance-groups/')).to.be.true;
+        expect(currentUrl.includes('instance-groups/users/add-users')).to.be.true;
+      });
+      cy.get('[data-cy="wizard-nav"] li').eq(0).should('contain.text', 'Select user(s)');
+      cy.get('[data-cy="wizard-nav"] li').eq(1).should('contain.text', 'Select roles to apply');
+      cy.get('[data-cy="wizard-nav"] li').eq(2).should('contain.text', 'Review');
+      cy.get('.pf-v5-c-page__main-body > .pf-v5-c-title').should('have.text', 'Select user(s)');
+      cy.selectTableRowByCheckbox('username', user.username, { disableFilter: false });
+      cy.get('[data-ouia-component-id="simple-table"]').within(() => {
+        cy.get('tbody tr').should('have.length', 1);
+      });
+      cy.getByDataCy('Submit').click();
+      cy.get('.pf-v5-c-page__main-body > .pf-v5-c-title').should(
+        'have.text',
+        'Select roles to apply'
+      );
+      cy.searchAndDisplayResource('Admin');
+      cy.get('[data-ouia-component-id="simple-table"]').within(() => {
+        cy.get('tbody tr').should('have.length', 1);
+        cy.get('[data-cy="checkbox-column-cell"] input').click();
+      });
+      cy.getByDataCy('Submit').click();
+      cy.get('.pf-v5-c-page__main-body > .pf-v5-c-title').should('have.text', 'Review');
+      cy.get('[data-cy="expandable-section-users"]')
+        .should('be.visible')
+        .within(() => {
+          cy.get('tbody tr').should('have.length', 1);
+          cy.get('[data-cy="username-column-cell"]').should('have.text', user.username);
+        });
+      cy.get('[data-cy="expandable-section-awxRoles"]').should('be.visible');
+      cy.intercept('POST', awxAPI`/role_user_assignments/`).as('userAdded');
+      cy.getByDataCy('Submit').click();
+      cy.wait('@userAdded')
+        .its('response')
+        .then((response) => {
+          expect(response?.statusCode).to.eql(201);
+        });
+      cy.navigateTo('awx', 'instance-groups');
+      cy.verifyPageTitle('Instance Groups');
+      cy.filterTableByMultiSelect('name', [containerGroup.name]);
+      cy.clickTableRowLink('name', containerGroup.name, { disableFilter: true });
+      cy.verifyPageTitle(containerGroup.name);
+      cy.get('a[href*="user-access"]').click();
       cy.get('[data-cy="text-input"]').find('input').type(user.username);
       cy.get('[data-ouia-component-id="simple-table"]').within(() => {
         cy.get('tbody tr').should('have.length', 1);
@@ -560,27 +947,23 @@ instanceGroupTypes.forEach((igType) => {
         });
     });
   });
-});
 
-describe('Instance Groups: Jobs Tab', () => {
-  let inventory: Inventory;
-  let job_template: JobTemplate;
-  let instanceGroupDefault: InstanceGroup;
-  let organization: Organization;
-
-  beforeEach(function () {
-    cy.getAwxInstanceGroupByName('default')
-      .its('results[0]')
-      .then((ig: InstanceGroup) => {
-        instanceGroupDefault = ig;
-        cy.createAwxInventory().then((inv) => {
-          inventory = inv;
-          cy.createAwxOrganization().then((o) => {
-            organization = o;
+  describe('Instance Groups: Jobs Tab', () => {
+    let inventory: Inventory;
+    let job_template: JobTemplate;
+    let instanceGroupDefault: InstanceGroup;
+
+    beforeEach(function () {
+      cy.getAwxInstanceGroupByName('default')
+        .its('results[0]')
+        .then((ig: InstanceGroup) => {
+          instanceGroupDefault = ig;
+          cy.createAwxInventory(awxOrganization).then((inv) => {
+            inventory = inv;
             cy.createAwxJobTemplate(
               {
-                organization: organization.id,
-                project: (this.globalProject as Project).id,
+                organization: awxOrganization.id,
+                project: project.id,
                 inventory: inventory.id,
               },
               'playbooks/hello_world.yml',
@@ -590,288 +973,301 @@ describe('Instance Groups: Jobs Tab', () => {
             });
           });
         });
-      });
-  });
-
-  afterEach(() => {
-    cy.deleteAwxJobTemplate(job_template, { failOnStatusCode: false });
-    cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
-    cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
-  });
+    });
 
-  it('can visit the instance group -> jobs tab, trigger a job, let the job finish, then view the job on the jobs list tab of the IG and delete job', () => {
-    cy.navigateTo('awx', 'templates');
-    cy.verifyPageTitle('Templates');
+    afterEach(() => {
+      cy.deleteAwxJobTemplate(job_template, { failOnStatusCode: false });
+      cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
+    });
 
-    cy.filterTableBySingleSelect('name', job_template.name);
-    cy.clickTableRowPinnedAction(job_template.name, 'launch-template', false);
-    cy.verifyPageTitle(job_template.name);
+    it('can visit the instance group -> jobs tab, trigger a job, let the job finish, then view the job on the jobs list tab of the IG and delete job', () => {
+      cy.navigateTo('awx', 'templates');
+      cy.verifyPageTitle('Templates');
+      cy.filterTableBySingleSelect('name', job_template.name);
+      cy.intercept('POST', awxAPI`/job_templates/${job_template.id.toString()}/launch/`).as(
+        'launched'
+      );
+      cy.clickTableRowPinnedAction(job_template.name, 'launch-template', false);
+      cy.wait('@launched')
+        .its('response.body')
+        .then((launched: Job) => {
+          const jobId = launched.id ? launched.id.toString() : '';
+          cy.waitForJobToProcessEvents(jobId, 'jobs');
+        });
+      cy.verifyPageTitle(job_template.name);
+      cy.navigateTo('awx', 'instance-groups');
+      cy.verifyPageTitle('Instance Groups');
+      cy.filterTableBySingleSelect('name', instanceGroupDefault.name);
+      cy.get('[data-cy="name-column-cell"]').within(() => {
+        cy.get('a').click();
+      });
+      cy.url().then((currentUrl) => {
+        expect(currentUrl.includes('details')).to.be.true;
+        expect(currentUrl.includes('infrastructure/instance-groups')).to.be.true;
+      });
+      cy.clickTab(/^Jobs$/, true);
+      cy.filterTableBySingleSelect('name', job_template.name);
+      cy.intercept('DELETE', awxAPI`/jobs/*/`).as('deleted');
+      cy.clickTableRowKebabAction(job_template.name, 'delete-job', false);
+      cy.clickModalConfirmCheckbox();
+      cy.clickModalButton('Delete job');
+      cy.assertModalSuccess();
+      cy.wait('@deleted')
+        .its('response')
+        .then((response) => {
+          expect(response?.statusCode).to.eql(204);
+        });
+      cy.clickButton(/^Close$/);
+      cy.clickButton(/^Clear all filters$/);
+    });
+  });
+});
 
-    cy.navigateTo('awx', 'instance-groups');
-    cy.verifyPageTitle('Instance Groups');
+tag(['upstream'], () => {
+  //An instance can only be created in an Openshift or Kubernetes build
+  describe('Instance Groups: Instances Tab', () => {
+    let instance: Instance;
+    let instanceGroup: InstanceGroup;
+    let instanceGroupDisassociate: InstanceGroup;
+    let instanceToAssociate: Instance;
 
-    cy.filterTableBySingleSelect('name', instanceGroupDefault.name);
-    cy.get('[data-cy="name-column-cell"]').within(() => {
-      cy.get('a').click();
+    beforeEach(() => {
+      cy.createAwxInstance('E2EInstanceIGTest' + randomString(5), 9999).then((ins: Instance) => {
+        instance = ins;
+        cy.createAwxInstanceGroup({
+          name: 'E2E Instance Group Instance tab test' + randomString(4),
+          percent_capacity_remaining: 100,
+          policy_instance_minimum: 0,
+          policy_instance_list: !Cypress.currentTest.title.includes('associate an instance')
+            ? [instance.hostname]
+            : [],
+        }).then((ig: InstanceGroup) => {
+          instanceGroup = ig;
+        });
+      });
     });
-    cy.url().then((currentUrl) => {
-      expect(currentUrl.includes('details')).to.be.true;
-      expect(currentUrl.includes('infrastructure/instance-groups')).to.be.true;
+
+    afterEach(() => {
+      cy.removeAwxInstance(instance?.id.toString());
+      cy.deleteAwxInstanceGroup(instanceGroup, { failOnStatusCode: false });
     });
-    cy.clickTab(/^Jobs$/, true);
-    cy.filterTableBySingleSelect('name', job_template.name);
-    cy.intercept('DELETE', awxAPI`/jobs/*/`).as('deleted');
 
-    cy.clickTableRowKebabAction(job_template.name, 'delete-job', false);
-    cy.clickModalConfirmCheckbox();
-    cy.clickModalButton('Delete job');
-    cy.assertModalSuccess();
-    cy.wait('@deleted')
-      .its('response')
-      .then((response) => {
-        expect(response?.statusCode).to.eql(204);
+    it('can visit the instances tab of an instance group and associate an instance to that instance group, then disable the instance', () => {
+      cy.navigateTo('awx', 'instance-groups');
+      cy.verifyPageTitle('Instance Groups');
+      cy.filterTableBySingleSelect('name', instanceGroup.name);
+      cy.get('[data-cy="name-column-cell"]').click();
+      cy.url().then((currentUrl) => {
+        expect(currentUrl.includes('details')).to.be.true;
+        expect(currentUrl.includes('infrastructure/instance-groups')).to.be.true;
       });
-    cy.clickButton(/^Close$/);
-    cy.clickButton(/^Clear all filters$/);
-  });
-});
 
-describe('Instance Groups: Instances Tab', () => {
-  let instance: Instance;
-  let instanceGroup: InstanceGroup;
+      cy.clickTab(/^Instances$/, true);
+      cy.getByDataCy('empty-state-title').contains('There are currently no instances added');
+      cy.get('[data-cy="Please associate an instance by using the button below."]').should(
+        'be.visible'
+      );
+      cy.getByDataCy('associate-instance').click();
+      cy.get('[data-ouia-component-type="PF5/ModalContent"]').within(() => {
+        cy.get('header').contains('Select instances');
+        cy.get('button').contains('Confirm').should('have.attr', 'aria-disabled', 'true');
+        cy.filterTableBySingleSelect('hostname', instance.hostname);
+        cy.intercept('POST', awxAPI`/instance_groups/${instanceGroup.id.toString()}/instances/`).as(
+          'associateInstance'
+        );
+        cy.getByDataCy('checkbox-column-cell').find('input').click();
+        cy.get('button').contains('Confirm').click();
+      });
+      cy.assertModalSuccess();
+      cy.wait('@associateInstance')
+        .its('response')
+        .then((response) => {
+          expect(response?.statusCode).to.eql(204);
+        });
+      cy.clickModalButton('Close');
+      cy.intercept('PATCH', awxAPI`/instances/*/`).as('disableInstance');
+      cy.getByDataCy('toggle-switch').should('be.visible').click();
+      cy.wait('@disableInstance')
+        .then((response) => {
+          expect(response?.response?.statusCode).to.eql(200);
+        })
+        .its('response.body.enabled')
+        .then((enabled: string) => {
+          expect(enabled).to.be.false;
+        });
+    });
 
-  beforeEach(() => {
-    cy.createAwxInstance('E2EInstanceIGTest' + randomString(5), 9999).then((ins: Instance) => {
-      instance = ins;
+    it('can visit the instances tab of an instance group and bulk disassociate instances from that instance group', () => {
+      const arrayOfElementText: string[] = [];
+      const arrayOfInstance = <Instance[]>[];
+      for (let i = 0; i < 5; i++) {
+        cy.createAwxInstance('E2EInstanceToDisassociateFromIG' + randomString(5), 9999).then(
+          (ins: Instance) => {
+            instanceToAssociate = ins;
+            arrayOfElementText.push(instanceToAssociate.hostname);
+            arrayOfInstance.push(instanceToAssociate);
+          }
+        );
+      }
       cy.createAwxInstanceGroup({
-        name: 'E2E Instance Group Instance tab test' + randomString(4),
+        name: 'E2E Instance Group Disassociate' + randomString(4),
         percent_capacity_remaining: 100,
         policy_instance_minimum: 0,
-        policy_instance_list: !Cypress.currentTest.title.includes('associate an instance')
-          ? [instance.hostname]
-          : [],
+        policy_instance_list: arrayOfElementText,
       }).then((ig: InstanceGroup) => {
-        instanceGroup = ig;
+        instanceGroupDisassociate = ig;
+        cy.navigateTo('awx', 'instance-groups');
+        cy.verifyPageTitle('Instance Groups');
+        cy.filterTableBySingleSelect('name', instanceGroupDisassociate?.name);
+        cy.get('[data-cy="name-column-cell"]').click();
+        cy.url().then((currentUrl) => {
+          expect(currentUrl.includes('details')).to.be.true;
+          expect(currentUrl.includes('infrastructure/instance-groups')).to.be.true;
+        });
+        cy.clickTab(/^Instances$/, true);
+        cy.get('[data-ouia-component-id="simple-table"]').within(() => {
+          cy.get('tbody tr').should('have.length', 5);
+        });
+        cy.get('button').contains('Disassociate').should('have.attr', 'aria-disabled', 'true');
+        cy.getByDataCy('select-all').click();
+        cy.get('button')
+          .contains('Disassociate')
+          .should('have.attr', 'aria-disabled', 'false')
+          .click();
+        cy.intercept(
+          'POST',
+          awxAPI`/instance_groups/${instanceGroupDisassociate.id.toString()}/instances/`
+        ).as('disassociateInstance');
+        cy.get('[data-ouia-component-type="PF5/ModalContent"]').within(() => {
+          cy.get('header').contains('Disassociate instance from instance group');
+          cy.get('button')
+            .contains('Disassociate instances')
+            .should('have.attr', 'aria-disabled', 'true');
+          cy.get('input[id="confirm"]').click();
+          cy.get('button')
+            .contains('Disassociate instances')
+            .should('have.attr', 'aria-disabled', 'false')
+            .click();
+        });
+        cy.assertModalSuccess();
+        cy.wait('@disassociateInstance')
+          .its('response')
+          .then((response) => {
+            expect(response?.statusCode).to.eql(204);
+          });
+        cy.clickModalButton('Close');
+        cy.getByDataCy('empty-state-title').contains('There are currently no instances added');
+        cy.get('[data-cy="Please associate an instance by using the button below."]').should(
+          'be.visible'
+        );
+        cy.deleteAwxInstanceGroup(instanceGroupDisassociate, { failOnStatusCode: false });
+        arrayOfInstance.map(({ id }) => cy.removeAwxInstance(id?.toString()));
       });
-      cy.navigateTo('awx', 'instance-groups');
-      cy.verifyPageTitle('Instance Groups');
     });
-  });
 
-  afterEach(() => {
-    cy.removeAwxInstance(instance?.id.toString());
-    cy.deleteAwxInstanceGroup(instanceGroup, { failOnStatusCode: false });
-  });
-
-  it('can visit the instances tab of an instance group and associate an instance to that instance group, then disable the instance', () => {
-    cy.filterTableBySingleSelect('name', instanceGroup.name);
-    cy.get('[data-cy="name-column-cell"]').click();
-    cy.url().then((currentUrl) => {
-      expect(currentUrl.includes('details')).to.be.true;
-      expect(currentUrl.includes('infrastructure/instance-groups')).to.be.true;
-    });
-
-    cy.clickTab(/^Instances$/, true);
-    cy.getByDataCy('empty-state-title').contains('There are currently no instances added');
-    cy.get('[data-cy="Please associate an instance by using the button below."]').should(
-      'be.visible'
-    );
-    cy.getByDataCy('associate-instance').click();
-    cy.get('[data-ouia-component-type="PF5/ModalContent"]').within(() => {
-      cy.get('header').contains('Select instances');
-      cy.get('button').contains('Confirm').should('have.attr', 'aria-disabled', 'true');
-      cy.filterTableBySingleSelect('hostname', instance.hostname);
-      cy.intercept('POST', awxAPI`/instance_groups/${instanceGroup.id.toString()}/instances/`).as(
-        'associateInstance'
-      );
-      cy.getByDataCy('checkbox-column-cell').find('input').click();
-      cy.get('button').contains('Confirm').click();
-    });
-    cy.assertModalSuccess();
-    cy.wait('@associateInstance')
-      .its('response')
-      .then((response) => {
-        expect(response?.statusCode).to.eql(204);
-      });
-    cy.clickModalButton('Close');
-    cy.intercept('PATCH', awxAPI`/instances/*/`).as('disableInstance');
-    cy.getByDataCy('toggle-switch').should('be.visible').click();
-    cy.wait('@disableInstance')
-      .then((response) => {
-        expect(response?.response?.statusCode).to.eql(200);
-      })
-      .its('response.body.enabled')
-      .then((enabled: string) => {
-        expect(enabled).to.be.false;
-      });
-  });
-
-  it('can visit the instances tab of an instance group and bulk disassociate instances from that instance group', () => {
-    let instanceGroupDisassociate: InstanceGroup;
-    let instanceToAssociate: Instance;
-    const arrayOfElementText: string[] = [];
-    const arrayOfInstance = <Instance[]>[];
-    for (let i = 0; i < 5; i++) {
-      cy.createAwxInstance('E2EInstanceToDisassociateFromIG' + randomString(5), 9999).then(
-        (ins: Instance) => {
-          instanceToAssociate = ins;
-          arrayOfElementText.push(instanceToAssociate.hostname);
-          arrayOfInstance.push(instanceToAssociate);
-        }
-      );
-    }
-
-    cy.createAwxInstanceGroup({
-      name: 'E2E Instance Group Disassociate' + randomString(4),
-      percent_capacity_remaining: 100,
-      policy_instance_minimum: 0,
-      policy_instance_list: arrayOfElementText,
-    }).then((ig: InstanceGroup) => {
-      instanceGroupDisassociate = ig;
-      cy.filterTableBySingleSelect('name', instanceGroupDisassociate?.name);
+    it('can visit the instances tab of an instance group and run a health check from toolbar against an instance', () => {
+      cy.navigateTo('awx', 'instance-groups');
+      cy.verifyPageTitle('Instance Groups');
+      cy.filterTableBySingleSelect('name', instanceGroup.name);
       cy.get('[data-cy="name-column-cell"]').click();
       cy.url().then((currentUrl) => {
         expect(currentUrl.includes('details')).to.be.true;
         expect(currentUrl.includes('infrastructure/instance-groups')).to.be.true;
       });
       cy.clickTab(/^Instances$/, true);
+      cy.get('button').contains('Run health check').should('have.attr', 'aria-disabled', 'true');
+      cy.filterTableBySingleSelect('hostname', instance.hostname);
       cy.get('[data-ouia-component-id="simple-table"]').within(() => {
-        cy.get('tbody tr').should('have.length', 5);
+        cy.get('tbody tr').should('have.length', 1);
+        cy.get('[data-cy="checkbox-column-cell"] input').click();
       });
-      cy.get('button').contains('Disassociate').should('have.attr', 'aria-disabled', 'true');
-      cy.getByDataCy('select-all').click();
-      cy.get('button')
-        .contains('Disassociate')
-        .should('have.attr', 'aria-disabled', 'false')
-        .click();
-      cy.intercept(
-        'POST',
-        awxAPI`/instance_groups/${instanceGroupDisassociate.id.toString()}/instances/`
-      ).as('disassociateInstance');
+      cy.getBy('[data-ouia-component-id="page-toolbar"]').within(() => {
+        cy.getByDataCy('run-health-check').click();
+      });
+      cy.intercept('POST', awxAPI`/instances/*/health_check/`).as('runHealthCheck');
       cy.get('[data-ouia-component-type="PF5/ModalContent"]').within(() => {
-        cy.get('header').contains('Disassociate instance from instance group');
-        cy.get('button')
-          .contains('Disassociate instances')
-          .should('have.attr', 'aria-disabled', 'true');
+        cy.get('header').contains('Run health checks on these instances');
+        cy.get('button').contains('Run health check').should('have.attr', 'aria-disabled', 'true');
+        cy.getByDataCy('name-column-cell').should('have.text', instance.hostname);
         cy.get('input[id="confirm"]').click();
-        cy.get('button')
-          .contains('Disassociate instances')
-          .should('have.attr', 'aria-disabled', 'false')
-          .click();
+        cy.get('button').contains('Run health check').click();
       });
       cy.assertModalSuccess();
-      cy.wait('@disassociateInstance')
-        .its('response')
+      cy.clickModalButton('Close');
+      cy.wait('@runHealthCheck')
         .then((response) => {
-          expect(response?.statusCode).to.eql(204);
+          expect(response.response?.statusCode).to.eql(200);
+        })
+        .its('response.body.msg')
+        .then((response) => {
+          expect(response).contains(`Health check is running for ${instance.hostname}.`);
         });
-      cy.clickModalButton('Close');
-      cy.getByDataCy('empty-state-title').contains('There are currently no instances added');
-      cy.get('[data-cy="Please associate an instance by using the button below."]').should(
-        'be.visible'
-      );
-      cy.deleteAwxInstanceGroup(instanceGroupDisassociate, { failOnStatusCode: false });
-      arrayOfInstance.map(({ id }) => cy.removeAwxInstance(id?.toString()));
     });
-  });
 
-  it('can visit the instances tab of an instance group and run a health check from toolbar against an instance', () => {
-    cy.filterTableBySingleSelect('name', instanceGroup.name);
-    cy.get('[data-cy="name-column-cell"]').click();
-    cy.url().then((currentUrl) => {
-      expect(currentUrl.includes('details')).to.be.true;
-      expect(currentUrl.includes('infrastructure/instance-groups')).to.be.true;
-    });
-    cy.clickTab(/^Instances$/, true);
-    cy.get('button').contains('Run health check').should('have.attr', 'aria-disabled', 'true');
-    cy.filterTableBySingleSelect('hostname', instance.hostname);
-    cy.get('[data-ouia-component-id="simple-table"]').within(() => {
-      cy.get('tbody tr').should('have.length', 1);
-      cy.get('[data-cy="checkbox-column-cell"] input').click();
-    });
-    cy.getBy('[data-ouia-component-id="page-toolbar"]').within(() => {
-      cy.getByDataCy('run-health-check').click();
-    });
-    cy.intercept('POST', awxAPI`/instances/*/health_check/`).as('runHealthCheck');
-    cy.get('[data-ouia-component-type="PF5/ModalContent"]').within(() => {
-      cy.get('header').contains('Run health checks on these instances');
-      cy.get('button').contains('Run health check').should('have.attr', 'aria-disabled', 'true');
-      cy.getByDataCy('name-column-cell').should('have.text', instance.hostname);
-      cy.get('input[id="confirm"]').click();
-      cy.get('button').contains('Run health check').click();
-    });
-    cy.assertModalSuccess();
-    cy.clickModalButton('Close');
-    cy.wait('@runHealthCheck')
-      .then((response) => {
-        expect(response.response?.statusCode).to.eql(200);
-      })
-      .its('response.body.msg')
-      .then((response) => {
-        expect(response).contains(`Health check is running for ${instance.hostname}.`);
+    it('can visit the instances tab of an instance group and run a health check from row against an instance', () => {
+      cy.navigateTo('awx', 'instance-groups');
+      cy.verifyPageTitle('Instance Groups');
+      cy.filterTableBySingleSelect('name', instanceGroup.name);
+      cy.get('[data-cy="name-column-cell"]').click();
+      cy.url().then((currentUrl) => {
+        expect(currentUrl.includes('details')).to.be.true;
+        expect(currentUrl.includes('infrastructure/instance-groups')).to.be.true;
       });
-  });
-
-  it('can visit the instances tab of an instance group and run a health check from row against an instance', () => {
-    cy.filterTableBySingleSelect('name', instanceGroup.name);
-    cy.get('[data-cy="name-column-cell"]').click();
-    cy.url().then((currentUrl) => {
-      expect(currentUrl.includes('details')).to.be.true;
-      expect(currentUrl.includes('infrastructure/instance-groups')).to.be.true;
-    });
-    cy.clickTab(/^Instances$/, true);
-    cy.get('[data-ouia-component-id="simple-table"]').within(() => {
-      cy.get('tbody tr').should('have.length', 1);
-    });
-    cy.filterTableBySingleSelect('hostname', instance.hostname);
-    cy.intercept('POST', awxAPI`/instances/*/health_check/`).as('runHealthCheck');
-    cy.clickTableRowPinnedAction(instance.hostname, 'run-health-check', false);
-    cy.wait('@runHealthCheck')
-      .then((response) => {
-        expect(response.response?.statusCode).to.eql(200);
-      })
-      .its('response.body.msg')
-      .then((response) => {
-        expect(response).contains(`Health check is running for ${instance.hostname}.`);
+      cy.clickTab(/^Instances$/, true);
+      cy.get('[data-ouia-component-id="simple-table"]').within(() => {
+        cy.get('tbody tr').should('have.length', 1);
       });
-  });
+      cy.filterTableBySingleSelect('hostname', instance.hostname);
+      cy.intercept('POST', awxAPI`/instances/*/health_check/`).as('runHealthCheck');
+      cy.clickTableRowPinnedAction(instance.hostname, 'run-health-check', false);
+      cy.wait('@runHealthCheck')
+        .then((response) => {
+          expect(response.response?.statusCode).to.eql(200);
+        })
+        .its('response.body.msg')
+        .then((response) => {
+          expect(response).contains(`Health check is running for ${instance.hostname}.`);
+        });
+    });
 
-  it('can visit the details page of an instance nested inside an instance group and run health check on it', () => {
-    cy.filterTableBySingleSelect('name', instanceGroup.name);
-    cy.get('[data-cy="name-column-cell"]').click();
-    cy.url().then((currentUrl) => {
-      expect(currentUrl.includes('details')).to.be.true;
-      expect(currentUrl.includes('infrastructure/instance-groups')).to.be.true;
-    });
-    cy.clickTab(/^Instances$/, true);
-    cy.get('[data-ouia-component-id="simple-table"]').within(() => {
-      cy.get('tbody tr').should('have.length', 1);
-    });
-    cy.filterTableBySingleSelect('hostname', instance.hostname);
-    cy.get('[data-cy="name-column-cell"]').click();
-    cy.url().then((currentUrl) => {
-      expect(currentUrl.includes('details')).to.be.true;
-      expect(currentUrl.includes('infrastructure/instance-groups')).to.be.true;
-    });
-    cy.verifyPageTitle(instance.hostname);
-    cy.contains('nav[aria-label="Breadcrumb"]', 'Instance groups').should('exist');
-    cy.contains('nav[aria-label="Breadcrumb"]', instanceGroup.name).should('exist');
-    cy.contains('nav[aria-label="Breadcrumb"]', 'Instances').should('exist');
-    cy.contains('nav[aria-label="Breadcrumb"]', instance.hostname).should('exist');
-    cy.contains('nav[aria-label="Breadcrumb"]', 'Details').should('exist');
-
-    cy.intercept('POST', awxAPI`/instances/${instance.id.toString()}/health_check/`).as(
-      'runHealthCheck'
-    );
-    cy.getByDataCy('run-health-check').click();
-    cy.wait('@runHealthCheck')
-      .then((response) => {
-        expect(response.response?.statusCode).to.eql(200);
-      })
-      .its('response.body.msg')
-      .then((response) => {
-        expect(response).contains(`Health check is running for ${instance.hostname}.`);
-      });
-    cy.get('button').contains('Run health check').should('have.attr', 'aria-disabled', 'true');
+    it('can visit the details page of an instance nested inside an instance group and run health check on it', () => {
+      cy.navigateTo('awx', 'instance-groups');
+      cy.verifyPageTitle('Instance Groups');
+      cy.filterTableBySingleSelect('name', instanceGroup.name);
+      cy.get('[data-cy="name-column-cell"]').click();
+      cy.url().then((currentUrl) => {
+        expect(currentUrl.includes('details')).to.be.true;
+        expect(currentUrl.includes('infrastructure/instance-groups')).to.be.true;
+      });
+      cy.clickTab(/^Instances$/, true);
+      cy.get('[data-ouia-component-id="simple-table"]').within(() => {
+        cy.get('tbody tr').should('have.length', 1);
+      });
+      cy.filterTableBySingleSelect('hostname', instance.hostname);
+      cy.get('[data-cy="name-column-cell"]').click();
+      cy.url().then((currentUrl) => {
+        expect(currentUrl.includes('details')).to.be.true;
+        expect(currentUrl.includes('infrastructure/instance-groups')).to.be.true;
+      });
+      cy.verifyPageTitle(instance.hostname);
+      cy.contains('nav[aria-label="Breadcrumb"]', 'Instance groups').should('exist');
+      cy.contains('nav[aria-label="Breadcrumb"]', instanceGroup.name).should('exist');
+      cy.contains('nav[aria-label="Breadcrumb"]', 'Instances').should('exist');
+      cy.contains('nav[aria-label="Breadcrumb"]', instance.hostname).should('exist');
+      cy.contains('nav[aria-label="Breadcrumb"]', 'Details').should('exist');
+      cy.intercept('POST', awxAPI`/instances/${instance.id.toString()}/health_check/`).as(
+        'runHealthCheck'
+      );
+      cy.getByDataCy('run-health-check').click();
+      cy.wait('@runHealthCheck')
+        .then((response) => {
+          expect(response.response?.statusCode).to.eql(200);
+        })
+        .its('response.body.msg')
+        .then((response) => {
+          expect(response).contains(`Health check is running for ${instance.hostname}.`);
+        });
+      cy.get('button').contains('Run health check').should('have.attr', 'aria-disabled', 'true');
+    });
   });
 });
diff --git a/cypress/e2e/awx/administration/instances.cy.ts b/cypress/e2e/awx/administration/instances.cy.ts
index f040836fc..8a3b09e03 100644
--- a/cypress/e2e/awx/administration/instances.cy.ts
+++ b/cypress/e2e/awx/administration/instances.cy.ts
@@ -2,417 +2,421 @@ import * as path from 'path';
 import { randomString } from '../../../../framework/utils/random-string';
 import { Instance } from '../../../../frontend/awx/interfaces/Instance';
 import { awxAPI } from '../../../support/formatApiPathForAwx';
+import { tag } from '../../../support/tag';
 
-describe('Instances: Add/Edit', () => {
-  let instance: Instance;
+tag(['upstream'], () => {
+  //An instance can only be created in an Openshift or Kubernetes build
+  describe('Instances: Add/Edit', () => {
+    let instance: Instance;
 
-  beforeEach(() => {
-    cy.createAwxInstance('E2EInstanceTestAddEdit' + randomString(5)).then((ins: Instance) => {
-      instance = ins;
+    beforeEach(() => {
+      cy.createAwxInstance('E2EInstanceTestAddEdit' + randomString(5)).then((ins: Instance) => {
+        instance = ins;
+      });
+      cy.navigateTo('awx', 'instances');
+      cy.verifyPageTitle('Instances');
     });
-    cy.navigateTo('awx', 'instances');
-    cy.verifyPageTitle('Instances');
-  });
-
-  it('can add a new instance and verify details', () => {
-    const instanceHostname = 'E2EInstanceTestAddEdit' + randomString(5);
-    // Navigate to the create instance page
-    cy.getByDataCy('add-instance').click();
-    cy.getByDataCy('page-title').should('contain', 'Add instance');
 
-    // Create a new instance
-    cy.getByDataCy('hostname').type(instanceHostname);
-    cy.getByDataCy('listener-port').type('9999');
-    cy.getByDataCy('managed_by_policy').click();
-    cy.getByDataCy('peers_from_control_nodes').click();
-    cy.getByDataCy('Submit').click();
-
-    // Verify the instance was created by checking the page title
-    // as the instance detail page is navigated to after creation
-    cy.verifyPageTitle(instanceHostname);
-
-    // Verify the instance details
-    cy.getByDataCy('name').should('contain', instanceHostname);
-    cy.getByDataCy('node-type').should('contain', 'Execution');
-    cy.getByDataCy('status').should('contain', 'Installed');
-    cy.getByDataCy('listener-port').should('contain', '9999');
-    cy.getByDataCy('actions-dropdown').click();
-    cy.getByDataCy('remove-instance').click();
-    cy.getModal().within(() => {
-      cy.get('header').contains('Permanently remove instances');
-      cy.get('button').contains('Remove instance').should('have.attr', 'aria-disabled', 'true');
-      cy.getByDataCy('name-column-cell').should('have.text', instanceHostname);
-      cy.get('input[id="confirm"]').click();
-      cy.get('button').contains('Remove instance').click();
+    it('can add a new instance and navigate to the details page', () => {
+      const instanceHostname = 'E2EInstanceTestAddEdit' + randomString(5);
+      // Navigate to the create instance page
+      cy.getByDataCy('add-instance').click();
+      cy.getByDataCy('page-title').should('contain', 'Add instance');
+      // Create a new instance
+      cy.getByDataCy('hostname').type(instanceHostname);
+      cy.getByDataCy('listener-port').type('9999');
+      cy.getByDataCy('managed_by_policy').click();
+      cy.getByDataCy('peers_from_control_nodes').click();
+      cy.getByDataCy('Submit').click();
+      // Verify the instance was created by checking the page title
+      // as the instance detail page is navigated to after creation
+      cy.verifyPageTitle(instanceHostname);
+      // Verify the instance details
+      cy.getByDataCy('name').should('contain', instanceHostname);
+      cy.getByDataCy('node-type').should('contain', 'Execution');
+      cy.getByDataCy('status').should('contain', 'Installed');
+      cy.getByDataCy('listener-port').should('contain', '9999');
+      cy.getByDataCy('actions-dropdown').click();
+      cy.getByDataCy('remove-instance').click();
+      cy.getModal().within(() => {
+        cy.get('header').contains('Permanently remove instances');
+        cy.get('button').contains('Remove instance').should('have.attr', 'aria-disabled', 'true');
+        cy.getByDataCy('name-column-cell').should('have.text', instanceHostname);
+        cy.get('input[id="confirm"]').click();
+        cy.get('button').contains('Remove instance').click();
+      });
     });
-  });
 
-  it('can edit an instance from the instances list view and assert info on details page', () => {
-    cy.intercept('PATCH', awxAPI`/instances/*/`).as('editedInstance');
-    cy.filterTableBySingleSelect('hostname', instance.hostname);
-    cy.clickTableRowLink('name', instance.hostname, { disableFilter: true });
-    cy.url().then((currentUrl) => {
-      expect(currentUrl.includes('details')).to.be.true;
-    });
-    cy.getByDataCy('actions-dropdown').click();
-    cy.getByDataCy('edit-instance').click();
-    cy.getByDataCy('listener-port').type('9999');
-    cy.getByDataCy('enabled').check();
-    cy.getByDataCy('managed_by_policy').check();
-    cy.getByDataCy('peers_from_control_nodes').check();
-    cy.clickButton(/^Save$/);
-    cy.wait('@editedInstance')
-      .its('response.body')
-      .then((body: Instance) => {
-        expect(body.hostname).to.eql(instance.hostname);
-        expect(body.listener_port).to.eql(9999);
-        expect(body.enabled).to.eql(true);
-        expect(body.managed_by_policy).to.eql(true);
-        expect(body.peers_from_control_nodes).to.eql(true);
-        cy.getByDataCy('actions-dropdown').click();
-        cy.getByDataCy('remove-instance').click();
-        cy.get('[data-ouia-component-type="PF5/ModalContent"]').within(() => {
-          cy.get('header').contains('Permanently remove instances');
-          cy.get('button').contains('Remove instance').should('have.attr', 'aria-disabled', 'true');
-          cy.getByDataCy('name-column-cell').should('have.text', instance.hostname);
-          cy.get('input[id="confirm"]').click();
-          cy.get('button').contains('Remove instance').click();
-        });
+    it('can edit an instance from the instances list view and assert info on details page', () => {
+      cy.intercept('PATCH', awxAPI`/instances/*/`).as('editedInstance');
+      cy.filterTableBySingleSelect('hostname', instance.hostname);
+      cy.clickTableRowLink('name', instance.hostname, { disableFilter: true });
+      cy.url().then((currentUrl) => {
+        expect(currentUrl.includes('details')).to.be.true;
       });
-  });
-
-  it('can visit the details page of an Instance and verify the bundle download feature', () => {
-    cy.filterTableBySingleSelect('hostname', instance.hostname);
-    cy.clickTableRowLink('name', instance.hostname, { disableFilter: true });
-    cy.verifyPageTitle(instance.hostname);
-    cy.url().then((currentUrl) => {
-      expect(currentUrl.includes('details')).to.be.true;
-      expect(currentUrl.includes('infrastructure/instances/')).to.be.true;
-    });
-    cy.getByDataCy('name').should('contain', instance.hostname);
-    cy.getByDataCy('node-type').should('contain', 'Execution');
-    cy.getByDataCy('status').should('contain', 'Installed');
-    cy.get('[data-cy="download-bundle"]').within(() => {
-      cy.get('a').click();
+      cy.getByDataCy('actions-dropdown').click();
+      cy.getByDataCy('edit-instance').click();
+      cy.getByDataCy('listener-port').type('9999');
+      cy.getByDataCy('enabled').check();
+      cy.getByDataCy('managed_by_policy').check();
+      cy.getByDataCy('peers_from_control_nodes').check();
+      cy.clickButton(/^Save$/);
+      cy.wait('@editedInstance')
+        .its('response.body')
+        .then((body: Instance) => {
+          expect(body.hostname).to.eql(instance.hostname);
+          expect(body.listener_port).to.eql(9999);
+          expect(body.enabled).to.eql(true);
+          expect(body.managed_by_policy).to.eql(true);
+          expect(body.peers_from_control_nodes).to.eql(true);
+          cy.getByDataCy('actions-dropdown').click();
+          cy.getByDataCy('remove-instance').click();
+          cy.get('[data-ouia-component-type="PF5/ModalContent"]').within(() => {
+            cy.get('header').contains('Permanently remove instances');
+            cy.get('button')
+              .contains('Remove instance')
+              .should('have.attr', 'aria-disabled', 'true');
+            cy.getByDataCy('name-column-cell').should('have.text', instance.hostname);
+            cy.get('input[id="confirm"]').click();
+            cy.get('button').contains('Remove instance').click();
+          });
+        });
     });
-    const downloadsFolder = Cypress.config('downloadsFolder');
-    const downloadedFilename = path.join(
-      downloadsFolder,
-      `${instance.hostname}_install_bundle.tar.gz`
-    );
 
-    cy.readFile(downloadedFilename, null, { timeout: 45000 }).then((buffer: Buffer) => {
-      expect(Cypress.Buffer.isBuffer(buffer)).to.be.true;
-      expect(buffer.length).to.be.gt(5000);
+    it('can visit the details page of an Instance and verify the bundle download feature', () => {
+      cy.filterTableBySingleSelect('hostname', instance.hostname);
+      cy.clickTableRowLink('name', instance.hostname, { disableFilter: true });
+      cy.verifyPageTitle(instance.hostname);
+      cy.url().then((currentUrl) => {
+        expect(currentUrl.includes('details')).to.be.true;
+        expect(currentUrl.includes('infrastructure/instances/')).to.be.true;
+      });
+      cy.getByDataCy('name').should('contain', instance.hostname);
+      cy.getByDataCy('node-type').should('contain', 'Execution');
+      cy.getByDataCy('status').should('contain', 'Installed');
+      cy.get('[data-cy="download-bundle"]').within(() => {
+        cy.get('a').click();
+      });
+      const downloadsFolder = Cypress.config('downloadsFolder');
+      const downloadedFilename = path.join(
+        downloadsFolder,
+        `${instance.hostname}_install_bundle.tar.gz`
+      );
+      cy.readFile(downloadedFilename, null, { timeout: 45000 }).then((buffer: Buffer) => {
+        expect(Cypress.Buffer.isBuffer(buffer)).to.be.true;
+        expect(buffer.length).to.be.gt(5000);
+      });
     });
-  });
 
-  it('can uncheck the Enable Instance checkbox on the edit form, save form, and see the toggle is off', () => {
-    cy.filterTableBySingleSelect('hostname', instance.hostname);
-    cy.clickTableRowLink('name', instance.hostname, { disableFilter: true });
-    cy.url().then((currentUrl) => {
-      expect(currentUrl.includes(`/infrastructure/instances/${instance.id}/details`)).to.be.true;
-    });
-    cy.get('input[aria-label="Enabled"]').should('exist');
-    cy.getByDataCy('actions-dropdown').click();
-    cy.getByDataCy('edit-instance').click();
-    cy.getByDataCy('enabled').uncheck();
-    cy.intercept('PATCH', awxAPI`/instances/*/`).as('editedInstance');
-    cy.clickButton(/^Save$/);
-    cy.wait('@editedInstance')
-      .then((response) => {
-        expect(response?.response?.statusCode).to.eql(200);
-      })
-      .its('response.body')
-      .then((response: Instance) => {
-        expect(response.enabled).to.be.false;
+    it('can uncheck the Enable Instance checkbox on the edit form, save form, and see the toggle is off', () => {
+      cy.filterTableBySingleSelect('hostname', instance.hostname);
+      cy.clickTableRowLink('name', instance.hostname, { disableFilter: true });
+      cy.url().then((currentUrl) => {
+        expect(currentUrl.includes(`/infrastructure/instances/${instance.id}/details`)).to.be.true;
       });
-    cy.get('input[aria-label="Disabled"]').should('exist');
+      cy.get('input[aria-label="Enabled"]').should('exist');
+      cy.getByDataCy('actions-dropdown').click();
+      cy.getByDataCy('edit-instance').click();
+      cy.getByDataCy('enabled').uncheck();
+      cy.intercept('PATCH', awxAPI`/instances/*/`).as('editedInstance');
+      cy.clickButton(/^Save$/);
+      cy.wait('@editedInstance')
+        .then((response) => {
+          expect(response?.response?.statusCode).to.eql(200);
+        })
+        .its('response.body')
+        .then((response: Instance) => {
+          expect(response.enabled).to.be.false;
+        });
+      cy.get('input[aria-label="Disabled"]').should('exist');
+    });
   });
-});
 
-describe('Instances: Delete', () => {
-  let instance: Instance;
-  const testSignature: string = randomString(5, undefined, { isLowercase: true });
-  function generateInstanceName(): string {
-    return `test-${testSignature}-instance-${randomString(5, undefined, { isLowercase: true })}`;
-  }
+  describe('Instances: Delete', () => {
+    let instance: Instance;
+    const testSignature: string = randomString(5, undefined, { isLowercase: true });
+    function generateInstanceName(): string {
+      return `test-${testSignature}-instance-${randomString(5, undefined, { isLowercase: true })}`;
+    }
 
-  beforeEach(() => {
-    cy.createAwxInstance('E2EInstanceTestRemove' + randomString(5)).then((ins: Instance) => {
-      instance = ins;
+    beforeEach(() => {
+      cy.createAwxInstance('E2EInstanceTestRemove' + randomString(5)).then((ins: Instance) => {
+        instance = ins;
+      });
+      cy.navigateTo('awx', 'instances');
+      cy.verifyPageTitle('Instances');
     });
-    cy.navigateTo('awx', 'instances');
-    cy.verifyPageTitle('Instances');
-  });
 
-  it('can remove an instance from details page', () => {
-    cy.intercept('PATCH', awxAPI`/instances/*`).as('removedInstance');
-    cy.filterTableBySingleSelect('hostname', instance.hostname);
-    cy.clickTableRowLink('name', instance.hostname, { disableFilter: true });
-    cy.url().then((currentUrl) => {
-      expect(currentUrl.includes('details')).to.be.true;
-    });
-    cy.getByDataCy('actions-dropdown').click();
-    cy.getByDataCy('remove-instance').click();
-    cy.get('[data-ouia-component-type="PF5/ModalContent"]').within(() => {
-      cy.get('header').contains('Permanently remove instances');
-      cy.get('button').contains('Remove instance').should('have.attr', 'aria-disabled', 'true');
-      cy.getByDataCy('name-column-cell').should('have.text', instance.hostname);
-      cy.get('input[id="confirm"]').click();
-      cy.get('button').contains('Remove instance').click();
-    });
-    cy.wait('@removedInstance')
-      .its('response')
-      .then((response) => {
-        expect(response?.statusCode).to.eql(200);
+    it('can remove an instance from details page', () => {
+      cy.intercept('PATCH', awxAPI`/instances/*`).as('removedInstance');
+      cy.filterTableBySingleSelect('hostname', instance.hostname);
+      cy.clickTableRowLink('name', instance.hostname, { disableFilter: true });
+      cy.url().then((currentUrl) => {
+        expect(currentUrl.includes('details')).to.be.true;
       });
-  });
-
-  it('can remove an instance from instance list toolbar', () => {
-    cy.intercept('PATCH', awxAPI`/instances/*`).as('removedInstance');
-    cy.get('[data-cy="actions-dropdown"]').click();
-    cy.get('[data-cy="remove-instance"]').should('have.attr', 'aria-disabled', 'true');
-    cy.filterTableBySingleSelect('hostname', instance.hostname);
-    cy.contains('tr', instance.hostname).find('input').check();
-    cy.get('[data-cy="actions-dropdown"]').click();
-    cy.get('[data-cy="remove-instance"]').should('have.attr', 'aria-disabled', 'false');
-    cy.get('[data-cy="remove-instance"]').click();
-    cy.get('[data-ouia-component-type="PF5/ModalContent"]').within(() => {
-      cy.get('header').contains('Permanently remove instances');
-      cy.get('button').contains('Remove instance').should('have.attr', 'aria-disabled', 'true');
-      cy.getByDataCy('name-column-cell').should('have.text', instance.hostname);
-      cy.get('input[id="confirm"]').click();
-      cy.get('button').contains('Remove instance').click();
-    });
-    cy.wait('@removedInstance')
-      .its('response')
-      .then((response) => {
-        expect(response?.statusCode).to.eql(200);
+      cy.getByDataCy('actions-dropdown').click();
+      cy.getByDataCy('remove-instance').click();
+      cy.get('[data-ouia-component-type="PF5/ModalContent"]').within(() => {
+        cy.get('header').contains('Permanently remove instances');
+        cy.get('button').contains('Remove instance').should('have.attr', 'aria-disabled', 'true');
+        cy.getByDataCy('name-column-cell').should('have.text', instance.hostname);
+        cy.get('input[id="confirm"]').click();
+        cy.get('button').contains('Remove instance').click();
       });
-    cy.clickButton('Close');
-  });
-
-  it('can bulk remove instances', () => {
-    const arrayOfElementText = [];
-    for (let i = 0; i < 5; i++) {
-      const instanceName = generateInstanceName();
-      cy.createAwxInstance(instanceName);
-      arrayOfElementText.push(instanceName);
-    }
-    arrayOfElementText.push(instance.hostname);
-    cy.intercept('PATCH', awxAPI`/instances/*`).as('removedInstance');
-    cy.get('[data-cy="actions-dropdown"]').click();
-    cy.get('[data-cy="remove-instance"]').should('have.attr', 'aria-disabled', 'true');
-    cy.filterTableByMultiSelect('hostname', arrayOfElementText);
-    cy.get('tbody tr').should('have.length', 6);
-    cy.getByDataCy('select-all').click();
-    cy.get('[data-cy="actions-dropdown"]').click();
-    cy.get('[data-cy="remove-instance"]').should('have.attr', 'aria-disabled', 'false');
-    cy.get('[data-cy="remove-instance"]').click();
-    cy.get('[data-ouia-component-type="PF5/ModalContent"]').within(() => {
-      cy.get('header').contains('Permanently remove instances');
-      cy.get('button').contains('Remove instance').should('have.attr', 'aria-disabled', 'true');
-      cy.get('input[id="confirm"]').click();
-      cy.get('button').contains('Remove instance').click();
+      cy.wait('@removedInstance')
+        .its('response')
+        .then((response) => {
+          expect(response?.statusCode).to.eql(200);
+        });
     });
-    cy.wait('@removedInstance')
-      .its('response')
-      .then((response) => {
-        expect(response?.statusCode).to.eql(200);
-      });
-  });
-});
 
-describe('Instances: Run Health Check', () => {
-  let instance: Instance;
+    it('can remove an instance from instance list toolbar', () => {
+      cy.intercept('PATCH', awxAPI`/instances/*`).as('removedInstance');
+      cy.get('[data-cy="actions-dropdown"]').click();
+      cy.get('[data-cy="remove-instance"]').should('have.attr', 'aria-disabled', 'true');
+      cy.filterTableBySingleSelect('hostname', instance.hostname);
+      cy.contains('tr', instance.hostname).find('input').check();
+      cy.get('[data-cy="actions-dropdown"]').click();
+      cy.get('[data-cy="remove-instance"]').should('have.attr', 'aria-disabled', 'false');
+      cy.get('[data-cy="remove-instance"]').click();
+      cy.get('[data-ouia-component-type="PF5/ModalContent"]').within(() => {
+        cy.get('header').contains('Permanently remove instances');
+        cy.get('button').contains('Remove instance').should('have.attr', 'aria-disabled', 'true');
+        cy.getByDataCy('name-column-cell').should('have.text', instance.hostname);
+        cy.get('input[id="confirm"]').click();
+        cy.get('button').contains('Remove instance').click();
+      });
+      cy.wait('@removedInstance')
+        .its('response')
+        .then((response) => {
+          expect(response?.statusCode).to.eql(200);
+        });
+      cy.clickButton('Close');
+    });
 
-  beforeEach(() => {
-    cy.createAwxInstance('E2EInstanceRunHealthCheck' + randomString(5)).then((ins: Instance) => {
-      instance = ins;
+    it('can bulk remove instances', () => {
+      const arrayOfElementText = [];
+      for (let i = 0; i < 5; i++) {
+        const instanceName = generateInstanceName();
+        cy.createAwxInstance(instanceName);
+        arrayOfElementText.push(instanceName);
+      }
+      arrayOfElementText.push(instance.hostname);
+      cy.intercept('PATCH', awxAPI`/instances/*`).as('removedInstance');
+      cy.get('[data-cy="actions-dropdown"]').click();
+      cy.get('[data-cy="remove-instance"]').should('have.attr', 'aria-disabled', 'true');
+      cy.filterTableByMultiSelect('hostname', arrayOfElementText);
+      cy.get('tbody tr').should('have.length', 6);
+      cy.getByDataCy('select-all').click();
+      cy.get('[data-cy="actions-dropdown"]').click();
+      cy.get('[data-cy="remove-instance"]').should('have.attr', 'aria-disabled', 'false');
+      cy.get('[data-cy="remove-instance"]').click();
+      cy.get('[data-ouia-component-type="PF5/ModalContent"]').within(() => {
+        cy.get('header').contains('Permanently remove instances');
+        cy.get('button').contains('Remove instance').should('have.attr', 'aria-disabled', 'true');
+        cy.get('input[id="confirm"]').click();
+        cy.get('button').contains('Remove instance').click();
+      });
+      cy.wait('@removedInstance')
+        .its('response')
+        .then((response) => {
+          expect(response?.statusCode).to.eql(200);
+        });
     });
-    cy.navigateTo('awx', 'instances');
-    cy.verifyPageTitle('Instances');
   });
 
-  afterEach(() => {
-    cy.removeAwxInstance(instance.id.toString());
-  });
+  describe('Instances: Run Health Check', () => {
+    let instance: Instance;
 
-  it('can run a health check on an Instance in the instance list toolbar and assert the expected results', () => {
-    cy.get('[data-cy="actions-dropdown"]').click();
-    cy.get('[data-cy="run-health-check"]').should('have.attr', 'aria-disabled', 'true');
-    cy.filterTableBySingleSelect('hostname', instance.hostname);
-    cy.contains('tr', instance.hostname).find('input').check();
-    cy.get('[data-cy="actions-dropdown"]').click();
-    cy.get('[data-cy="run-health-check"]').should('have.attr', 'aria-disabled', 'false');
-    cy.getBy('[data-ouia-component-id="page-toolbar"]').within(() => {
-      cy.getByDataCy('run-health-check').click();
-    });
-    cy.intercept('POST', awxAPI`/instances/*/health_check/`).as('runHealthCheck');
-    cy.get('[data-ouia-component-type="PF5/ModalContent"]').within(() => {
-      cy.get('header').contains('Run health checks on these instances');
-      cy.get('button').contains('Run health check').should('have.attr', 'aria-disabled', 'true');
-      cy.getByDataCy('name-column-cell').should('have.text', instance.hostname);
-      cy.get('input[id="confirm"]').click();
-      cy.get('button').contains('Run health check').click();
-    });
-    cy.wait('@runHealthCheck')
-      .then((response) => {
-        expect(response.response?.statusCode).to.eql(200);
-      })
-      .its('response.body.msg')
-      .then((response) => {
-        expect(response).contains(`Health check is running for ${instance.hostname}.`);
+    beforeEach(() => {
+      cy.createAwxInstance('E2EInstanceRunHealthCheck' + randomString(5)).then((ins: Instance) => {
+        instance = ins;
       });
-    cy.clickModalButton('Close');
-    cy.get('[data-cy="status-column-cell"]').contains('Running');
-  });
+      cy.navigateTo('awx', 'instances');
+      cy.verifyPageTitle('Instances');
+    });
 
-  it('can run a health check on an Instance in the instance details page and assert the expected results', () => {
-    cy.filterTableBySingleSelect('hostname', instance.hostname);
-    cy.clickTableRowLink('name', instance.hostname, { disableFilter: true });
-    cy.verifyPageTitle(instance.hostname);
-    cy.url().then((currentUrl) => {
-      expect(currentUrl.includes(`/infrastructure/instances/${instance.id}/details`)).to.be.true;
+    afterEach(() => {
+      cy.removeAwxInstance(instance.id.toString());
     });
-    cy.intercept('POST', awxAPI`/instances/*/health_check/`).as('runHealthCheck');
-    cy.getByDataCy('run-health-check').click();
-    cy.wait('@runHealthCheck')
-      .then((response) => {
-        expect(response.response?.statusCode).to.eql(200);
-      })
-      .its('response.body.msg')
-      .then((response) => {
-        expect(response).contains(`Health check is running for ${instance.hostname}.`);
-      });
-    cy.get('[data-cy="run-health-check"]').should('have.attr', 'aria-disabled', 'true');
-  });
 
-  it('can run a health check on an Instance in the instance list from row action and assert the expected results', () => {
-    cy.intercept('POST', awxAPI`/instances/*/health_check/`).as('runHealthCheck');
-    cy.filterTableBySingleSelect('hostname', instance.hostname);
-    cy.clickTableRowPinnedAction(instance.hostname, 'run-health-check', false);
-    cy.wait('@runHealthCheck')
-      .then((response) => {
-        expect(response.response?.statusCode).to.eql(200);
-      })
-      .its('response.body.msg')
-      .then((response) => {
-        expect(response).contains(`Health check is running for ${instance.hostname}.`);
+    it('can run a health check on an Instance in the instance list toolbar and assert the expected results', () => {
+      cy.get('[data-cy="actions-dropdown"]').click();
+      cy.get('[data-cy="run-health-check"]').should('have.attr', 'aria-disabled', 'true');
+      cy.filterTableBySingleSelect('hostname', instance.hostname);
+      cy.contains('tr', instance.hostname).find('input').check();
+      cy.get('[data-cy="actions-dropdown"]').click();
+      cy.get('[data-cy="run-health-check"]').should('have.attr', 'aria-disabled', 'false');
+      cy.getBy('[data-ouia-component-id="page-toolbar"]').within(() => {
+        cy.getByDataCy('run-health-check').click();
       });
-    cy.get('[data-cy="status-column-cell"]').contains('Running');
-  });
-});
+      cy.intercept('POST', awxAPI`/instances/*/health_check/`).as('runHealthCheck');
+      cy.get('[data-ouia-component-type="PF5/ModalContent"]').within(() => {
+        cy.get('header').contains('Run health checks on these instances');
+        cy.get('button').contains('Run health check').should('have.attr', 'aria-disabled', 'true');
+        cy.getByDataCy('name-column-cell').should('have.text', instance.hostname);
+        cy.get('input[id="confirm"]').click();
+        cy.get('button').contains('Run health check').click();
+      });
+      cy.wait('@runHealthCheck')
+        .then((response) => {
+          expect(response.response?.statusCode).to.eql(200);
+        })
+        .its('response.body.msg')
+        .then((response) => {
+          expect(response).contains(`Health check is running for ${instance.hostname}.`);
+        });
+      cy.clickModalButton('Close');
+      cy.get('[data-cy="status-column-cell"]').contains('Running');
+    });
 
-describe('Instances: Peers', () => {
-  let instance: Instance;
-  let instanceToAssociate: Instance;
+    it('can run a health check on an Instance in the instance details page and assert the expected results', () => {
+      cy.filterTableBySingleSelect('hostname', instance.hostname);
+      cy.clickTableRowLink('name', instance.hostname, { disableFilter: true });
+      cy.verifyPageTitle(instance.hostname);
+      cy.url().then((currentUrl) => {
+        expect(currentUrl.includes(`/infrastructure/instances/${instance.id}/details`)).to.be.true;
+      });
+      cy.intercept('POST', awxAPI`/instances/*/health_check/`).as('runHealthCheck');
+      cy.getByDataCy('run-health-check').click();
+      cy.wait('@runHealthCheck')
+        .then((response) => {
+          expect(response.response?.statusCode).to.eql(200);
+        })
+        .its('response.body.msg')
+        .then((response) => {
+          expect(response).contains(`Health check is running for ${instance.hostname}.`);
+        });
+      cy.get('[data-cy="run-health-check"]').should('have.attr', 'aria-disabled', 'true');
+    });
 
-  beforeEach(() => {
-    cy.createAwxInstance('E2EInstanceTestPeers' + randomString(5), 8888).then((ins: Instance) => {
-      instance = ins;
-      cy.createAwxInstance('E2EInstanceTestToAssociate' + randomString(5), 9999).then(
-        (ins: Instance) => {
-          instanceToAssociate = ins;
-        }
-      );
+    it('can run a health check on an Instance in the instance list from row action and assert the expected results', () => {
+      cy.intercept('POST', awxAPI`/instances/*/health_check/`).as('runHealthCheck');
+      cy.filterTableBySingleSelect('hostname', instance.hostname);
+      cy.clickTableRowPinnedAction(instance.hostname, 'run-health-check', false);
+      cy.wait('@runHealthCheck')
+        .then((response) => {
+          expect(response.response?.statusCode).to.eql(200);
+        })
+        .its('response.body.msg')
+        .then((response) => {
+          expect(response).contains(`Health check is running for ${instance.hostname}.`);
+        });
+      cy.get('[data-cy="status-column-cell"]').contains('Running');
     });
-    cy.navigateTo('awx', 'instances');
-    cy.verifyPageTitle('Instances');
   });
 
-  afterEach(() => {
-    cy.removeAwxInstance(instance?.id.toString());
-    cy.removeAwxInstance(instanceToAssociate?.id.toString());
-  });
+  describe('Instances: Peers', () => {
+    let instance: Instance;
+    let instanceToAssociate: Instance;
 
-  it('can associate peers to an instance, navigate to associated peer details page and then disassociate peer', () => {
-    cy.intercept('PATCH', awxAPI`/instances/*`).as('associatePeer');
-    cy.filterTableBySingleSelect('hostname', instance.hostname);
-    cy.clickTableRowLink('name', instance.hostname, { disableFilter: true });
-    cy.getByDataCy('instances-peers-tab').click();
-    cy.url().then((currentUrl) => {
-      expect(currentUrl.includes('peers')).to.be.true;
+    beforeEach(() => {
+      cy.createAwxInstance('E2EInstanceTestPeers' + randomString(5), 8888).then((ins: Instance) => {
+        instance = ins;
+        cy.createAwxInstance('E2EInstanceTestToAssociate' + randomString(5), 9999).then(
+          (ins: Instance) => {
+            instanceToAssociate = ins;
+          }
+        );
+      });
+      cy.navigateTo('awx', 'instances');
+      cy.verifyPageTitle('Instances');
     });
-    cy.getByDataCy('associate-peer').click();
-    cy.get('[data-ouia-component-type="PF5/ModalContent"]').within(() => {
-      cy.get('header').contains('Select Peer Addresses');
-      cy.get('button').contains('Associate peer(s)').should('have.attr', 'aria-disabled', 'true');
-      cy.filterTableBySingleText(instanceToAssociate.hostname, true);
-      cy.intercept('GET', awxAPI`/instances/${instanceToAssociate.id.toString()}/`).as('instanceA');
-      cy.getByDataCy('checkbox-column-cell').find('input').click();
-      cy.wait('@instanceA');
-      cy.get('button').contains('Associate peer(s)').click();
-      cy.get('button').contains('Close').click();
+
+    afterEach(() => {
+      cy.removeAwxInstance(instance?.id.toString());
+      cy.removeAwxInstance(instanceToAssociate?.id.toString());
     });
-    cy.wait('@associatePeer')
-      .its('response')
-      .then((response) => {
-        expect(response?.statusCode).to.eql(200);
+
+    it('can associate peers to an instance, navigate to associated peer details page and then disassociate peer', () => {
+      cy.intercept('PATCH', awxAPI`/instances/*`).as('associatePeer');
+      cy.filterTableBySingleSelect('hostname', instance.hostname);
+      cy.clickTableRowLink('name', instance.hostname, { disableFilter: true });
+      cy.getByDataCy('instances-peers-tab').click();
+      cy.url().then((currentUrl) => {
+        expect(currentUrl.includes('peers')).to.be.true;
+      });
+      cy.getByDataCy('associate-peer').click();
+      cy.get('[data-ouia-component-type="PF5/ModalContent"]').within(() => {
+        cy.get('header').contains('Select Peer Addresses');
+        cy.get('button').contains('Associate peer(s)').should('have.attr', 'aria-disabled', 'true');
         cy.filterTableBySingleText(instanceToAssociate.hostname, true);
-        cy.getByDataCy('instance-name-column-cell').click();
+        cy.intercept('GET', awxAPI`/instances/${instanceToAssociate.id.toString()}/`).as(
+          'instanceA'
+        );
+        cy.getByDataCy('checkbox-column-cell').find('input').click();
+        cy.wait('@instanceA');
+        cy.get('button').contains('Associate peer(s)').click();
+        cy.get('button').contains('Close').click();
       });
-    cy.url().then((currentUrl) => {
-      expect(currentUrl.includes(`infrastructure/instances/${instanceToAssociate.id}/details`)).to
-        .be.true;
-    });
-    cy.getByDataCy('instances-details-tab').should('be.visible');
-    cy.go('back');
-    cy.url().then((currentUrl) => {
-      expect(currentUrl.includes(`infrastructure/instances/${instance.id}/peers`)).to.be.true;
-    });
-    cy.verifyPageTitle(instance.hostname);
-    cy.filterTableBySingleText(instanceToAssociate.hostname, true);
-    cy.get('[data-ouia-component-id="simple-table"]').within(() => {
-      cy.get('tbody tr').should('have.length', 1);
-      cy.get('[data-cy="checkbox-column-cell"] input').click();
-    });
-    cy.clickToolbarKebabAction('disassociate');
-    cy.intercept('PATCH', awxAPI`/instances/*/`).as('disassociatePeer');
-    cy.get('[data-ouia-component-type="PF5/ModalContent"]').within(() => {
-      cy.get('header').contains('Disassociate peers');
-      cy.get('button').contains('Disassociate peer').should('have.attr', 'aria-disabled', 'true');
-      cy.getByDataCy('address-column-cell').should('have.text', instanceToAssociate.hostname);
-      cy.get('input[id="confirm"]').click();
-      cy.get('button')
-        .contains('Disassociate peer')
-        .should('have.attr', 'aria-disabled', 'false')
-        .click();
-    });
-    cy.assertModalSuccess();
-    cy.wait('@disassociatePeer')
-      .its('response')
-      .then((response) => {
-        expect(response?.statusCode).to.eql(200);
+      cy.wait('@associatePeer')
+        .its('response')
+        .then((response) => {
+          expect(response?.statusCode).to.eql(200);
+          cy.filterTableBySingleText(instanceToAssociate.hostname, true);
+          cy.getByDataCy('instance-name-column-cell').click();
+        });
+      cy.url().then((currentUrl) => {
+        expect(currentUrl.includes(`infrastructure/instances/${instanceToAssociate.id}/details`)).to
+          .be.true;
       });
+      cy.getByDataCy('instances-details-tab').should('be.visible');
+      cy.go('back');
+      cy.url().then((currentUrl) => {
+        expect(currentUrl.includes(`infrastructure/instances/${instance.id}/peers`)).to.be.true;
+      });
+      cy.verifyPageTitle(instance.hostname);
+      cy.filterTableBySingleText(instanceToAssociate.hostname, true);
+      cy.get('[data-ouia-component-id="simple-table"]').within(() => {
+        cy.get('tbody tr').should('have.length', 1);
+        cy.get('[data-cy="checkbox-column-cell"] input').click();
+      });
+      cy.clickToolbarKebabAction('disassociate');
+      cy.intercept('PATCH', awxAPI`/instances/*/`).as('disassociatePeer');
+      cy.get('[data-ouia-component-type="PF5/ModalContent"]').within(() => {
+        cy.get('header').contains('Disassociate peers');
+        cy.get('button').contains('Disassociate peer').should('have.attr', 'aria-disabled', 'true');
+        cy.getByDataCy('address-column-cell').should('have.text', instanceToAssociate.hostname);
+        cy.get('input[id="confirm"]').click();
+        cy.get('button')
+          .contains('Disassociate peer')
+          .should('have.attr', 'aria-disabled', 'false')
+          .click();
+      });
+      cy.assertModalSuccess();
+      cy.wait('@disassociatePeer')
+        .its('response')
+        .then((response) => {
+          expect(response?.statusCode).to.eql(200);
+        });
+    });
   });
-});
 
-describe('Instances: Listener Addresses Tab', () => {
-  let instance: Instance;
+  describe('Instances: Listener Addresses Tab', () => {
+    let instance: Instance;
 
-  beforeEach(() => {
-    cy.createAwxInstance('E2EInstanceTestLA' + randomString(5), 8888).then((ins: Instance) => {
-      instance = ins;
+    beforeEach(() => {
+      cy.createAwxInstance('E2EInstanceTestLA' + randomString(5), 8888).then((ins: Instance) => {
+        instance = ins;
+      });
+      cy.navigateTo('awx', 'instances');
+      cy.verifyPageTitle('Instances');
     });
-    cy.navigateTo('awx', 'instances');
-    cy.verifyPageTitle('Instances');
-  });
 
-  afterEach(() => {
-    cy.removeAwxInstance(instance?.id.toString());
-  });
+    afterEach(() => {
+      cy.removeAwxInstance(instance?.id.toString());
+    });
 
-  it('can navigate to the instance listener addresses tab and view the designated listener port', () => {
-    cy.filterTableBySingleSelect('hostname', instance.hostname);
-    cy.clickTableRowLink('name', instance.hostname, { disableFilter: true });
-    cy.getByDataCy('instances-listener-addresses-tab').click();
-    cy.url().then((currentUrl) => {
-      expect(currentUrl.includes('listener-addresses')).to.be.true;
+    it('can navigate to the instance listener addresses tab and view the designated listener port', () => {
+      cy.filterTableBySingleSelect('hostname', instance.hostname);
+      cy.clickTableRowLink('name', instance.hostname, { disableFilter: true });
+      cy.getByDataCy('instances-listener-addresses-tab').click();
+      cy.url().then((currentUrl) => {
+        expect(currentUrl.includes('listener-addresses')).to.be.true;
+      });
+      cy.getByDataCy('address-column-cell').contains(instance?.hostname);
+      cy.getByDataCy('port-column-cell').contains(instance?.listener_port);
+      cy.getByDataCy('protocol-column-cell').contains(instance?.protocol);
     });
-    cy.getByDataCy('address-column-cell').contains(instance?.hostname);
-    cy.getByDataCy('port-column-cell').contains(instance?.listener_port);
-    cy.getByDataCy('protocol-column-cell').contains(instance?.protocol);
   });
 });
diff --git a/cypress/e2e/awx/administration/management-jobs.cy.ts b/cypress/e2e/awx/administration/management-jobs.cy.ts
index 3139d78bc..082d48d6a 100644
--- a/cypress/e2e/awx/administration/management-jobs.cy.ts
+++ b/cypress/e2e/awx/administration/management-jobs.cy.ts
@@ -348,6 +348,18 @@ describe.skip('Management Jobs - Schedules Tab', () => {
 });
 
 describe('Management Jobs - Notifications Tab', function () {
+  let awxOrganization: Organization;
+
+  before(function () {
+    cy.createAwxOrganization().then((thisOrg) => {
+      awxOrganization = thisOrg;
+    });
+  });
+
+  after(function () {
+    cy.deleteAwxOrganization(awxOrganization, { failOnStatusCode: false });
+  });
+
   const managementJobsList = [
     'Cleanup Activity Stream',
     'Cleanup Expired OAuth 2 Tokens',
@@ -371,7 +383,7 @@ describe('Management Jobs - Notifications Tab', function () {
       cy.verifyPageTitle('Add notifier');
       cy.getByDataCy('name').type(notifierName);
       cy.getByDataCy('description').type('AWX Notifier Description');
-      cy.singleSelectByDataCy('organization', (this.globalAwxOrganization as Organization).name);
+      cy.singleSelectByDataCy('organization', awxOrganization.name);
       cy.singleSelectByDataCy('notification_type', 'Pagerduty');
       cy.getByDataCy('notification-configuration-subdomain').type('pagerduty.com');
       cy.getByDataCy('notification-configuration-token').type('token');
diff --git a/cypress/e2e/awx/administration/notifiers/notifiersListView.cy.ts b/cypress/e2e/awx/administration/notifiers/notifiersListView.cy.ts
index 272a2b3df..366b22607 100644
--- a/cypress/e2e/awx/administration/notifiers/notifiersListView.cy.ts
+++ b/cypress/e2e/awx/administration/notifiers/notifiersListView.cy.ts
@@ -16,20 +16,6 @@ describe('Notifications: List View', () => {
     cy.deleteAwxOrganization(organization);
   });
 
-  beforeEach(() => {
-    // TODO - this will be useful for editing
-    /*const notificationName = randomE2Ename();
-    cy.createNotificationTemplate(notificationName).then((testNotification) => {
-      notificationTemplate = testNotification;
-    });*/
-  });
-
-  //The following create notification tests can be written in a loop style, referencing an array of objects, to help
-  //minimize the lines of code written.
-  //Assert the type of notification created
-  //Assert the info on the details screen of the notification
-  //Assert the deletion of the notification
-
   it('can create, edit a new Email Notification, assert the info in the list view, and delete the notification', () => {
     testNotification('Email');
   });
@@ -66,76 +52,42 @@ describe('Notifications: List View', () => {
     testNotification('Webhook');
   });
 
-  //The following edit notification tests can be written in a loop style, referencing an array of objects, to help
-  //minimize the lines of code written.
-  //Utilize the creation of notifications in a beforeEach block
-  //Assert the initial info of the notification before edit
-  //Assert the info of the notification after edit
-  //Add an afterEach block to delete the notifications that were created for these tests
-
-  // skipping, covered above
-  /*it.skip('can edit a new Email Notification and assert the edited info in the list view', () => {});
-  it.skip('can edit a Grafana Notification and assert the edited info in the list view', () => {});
-  it.skip('can edit a IRC Notification and assert the edited info in the list view', () => {});
-  it.skip('can edit a Mattermost Notification and assert the edited info in the list view', () => {});
-  it.skip('can edit a Pagerduty Notification and assert the edited info in the list view', () => {});
-  it.skip('can edit a Rocket.Chat Notification and assert the edited info in the list view', () => {});
-  it.skip('can edit a Slack Notification and assert the edited info in the list view', () => {});
-  it.skip('can edit a Twilio Notification and assert the edited info in the list view', () => {});
-  it.skip('can edit a Webhook Notification and assert the edited info in the list view', () => {});*/
-
   /* eslint-disable @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call */
 
   it('can test a Notification and assert the successful test in the list view', () => {
-    //Utilize a notification of any type created in the beforeEach hook
-    //Assert the existence of the notification before test
-    //Assert the test action and the fact that it is happening from the list view
-    //Assert the behavior in the UI following the test action
     const notificationName = randomE2Ename();
-    cy.createNotificationTemplate(notificationName, organization.id).then(
-      (notificationTemplate) => {
-        cy.navigateTo('awx', 'notification-templates');
-        cy.filterTableByMultiSelect('name', [notificationTemplate.name]);
-
-        // test fail message
-        cy.getByDataCy('actions-column-cell').within(() => {
-          cy.getByDataCy('test-notifier').click();
-        });
-
-        cy.contains(`[data-cy="status-column-cell"]`, 'Failed', { timeout: 100000 });
-
-        cy.intercept(awxAPI`/notification_templates/?name=${notificationName}*`, (req) => {
-          req.reply((res) => {
-            res.body?.results?.[0]?.summary_fields?.recent_notifications?.forEach(
-              (notification: { status: string }) => {
-                if (notification.status === 'failed') {
-                  notification.status = 'successful';
-                }
+    cy.createNotificationTemplate(notificationName, organization).then((notificationTemplate) => {
+      cy.navigateTo('awx', 'notification-templates');
+      cy.filterTableByMultiSelect('name', [notificationTemplate.name]);
+      // test fail message
+      cy.getByDataCy('actions-column-cell').within(() => {
+        cy.getByDataCy('test-notifier').click();
+      });
+      cy.contains(`[data-cy="status-column-cell"]`, 'Failed', { timeout: 100000 });
+      cy.intercept(awxAPI`/notification_templates/?name=${notificationName}*`, (req) => {
+        req.reply((res) => {
+          res.body?.results?.[0]?.summary_fields?.recent_notifications?.forEach(
+            (notification: { status: string }) => {
+              if (notification.status === 'failed') {
+                notification.status = 'successful';
               }
-            );
-            return res;
-          });
-        }).as('getTemplates');
-
-        cy.getByDataCy('actions-column-cell').within(() => {
-          cy.getByDataCy('test-notifier').click();
+            }
+          );
+          return res;
         });
-
-        cy.contains(`[data-cy="status-column-cell"]`, 'Success', { timeout: 100000 });
-      }
-    );
+      }).as('getTemplates');
+      cy.getByDataCy('actions-column-cell').within(() => {
+        cy.getByDataCy('test-notifier').click();
+      });
+      cy.contains(`[data-cy="status-column-cell"]`, 'Success', { timeout: 100000 });
+    });
   });
 
   it('can copy a Notification and assert that the copy action completed successfully', () => {
-    //Utilize a notification of any type created in the beforeEach hook
-    //Assert the existence of the notification before copy
-    //Assert the copy action
-    //Assert the existence of the copied notification as well as the original
     const name = randomE2Ename();
-    cy.createNotificationTemplate(name, organization.id).then((notificationTemplate) => {
+    cy.createNotificationTemplate(name, organization).then((notificationTemplate) => {
       cy.navigateTo('awx', 'notification-templates');
       cy.filterTableByMultiSelect('name', [name]);
-
       cy.getByDataCy('actions-column-cell').within(() => {
         cy.getByDataCy('copy-notifier').click();
       });
@@ -157,16 +109,11 @@ describe('Notifications: List View', () => {
   });
 
   it('can bulk delete a Notification and assert deletion', () => {
-    //Utilize notification created in the beforeEach block
-    //create an additional notification in this test for the purposes of bulk delete
-    //Assert the presence of the items before deletion
-    //Assert the deletion
-
     const name1 = randomE2Ename();
     const name2 = randomE2Ename();
 
-    cy.createNotificationTemplate(name1, organization.id).then(() => {
-      cy.createNotificationTemplate(name2, organization.id).then(() => {
+    cy.createNotificationTemplate(name1, organization).then(() => {
+      cy.createNotificationTemplate(name2, organization).then(() => {
         cy.navigateTo('awx', 'notification-templates');
         cy.filterTableByMultiSelect('name', [name1, name2]);
         cy.get('[data-cy="checkbox-column-cell"]')
diff --git a/cypress/e2e/awx/administration/notifiers/notifiersTabs.cy.ts b/cypress/e2e/awx/administration/notifiers/notifiersTabs.cy.ts
index 122e58af0..0e55db94e 100644
--- a/cypress/e2e/awx/administration/notifiers/notifiersTabs.cy.ts
+++ b/cypress/e2e/awx/administration/notifiers/notifiersTabs.cy.ts
@@ -1,23 +1,24 @@
 import { awxAPI } from '../../../../support/formatApiPathForAwx';
 import { Organization } from '../../../../../frontend/awx/interfaces/Organization';
+import { WorkflowJobTemplate } from '../../../../../frontend/awx/interfaces/WorkflowJobTemplate';
 import { randomE2Ename } from '../../../../support/utils';
 import { testDelete, testNotification } from './notifiersSharedFunctions';
+import { tag } from '../../../../support/tag';
+import { Inventory } from '../../../../../frontend/awx/interfaces/Inventory';
 
 /* eslint-disable @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call */
 
 describe('Notifications', () => {
-  //let notificationTemplate: NotificationTemplate;
-  let organization: Organization;
+  let awxOrganization: Organization;
 
   before(() => {
-    cy.login();
-    cy.createAwxOrganization().then((org) => {
-      organization = org;
+    cy.createAwxOrganization().then((thisAwxOrg) => {
+      awxOrganization = thisAwxOrg;
     });
   });
 
   after(() => {
-    cy.deleteAwxOrganization(organization);
+    cy.deleteAwxOrganization(awxOrganization, { failOnStatusCode: false });
   });
 
   describe('Notifications: Details View', () => {
@@ -27,32 +28,19 @@ describe('Notifications', () => {
     });
 
     it('can edit a Notification on its details page and assert the edited info', () => {
-      //Utilize the creation of notification in a beforeEach block
-      //Assert the initial info of the notification before edit
-      //Assert the info of the notification after edit
-      //Add an afterEach block to delete the notification that was created for this test
       cy.navigateTo('awx', 'notification-templates');
-
-      // test for only one type should be enough, other types covered in notifiers list view
       testNotification('Email', { details: true, skipMessages: true });
     });
 
     it('can test the Notification on its details page and assert that the test completed', () => {
-      //Utilize a notification of any type created in the beforeEach hook
-      //Assert the existence of the notification before test
-      //Assert the test action and the fact that it is happening from the details view
-      //Assert the behavior in the UI following the test action
       const notificationName = randomE2Ename();
-      cy.createNotificationTemplate(notificationName, organization.id).then(() => {
+      cy.createNotificationTemplate(notificationName, awxOrganization).then(() => {
         cy.navigateTo('awx', 'notification-templates');
         cy.filterTableByMultiSelect('name', [notificationName]);
         cy.get('[data-cy="name-column-cell"] a').click();
-
         // test fail message
         cy.getByDataCy('test-notifier').click();
-
         cy.contains(`[data-cy="status"]`, 'Failed', { timeout: 100000 });
-
         // test success message
         cy.intercept(awxAPI`/notification_templates/*`, (req) => {
           req.reply((res) => {
@@ -66,247 +54,208 @@ describe('Notifications', () => {
             return res;
           });
         }).as('getTemplates');
-
         cy.getByDataCy('test-notifier').click({ force: true });
-
         cy.contains(`[data-cy="status"]`, 'Success', { timeout: 100000 });
       });
     });
 
     it('can delete the Notification on its details page and assert deletion', () => {
-      //Utilize notification created in the beforeEach block
-      //Assert the presence of the item before deletion
-      //Assert the deletion
-
       const notificationName = randomE2Ename();
-      cy.createNotificationTemplate(notificationName, organization.id).then(() => {
+      cy.createNotificationTemplate(notificationName, awxOrganization).then(() => {
         cy.navigateTo('awx', 'notification-templates');
         cy.filterTableByMultiSelect('name', [notificationName]);
         cy.get('[data-cy="name-column-cell"] a').click();
-
         testDelete(notificationName, { details: true });
       });
     });
   });
 
-  describe('Notifications Tab for Organizations', () => {
-    //This describe block should create an Organization to use in these tests
-    //The Organization needs to be deleted after the tests run
-    const orgName = randomE2Ename();
+  tag(['upstream'], () => {
+    //these tests will not function in a downstream build
+    describe('Notifications Tab for Organizations', () => {
+      const orgName = randomE2Ename();
 
-    before(() => {
-      cy.createAwxOrganization({ name: orgName }).then(() => {});
-    });
-
-    it('can navigate to the Organizations -> Notifications list and then to the details page of the Notification', () => {
-      //Assert the navigation to the notifications tab of the organization
-      //Assert the navigation to the details page of the notification
-
-      const notificationName = randomE2Ename();
-      cy.createNotificationTemplate(notificationName, organization.id).then(() => {
-        moveToNotification('organizations', orgName, notificationName);
+      it('can navigate to the Organizations -> Notifications list and then to the details page of the Notification', () => {
+        const notificationName = randomE2Ename();
+        cy.createNotificationTemplate(notificationName, awxOrganization).then(() => {
+          moveToNotification('organizations', awxOrganization.name, notificationName);
+        });
       });
-    });
-
-    it('can toggle the Organizations -> Notification on and off for job approval', () => {
-      //Assert the navigation to the notifications tab of the organization
-      //Assert the approval toggling on
-      //Assert the approval toggling off
-
-      testToggle(
-        'organizations',
-        orgName,
-        'Click to enable approval',
-        'Click to disable approval',
-        organization
-      );
-    });
-
-    it('can toggle the Organizations -> Notification on and off for job start', () => {
-      //Assert the navigation to the notifications tab of the organization
-      //Assert the start toggling on
-      //Assert the start toggling off
-
-      testToggle(
-        'organizations',
-        orgName,
-        'Click to enable start',
-        'Click to disable start',
-        organization
-      );
-    });
 
-    it('can toggle the Organizations -> Notification on and off for job success', () => {
-      //Assert the navigation to the notifications tab of the organization
-      //Assert the success toggling on
-      //Assert the success toggling off
+      it('can toggle the Organizations -> Notification on and off for job approval', () => {
+        testToggle(
+          'organizations',
+          orgName,
+          'Click to enable approval',
+          'Click to disable approval',
+          awxOrganization
+        );
+      });
 
-      testToggle(
-        'organizations',
-        orgName,
-        'Click to enable success',
-        'Click to disable success',
-        organization
-      );
-    });
+      it('can toggle the Organizations -> Notification on and off for job start', () => {
+        testToggle(
+          'organizations',
+          orgName,
+          'Click to enable start',
+          'Click to disable start',
+          awxOrganization
+        );
+      });
 
-    it('can toggle the Organizations -> Notification on and off for job failure', () => {
-      //Assert the navigation to the notifications tab of the organization
-      //Assert the failure toggling on
-      //Assert the failure toggling off
+      it('can toggle the Organizations -> Notification on and off for job success', () => {
+        testToggle(
+          'organizations',
+          orgName,
+          'Click to enable success',
+          'Click to disable success',
+          awxOrganization
+        );
+      });
 
-      testToggle(
-        'organizations',
-        orgName,
-        'Click to enable failure',
-        'Click to disable failure',
-        organization
-      );
+      it('can toggle the Organizations -> Notification on and off for job failure', () => {
+        testToggle(
+          'organizations',
+          orgName,
+          'Click to enable failure',
+          'Click to disable failure',
+          awxOrganization
+        );
+      });
     });
   });
 
-  describe('Notifications Tab for Management Jobs', () => {
+  describe.skip('Notifications Tab for Management Jobs', () => {
     //These tests live in the management-jobs.cy.ts spec file
   });
 
-  describe('Notifications Tab for Projects', () => {
+  describe.skip('Notifications Tab for Projects', () => {
     //These tests live in the projects.cy.ts
   });
 
-  describe('Notifications Tab for Job Templates', () => {
+  describe.skip('Notifications Tab for Job Templates', () => {
     //These tests live in the jobTemplates.cy.ts spec file
   });
 
   describe('Notifications Tab for Workflow Job Templates', () => {
-    //This describe block should create a Workflow Job Template to use in these tests
-    //The Workflow Job Template needs to be deleted after the tests run
-
-    const jobTemplateName = randomE2Ename();
+    const wfJobTemplateName = randomE2Ename();
     const inventoryName = randomE2Ename();
+    let wfJobTemplate: WorkflowJobTemplate;
+    let inventory: Inventory;
 
-    before(() => {
-      cy.createAwxInventory({ organization: organization.id, name: inventoryName }).then(
-        (inventory) => {
-          cy.createAwxWorkflowJobTemplate({
-            organization: organization.id,
-            inventory: inventory.id,
-            name: jobTemplateName,
-          });
-        }
-      );
+    beforeEach(() => {
+      cy.createAwxInventory(awxOrganization, { name: inventoryName }).then((inv) => {
+        inventory = inv;
+        cy.createAwxWorkflowJobTemplate({
+          organization: awxOrganization.id,
+          inventory: inventory.id,
+          name: wfJobTemplateName,
+        }).then((jt) => {
+          wfJobTemplate = jt;
+        });
+      });
+    });
+
+    afterEach(() => {
+      cy.deleteAwxWorkflowJobTemplate(wfJobTemplate, { failOnStatusCode: false });
+      cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
     });
 
     it('can navigate to the Workflow Job Templates -> Notifications list and then to the details page of the Notification', () => {
-      //Assert the navigation to the notifications tab of the Workflow Job Template
-      //Assert the navigation to the details page of the notification
       const notificationName = randomE2Ename();
-      cy.createNotificationTemplate(notificationName, organization.id).then(() => {
-        moveToNotification('templates', jobTemplateName, notificationName);
+      cy.createNotificationTemplate(notificationName, awxOrganization).then(() => {
+        moveToNotification('templates', wfJobTemplateName, notificationName);
       });
     });
 
-    /*
-    it.skip('can toggle the Workflow Job Templates -> Notification on and off for job approval', () => {
-      //Assert the navigation to the notifications tab of the Workflow Job Template
-      //Assert the approval toggling on
-      //Assert the approval toggling off
-
-      // the approval notification is not part of the Workflow Job Template
-    });*/
+    it('can toggle the Workflow Job Templates -> Notification on and off for job approval', () => {
+      testToggle(
+        'templates',
+        wfJobTemplateName,
+        'Click to enable approval',
+        'Click to disable approval',
+        awxOrganization
+      );
+    });
 
     it('can toggle the Workflow Job Templates -> Notification on and off for job start', () => {
-      //Assert the navigation to the notifications tab of the Workflow Job Template
-      //Assert the start toggling on
-      //Assert the start toggling off
       testToggle(
         'templates',
-        jobTemplateName,
+        wfJobTemplateName,
         'Click to enable start',
         'Click to disable start',
-        organization
+        awxOrganization
       );
     });
 
     it('can toggle the Workflow Job Templates -> Notification on and off for job success', () => {
-      //Assert the navigation to the notifications tab of the Workflow Job Template
-      //Assert the success toggling on
-      //Assert the success toggling off
       testToggle(
         'templates',
-        jobTemplateName,
+        wfJobTemplateName,
         'Click to enable success',
         'Click to disable success',
-        organization
+        awxOrganization
       );
     });
 
     it('can toggle the Workflow Job Templates -> Notification on and off for job failure', () => {
-      //Assert the navigation to the notifications tab of the Workflow Job Template
-      //Assert the failure toggling on
-      //Assert the failure toggling off
       testToggle(
         'templates',
-        jobTemplateName,
+        wfJobTemplateName,
         'Click to enable failure',
         'Click to disable failure',
-        organization
+        awxOrganization
       );
     });
   });
-});
 
-// testing toggle for different notifiers
-// type - organization, workflow job templates or such
-// typeEntityName - name of the organization, or other type
-// type_enable - aria label selector for enable
-// type_disable - aria label selector for disable
-function testToggle(
-  type: string,
-  typeEntityName: string,
-  type_enable: string,
-  type_disable: string,
-  organization: Organization
-) {
-  const notificationName = randomE2Ename();
-  cy.createNotificationTemplate(notificationName, organization.id).then(() => {
+  function testToggle(
+    type: string,
+    typeEntityName: string,
+    type_enable: string,
+    type_disable: string,
+    awxOrganization: Organization
+  ) {
+    const notificationName = randomE2Ename();
+    cy.createNotificationTemplate(notificationName, awxOrganization).then(() => {
+      moveToNotificationList(type, typeEntityName);
+      filterNotification(notificationName);
+      cy.get(`[aria-label="${type_enable}"]`).click();
+
+      // reload page to check if the toggle is working and try to disable it
+      cy.get(`[aria-label="${type_disable}"]`, { timeout: 5000 }).click();
+
+      // check if it is disabled again
+      cy.get(`[aria-label="${type_enable}"]`, { timeout: 5000 });
+    });
+  }
+
+  // move to notification details page
+  // type - organization, workflow job templates, etc.
+  // typeEntityName - name of the resource
+  // notificationName - name of the notification
+  function moveToNotification(type: string, typeEntityName: string, notificationName: string) {
     moveToNotificationList(type, typeEntityName);
+    // this may need to change in UIX, now UIX has obsolete filter
+    //cy.filterTableByMultiSelect('name', [notificationName]);
     filterNotification(notificationName);
-    cy.get(`[aria-label="${type_enable}"]`).click();
-
-    // reload page to check if the toggle is working and try to disable it
-    cy.get(`[aria-label="${type_disable}"]`, { timeout: 5000 }).click();
-
-    // check if it is disabled again
-    cy.get(`[aria-label="${type_enable}"]`, { timeout: 5000 });
-  });
-}
-
-// move to notification details page
-// type - organization, workflow job templates or such
-// typeEntityName - name of the organization, or other type
-// notificationName - name of the notification
-function moveToNotification(type: string, typeEntityName: string, notificationName: string) {
-  moveToNotificationList(type, typeEntityName);
-  // this may need to change in UIX, now UIX has obsolete filter
-  //cy.filterTableByMultiSelect('name', [notificationName]);
-  filterNotification(notificationName);
-  cy.get('[data-cy="name-column-cell"] a').click();
-  cy.contains(notificationName);
-}
-
-function filterNotification(notificationName: string) {
-  cy.get(`[aria-label="Type to filter"]`).type(notificationName);
-  cy.getByDataCy(`apply-filter`).click();
-  cy.get(`[aria-label="Simple table"] tr`).should('have.length', 2);
-}
-
-// move to notification list page
-// type - organization, workflow job templates or such
-// typeEntityName - name of the organization, or other type
-function moveToNotificationList(type: string, typeEntityName: string) {
-  cy.navigateTo('awx', type);
-  cy.filterTableByMultiSelect('name', [typeEntityName]);
-  cy.get('[data-cy="name-column-cell"] a').click();
-  cy.contains(typeEntityName);
-  cy.contains(`a[role="tab"]`, 'Notifications').click();
-}
+    cy.get('[data-cy="name-column-cell"] a').click();
+    cy.contains(notificationName);
+  }
+
+  function filterNotification(notificationName: string) {
+    cy.get(`[aria-label="Type to filter"]`).type(notificationName);
+    cy.getByDataCy(`apply-filter`).click();
+    cy.get(`[aria-label="Simple table"] tr`).should('have.length', 2);
+  }
+
+  // move to notification list page
+  // type - organization, workflow job templates or such
+  // typeEntityName - name of the organization, or other type
+  function moveToNotificationList(type: string, typeEntityName: string) {
+    cy.navigateTo('awx', type);
+    cy.filterTableByMultiSelect('name', [typeEntityName]);
+    cy.get('[data-cy="name-column-cell"] a').click();
+    cy.contains(typeEntityName);
+    cy.contains(`a[role="tab"]`, 'Notifications').click();
+  }
+});
diff --git a/cypress/e2e/awx/administration/topology-view.cy.ts b/cypress/e2e/awx/administration/topology-view.cy.ts
index bab3dc2b0..aa4826eaa 100644
--- a/cypress/e2e/awx/administration/topology-view.cy.ts
+++ b/cypress/e2e/awx/administration/topology-view.cy.ts
@@ -5,21 +5,20 @@ import { Organization } from '../../../../frontend/awx/interfaces/Organization';
 import { Settings } from '../../../../frontend/awx/interfaces/Settings';
 import { AwxUser } from '../../../../frontend/awx/interfaces/User';
 import { awxAPI } from '../../../support/formatApiPathForAwx';
+import { tag } from '../../../support/tag';
 
 describe('Topology view', () => {
   let user: AwxUser;
   let organization: Organization;
 
   before(() => {
-    cy.login();
-
     cy.createAwxOrganization().then((org) => {
       organization = org;
     });
   });
 
   after(() => {
-    cy.deleteAwxOrganization(organization);
+    cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
   });
 
   beforeEach(() => {
@@ -63,22 +62,6 @@ describe('Topology view', () => {
       });
   });
 
-  it('does not show Topology View in sidebar for non admins', function () {
-    cy.createAwxUser({ organization: organization.id }).then((awxUser) => {
-      user = awxUser;
-
-      cy.awxLoginTestUser(user.username, 'pw');
-      cy.getByDataCy('page-navigation').then((nav) => {
-        if (!nav.is(':visible')) cy.getByDataCy('nav-toggle').click();
-      });
-      cy.get('[data-cy="awx-topology-view"]').should('not.exist');
-
-      cy.visit('/infrastructure/topology');
-      cy.contains('Page not found');
-      cy.contains('We could not find that page.');
-    });
-  });
-
   it('will allow the user to view a large number of nodes', () => {
     cy.fixture('instance_nodes').then((instanceNodes: MeshVisualizer) => {
       cy.intercept('GET', awxAPI`/mesh_visualizer/`, instanceNodes);
@@ -98,24 +81,46 @@ describe('Topology view', () => {
         return;
       }
       const node = 'E2EInstance' + randomString(4);
-
       cy.createAwxInstance(node).then(() => {
         cy.navigateTo('awx', 'topology-view');
         cy.contains(node).click({ force: true });
         cy.getByDataCy('mesh-viz-sidebar').within(() => {
           cy.getByDataCy('name').contains(node).click();
         });
-
         cy.url().should('include', '/infrastructure/instances/');
         cy.getByDataCy('page-title').contains(node);
-
         cy.clickKebabAction('actions-dropdown', 'remove-instance');
         cy.clickModalConfirmCheckbox();
         cy.clickButton('Remove instance');
-
         cy.navigateTo('awx', 'topology-view');
         cy.contains(node).should('not.exist');
       });
     });
   });
+
+  it('will allow the user to view a large number of nodes', () => {
+    cy.fixture('instance_nodes').then((instanceNodes: MeshVisualizer) => {
+      cy.intercept('GET', awxAPI`/mesh_visualizer/`, instanceNodes);
+      cy.navigateTo('awx', 'topology-view');
+      instanceNodes.nodes.forEach((node) => {
+        cy.contains(node.hostname);
+      });
+    });
+  });
+
+  tag(['upstream'], () => {
+    it('does not show Topology View in sidebar for non admins', function () {
+      cy.createAwxUser({ organization: organization.id }).then((awxUser) => {
+        user = awxUser;
+        cy.awxLoginTestUser(user.username, 'pw');
+        cy.getByDataCy('page-navigation').then((nav) => {
+          if (!nav.is(':visible')) cy.getByDataCy('nav-toggle').click();
+        });
+        cy.get('[data-cy="awx-topology-view"]').should('not.exist');
+        cy.navigateTo('awx', 'topology-view');
+        cy.contains('Page not found');
+        cy.contains('We could not find that page.');
+      });
+    });
+  });
 });
diff --git a/cypress/e2e/awx/administration/wfApprovalsList.cy.ts b/cypress/e2e/awx/administration/wfApprovalsList.cy.ts
index b3ba9ed71..11f81f2f3 100644
--- a/cypress/e2e/awx/administration/wfApprovalsList.cy.ts
+++ b/cypress/e2e/awx/administration/wfApprovalsList.cy.ts
@@ -9,6 +9,7 @@ import { WorkflowJob } from '../../../../frontend/awx/interfaces/WorkflowJob';
 import { WorkflowJobTemplate } from '../../../../frontend/awx/interfaces/WorkflowJobTemplate';
 import { WorkflowNode } from '../../../../frontend/awx/interfaces/WorkflowNode';
 import { awxAPI } from '../../../support/formatApiPathForAwx';
+import { randomE2Ename } from '../../../support/utils';
 
 describe.skip('Workflow Approvals Tests', () => {
   let organization: Organization;
@@ -29,7 +30,8 @@ describe.skip('Workflow Approvals Tests', () => {
       organization = org;
 
       cy.createAwxProject(
-        { organization: organization.id },
+        organization,
+        { name: randomE2Ename() },
         'https://github.com/ansible/test-playbooks'
       ).then((proj) => {
         project = proj;
@@ -46,7 +48,7 @@ describe.skip('Workflow Approvals Tests', () => {
         cy.createAwxUser({ organization: organization.id }).then((u) => {
           userWFCancel = u;
         });
-        cy.createAwxInventory({ organization: organization.id })
+        cy.createAwxInventory(organization)
           .then((i) => {
             inventory = i;
           })
@@ -76,7 +78,7 @@ describe.skip('Workflow Approvals Tests', () => {
     cy.deleteAwxUser(userWFDeny, { failOnStatusCode: false });
   });
 
-  describe('Workflow Approvals - Approve, Deny, Delete', () => {
+  describe.skip('Workflow Approvals - Approve, Deny, Delete', () => {
     it('admin can approve and then delete a workflow approval from the list row item', () => {
       cy.createAwxWorkflowJobTemplate({
         name: 'E2E Workflow Approval-APPROVE-' + randomString(4),
@@ -90,15 +92,14 @@ describe.skip('Workflow Approvals Tests', () => {
             cy.createAwxWorkflowVisualizerApprovalNode(workflowJobTemplate).then((appNode) => {
               approvalWFNode = appNode;
               cy.createWorkflowJTAlwaysNodeLink(approvalWFNode, jobTemplateNode);
-
               cy.intercept(
                 'GET',
                 awxAPI`/workflow_job_templates/${workflowJobTemplate.id.toString()}/`
               ).as('thisWfjt');
-              cy.visit(
-                `/templates/workflow-job-template/${workflowJobTemplate.id.toString()}/details`
-              );
-              cy.wait('@thisWfjt');
+              cy.navigateTo('awx', 'templates');
+              cy.filterTableByMultiSelect('name', [workflowJobTemplate.name]);
+              cy.clickTableRowLink('name', workflowJobTemplate.name, { disableFilter: true });
+              cy.verifyPageTitle(workflowJobTemplate.name);
               cy.wait('@thisWfjt');
               cy.verifyPageTitle(`${workflowJobTemplate.name}`);
               cy.intercept(
@@ -177,11 +178,10 @@ describe.skip('Workflow Approvals Tests', () => {
             cy.createAwxWorkflowVisualizerApprovalNode(workflowJobTemplate).then((appNode) => {
               approvalWFNode = appNode;
               cy.createWorkflowJTAlwaysNodeLink(approvalWFNode, jobTemplateNode);
-
-              cy.visit(
-                `/templates/workflow-job-template/${workflowJobTemplate.id.toString()}/details`
-              );
-              cy.verifyPageTitle(`${workflowJobTemplate.name}`);
+              cy.navigateTo('awx', 'templates');
+              cy.filterTableByMultiSelect('name', [workflowJobTemplate.name]);
+              cy.clickTableRowLink('name', workflowJobTemplate.name, { disableFilter: true });
+              cy.verifyPageTitle(workflowJobTemplate.name);
               cy.intercept(
                 'POST',
                 awxAPI`/workflow_job_templates/${workflowJobTemplate.id.toString()}/launch`
@@ -252,11 +252,10 @@ describe.skip('Workflow Approvals Tests', () => {
             cy.createAwxWorkflowVisualizerApprovalNode(workflowJobTemplate).then((appNode) => {
               approvalWFNode = appNode;
               cy.createWorkflowJTAlwaysNodeLink(approvalWFNode, jobTemplateNode);
-
-              cy.visit(
-                `/templates/workflow-job-template/${workflowJobTemplate.id.toString()}/details`
-              );
-              cy.verifyPageTitle(`${workflowJobTemplate.name}`);
+              cy.navigateTo('awx', 'templates');
+              cy.filterTableByMultiSelect('name', [workflowJobTemplate.name]);
+              cy.clickTableRowLink('name', workflowJobTemplate.name, { disableFilter: true });
+              cy.verifyPageTitle(workflowJobTemplate.name);
               cy.intercept(
                 'POST',
                 awxAPI`/workflow_job_templates/${workflowJobTemplate.id.toString()}/launch`
@@ -327,7 +326,6 @@ describe.skip('Workflow Approvals Tests', () => {
             cy.createAwxWorkflowVisualizerApprovalNode(workflowJobTemplate).then((appNode) => {
               approvalWFNode = appNode;
               cy.createWorkflowJTAlwaysNodeLink(approvalWFNode, jobTemplateNode);
-
               editWorkflowJobTemplate();
               workflowApprovalBulkAction('approve');
               deleteApprovalFromListToolbar();
@@ -351,7 +349,6 @@ describe.skip('Workflow Approvals Tests', () => {
             cy.createAwxWorkflowVisualizerApprovalNode(workflowJobTemplate).then((appNode) => {
               approvalWFNode = appNode;
               cy.createWorkflowJTAlwaysNodeLink(approvalWFNode, jobTemplateNode);
-
               editWorkflowJobTemplate();
               workflowApprovalBulkAction('deny');
               deleteApprovalFromListToolbar();
@@ -367,7 +364,11 @@ describe.skip('Workflow Approvals Tests', () => {
   Used in the Workflow Approvals - Bulk Approve, Bulk Deny, Bulk Delete tests (below)
   **/
   function editWorkflowJobTemplate() {
-    cy.visit(`/templates/workflow-job-template/${workflowJobTemplate.id.toString()}/edit`);
+    cy.navigateTo('awx', 'templates');
+    cy.filterTableByMultiSelect('name', [workflowJobTemplate.name]);
+    cy.getTableRow('name', workflowJobTemplate.name, { disableFilter: true }).should('be.visible');
+    cy.selectTableRow(workflowJobTemplate.name, false);
+    cy.getBy('[data-cy="edit-template"]').click();
     cy.verifyPageTitle('Edit Workflow Job Template');
     cy.getByDataCy('allow_simultaneous').click();
     cy.intercept('PATCH', awxAPI`/workflow_job_templates/${workflowJobTemplate.id.toString()}/`).as(
@@ -485,15 +486,14 @@ describe.skip('Workflow Approvals Tests', () => {
             cy.createAwxWorkflowVisualizerApprovalNode(workflowJobTemplate).then((appNode) => {
               approvalWFNode = appNode;
               cy.createWorkflowJTAlwaysNodeLink(approvalWFNode, jobTemplateNode);
-
               cy.intercept(
                 'POST',
                 awxAPI`/workflow_job_templates/${workflowJobTemplate.id.toString()}/launch/`
               ).as('launched');
-              cy.visit(
-                `/templates/workflow-job-template/${workflowJobTemplate.id.toString()}/details`
-              );
-              cy.verifyPageTitle(`${workflowJobTemplate.name}`);
+              cy.navigateTo('awx', 'templates');
+              cy.filterTableByMultiSelect('name', [workflowJobTemplate.name]);
+              cy.clickTableRowLink('name', workflowJobTemplate.name, { disableFilter: true });
+              cy.verifyPageTitle(workflowJobTemplate.name);
               cy.getByDataCy('launch-template').click();
               cy.wait('@launched')
                 .its('response.body')
@@ -502,10 +502,12 @@ describe.skip('Workflow Approvals Tests', () => {
                     (wfApprovalA) => {
                       workflowApproval = wfApprovalA;
                       cy.url().should('contain', '/output');
-
-                      cy.visit(
-                        `/templates/workflow-job-template/${workflowJobTemplate.id}/user-access?page=1&perPage=100&sort=user__username`
-                      );
+                      cy.navigateTo('awx', 'templates');
+                      cy.filterTableByMultiSelect('name', [workflowJobTemplate.name]);
+                      cy.clickTableRowLink('name', workflowJobTemplate.name, {
+                        disableFilter: true,
+                      });
+                      cy.get('a[href*="user-access"]').click();
                       cy.verifyPageTitle(workflowJobTemplate.name);
                       cy.get('tbody tr').should('have.length', 0);
                       cy.getByDataCy('add-roles').click();
@@ -581,11 +583,7 @@ describe.skip('Workflow Approvals Tests', () => {
     });
 
     it.skip('can assign a normal user admin access to a workflow approval', () => {
-      //as admin: assign normal user as wfjt admin
-      //log out
-      //log in as normal user
-      //acccess workflow approvals list, find specific workflow approval
-      //have normal user deny and then delete workflow approval to show admin rights
+      //This test needs to be written
     });
   });
 });
diff --git a/cypress/e2e/awx/resources/credentials.cy.ts b/cypress/e2e/awx/resources/credentials.cy.ts
index 29c2f49ce..ec5a59d91 100644
--- a/cypress/e2e/awx/resources/credentials.cy.ts
+++ b/cypress/e2e/awx/resources/credentials.cy.ts
@@ -1,4 +1,3 @@
-/* eslint-disable @typescript-eslint/no-explicit-any */
 import { randomString } from '../../../../framework/utils/random-string';
 import { Credential } from '../../../../frontend/awx/interfaces/Credential';
 import { Inventory } from '../../../../frontend/awx/interfaces/Inventory';
@@ -8,37 +7,43 @@ import { Team } from '../../../../frontend/awx/interfaces/Team';
 import { AwxUser } from '../../../../frontend/awx/interfaces/User';
 import { awxAPI } from '../../../support/formatApiPathForAwx';
 import { randomE2Ename } from '../../../support/utils';
+import { tag } from '../../../support/tag';
 
 describe('Credentials', () => {
-  let organization: Organization;
   let user: AwxUser;
-
-  before(() => {
-    cy.createAwxOrganization().then((org) => {
-      organization = org;
-      cy.createAwxUser({ organization: organization.id }).then((testUser) => {
-        user = testUser;
+  let project: Project;
+  let awxOrganization: Organization;
+  let credential: Credential;
+
+  before(function () {
+    cy.createAwxOrganization().then((thisAwxOrg) => {
+      awxOrganization = thisAwxOrg;
+      cy.createAwxProject(awxOrganization).then((proj) => {
+        project = proj;
+        cy.createAwxUser({ organization: awxOrganization.id }).then((testUser) => {
+          user = testUser;
+        });
       });
     });
   });
 
   after(() => {
+    cy.deleteAwxProject(project, { failOnStatusCode: false });
     cy.deleteAwxUser(user, { failOnStatusCode: false });
-    cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
+    cy.deleteAwxOrganization(awxOrganization, { failOnStatusCode: false });
   });
 
   describe('Credentials: List View', () => {
-    let credential: Credential;
     beforeEach(() => {
       cy.createAWXCredential({
         kind: 'machine',
-        organization: organization.id,
+        organization: awxOrganization.id,
         credential_type: 1,
       }).then((cred) => {
         credential = cred;
-        cy.giveUserCredentialsAccess(credential.name, user.id, 'Use');
       });
     });
+
     afterEach(() => {
       cy.deleteAwxCredential(credential, { failOnStatusCode: false });
     });
@@ -124,24 +129,23 @@ describe('Credentials', () => {
   });
 
   describe('Credentials: Details View', () => {
-    let credential: Credential;
     beforeEach(() => {
       cy.createAWXCredential({
         name: 'E2E Credential ' + randomString(4),
         kind: 'Centrify Vault Credential Provider Lookup',
-        organization: organization.id,
+        organization: awxOrganization.id,
         credential_type: 25,
         inputs: { url: 'http://foo.com', client_id: 'foo', client_password: 'foo' },
       }).then((cred) => {
         credential = cred;
-        cy.giveUserCredentialsAccess(credential.name, user.id, 'Use');
       });
     });
 
     afterEach(() => {
       cy.deleteAwxCredential(credential, { failOnStatusCode: false });
     });
-    it('details page should render boolean field', () => {
+
+    it('renders the details page boolean field', () => {
       const credentialName = 'E2E Credential ' + randomString(4);
       cy.navigateTo('awx', 'credentials');
       cy.clickButton(/^Create credential$/);
@@ -259,18 +263,17 @@ describe('Credentials', () => {
       cy.clickButton(/^Cancel/);
     });
   });
+
   describe('Credentials Edit: External test modal', () => {
-    let credential: Credential;
     before(() => {
       cy.createAWXCredential({
         name: 'E2E Credential ' + randomString(4),
         kind: 'Centrify Vault Credential Provider Lookup',
-        organization: organization.id,
+        organization: awxOrganization.id,
         credential_type: 25,
         inputs: { url: 'http://foo.com', client_id: 'foo', client_password: 'foo' },
       }).then((cred) => {
         credential = cred;
-        cy.giveUserCredentialsAccess(credential.name, user.id, 'Use');
       });
     });
 
@@ -318,210 +321,314 @@ describe('Credentials', () => {
       cy.clickButton(/^Cancel/);
     });
   });
-});
 
-describe('Create Credentials of different types', () => {
-  let organization: Organization;
-  before(() => {
-    cy.login();
-  });
-  beforeEach(() => {
-    cy.createAwxOrganization().then((o) => (organization = o));
-  });
-  afterEach(() => {
-    cy.deleteAwxOrganization(organization);
-  });
-  it('create credential using custom credential type', () => {
-    cy.createAwxCredentialType().then((credType) => {
-      const credentialName = 'E2E Credential ' + randomString(4);
-      cy.navigateTo('awx', 'credentials');
-      cy.clickButton(/^Create credential$/);
-      cy.getByDataCy('name').type(credentialName);
-      cy.singleSelectBy('[data-cy="credential_type"]', credType.name, true);
-      cy.clickButton(/^Create credential$/);
-      cy.verifyPageTitle(credentialName);
-      cy.getByDataCy('name').contains(credentialName);
-      //delete created credential
-      cy.clickPageAction('delete-credential');
-      cy.get('#confirm').click();
-      cy.clickButton(/^Delete credential/);
-      cy.verifyPageTitle('Credentials');
-      cy.deleteAwxCredentialType(credType);
-    });
-  });
-  it('vault id field can not be edited for Vault credential type', () => {
-    const credentialName = 'E2E Credential ' + randomString(4);
-    cy.navigateTo('awx', 'credentials');
-    cy.clickButton(/^Create credential$/);
-    cy.getByDataCy('name').type(credentialName);
-    cy.singleSelectBy('[data-cy="credential_type"]', 'Vault', true);
-    cy.contains('Type Details').should('be.visible');
-    cy.getByDataCy('vault-password').type('password');
-    cy.getByDataCy('vault-id').type('id');
-    cy.singleSelectByDataCy('organization', organization.name);
-    cy.clickButton(/^Create credential$/);
-    cy.verifyPageTitle(credentialName);
-    cy.getByDataCy('name').contains(credentialName);
-    cy.contains('Vault Identifier').should('be.visible');
-    cy.getByDataCy('vault-identifier').contains('id');
-    cy.contains('Vault Password').should('be.visible');
-    cy.getByDataCy('vault-password').contains('Encrypted');
-    cy.getByDataCy('edit-credential').click();
-    cy.verifyPageTitle('Edit Credential');
-    cy.get('[data-cy="vault-password"]').then(($pwd) => {
-      cy.wrap($pwd).should('have.value', 'ENCRYPTED');
+  describe('Create Credentials of different types', () => {
+    type MockCredentialData = {
+      name: string;
+      required?: Array<{ field: string; dataCy: string }>;
+      fields?: Array<{ id: string; value: string; dataCy: string }>;
+    };
+
+    // FLAKY_06_13_2024
+    it('can create credentials with 30 different credential types', function () {
+      cy.fixture<MockCredentialData[]>('credentialsTestData').as('createCredentials');
+      cy.get('@createCredentials').then((fixture) => {
+        const credentialTypes = fixture as unknown as MockCredentialData[];
+        cy.intercept('GET', awxAPI`/credential_types/?page=1&page_size=200`).as(
+          'getCredentialTypes'
+        );
+        cy.navigateTo('awx', 'credentials');
+        credentialTypes.forEach((item) => {
+          const credentialName = `E2E Credential ${randomE2Ename()}`;
+          cy.getByDataCy('create-credential').click();
+          cy.verifyPageTitle('Create Credential');
+          cy.getByDataCy('name').should('be.visible').type(credentialName);
+          cy.wait('@getCredentialTypes').then(() => {
+            cy.singleSelectByDataCy('credential_type', `${item.name}`, true);
+            if (Array.isArray(item.required)) {
+              (item.required as { field: string; dataCy: string }[]).forEach((credentialType) => {
+                switch (item.name) {
+                  case 'HashiCorp Vault Secret Lookup':
+                    cy.get(`[data-cy="${credentialType.dataCy}"]`).type(`${credentialType.field}`);
+                    cy.selectDropdownOptionByResourceName('api-version', 'v1');
+                    break;
+                  case 'Ansible Galaxy/Automation Hub API Token':
+                    cy.singleSelectByDataCy('organization', awxOrganization.name);
+                    cy.get(`[data-cy="${credentialType.dataCy}"]`).type(`${credentialType.field}`);
+                    break;
+                  case 'GPG Public Key':
+                    cy.get('#gpg-public-key').type(`${credentialType.field}`);
+                    break;
+                  case 'Terraform backend configuration':
+                    cy.get('[data-cy="configuration-form-group"]').type(`${credentialType.field}`);
+                    break;
+                  default:
+                    cy.get(`[data-cy="${credentialType.dataCy}"]`).type(`${credentialType.field}`);
+                }
+              });
+            }
+            cy.intercept('POST', awxAPI`/credentials/`).as('created');
+            cy.getByDataCy('Submit').click();
+            cy.wait('@created');
+            cy.verifyPageTitle(credentialName);
+            cy.clickPageAction('delete-credential');
+            cy.get('#confirm').click();
+            cy.clickButton(/^Delete credential/);
+            cy.verifyPageTitle('Credentials');
+          });
+        });
+      });
     });
-    cy.getByDataCy('ask_vault_password').check();
-    cy.clickButton(/^Save credential$/);
-    cy.getByDataCy('name').contains(credentialName);
-    cy.contains('Vault Identifier').should('be.visible');
-    cy.getByDataCy('vault-identifier').contains('id');
-    cy.contains('Vault Password').should('be.visible');
-    cy.getByDataCy('vault-password').contains('Prompt on launch');
-    //delete created credential
-    cy.clickPageAction('delete-credential');
-    cy.get('#confirm').click();
-    cy.clickButton(/^Delete credential/);
-    cy.verifyPageTitle('Credentials');
-  });
 
-  it('can create, edit and delete a credential that renders a sub form', () => {
-    const credentialName = 'E2E Credential ' + randomString(4);
-    cy.navigateTo('awx', 'credentials');
-    cy.clickButton(/^Create credential$/);
-    cy.getByDataCy('name').type(credentialName);
-    cy.singleSelectByDataCy('credential_type', 'Amazon Web Services');
-    cy.contains('Type Details').should('be.visible');
-    cy.singleSelectByDataCy('organization', organization.name);
-    cy.getByDataCy('username').type('username');
-    cy.getByDataCy('password').type('password');
-    cy.getByDataCy('security-token').type('security-token');
-    cy.getByDataCy('description').type('description');
-    cy.intercept('POST', awxAPI`/credentials/`).as('newCred');
-    cy.clickButton(/^Create credential$/);
-    cy.wait('@newCred')
-      .its('response.body')
-      .then((newCred: Credential) => {
+    describe('Credentials: Credential Types Tests', () => {
+      it('can create credential using custom credential type', () => {
+        cy.createAwxCredentialType().then((credType) => {
+          const credentialName = 'E2E Credential ' + randomString(4);
+          cy.navigateTo('awx', 'credentials');
+          cy.clickButton(/^Create credential$/);
+          cy.getByDataCy('name').type(credentialName);
+          cy.singleSelectBy('[data-cy="credential_type"]', credType.name, true);
+          cy.clickButton(/^Create credential$/);
+          cy.verifyPageTitle(credentialName);
+          cy.getByDataCy('name').contains(credentialName);
+          //delete created credential
+          cy.clickPageAction('delete-credential');
+          cy.get('#confirm').click();
+          cy.clickButton(/^Delete credential/);
+          cy.verifyPageTitle('Credentials');
+          cy.deleteAwxCredentialType(credType);
+        });
+      });
+
+      it('cannot edit vault id field for Vault credential type', () => {
+        const credentialName = 'E2E Credential ' + randomString(4);
+        cy.navigateTo('awx', 'credentials');
+        cy.clickButton(/^Create credential$/);
+        cy.getByDataCy('name').type(credentialName);
+        cy.singleSelectBy('[data-cy="credential_type"]', 'Vault', true);
+        cy.contains('Type Details').should('be.visible');
+        cy.getByDataCy('vault-password').type('password');
+        cy.getByDataCy('vault-id').type('id');
+        cy.singleSelectByDataCy('organization', awxOrganization.name);
+        cy.clickButton(/^Create credential$/);
+        cy.verifyPageTitle(credentialName);
         cy.getByDataCy('name').contains(credentialName);
-        cy.getByDataCy('label-credential-type').contains('Credential type');
-        cy.getByDataCy('credential-type').contains('Amazon Web Services');
-        cy.getByDataCy('label-access-key').contains('Access Key');
-        cy.getByDataCy('access-key').contains('username');
-        cy.getByDataCy('label-secret-key').contains('Secret Key');
-        cy.getByDataCy('secret-key').contains('Encrypted');
-        cy.getByDataCy('label-sts-token').contains('STS Token');
-        cy.getByDataCy('label-organization').contains('Organization');
-        cy.getByDataCy('organization').contains(organization.name);
-        cy.getByDataCy('label-description').contains('Description');
-        cy.getByDataCy('description').contains('description');
+        cy.contains('Vault Identifier').should('be.visible');
+        cy.getByDataCy('vault-identifier').contains('id');
+        cy.contains('Vault Password').should('be.visible');
+        cy.getByDataCy('vault-password').contains('Encrypted');
         cy.getByDataCy('edit-credential').click();
         cy.verifyPageTitle('Edit Credential');
-        const ModifiedCredentialName = credentialName + ' - edited';
-        cy.getByDataCy('name').type(ModifiedCredentialName);
-        cy.get('input[data-cy="username"]').then(($username) => {
-          cy.wrap($username).should('have.value', 'username');
-        });
-        cy.get('input[data-cy="password"]').then(($pwd) => {
+        cy.get('[data-cy="vault-password"]').then(($pwd) => {
           cy.wrap($pwd).should('have.value', 'ENCRYPTED');
         });
-        cy.get('input[data-cy="security-token"]').then(($token) => {
-          cy.wrap($token).should('have.value', 'ENCRYPTED');
-        });
-        const newDescription = 'new description';
-        cy.getByDataCy('description').clear().type(newDescription);
+        cy.getByDataCy('ask_vault_password').check();
         cy.clickButton(/^Save credential$/);
-        cy.getByDataCy('name').contains(ModifiedCredentialName);
-        cy.getByDataCy('label-credential-type').contains('Credential type');
-        cy.getByDataCy('credential-type').contains('Amazon Web Services');
-        cy.getByDataCy('label-access-key').contains('Access Key');
-        cy.getByDataCy('access-key').contains('username');
-        cy.getByDataCy('label-secret-key').contains('Secret Key');
-        cy.getByDataCy('secret-key').contains('Encrypted');
-        cy.getByDataCy('label-sts-token').contains('STS Token');
-        cy.getByDataCy('sts-token').contains('Encrypted');
-        cy.getByDataCy('label-description').contains('Description');
-        cy.getByDataCy('description').contains(newDescription);
-
+        cy.getByDataCy('name').contains(credentialName);
+        cy.contains('Vault Identifier').should('be.visible');
+        cy.getByDataCy('vault-identifier').contains('id');
+        cy.contains('Vault Password').should('be.visible');
+        cy.getByDataCy('vault-password').contains('Prompt on launch');
+        //delete created credential
         cy.clickPageAction('delete-credential');
         cy.get('#confirm').click();
-        cy.intercept('DELETE', awxAPI`/credentials/${newCred.id.toString()}/`).as('deleted');
         cy.clickButton(/^Delete credential/);
-        cy.wait('@deleted')
-          .its('response')
-          .then((deleted) => {
-            expect(deleted?.statusCode).to.eql(204);
-            cy.verifyPageTitle('Credentials');
-          });
+        cy.verifyPageTitle('Credentials');
       });
+    });
   });
 
-  it('create/edit a credential using prompt on launch', () => {
-    const credentialName = 'E2E Credential ' + randomString(4);
-    cy.navigateTo('awx', 'credentials');
-    cy.clickButton(/^Create credential$/);
-    cy.getByDataCy('name').type(credentialName);
-    cy.singleSelectByDataCy('organization', organization.name);
-    cy.singleSelectBy('[data-cy="credential_type"]', 'Machine');
-    cy.contains('Type Details').should('be.visible');
-    cy.getByDataCy('ask_password').check();
-    cy.getByDataCy('ask_ssh_key_unlock').check();
-    cy.clickButton(/^Create credential$/);
-    cy.verifyPageTitle(credentialName);
-    cy.getByDataCy('name').contains(credentialName);
-    cy.contains('Private Key Passphrase').should('be.visible');
-    cy.getByDataCy('private-key-passphrase').contains('Prompt on launch');
-    cy.contains('Password').should('be.visible');
-    cy.getByDataCy('password').contains('Prompt on launch');
-    cy.getByDataCy('edit-credential').click();
-    cy.verifyPageTitle('Edit Credential');
-    cy.getByDataCy('ask_password').uncheck();
-    cy.getByDataCy('password').type('password');
-    cy.clickButton(/^Save credential$/);
-    cy.contains('Password').should('be.visible');
-    cy.getByDataCy('password').contains('Encrypted');
-    cy.contains('Private Key Passphrase').should('be.visible');
-    cy.getByDataCy('private-key-passphrase').contains('Prompt on launch');
-    cy.clickPageAction('delete-credential');
-    cy.get('#confirm').click();
-    cy.clickButton(/^Delete credential/);
-    cy.verifyPageTitle('Credentials');
+  describe('Credentials: Sub Form Testing', () => {
+    it('can create and delete a credential that renders a sub form', () => {
+      const credentialName = 'E2E Credential ' + randomString(4);
+      cy.navigateTo('awx', 'credentials');
+      cy.clickButton(/^Create credential$/);
+      cy.getByDataCy('name').type(credentialName);
+      cy.singleSelectByDataCy('credential_type', 'Amazon Web Services');
+      cy.contains('Type Details').should('be.visible');
+      cy.singleSelectByDataCy('organization', awxOrganization.name);
+      cy.getByDataCy('username').type('username');
+      cy.getByDataCy('password').type('password');
+      cy.getByDataCy('security-token').type('security-token');
+      cy.getByDataCy('description').type('description');
+      cy.intercept('POST', awxAPI`/credentials/`).as('newCred');
+      cy.clickButton(/^Create credential$/);
+      cy.wait('@newCred')
+        .its('response.body')
+        .then((newCred: Credential) => {
+          cy.getByDataCy('name').contains(credentialName);
+          cy.getByDataCy('label-credential-type').contains('Credential type');
+          cy.getByDataCy('credential-type').contains('Amazon Web Services');
+          cy.getByDataCy('label-access-key').contains('Access Key');
+          cy.getByDataCy('access-key').contains('username');
+          cy.getByDataCy('label-secret-key').contains('Secret Key');
+          cy.getByDataCy('secret-key').contains('Encrypted');
+          cy.getByDataCy('label-sts-token').contains('STS Token');
+          cy.getByDataCy('label-organization').contains('Organization');
+          cy.getByDataCy('organization').contains(awxOrganization.name);
+          cy.getByDataCy('label-description').contains('Description');
+          cy.getByDataCy('description').contains('description');
+          cy.getByDataCy('edit-credential').click();
+          cy.verifyPageTitle('Edit Credential');
+          const ModifiedCredentialName = credentialName + ' - edited';
+          cy.getByDataCy('name').type(ModifiedCredentialName);
+          cy.get('input[data-cy="username"]').then(($username) => {
+            cy.wrap($username).should('have.value', 'username');
+          });
+          cy.get('input[data-cy="password"]').then(($pwd) => {
+            cy.wrap($pwd).should('have.value', 'ENCRYPTED');
+          });
+          cy.get('input[data-cy="security-token"]').then(($token) => {
+            cy.wrap($token).should('have.value', 'ENCRYPTED');
+          });
+          const newDescription = 'new description';
+          cy.getByDataCy('description').clear().type(newDescription);
+          cy.clickButton(/^Save credential$/);
+          cy.getByDataCy('name').contains(ModifiedCredentialName);
+          cy.getByDataCy('label-credential-type').contains('Credential type');
+          cy.getByDataCy('credential-type').contains('Amazon Web Services');
+          cy.getByDataCy('label-access-key').contains('Access Key');
+          cy.getByDataCy('access-key').contains('username');
+          cy.getByDataCy('label-secret-key').contains('Secret Key');
+          cy.getByDataCy('secret-key').contains('Encrypted');
+          cy.getByDataCy('label-sts-token').contains('STS Token');
+          cy.getByDataCy('sts-token').contains('Encrypted');
+          cy.getByDataCy('label-description').contains('Description');
+          cy.getByDataCy('description').contains(newDescription);
+          cy.clickPageAction('delete-credential');
+          cy.get('#confirm').click();
+          cy.intercept('DELETE', awxAPI`/credentials/${newCred.id.toString()}/`).as('deleted');
+          cy.clickButton(/^Delete credential/);
+          cy.wait('@deleted')
+            .its('response')
+            .then((deleted) => {
+              expect(deleted?.statusCode).to.eql(204);
+              cy.verifyPageTitle('Credentials');
+            });
+        });
+    });
+
+    it.skip('can edit credential type that renders a sub form', () => {
+      const credentialName = 'E2E Credential ' + randomString(4);
+      cy.navigateTo('awx', 'credentials');
+      cy.clickButton(/^Create credential$/);
+      cy.get('[data-cy="name"]').type(credentialName);
+      cy.singleSelectBy('[data-cy="credential_type"]', 'Amazon Web Services');
+      cy.contains('Type Details').should('be.visible');
+      cy.get('[data-cy="username"]').type('username');
+      cy.get('[data-cy="password"]').type('password');
+      cy.get('[data-cy="security-token"]').type('security-token');
+      cy.get('[data-cy="description"]').type('description');
+      cy.singleSelectByDataCy('organization', awxOrganization.name);
+      cy.clickButton(/^Create credential$/);
+      cy.verifyPageTitle(credentialName);
+      cy.get('[data-cy="name"]').contains(credentialName);
+      cy.contains('Access Key').should('be.visible');
+      cy.get('[data-cy="access-key"]').contains('username');
+      cy.contains('Secret Key').should('be.visible');
+      cy.get('[data-cy="secret-key"]').contains('Encrypted');
+      cy.contains('Organization').should('be.visible');
+      cy.contains(awxOrganization.name);
+      cy.get('[data-cy="edit-credential"]').click();
+      cy.verifyPageTitle('Edit Credential');
+      const ModifiedCredentialName = credentialName + ' - edited';
+      cy.get('[data-cy="name"]').type(ModifiedCredentialName);
+      cy.get('[data-cy="username"]').should('be.visible');
+      cy.get('[data-cy="username"]').then(($input) => {
+        expect($input.val()).to.eq('username');
+      });
+      cy.get('[data-cy="password"]').should('be.visible');
+      cy.get('[data-cy="password"]').then(($input) => {
+        expect($input.val()).to.eq('ENCRYPTED');
+      });
+      cy.get('[data-cy="security-token"]').should('be.visible');
+      cy.get('[data-cy="security-token"]').then(($input) => {
+        expect($input.val()).to.eq('ENCRYPTED');
+      });
+      const newDescription = 'new description';
+      cy.get('[data-cy="description"]').clear().type(newDescription);
+      cy.clickButton(/^Save credential$/);
+      cy.get('[data-cy="name"]').contains(ModifiedCredentialName);
+      cy.contains(ModifiedCredentialName).should('be.visible');
+      cy.contains('Access Key').should('be.visible');
+      cy.get('[data-cy="access-key"]').contains('username');
+      cy.contains('Secret Key').should('be.visible');
+      cy.get('[data-cy="secret-key"]').contains('Encrypted');
+      cy.get('[data-cy="sts-token"]').contains('Encrypted');
+      cy.contains('Organization').should('be.visible');
+      cy.contains('Description').should('be.visible');
+      cy.get('[data-cy="description"]').contains(newDescription);
+      cy.clickPageAction('delete-credential');
+      cy.get('#confirm').click();
+      cy.clickButton(/^Delete credential/);
+      cy.verifyPageTitle('Credentials');
+    });
   });
 
-  it('machine credential type should render privilege escalation', () => {
-    // This is a test for the custom component that renders the privilege
-    // escalation method using a custom component
-    const credentialName = 'E2E Credential ' + randomString(4);
-    cy.navigateTo('awx', 'credentials');
-    cy.clickButton(/^Create credential$/);
-    cy.getByDataCy('name').type(credentialName);
-    cy.singleSelectByDataCy('organization', organization.name);
-    cy.singleSelectBy('[data-cy="credential_type"]', 'Machine');
-    cy.contains('Type Details').should('be.visible');
-    // Use custom component to render the privilege escalation method is sudo
-    cy.contains('Privilege Escalation Method ').should('be.visible');
-    cy.get('button[aria-label="Options menu"]').click();
-    cy.getByDataCy('select-option-sudo').click();
-    cy.clickButton(/^Create credential$/);
-    cy.verifyPageTitle(credentialName);
-    cy.getByDataCy('name').contains(credentialName);
-    cy.contains('Privilege Escalation Method').should('be.visible');
-    cy.getByDataCy('privilege-escalation-method').contains('sudo');
-    cy.clickPageAction('delete-credential');
-    cy.get('#confirm').click();
-    cy.clickButton(/^Delete credential/);
-    cy.verifyPageTitle('Credentials');
+  describe('Credentials: Miscellaneous Testing', () => {
+    it('can create/edit a credential using prompt on launch', () => {
+      const credentialName = 'E2E Credential ' + randomString(4);
+      cy.navigateTo('awx', 'credentials');
+      cy.clickButton(/^Create credential$/);
+      cy.getByDataCy('name').type(credentialName);
+      cy.singleSelectByDataCy('organization', awxOrganization.name);
+      cy.singleSelectBy('[data-cy="credential_type"]', 'Machine');
+      cy.contains('Type Details').should('be.visible');
+      cy.getByDataCy('ask_password').check();
+      cy.getByDataCy('ask_ssh_key_unlock').check();
+      cy.clickButton(/^Create credential$/);
+      cy.verifyPageTitle(credentialName);
+      cy.getByDataCy('name').contains(credentialName);
+      cy.contains('Private Key Passphrase').should('be.visible');
+      cy.getByDataCy('private-key-passphrase').contains('Prompt on launch');
+      cy.contains('Password').should('be.visible');
+      cy.getByDataCy('password').contains('Prompt on launch');
+      cy.getByDataCy('edit-credential').click();
+      cy.verifyPageTitle('Edit Credential');
+      cy.getByDataCy('ask_password').uncheck();
+      cy.getByDataCy('password').type('password');
+      cy.clickButton(/^Save credential$/);
+      cy.contains('Password').should('be.visible');
+      cy.getByDataCy('password').contains('Encrypted');
+      cy.contains('Private Key Passphrase').should('be.visible');
+      cy.getByDataCy('private-key-passphrase').contains('Prompt on launch');
+      cy.clickPageAction('delete-credential');
+      cy.get('#confirm').click();
+      cy.clickButton(/^Delete credential/);
+      cy.verifyPageTitle('Credentials');
+    });
+
+    it('should render privilege escalation for machine credential type', () => {
+      // This is a test for the custom component that renders the privilege
+      // escalation method using a custom component
+      const credentialName = 'E2E Credential ' + randomString(4);
+      cy.navigateTo('awx', 'credentials');
+      cy.clickButton(/^Create credential$/);
+      cy.getByDataCy('name').type(credentialName);
+      cy.singleSelectByDataCy('organization', awxOrganization.name);
+      cy.singleSelectBy('[data-cy="credential_type"]', 'Machine');
+      cy.contains('Type Details').should('be.visible');
+      // Use custom component to render the privilege escalation method is sudo
+      cy.contains('Privilege Escalation Method ').should('be.visible');
+      cy.get('button[aria-label="Options menu"]').click();
+      cy.getByDataCy('select-option-sudo').click();
+      cy.clickButton(/^Create credential$/);
+      cy.verifyPageTitle(credentialName);
+      cy.getByDataCy('name').contains(credentialName);
+      cy.contains('Privilege Escalation Method').should('be.visible');
+      cy.getByDataCy('privilege-escalation-method').contains('sudo');
+      cy.clickPageAction('delete-credential');
+      cy.get('#confirm').click();
+      cy.clickButton(/^Delete credential/);
+      cy.verifyPageTitle('Credentials');
+    });
   });
-});
 
-describe('Credentials Tabbed View - Job Templates', () => {
-  let machineCredential: Credential;
-  let awxOrganization: Organization;
-  let awxInventory: Inventory;
+  describe('Credentials Tabbed View - Job Templates', () => {
+    let machineCredential: Credential;
+    let awxInventory: Inventory;
 
-  beforeEach(() => {
-    cy.awxLogin();
-    cy.createAwxOrganization().then((awxOrg) => {
-      awxOrganization = awxOrg;
+    beforeEach(() => {
       cy.createAWXCredential({
         kind: 'machine',
         organization: awxOrganization.id,
@@ -529,205 +636,204 @@ describe('Credentials Tabbed View - Job Templates', () => {
       }).then((cred) => {
         machineCredential = cred;
       });
-
-      cy.createAwxInventory().then((inv) => {
+      cy.createAwxInventory(awxOrganization).then((inv) => {
         awxInventory = inv;
       });
     });
-  });
 
-  afterEach(() => {
-    cy.deleteAwxOrganization(awxOrganization, { failOnStatusCode: false });
-    cy.deleteAwxCredential(machineCredential, { failOnStatusCode: false });
-    cy.deleteAwxInventory(awxInventory, { failOnStatusCode: false });
-  });
+    afterEach(() => {
+      cy.deleteAwxCredential(machineCredential, { failOnStatusCode: false });
+      cy.deleteAwxInventory(awxInventory, { failOnStatusCode: false });
+    });
 
-  it('can create a job template within the context of credential job template tab', function () {
-    const jobTemplateName = `E2E Job Template ${randomE2Ename()}`;
-    cy.intercept('POST', awxAPI`/job_templates`).as('createJT');
-    cy.navigateTo('awx', 'credentials');
-    cy.filterTableByMultiSelect('name', [machineCredential.name]);
-    cy.clickTableRowLink('name', machineCredential.name, { disableFilter: true });
-    cy.clickTab('Job Templates', true);
-    cy.getByDataCy('create-template').click();
-    cy.verifyPageTitle('Create Job Template');
-    cy.getByDataCy('name').type(jobTemplateName);
-    cy.selectDropdownOptionByResourceName('inventory', awxInventory.name);
-    cy.selectDropdownOptionByResourceName('project', `${(this.globalProject as Project).name}`);
-    cy.selectDropdownOptionByResourceName('playbook', 'hello_world.yml');
-    cy.selectItemFromLookupModal('credential-select', machineCredential.name);
-    cy.getByDataCy('Submit').click();
+    it('can create a job template within the context of credential job template tab', function () {
+      const jobTemplateName = `E2E Job Template ${randomE2Ename()}`;
+      cy.intercept('POST', awxAPI`/job_templates`).as('createJT');
+      cy.navigateTo('awx', 'credentials');
+      cy.filterTableByMultiSelect('name', [machineCredential.name]);
+      cy.clickTableRowLink('name', machineCredential.name, { disableFilter: true });
+      cy.clickTab('Job Templates', true);
+      cy.getByDataCy('create-template').click();
+      cy.verifyPageTitle('Create Job Template');
+      cy.getByDataCy('name').type(jobTemplateName);
+      cy.selectDropdownOptionByResourceName('inventory', awxInventory.name);
+      cy.selectDropdownOptionByResourceName('project', `${project.name}`);
+      cy.selectDropdownOptionByResourceName('playbook', 'hello_world.yml');
+      cy.selectItemFromLookupModal('credential-select', machineCredential.name);
+      cy.getByDataCy('Submit').click();
+    });
   });
 });
 
-describe('Credentials Tabbed View - Team and User Access', () => {
-  let machineCredential: Credential;
-  let createdAwxUser: AwxUser;
-  let awxOrganization: Organization;
-  let awxTeam: Team;
-  beforeEach(() => {
-    cy.awxLogin();
-    cy.createAwxOrganization().then((awxOrg) => {
-      awxOrganization = awxOrg;
-      cy.createAwxUser({ organization: awxOrganization.id }).then((awxUser) => {
-        createdAwxUser = awxUser;
-        cy.createAWXCredential({
-          kind: 'machine',
-          organization: awxOrganization.id,
-          credential_type: 1,
-        }).then((cred) => {
-          machineCredential = cred;
+tag(['upstream'], () => {
+  //these tests will not work downstream
+  describe('Credentials Tabbed View - Team and User Access', () => {
+    let machineCredential: Credential;
+    let createdAwxUser: AwxUser;
+    let awxOrganization: Organization;
+    let awxTeam: Team;
+
+    beforeEach(() => {
+      cy.createAwxOrganization().then((awxOrg) => {
+        awxOrganization = awxOrg;
+        cy.createAwxUser({ organization: awxOrganization.id }).then((awxUser) => {
+          createdAwxUser = awxUser;
+          cy.createAWXCredential({
+            kind: 'machine',
+            organization: awxOrganization.id,
+            credential_type: 1,
+          }).then((cred) => {
+            machineCredential = cred;
+          });
+        });
+        cy.createAwxTeam({ organization: awxOrganization.id }).then((createdAwxTeam) => {
+          awxTeam = createdAwxTeam;
         });
-      });
-      cy.createAwxTeam({ organization: awxOrganization.id }).then((createdAwxTeam) => {
-        awxTeam = createdAwxTeam;
       });
     });
-  });
 
-  afterEach(() => {
-    cy.deleteAwxCredential(machineCredential, { failOnStatusCode: false });
-    cy.deleteAwxOrganization(awxOrganization, { failOnStatusCode: false });
-    cy.deleteAwxUser(createdAwxUser, { failOnStatusCode: false });
-    cy.deleteAwxTeam(awxTeam, { failOnStatusCode: false });
-  });
+    afterEach(() => {
+      cy.deleteAwxCredential(machineCredential, { failOnStatusCode: false });
+      cy.deleteAwxUser(createdAwxUser, { failOnStatusCode: false });
+      cy.deleteAwxTeam(awxTeam, { failOnStatusCode: false });
+      cy.deleteAwxOrganization(awxOrganization, { failOnStatusCode: false });
+    });
 
-  function removeRoleFromListRow(roleName: string, assignmentType: string) {
-    cy.intercept('DELETE', awxAPI`/role_${assignmentType}_assignments/*`).as('deleteRole');
-    cy.clickTableRowPinnedAction(roleName, 'remove-role', false);
-    cy.getModal().within(() => {
-      cy.get('#confirm').click();
-      cy.clickButton(/^Remove role/);
-      cy.wait('@deleteRole')
-        .its('response')
-        .then((deleted) => {
-          expect(deleted?.statusCode).to.eql(204);
-          cy.contains(/^Success$/).should('be.visible');
-          cy.containsBy('button', /^Close$/).click();
+    function removeRoleFromListRow(roleName: string, assignmentType: string) {
+      cy.intercept('DELETE', awxAPI`/role_${assignmentType}_assignments/*`).as('deleteRole');
+      cy.clickTableRowPinnedAction(roleName, 'remove-role', false);
+      cy.getModal().within(() => {
+        cy.get('#confirm').click();
+        cy.clickButton(/^Remove role/);
+        cy.wait('@deleteRole')
+          .its('response')
+          .then((deleted) => {
+            expect(deleted?.statusCode).to.eql(204);
+            cy.contains(/^Success$/).should('be.visible');
+            cy.containsBy('button', /^Close$/).click();
+          });
+      });
+    }
+
+    it('can create a new credential, assign a team and apply role(s)', () => {
+      cy.intercept('POST', awxAPI`/role_team_assignments/`).as('teamRoleAssignment');
+      cy.navigateTo('awx', 'credentials');
+      cy.filterTableByMultiSelect('name', [machineCredential.name]);
+      cy.clickTableRowLink('name', machineCredential.name, { disableFilter: true });
+      cy.clickTab('Team Access', true);
+      cy.getByDataCy('add-roles').click();
+      cy.verifyPageTitle('Add roles');
+      cy.getWizard().within(() => {
+        cy.contains('h1', 'Select team(s)').should('be.visible');
+        cy.filterTableByMultiSelect('name', [awxTeam.name]);
+        cy.selectTableRowByCheckbox('name', awxTeam.name, { disableFilter: true });
+        cy.clickButton(/^Next/);
+        cy.contains('h1', 'Select roles to apply').should('be.visible');
+        cy.filterTableByTextFilter('name', 'Credential Admin', {
+          disableFilterSelection: true,
         });
-    });
-  }
-  it('create a new credential, assign a team and apply role(s)', () => {
-    cy.intercept('POST', awxAPI`/role_team_assignments/`).as('teamRoleAssignment');
-    cy.navigateTo('awx', 'credentials');
-    cy.filterTableByMultiSelect('name', [machineCredential.name]);
-    cy.clickTableRowLink('name', machineCredential.name, { disableFilter: true });
-    cy.clickTab('Team Access', true);
-
-    cy.getByDataCy('add-roles').click();
-    cy.verifyPageTitle('Add roles');
-    cy.getWizard().within(() => {
-      cy.contains('h1', 'Select team(s)').should('be.visible');
-      cy.filterTableByMultiSelect('name', [awxTeam.name]);
-      cy.selectTableRowByCheckbox('name', awxTeam.name, { disableFilter: true });
-      cy.clickButton(/^Next/);
-      cy.contains('h1', 'Select roles to apply').should('be.visible');
-      cy.filterTableByTextFilter('name', 'Credential Admin', {
-        disableFilterSelection: true,
+        cy.selectTableRowByCheckbox('name', 'Credential Admin', {
+          disableFilter: true,
+        });
+        cy.filterTableByTextFilter('name', 'Credential Use', {
+          disableFilterSelection: true,
+        });
+        cy.selectTableRowByCheckbox('name', 'Credential Use', {
+          disableFilter: true,
+        });
+        cy.clickButton(/^Next/);
+        cy.contains('h1', 'Review').should('be.visible');
+        cy.verifyReviewStepWizardDetails('teams', [awxTeam.name], '1');
+        cy.verifyReviewStepWizardDetails(
+          'awxRoles',
+          [
+            'Credential Admin',
+            'Has all permissions to a single credential',
+            'Credential Use',
+            'Has use permissions to a single credential',
+          ],
+          '2'
+        );
+        cy.clickButton(/^Finish/);
+        cy.wait('@teamRoleAssignment')
+          .its('response')
+          .then((response) => {
+            expect(response?.statusCode).to.eql(201);
+          });
       });
-      cy.selectTableRowByCheckbox('name', 'Credential Admin', {
-        disableFilter: true,
+      cy.getModal().within(() => {
+        cy.clickButton(/^Close$/);
       });
-      cy.filterTableByTextFilter('name', 'Credential Use', {
-        disableFilterSelection: true,
+      cy.getModal().should('not.exist');
+      cy.verifyPageTitle(machineCredential.name);
+      cy.selectTableRowByCheckbox('team-name', awxTeam.name, {
+        disableFilter: true,
       });
-      cy.selectTableRowByCheckbox('name', 'Credential Use', {
+      removeRoleFromListRow('Credential Admin', 'team');
+      cy.selectTableRowByCheckbox('team-name', awxTeam.name, {
         disableFilter: true,
       });
-      cy.clickButton(/^Next/);
-      cy.contains('h1', 'Review').should('be.visible');
-      cy.verifyReviewStepWizardDetails('teams', [awxTeam.name], '1');
-      cy.verifyReviewStepWizardDetails(
-        'awxRoles',
-        [
-          'Credential Admin',
-          'Has all permissions to a single credential',
-          'Credential Use',
-          'Has use permissions to a single credential',
-        ],
-        '2'
-      );
-      cy.clickButton(/^Finish/);
-      cy.wait('@teamRoleAssignment')
-        .its('response')
-        .then((response) => {
-          expect(response?.statusCode).to.eql(201);
-        });
-    });
-    cy.getModal().within(() => {
-      cy.clickButton(/^Close$/);
+      removeRoleFromListRow('Credential Use', 'team');
     });
-    cy.getModal().should('not.exist');
-    cy.verifyPageTitle(machineCredential.name);
-    cy.selectTableRowByCheckbox('team-name', awxTeam.name, {
-      disableFilter: true,
-    });
-    removeRoleFromListRow('Credential Admin', 'team');
-    cy.selectTableRowByCheckbox('team-name', awxTeam.name, {
-      disableFilter: true,
-    });
-    removeRoleFromListRow('Credential Use', 'team');
-  });
 
-  it('create a new credential, assign a user and apply role(s)', () => {
-    cy.intercept('POST', awxAPI`/role_user_assignments/`).as('userRoleAssignment');
-    cy.navigateTo('awx', 'credentials');
-    cy.filterTableByMultiSelect('name', [machineCredential.name]);
-    cy.clickTableRowLink('name', machineCredential.name, { disableFilter: true });
-    cy.clickTab('User Access', true);
-
-    cy.getByDataCy('add-roles').click();
-    cy.verifyPageTitle('Add roles');
-    cy.getWizard().within(() => {
-      cy.contains('h1', 'Select user(s)').should('be.visible');
-      cy.selectTableRowByCheckbox('username', createdAwxUser.username);
-
-      cy.clickButton(/^Next/);
-      cy.contains('h1', 'Select roles to apply').should('be.visible');
-      cy.filterTableByTextFilter('name', 'Credential Admin', {
-        disableFilterSelection: true,
+    it('can create a new credential, assign a user and apply role(s)', () => {
+      cy.intercept('POST', awxAPI`/role_user_assignments/`).as('userRoleAssignment');
+      cy.navigateTo('awx', 'credentials');
+      cy.filterTableByMultiSelect('name', [machineCredential.name]);
+      cy.clickTableRowLink('name', machineCredential.name, { disableFilter: true });
+      cy.clickTab('User Access', true);
+      cy.getByDataCy('add-roles').click();
+      cy.verifyPageTitle('Add roles');
+      cy.getWizard().within(() => {
+        cy.contains('h1', 'Select user(s)').should('be.visible');
+        cy.selectTableRowByCheckbox('username', createdAwxUser.username);
+        cy.clickButton(/^Next/);
+        cy.contains('h1', 'Select roles to apply').should('be.visible');
+        cy.filterTableByTextFilter('name', 'Credential Admin', {
+          disableFilterSelection: true,
+        });
+        cy.selectTableRowByCheckbox('name', 'Credential Admin', {
+          disableFilter: true,
+        });
+        cy.filterTableByTextFilter('name', 'Credential Use', {
+          disableFilterSelection: true,
+        });
+        cy.selectTableRowByCheckbox('name', 'Credential Use', {
+          disableFilter: true,
+        });
+        cy.clickButton(/^Next/);
+        cy.contains('h1', 'Review').should('be.visible');
+        cy.verifyReviewStepWizardDetails('users', [createdAwxUser.username], '1');
+        cy.verifyReviewStepWizardDetails(
+          'awxRoles',
+          [
+            'Credential Admin',
+            'Has all permissions to a single credential',
+            'Credential Use',
+            'Has use permissions to a single credential',
+          ],
+          '2'
+        );
+        cy.clickButton(/^Finish/);
+        cy.wait('@userRoleAssignment')
+          .its('response')
+          .then((response) => {
+            expect(response?.statusCode).to.eql(201);
+          });
       });
-      cy.selectTableRowByCheckbox('name', 'Credential Admin', {
-        disableFilter: true,
+      cy.getModal().within(() => {
+        cy.clickButton(/^Close$/);
       });
-      cy.filterTableByTextFilter('name', 'Credential Use', {
-        disableFilterSelection: true,
+      cy.getModal().should('not.exist');
+      cy.verifyPageTitle(machineCredential.name);
+      cy.selectTableRowByCheckbox('username', createdAwxUser.username, {
+        disableFilter: true,
       });
-      cy.selectTableRowByCheckbox('name', 'Credential Use', {
+      removeRoleFromListRow('Credential Admin', 'user');
+      cy.selectTableRowByCheckbox('username', createdAwxUser.username, {
         disableFilter: true,
       });
-      cy.clickButton(/^Next/);
-      cy.contains('h1', 'Review').should('be.visible');
-      cy.verifyReviewStepWizardDetails('users', [createdAwxUser.username], '1');
-      cy.verifyReviewStepWizardDetails(
-        'awxRoles',
-        [
-          'Credential Admin',
-          'Has all permissions to a single credential',
-          'Credential Use',
-          'Has use permissions to a single credential',
-        ],
-        '2'
-      );
-      cy.clickButton(/^Finish/);
-      cy.wait('@userRoleAssignment')
-        .its('response')
-        .then((response) => {
-          expect(response?.statusCode).to.eql(201);
-        });
-    });
-    cy.getModal().within(() => {
-      cy.clickButton(/^Close$/);
-    });
-    cy.getModal().should('not.exist');
-    cy.verifyPageTitle(machineCredential.name);
-    cy.selectTableRowByCheckbox('username', createdAwxUser.username, {
-      disableFilter: true,
-    });
-    removeRoleFromListRow('Credential Admin', 'user');
-    cy.selectTableRowByCheckbox('username', createdAwxUser.username, {
-      disableFilter: true,
+      removeRoleFromListRow('Credential Use', 'user');
     });
-    removeRoleFromListRow('Credential Use', 'user');
   });
 });
diff --git a/cypress/e2e/awx/resources/executionEnvironments.cy.ts b/cypress/e2e/awx/resources/executionEnvironments.cy.ts
index 1667692c8..05de23316 100644
--- a/cypress/e2e/awx/resources/executionEnvironments.cy.ts
+++ b/cypress/e2e/awx/resources/executionEnvironments.cy.ts
@@ -8,404 +8,395 @@ import { Team } from '../../../../frontend/awx/interfaces/Team';
 import { AwxUser } from '../../../../frontend/awx/interfaces/User';
 import { awxAPI } from '../../../support/formatApiPathForAwx';
 
-describe('Execution Environments: Create', () => {
+describe('Execution Environments', () => {
   let credential: Credential;
-  let organization: Organization;
   let user: AwxUser;
   let execEnvName: string;
   let image: string;
+  let project: Project;
+  let awxOrganization: Organization;
+
+  before(function () {
+    cy.createAwxOrganization().then((thisAwxOrg) => {
+      awxOrganization = thisAwxOrg;
+      cy.createAwxProject(awxOrganization).then((proj) => {
+        project = proj;
+      });
+    });
+  });
 
-  beforeEach(() => {
-    cy.createAwxOrganization().then((org) => {
-      organization = org;
+  after(() => {
+    cy.deleteAwxProject(project, { failOnStatusCode: false });
+    cy.deleteAwxOrganization(awxOrganization, { failOnStatusCode: false });
+  });
+
+  describe('Execution Environments: Create', () => {
+    beforeEach(() => {
       cy.createAWXCredential({
         name: 'E2E Credential registry' + randomString(4),
         kind: 'registry',
-        organization: organization.id,
+        organization: awxOrganization.id,
         credential_type: 18,
       }).then((cred) => {
         credential = cred;
+
+        cy.createAwxUser({ organization: awxOrganization.id }).then((testUser) => {
+          user = testUser;
+        });
+        execEnvName = 'E2E Execution Environment Create' + randomString(4);
+        image = 'quay.io/ansible/awx-ee:latest';
       });
-      cy.createAwxUser({ organization: organization.id }).then((testUser) => {
-        user = testUser;
-      });
+      cy.navigateTo('awx', 'execution-environments');
+      cy.verifyPageTitle('Execution Environments');
     });
-    execEnvName = 'E2E Execution Environment Create' + randomString(4);
-    image = 'quay.io/ansible/awx-ee:latest';
-    cy.navigateTo('awx', 'execution-environments');
-    cy.verifyPageTitle('Execution Environments');
-  });
 
-  afterEach(() => {
-    cy.deleteAwxCredential(credential, { failOnStatusCode: false });
-    cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
-    cy.deleteAwxUser(user, { failOnStatusCode: false });
-  });
+    afterEach(() => {
+      cy.deleteAwxCredential(credential, { failOnStatusCode: false });
+      cy.deleteAwxUser(user, { failOnStatusCode: false });
+    });
 
-  it('can create a new EE associated to a particular org, assert info on details page, then navigate to EE list and delete the EE', () => {
-    cy.getByDataCy('create-execution-environment').click();
-    cy.getByDataCy('name').type(execEnvName);
-    cy.getByDataCy('image').type(image);
-    cy.singleSelectByDataCy('organization', organization.name);
-    cy.singleSelectByDataCy('credential', credential.name);
-    cy.intercept('POST', awxAPI`/execution_environments/`).as('createEE');
-    cy.clickButton(/^Create execution environment$/);
-    cy.wait('@createEE')
-      .then((response) => {
-        expect(response?.response?.statusCode).to.eql(201);
-      })
-      .its('response.body')
-      .then((response: ExecutionEnvironment) => {
-        cy.hasDetail('Name', execEnvName);
-        cy.hasDetail('Image', image);
-        cy.hasDetail('Organization', organization.name);
-        cy.hasDetail('Registry Credential', credential.name);
-        cy.url().then((currentUrl) => {
-          expect(
-            currentUrl.includes(
-              `/infrastructure/execution-environments/${response.id.toString()}/details`
-            )
-          ).to.be.true;
+    it('can create a new EE associated to a particular org, assert info on details page, then navigate to EE list and delete the EE', () => {
+      cy.getByDataCy('create-execution-environment').click();
+      cy.getByDataCy('name').type(execEnvName);
+      cy.getByDataCy('image').type(image);
+      cy.singleSelectByDataCy('organization', awxOrganization.name);
+      cy.selectSingleSelectOption('[data-cy="credential"]', credential.name);
+      cy.intercept('POST', awxAPI`/execution_environments/`).as('createEE');
+      cy.clickButton(/^Create execution environment$/);
+      cy.wait('@createEE')
+        .then((response) => {
+          expect(response?.response?.statusCode).to.eql(201);
+        })
+        .its('response.body')
+        .then((response: ExecutionEnvironment) => {
+          cy.hasDetail('Name', execEnvName);
+          cy.hasDetail('Image', image);
+          cy.hasDetail('Organization', awxOrganization.name);
+          cy.hasDetail('Registry Credential', credential.name);
+          cy.url().then((currentUrl) => {
+            expect(
+              currentUrl.includes(
+                `/infrastructure/execution-environments/${response.id.toString()}/details`
+              )
+            ).to.be.true;
+          });
         });
+      cy.clickTab(/^Back to Execution Environments$/, true);
+      cy.verifyPageTitle('Execution Environments');
+      cy.filterTableBySingleSelect('name', execEnvName);
+      cy.clickTableRowKebabAction(execEnvName, 'delete-execution-environment', false);
+      cy.clickModalConfirmCheckbox();
+      cy.intercept('DELETE', awxAPI`/execution_environments/*/`).as('deleteEE');
+      cy.clickModalButton('Delete execution environments');
+      cy.wait('@deleteEE')
+        .its('response')
+        .then((response) => {
+          expect(response?.statusCode).to.eql(204);
+        });
+      cy.getModal().within(() => {
+        cy.contains('Permanently delete execution environments');
+        cy.contains(execEnvName);
       });
-
-    cy.clickTab(/^Back to Execution Environments$/, true);
-    cy.verifyPageTitle('Execution Environments');
-    cy.filterTableBySingleSelect('name', execEnvName);
-    cy.clickTableRowKebabAction(execEnvName, 'delete-execution-environment', false);
-    cy.clickModalConfirmCheckbox();
-    cy.intercept('DELETE', awxAPI`/execution_environments/*/`).as('deleteEE');
-    cy.clickModalButton('Delete execution environments');
-    cy.wait('@deleteEE')
-      .its('response')
-      .then((response) => {
-        expect(response?.statusCode).to.eql(204);
-      });
-    cy.getModal().within(() => {
-      cy.contains('Permanently delete execution environments');
-      cy.contains(execEnvName);
+      cy.assertModalSuccess();
+      cy.clickModalButton('Close');
     });
-    cy.assertModalSuccess();
-    cy.clickModalButton('Close');
-  });
 
-  it('can create a new EE associated to a particular org, then visit the EE tab inside the org to view the EE and assert info', () => {
-    cy.getByDataCy('create-execution-environment').click();
-    cy.getByDataCy('name').type(execEnvName);
-    cy.getByDataCy('image').type(image);
-    cy.singleSelectByDataCy('organization', organization.name);
-    cy.singleSelectByDataCy('credential', credential.name);
-    cy.intercept('POST', awxAPI`/execution_environments/`).as('createEE');
-    cy.clickButton(/^Create execution environment$/);
-    cy.wait('@createEE')
-      .then((response) => {
-        expect(response?.response?.statusCode).to.eql(201);
-      })
-      .its('response.body')
-      .then((response: ExecutionEnvironment) => {
-        cy.hasDetail('Name', execEnvName);
-        cy.hasDetail('Image', image);
-        cy.hasDetail('Organization', organization.name);
-        cy.hasDetail('Registry Credential', credential.name);
-        cy.url().then((currentUrl) => {
-          expect(
-            currentUrl.includes(
-              `/infrastructure/execution-environments/${response.id.toString()}/details`
-            )
-          ).to.be.true;
+    it('can create a new EE associated to a particular org, then visit the EE tab inside the org to view the EE and assert info', () => {
+      cy.getByDataCy('create-execution-environment').click();
+      cy.getByDataCy('name').type(execEnvName);
+      cy.getByDataCy('image').type(image);
+      cy.singleSelectByDataCy('organization', awxOrganization.name);
+      cy.selectSingleSelectOption('[data-cy="credential"]', credential.name);
+      cy.intercept('POST', awxAPI`/execution_environments/`).as('createEE');
+      cy.clickButton(/^Create execution environment$/);
+      cy.wait('@createEE')
+        .then((response) => {
+          expect(response?.response?.statusCode).to.eql(201);
+        })
+        .its('response.body')
+        .then((response: ExecutionEnvironment) => {
+          cy.hasDetail('Name', execEnvName);
+          cy.hasDetail('Image', image);
+          cy.hasDetail('Organization', awxOrganization.name);
+          cy.hasDetail('Registry Credential', credential.name);
+          cy.url().then((currentUrl) => {
+            expect(
+              currentUrl.includes(
+                `/infrastructure/execution-environments/${response.id.toString()}/details`
+              )
+            ).to.be.true;
+          });
         });
+      cy.clickLink(awxOrganization.name);
+      cy.verifyPageTitle(awxOrganization.name);
+      cy.url().then((currentUrl) => {
+        expect(
+          currentUrl.includes(`/access/organizations/${awxOrganization.id.toString()}/details`)
+        ).to.be.true;
       });
-
-    cy.clickLink(organization.name);
-    cy.verifyPageTitle(organization.name);
-    cy.url().then((currentUrl) => {
-      expect(currentUrl.includes(`/access/organizations/${organization.id.toString()}/details`)).to
-        .be.true;
-    });
-    cy.clickTab(/^Execution environments$/, true);
-    cy.filterTableBySingleSelect('name', execEnvName);
-    cy.clickTableRowKebabAction(execEnvName, 'delete-execution-environment', false);
-    cy.clickModalConfirmCheckbox();
-    cy.intercept('DELETE', awxAPI`/execution_environments/*/`).as('deleteEE');
-    cy.clickModalButton('Delete execution environments');
-    cy.wait('@deleteEE')
-      .its('response')
-      .then((response) => {
-        expect(response?.statusCode).to.eql(204);
+      cy.clickTab(/^Execution environments$/, true);
+      cy.filterTableBySingleSelect('name', execEnvName);
+      cy.clickTableRowKebabAction(execEnvName, 'delete-execution-environment', false);
+      cy.clickModalConfirmCheckbox();
+      cy.intercept('DELETE', awxAPI`/execution_environments/*/`).as('deleteEE');
+      cy.clickModalButton('Delete execution environments');
+      cy.wait('@deleteEE')
+        .its('response')
+        .then((response) => {
+          expect(response?.statusCode).to.eql(204);
+        });
+      cy.getModal().within(() => {
+        cy.contains('Permanently delete execution environments');
+        cy.contains(execEnvName);
       });
-    cy.getModal().within(() => {
-      cy.contains('Permanently delete execution environments');
-      cy.contains(execEnvName);
+      cy.assertModalSuccess();
+      cy.clickModalButton('Close');
     });
-    cy.assertModalSuccess();
-    cy.clickModalButton('Close');
-  });
-
-  it('can create a new EE associated to a particular org, assign admin access to a user in that org, and login as that user to assert access to the EE', () => {
-    cy.getByDataCy('create-execution-environment').click();
-    cy.getByDataCy('name').type(execEnvName);
-    cy.getByDataCy('image').type(image);
-    cy.singleSelectByDataCy('organization', organization.name);
-    cy.clickButton(/^Create execution environment$/);
-    cy.hasDetail('Name', execEnvName);
-    cy.hasDetail('Image', image);
-    cy.hasDetail('Organization', organization.name);
-    cy.navigateTo('awx', 'execution-environments');
-    cy.verifyPageTitle('Execution Environments');
 
-    cy.awxLoginTestUser(user.username, 'pw');
-
-    cy.navigateTo('awx', 'execution-environments');
-    cy.verifyPageTitle('Execution Environments');
-    cy.filterTableBySingleSelect('name', execEnvName);
-    cy.clickTableRowLink('name', execEnvName, { disableFilter: true });
-    cy.hasDetail('Name', execEnvName);
-    cy.hasDetail('Image', image);
-    cy.hasDetail('Organization', organization.name);
-
-    cy.getByDataCy('actions-dropdown')
-      .click()
-      .then(() => {
-        cy.get('[data-cy="delete-execution-environment"]').should(
-          'have.attr',
-          'aria-disabled',
-          'true'
-        );
-      });
+    it.skip('can create a new EE associated to a particular org, assign admin access to a user in that org, and login as that user to assert access to the EE', () => {
+      cy.getByDataCy('create-execution-environment').click();
+      cy.getByDataCy('name').type(execEnvName);
+      cy.getByDataCy('image').type(image);
+      cy.singleSelectByDataCy('organization', awxOrganization.name);
+      cy.clickButton(/^Create execution environment$/);
+      cy.hasDetail('Name', execEnvName);
+      cy.hasDetail('Image', image);
+      cy.hasDetail('Organization', awxOrganization.name);
+      cy.navigateTo('awx', 'execution-environments');
+      cy.verifyPageTitle('Execution Environments');
+      cy.awxLoginTestUser(user.username, 'pw');
+      cy.navigateTo('awx', 'execution-environments');
+      cy.verifyPageTitle('Execution Environments');
+      cy.filterTableBySingleSelect('name', execEnvName);
+      cy.clickTableRowLink('name', execEnvName, { disableFilter: true });
+      cy.hasDetail('Name', execEnvName);
+      cy.hasDetail('Image', image);
+      cy.hasDetail('Organization', awxOrganization.name);
+      cy.getByDataCy('actions-dropdown')
+        .click()
+        .then(() => {
+          cy.get('[data-cy="delete-execution-environment"]').should(
+            'have.attr',
+            'aria-disabled',
+            'true'
+          );
+        });
+    });
   });
-});
 
-describe('Execution Environments: Edit and Bulk delete', () => {
-  let organization: Organization;
-  let executionEnvironment: ExecutionEnvironment;
-  const testSignature: string = randomString(5, undefined, { isLowercase: true });
-  function generateExecEnvName(): string {
-    return `test-${testSignature}-ExecEnv-${randomString(5, undefined, { isLowercase: true })}`;
-  }
+  describe('Execution Environments: Edit and Bulk delete', () => {
+    let executionEnvironment: ExecutionEnvironment;
+    const testSignature: string = randomString(5, undefined, { isLowercase: true });
+    function generateExecEnvName(): string {
+      return `test-${testSignature}-ExecEnv-${randomString(5, undefined, { isLowercase: true })}`;
+    }
 
-  beforeEach(() => {
-    cy.createAwxOrganization().then((o) => {
-      organization = o;
+    beforeEach(() => {
       cy.createAwxExecutionEnvironment({
-        organization: organization.id,
+        organization: awxOrganization.id,
       }).then((ee) => {
         executionEnvironment = ee;
       });
-    });
-
-    cy.navigateTo('awx', 'execution-environments');
-    cy.verifyPageTitle('Execution Environments');
-  });
 
-  afterEach(() => {
-    cy.deleteAwxExecutionEnvironment(executionEnvironment, { failOnStatusCode: false });
-    cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
-  });
+      cy.navigateTo('awx', 'execution-environments');
+      cy.verifyPageTitle('Execution Environments');
+    });
 
-  it('can edit an EE from the details view and assert edited information on details page', () => {
-    cy.filterTableBySingleSelect('name', executionEnvironment.name);
-    cy.clickTableRowLink('name', executionEnvironment.name, { disableFilter: true });
-    cy.verifyPageTitle(executionEnvironment.name);
-    cy.getByDataCy('edit-execution-environment').click();
-    cy.verifyPageTitle('Edit Execution Environment');
-    cy.url().then((currentUrl) => {
-      expect(
-        currentUrl.includes(
-          `/infrastructure/execution-environments/${executionEnvironment.id.toString()}/edit`
-        )
-      ).to.be.true;
+    afterEach(() => {
+      cy.deleteAwxExecutionEnvironment(executionEnvironment, { failOnStatusCode: false });
     });
-    cy.intercept(
-      'PATCH',
-      awxAPI`/execution_environments/${executionEnvironment.id.toString()}/`
-    ).as('editEE');
 
-    cy.getByDataCy('name').type('-edited');
-    cy.getByDataCy('Submit').click();
-    cy.wait('@editEE')
-      .its('response.statusCode')
-      .then((statusCode) => {
-        expect(statusCode).to.eql(200);
+    it('can edit an EE from the details view and assert edited information on details page', () => {
+      cy.filterTableBySingleSelect('name', executionEnvironment.name);
+      cy.clickTableRowLink('name', executionEnvironment.name, { disableFilter: true });
+      cy.verifyPageTitle(executionEnvironment.name);
+      cy.getByDataCy('edit-execution-environment').click();
+      cy.verifyPageTitle('Edit Execution Environment');
+      cy.url().then((currentUrl) => {
+        expect(
+          currentUrl.includes(
+            `/infrastructure/execution-environments/${executionEnvironment.id.toString()}/edit`
+          )
+        ).to.be.true;
       });
-    cy.verifyPageTitle(executionEnvironment.name + '-edited');
-    cy.hasDetail('Name', executionEnvironment.name + '-edited');
-    cy.hasDetail('Image', 'executionenvimage');
-    cy.hasDetail('Organization', organization.name);
-  });
-
-  it('can edit an EE from the list view and assert edited information', () => {
-    cy.filterTableBySingleSelect('name', executionEnvironment.name);
-    cy.clickTableRowAction('name', executionEnvironment.name, 'edit-execution-environment', {
-      inKebab: false,
-      disableFilter: true,
-    });
-    cy.verifyPageTitle('Edit Execution Environment');
-    cy.url().then((currentUrl) => {
-      expect(
-        currentUrl.includes(
-          `/infrastructure/execution-environments/${executionEnvironment.id.toString()}/edit`
-        )
-      ).to.be.true;
+      cy.intercept(
+        'PATCH',
+        awxAPI`/execution_environments/${executionEnvironment.id.toString()}/`
+      ).as('editEE');
+      cy.getByDataCy('name').type('-edited');
+      cy.getByDataCy('Submit').click();
+      cy.wait('@editEE')
+        .its('response.statusCode')
+        .then((statusCode) => {
+          expect(statusCode).to.eql(200);
+        });
+      cy.verifyPageTitle(executionEnvironment.name + '-edited');
+      cy.hasDetail('Name', executionEnvironment.name + '-edited');
+      cy.hasDetail('Image', 'executionenvimage');
+      cy.hasDetail('Organization', awxOrganization.name);
     });
-    cy.intercept(
-      'PATCH',
-      awxAPI`/execution_environments/${executionEnvironment.id.toString()}/`
-    ).as('editEE');
 
-    cy.getByDataCy('name').type('-edited');
-    cy.getByDataCy('Submit').click();
-    cy.wait('@editEE')
-      .its('response.statusCode')
-      .then((statusCode) => {
-        expect(statusCode).to.eql(200);
+    it('can edit an EE from the list view and assert edited information', () => {
+      cy.filterTableBySingleSelect('name', executionEnvironment.name);
+      cy.clickTableRowAction('name', executionEnvironment.name, 'edit-execution-environment', {
+        inKebab: false,
+        disableFilter: true,
       });
-    cy.verifyPageTitle(executionEnvironment.name + '-edited');
-    cy.hasDetail('Name', executionEnvironment.name + '-edited');
-    cy.hasDetail('Image', 'executionenvimage');
-    cy.hasDetail('Organization', organization.name);
-  });
-
-  it('can bulk delete multiple EEs from the list view and assert deletion', () => {
-    const arrayOfElementText: string[] = [];
-    for (let i = 0; i < 5; i++) {
-      const execEnvName = generateExecEnvName();
-      cy.createAwxExecutionEnvironment({
-        organization: organization.id,
-        name: execEnvName,
+      cy.verifyPageTitle('Edit Execution Environment');
+      cy.url().then((currentUrl) => {
+        expect(
+          currentUrl.includes(
+            `/infrastructure/execution-environments/${executionEnvironment.id.toString()}/edit`
+          )
+        ).to.be.true;
       });
-      arrayOfElementText.push(execEnvName);
-    }
-    cy.filterTableByMultiSelect('name', arrayOfElementText);
-    cy.get('tbody tr').should('have.length', 5);
-    cy.getByDataCy('select-all').click();
-    cy.clickToolbarKebabAction('delete-selected-execution-environments');
-    cy.clickModalConfirmCheckbox();
-    cy.intercept('DELETE', awxAPI`/execution_environments/*/`).as('deleteEE');
-    cy.clickModalButton('Delete execution environments');
-    cy.wait('@deleteEE')
-      .its('response')
-      .then((response) => {
-        expect(response?.statusCode).to.eql(204);
+      cy.intercept(
+        'PATCH',
+        awxAPI`/execution_environments/${executionEnvironment.id.toString()}/`
+      ).as('editEE');
+      cy.getByDataCy('name').type('-edited');
+      cy.getByDataCy('Submit').click();
+      cy.wait('@editEE')
+        .its('response.statusCode')
+        .then((statusCode) => {
+          expect(statusCode).to.eql(200);
+        });
+      cy.verifyPageTitle(executionEnvironment.name + '-edited');
+      cy.hasDetail('Name', executionEnvironment.name + '-edited');
+      cy.hasDetail('Image', 'executionenvimage');
+      cy.hasDetail('Organization', awxOrganization.name);
+    });
+
+    it('can bulk delete multiple EEs from the list view and assert deletion', () => {
+      const arrayOfElementText: string[] = [];
+      for (let i = 0; i < 5; i++) {
+        const execEnvName = generateExecEnvName();
+        cy.createAwxExecutionEnvironment({
+          organization: awxOrganization.id,
+          name: execEnvName,
+        });
+        arrayOfElementText.push(execEnvName);
+      }
+      cy.filterTableByMultiSelect('name', arrayOfElementText);
+      cy.get('tbody tr').should('have.length', 5);
+      cy.getByDataCy('select-all').click();
+      cy.clickToolbarKebabAction('delete-selected-execution-environments');
+      cy.clickModalConfirmCheckbox();
+      cy.intercept('DELETE', awxAPI`/execution_environments/*/`).as('deleteEE');
+      cy.clickModalButton('Delete execution environments');
+      cy.wait('@deleteEE')
+        .its('response')
+        .then((response) => {
+          expect(response?.statusCode).to.eql(204);
+        });
+      cy.getModal().within(() => {
+        cy.contains('Permanently delete execution environments');
+        cy.contains(arrayOfElementText[0]);
+        cy.contains(arrayOfElementText[1]);
       });
-    cy.getModal().within(() => {
-      cy.contains('Permanently delete execution environments');
-      cy.contains(arrayOfElementText[0]);
-      cy.contains(arrayOfElementText[1]);
+      cy.assertModalSuccess();
+      cy.clickModalButton('Close');
     });
-    cy.assertModalSuccess();
-    cy.clickModalButton('Close');
   });
-});
 
-describe('Execution Environments: Templates View', () => {
-  let inventory: Inventory;
-  let organization: Organization;
+  describe('Execution Environments: Templates View', () => {
+    let inventory: Inventory;
 
-  beforeEach(() => {
-    cy.createAwxOrganization().then((o) => {
-      organization = o;
-      cy.createAwxInventory({ organization: organization.id }).then((inv) => {
+    beforeEach(() => {
+      cy.createAwxInventory(awxOrganization).then((inv) => {
         inventory = inv;
       });
+      cy.navigateTo('awx', 'execution-environments');
+      cy.verifyPageTitle('Execution Environments');
     });
 
-    cy.navigateTo('awx', 'execution-environments');
-    cy.verifyPageTitle('Execution Environments');
-  });
-
-  afterEach(() => {
-    cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
-    cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
-  });
-
-  it('can create a new JT using the existing EE, visit the templates tab of the EE to view the JT, delete the JT and then delete the EE', function () {
-    const jtName = 'E2E Job Template EE ' + randomString(4);
-    const execEnvName = 'E2E Execution Environment JT ' + randomString(4);
-    const image = 'quay.io/ansible/awx-ee:latest';
+    afterEach(() => {
+      cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
+    });
 
-    cy.getByDataCy('create-execution-environment').click();
-    cy.getByDataCy('name').type(execEnvName);
-    cy.getByDataCy('image').type(image);
-    cy.singleSelectByDataCy('organization', organization.name);
-    cy.intercept('POST', awxAPI`/execution_environments/`).as('createEE');
-    cy.clickButton(/^Create execution environment$/);
-    cy.wait('@createEE')
-      .then((response) => {
-        expect(response?.response?.statusCode).to.eql(201);
-      })
-      .its('response.body')
-      .then((response: ExecutionEnvironment) => {
-        cy.hasDetail('Name', execEnvName);
-        cy.hasDetail('Image', image);
-        cy.hasDetail('Organization', organization.name);
-        cy.url().then((currentUrl) => {
-          expect(
-            currentUrl.includes(
-              `/infrastructure/execution-environments/${response.id.toString()}/details`
-            )
-          ).to.be.true;
+    it('can create a new JT using the existing EE, visit the templates tab of the EE to view the JT, delete the JT and then delete the EE', function () {
+      const jtName = 'E2E Job Template EE ' + randomString(4);
+      const execEnvName = 'E2E Execution Environment JT ' + randomString(4);
+      const image = 'quay.io/ansible/awx-ee:latest';
+      cy.getByDataCy('create-execution-environment').click();
+      cy.getByDataCy('name').type(execEnvName);
+      cy.getByDataCy('image').type(image);
+      cy.singleSelectByDataCy('organization', awxOrganization.name);
+      cy.intercept('POST', awxAPI`/execution_environments/`).as('createEE');
+      cy.clickButton(/^Create execution environment$/);
+      cy.wait('@createEE')
+        .then((response) => {
+          expect(response?.response?.statusCode).to.eql(201);
+        })
+        .its('response.body')
+        .then((response: ExecutionEnvironment) => {
+          cy.hasDetail('Name', execEnvName);
+          cy.hasDetail('Image', image);
+          cy.hasDetail('Organization', awxOrganization.name);
+          cy.url().then((currentUrl) => {
+            expect(
+              currentUrl.includes(
+                `/infrastructure/execution-environments/${response.id.toString()}/details`
+              )
+            ).to.be.true;
+          });
         });
+      cy.navigateTo('awx', 'templates');
+      cy.verifyPageTitle('Templates');
+      cy.getByDataCy('create-template').click();
+      cy.clickLink(/^Create job template$/);
+      cy.getByDataCy('name').type(jtName);
+      cy.selectDropdownOptionByResourceName('inventory', inventory.name);
+      cy.selectDropdownOptionByResourceName('project', `${project.name}`);
+      cy.selectDropdownOptionByResourceName('playbook', 'hello_world.yml');
+      cy.singleSelectBy('[data-cy="executionEnvironment"]', execEnvName);
+      cy.intercept('POST', awxAPI`/job_templates/`).as('createJT');
+      cy.getByDataCy('Submit').click();
+      cy.wait('@createJT')
+        .its('response')
+        .then((response) => {
+          expect(response?.statusCode).to.eql(201);
+        });
+      cy.verifyPageTitle(jtName);
+      cy.getByDataCy('name').should('contain', jtName);
+      cy.getByDataCy('inventory').should('contain', inventory.name);
+      cy.getByDataCy('execution-environment').should('contain', execEnvName);
+      cy.clickLink(execEnvName);
+      cy.verifyPageTitle(execEnvName);
+      cy.getByDataCy('name').should('contain', execEnvName);
+      cy.getByDataCy('image').should('contain', image);
+      cy.clickTab(/^Templates$/, true);
+      cy.filterTableBySingleSelect('name', jtName);
+      cy.clickTableRowKebabAction(jtName, 'delete-template', false);
+      cy.clickModalConfirmCheckbox();
+      cy.intercept('DELETE', awxAPI`/job_templates/*/`).as('deleteJT');
+      cy.clickModalButton('Delete template');
+      cy.wait('@deleteJT')
+        .its('response')
+        .then((response) => {
+          expect(response?.statusCode).to.eql(204);
+        });
+      cy.getModal().within(() => {
+        cy.contains('Permanently delete job template');
+        cy.contains(jtName);
       });
-
-    cy.navigateTo('awx', 'templates');
-    cy.verifyPageTitle('Templates');
-
-    cy.getByDataCy('create-template').click();
-    cy.clickLink(/^Create job template$/);
-    cy.getByDataCy('name').type(jtName);
-    cy.selectDropdownOptionByResourceName('inventory', inventory.name);
-    cy.selectDropdownOptionByResourceName('project', `${(this.globalProject as Project).name}`);
-    cy.selectDropdownOptionByResourceName('playbook', 'hello_world.yml');
-    cy.singleSelectBy('[data-cy="executionEnvironment"]', execEnvName);
-
-    cy.intercept('POST', awxAPI`/job_templates/`).as('createJT');
-    cy.getByDataCy('Submit').click();
-    cy.wait('@createJT')
-      .its('response')
-      .then((response) => {
-        expect(response?.statusCode).to.eql(201);
-      });
-    cy.verifyPageTitle(jtName);
-    cy.getByDataCy('name').should('contain', jtName);
-    cy.getByDataCy('inventory').should('contain', inventory.name);
-    cy.getByDataCy('execution-environment').should('contain', execEnvName);
-    cy.clickLink(execEnvName);
-    cy.verifyPageTitle(execEnvName);
-
-    cy.getByDataCy('name').should('contain', execEnvName);
-    cy.getByDataCy('image').should('contain', image);
-    cy.clickTab(/^Templates$/, true);
-    cy.filterTableBySingleSelect('name', jtName);
-    cy.clickTableRowKebabAction(jtName, 'delete-template', false);
-    cy.clickModalConfirmCheckbox();
-    cy.intercept('DELETE', awxAPI`/job_templates/*/`).as('deleteJT');
-    cy.clickModalButton('Delete template');
-    cy.wait('@deleteJT')
-      .its('response')
-      .then((response) => {
-        expect(response?.statusCode).to.eql(204);
-      });
-    cy.getModal().within(() => {
-      cy.contains('Permanently delete job template');
-      cy.contains(jtName);
+      cy.assertModalSuccess();
+      cy.clickModalButton('Close');
+      cy.clickTab(/^Details$/, true);
+      cy.getByDataCy('actions-dropdown')
+        .click()
+        .then(() => {
+          cy.getByDataCy('delete-execution-environment').click();
+        });
+      cy.clickModalConfirmCheckbox();
+      cy.intercept('DELETE', awxAPI`/execution_environments/*/`).as('deleteEE');
+      cy.clickModalButton('Delete execution environments');
+      cy.wait('@deleteEE')
+        .its('response')
+        .then((response) => {
+          expect(response?.statusCode).to.eql(204);
+        });
     });
-    cy.assertModalSuccess();
-    cy.clickModalButton('Close');
-
-    cy.clickTab(/^Details$/, true);
-    cy.getByDataCy('actions-dropdown')
-      .click()
-      .then(() => {
-        cy.getByDataCy('delete-execution-environment').click();
-      });
-    cy.clickModalConfirmCheckbox();
-    cy.intercept('DELETE', awxAPI`/execution_environments/*/`).as('deleteEE');
-    cy.clickModalButton('Delete execution environments');
-    cy.wait('@deleteEE')
-      .its('response')
-      .then((response) => {
-        expect(response?.statusCode).to.eql(204);
-      });
   });
 });
 
@@ -438,9 +429,9 @@ describe('Execution Environments: User/Team access', () => {
 
   after(() => {
     cy.deleteAwxExecutionEnvironment(execEnv, { failOnStatusCode: false });
-    cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
     cy.deleteAwxUser(user, { failOnStatusCode: false });
     cy.deleteAwxTeam(team, { failOnStatusCode: false });
+    cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
   });
 
   it('Add a user role assignment from the User Access tab', () => {
diff --git a/cypress/e2e/awx/resources/hosts.cy.ts b/cypress/e2e/awx/resources/hosts.cy.ts
index 078c39558..3d0b12bce 100644
--- a/cypress/e2e/awx/resources/hosts.cy.ts
+++ b/cypress/e2e/awx/resources/hosts.cy.ts
@@ -17,10 +17,10 @@ describe('Host Tests', () => {
   before(() => {
     cy.createAwxOrganization().then((org) => {
       organization = org;
-      cy.createAwxInventory({ organization: organization.id }).then((inv) => {
+      cy.createAwxInventory(organization).then((inv) => {
         inventory = inv;
       });
-      cy.createAwxProject({ organization: organization.id }).then((proj) => {
+      cy.createAwxProject(organization).then((proj) => {
         project = proj;
       });
     });
diff --git a/cypress/e2e/awx/resources/inventories.cy.ts b/cypress/e2e/awx/resources/inventories.cy.ts
index 9477a999e..6701b4bae 100644
--- a/cypress/e2e/awx/resources/inventories.cy.ts
+++ b/cypress/e2e/awx/resources/inventories.cy.ts
@@ -26,7 +26,7 @@ describe('Inventories Tests', () => {
             cy.createAwxLabel({ organization: organization.id }).then((lbl) => {
               label = lbl;
             });
-            cy.createAwxInventory({ organization: organization.id }).then((inv) => {
+            cy.createAwxInventory(organization).then((inv) => {
               //the cy.createAwxInventory() custom command needs to be updated to accept the
               //'kind' parameter, in order to work with the conditional in this spec file
               inventory = inv;
@@ -170,9 +170,9 @@ describe('Inventories Tests', () => {
           //.......the delete call and asserting the expected statusCode from the API (probably a 204)
 
           cy.createAwxOrganization().then((org) => {
-            cy.createAwxInventory({ organization: org.id }).then((inv1) => {
-              cy.createAwxInventory({ organization: org.id }).then((inv2) => {
-                cy.createAwxInventory({ organization: org.id }).then((inv3) => {
+            cy.createAwxInventory(organization).then((inv1) => {
+              cy.createAwxInventory(organization).then((inv2) => {
+                cy.createAwxInventory(organization).then((inv3) => {
                   cy.navigateTo('awx', 'inventories');
 
                   cy.intercept(
diff --git a/cypress/e2e/awx/resources/inventoriesConstructed.cy.ts b/cypress/e2e/awx/resources/inventoriesConstructed.cy.ts
index c1d15a20c..270588291 100644
--- a/cypress/e2e/awx/resources/inventoriesConstructed.cy.ts
+++ b/cypress/e2e/awx/resources/inventoriesConstructed.cy.ts
@@ -28,7 +28,7 @@ describe('Constructed Inventories CRUD Tests', () => {
     inventoriesList = [];
     invNames = [];
     for (let i = 0; i < invToCreate; i++) {
-      cy.createAwxInventory({ organization: organization.id }).then((inv) => {
+      cy.createAwxInventory(organization).then((inv) => {
         inventoriesList.push(inv);
       });
     }
diff --git a/cypress/e2e/awx/resources/inventoryGroup.cy.ts b/cypress/e2e/awx/resources/inventoryGroup.cy.ts
index b55994a3b..793f89994 100644
--- a/cypress/e2e/awx/resources/inventoryGroup.cy.ts
+++ b/cypress/e2e/awx/resources/inventoryGroup.cy.ts
@@ -1,10 +1,10 @@
-import { randomString } from '../../../../framework/utils/random-string';
 import { awxAPI } from '../../../support/formatApiPathForAwx';
 import { AwxHost } from '../../../../frontend/awx/interfaces/AwxHost';
 import { Credential } from '../../../../frontend/awx/interfaces/Credential';
 import { ExecutionEnvironment } from '../../../../frontend/awx/interfaces/ExecutionEnvironment';
 import { Inventory } from '../../../../frontend/awx/interfaces/Inventory';
 import { Organization } from '../../../../frontend/awx/interfaces/Organization';
+import { randomString } from '../../../../framework/utils/random-string';
 
 describe('Inventory Groups', () => {
   let organization: Organization;
@@ -40,18 +40,22 @@ describe('Inventory Groups', () => {
 
   describe('Inventory Groups - List View', () => {
     it('can create a group, assert info on details page, then delete group from the list view', () => {
-      cy.createAwxInventory().then((inv) => {
+      cy.createAwxInventory(organization).then((inv) => {
         inventory = inv;
         const newGroupName = 'E2E Group ' + randomString(4);
-        cy.intercept('POST', awxAPI`/groups/`).as('createGroup');
-        cy.visit(`/infrastructure/inventories/inventory/${inventory.id}/groups?`);
+        cy.navigateTo('awx', 'inventories');
+        cy.filterTableBySingleSelect('name', inventory.name);
+        cy.clickTableRowLink('name', inventory.name, { disableFilter: true });
+        cy.verifyPageTitle(inventory.name);
+        cy.get(`a[href*="/groups?"]`).click();
         cy.clickButton(/^Create group$/);
         cy.verifyPageTitle('Create new group');
         cy.get('[data-cy="name"]').type(newGroupName);
         cy.get('[data-cy="description"]').type('This is a description');
         cy.dataEditorTypeByDataCy('variables', 'test: true');
+        cy.intercept('POST', awxAPI`/groups/`).as('created');
         cy.clickButton(/^Save/);
-        cy.wait('@createGroup')
+        cy.wait('@created')
           .its('response.statusCode')
           .then((statusCode) => {
             expect(statusCode).to.eql(201);
@@ -79,7 +83,6 @@ describe('Inventory Groups', () => {
           'contain',
           'There are currently no groups added to this inventory.'
         );
-
         cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
       });
     });
@@ -87,12 +90,11 @@ describe('Inventory Groups', () => {
     it('can edit an inventory group from the groups list view', () => {
       cy.createInventoryHostGroup(organization).then((result) => {
         const { inventory, host, group } = result;
-
         cy.navigateTo('awx', 'inventories');
         cy.filterTableBySingleSelect('name', inventory.name);
         cy.clickTableRowLink('name', inventory.name, { disableFilter: true });
         cy.verifyPageTitle(inventory.name);
-        cy.get(`[href*="/infrastructure/inventories/inventory/${inventory.id}/hosts?"]`).click();
+        cy.get(`a[href*="/hosts?"]`).click();
         cy.getByDataCy('name-column-cell').should('contain', host.name);
         cy.clickTab(/^Groups$/, true);
         cy.filterTableByMultiSelect('name', [group.name]);
@@ -101,7 +103,6 @@ describe('Inventory Groups', () => {
         cy.get('[data-cy="name-form-group"]').type('-changed');
         cy.get('[data-cy="Submit"]').click();
         cy.verifyPageTitle(group.name + '-changed');
-
         cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
       });
     });
@@ -180,9 +181,8 @@ describe('Inventory Groups', () => {
 
     it('can bulk delete groups from the group list view', () => {
       const arrayOfElementText: string[] = [];
-      cy.createAwxInventory().then((inv) => {
+      cy.createAwxInventory(organization).then((inv) => {
         inventory = inv;
-
         for (let i = 0; i < 5; i++) {
           const groupName = generateGroupName();
           cy.createInventoryGroup(inventory, groupName);
@@ -201,7 +201,6 @@ describe('Inventory Groups', () => {
           cy.get('[data-cy="delete-groups-dialog-radio-delete"]').click();
           cy.get('[data-cy="delete-group-modal-delete-button"]').click();
         });
-
         cy.wait('@deleted')
           .its('response')
           .then((response) => {
@@ -216,16 +215,20 @@ describe('Inventory Groups', () => {
 
   describe('Inventory Groups - Details View', () => {
     it('can create a group, assert info on details page, then delete group from the details page', () => {
-      cy.createAwxInventory().then((inv) => {
+      cy.createAwxInventory(organization).then((inv) => {
         inventory = inv;
         const newGroupName = 'E2E Group ' + randomString(4);
-        cy.intercept('POST', awxAPI`/groups/`).as('createGroup');
-        cy.visit(`/infrastructure/inventories/inventory/${inventory.id}/groups?`);
+        cy.navigateTo('awx', 'inventories');
+        cy.filterTableBySingleSelect('name', inventory.name);
+        cy.clickTableRowLink('name', inventory.name, { disableFilter: true });
+        cy.verifyPageTitle(inventory.name);
+        cy.get(`a[href*="/groups?"]`).click();
         cy.clickButton(/^Create group$/);
         cy.verifyPageTitle('Create new group');
         cy.get('[data-cy="name"]').type(newGroupName);
         cy.get('[data-cy="description"]').type('This is a description');
         cy.dataEditorTypeByDataCy('variables', 'test: true');
+        cy.intercept('POST', awxAPI`/groups/`).as('createGroup');
         cy.clickButton(/^Save/);
         cy.wait('@createGroup')
           .its('response.statusCode')
@@ -249,7 +252,6 @@ describe('Inventory Groups', () => {
           .then((response) => {
             expect(response?.statusCode).to.eql(204);
           });
-
         cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
       });
     });
@@ -321,7 +323,6 @@ describe('Inventory Groups', () => {
         cy.assertModalSuccess();
         cy.clickModalButton(/^Close/);
         cy.clickButton(/^Clear all filters$/);
-
         cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
       });
     });
@@ -381,7 +382,6 @@ describe('Inventory Groups', () => {
           });
         cy.assertModalSuccess();
         cy.clickModalButton(/^Close/);
-
         cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
       });
     });
@@ -412,9 +412,7 @@ describe('Inventory Groups', () => {
         cy.intercept('POST', awxAPI`/groups/*/children/`).as('disassociateGroup');
         cy.clickToolbarKebabAction('run-command');
         cy.clickKebabAction('actions-dropdown', 'run-command');
-
         cy.selectDropdownOptionByResourceName('module-name', 'shell');
-
         cy.clickModalConfirmCheckbox();
         cy.clickButton(/^Disassociate groups/);
         cy.wait('@disassociateGroup')
@@ -425,7 +423,6 @@ describe('Inventory Groups', () => {
         cy.assertModalSuccess();
         cy.clickModalButton(/^Close/);
         cy.clickButton(/^Clear all filters$/);
-
         cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
       });
     });
@@ -467,10 +464,8 @@ describe('Inventory Groups', () => {
         .then((response) => {
           expect(response?.statusCode).to.eql(204);
         });
-
       cy.assertModalSuccess();
       cy.clickModalButton(/^Close/);
-
       cy.intercept('POST', awxAPI`/hosts/`).as('createHost');
       cy.clickButton(/^Create host$/);
       cy.verifyPageTitle('Create Host');
@@ -501,7 +496,6 @@ describe('Inventory Groups', () => {
       cy.getByDataCy('name').type('-edited');
       cy.getByDataCy('description').type('This is the description');
       cy.clickButton(/^Save host$/);
-
       cy.wait('@editHost')
         .its('response')
         .then((response) => {
@@ -513,6 +507,7 @@ describe('Inventory Groups', () => {
     });
 
     it.skip("can run an ad-hoc command against a group's host", () => {
+      //unskip this test when below issue is resolved
       cy.filterTableBySingleSelect('name', thisInventory.name);
       cy.clickTableRowLink('name', thisInventory.name, { disableFilter: true });
       cy.verifyPageTitle(thisInventory.name);
diff --git a/cypress/e2e/awx/resources/inventoryHost/inventoryHostConstructed.cy.ts b/cypress/e2e/awx/resources/inventoryHost/inventoryHostConstructed.cy.ts
index 721975de1..929a2cbdc 100644
--- a/cypress/e2e/awx/resources/inventoryHost/inventoryHostConstructed.cy.ts
+++ b/cypress/e2e/awx/resources/inventoryHost/inventoryHostConstructed.cy.ts
@@ -109,7 +109,7 @@ describe('Inventory Host Tab Tests for contructed inventory', () => {
     //1) Use inventory and host
     //2) create a job template that uses that inventory, launch the job template, wait for job to finish
     //3) Navigate back to inventory -> host tab -> jobs tab -> assert presence of job in that list
-    cy.createAwxProject({ organization: organization.id }).then((project) => {
+    cy.createAwxProject(organization).then((project) => {
       cy.createInventoryHost(organization, 'constructed').then((result) => {
         launchHostJob(result.inventory, result.host, organization.id, project.id, 'InventoryHost');
         cy.deleteAwxInventory(result.inventory, { failOnStatusCode: false });
diff --git a/cypress/e2e/awx/resources/inventoryHost/inventoryHostRegular.cy.ts b/cypress/e2e/awx/resources/inventoryHost/inventoryHostRegular.cy.ts
index a72143930..6391d044e 100644
--- a/cypress/e2e/awx/resources/inventoryHost/inventoryHostRegular.cy.ts
+++ b/cypress/e2e/awx/resources/inventoryHost/inventoryHostRegular.cy.ts
@@ -1,12 +1,11 @@
-import { randomString } from '../../../../../framework/utils/random-string';
+import { awxAPI } from '../../../../support/formatApiPathForAwx';
 import { Inventory } from '../../../../../frontend/awx/interfaces/Inventory';
 import { Organization } from '../../../../../frontend/awx/interfaces/Organization';
 import { Project } from '../../../../../frontend/awx/interfaces/Project';
 import { AwxUser } from '../../../../../frontend/awx/interfaces/User';
 import { launchHostJob } from '../../../../support/hostsfunctions';
 import { runCommand } from './runCommandFunction';
-
-import { awxAPI } from '../../../../support/formatApiPathForAwx';
+import { randomString } from '../../../../../framework/utils/random-string';
 import {
   checkFactsInHost,
   checkHostGroup,
@@ -25,10 +24,10 @@ describe('Inventory Host Tab Tests for regular inventory', () => {
   before(() => {
     cy.createAwxOrganization().then((org) => {
       organization = org;
-      cy.createAwxInventory({ organization: organization.id }).then((inv) => {
+      cy.createAwxInventory(organization).then((inv) => {
         inventory = inv;
       });
-      cy.createAwxProject({ organization: organization.id }).then((proj) => {
+      cy.createAwxProject(organization).then((proj) => {
         project = proj;
       });
       cy.createAwxUser({ organization: organization.id }).then((testUser) => {
@@ -44,39 +43,22 @@ describe('Inventory Host Tab Tests for regular inventory', () => {
   });
 
   it('can create, edit, assosiat and disassosiate groups at inventory -> hosts -> groups tab', () => {
-    // use checkHostGroup function in order to test inventory host group
-    // the test is checking: create, verify, multi assosiate and disassosiate of groups (using bluk)
-    // and single assosiate and disassosiate of group, edit and delete
     checkHostGroup('inventory_host', organization);
   });
 
   it('can create, edit and delete inventory host action from list view', () => {
-    // use createAndEditAndDeleteHost function in order to test inventory hosts basic functions
-    // after navigating to the right url
-    // the test covers create, verify, edit and delete of hosts form inventory
     createAndEditAndDeleteHost('inventory_host', inventory, 'list');
   });
 
   it('can edit and delete inventory host action from details view', () => {
-    //can and delete host from details view
     createAndEditAndDeleteHost('inventory_host', inventory, 'details');
   });
 
   it('can bulk delete multiple hosts from the hosts tab of an inventory', () => {
-    //1) Use the inventory , access the host tab of that inventory
-    //2) Create 2 hosts in this test for the purpose of delete
-    //3) Verify 2 hosts exists in inventory
-    //4) Bulk delete hosts from list view using select all option
-    //5) Verify no hosts exists in inventory
     testHostBulkDelete('inventory_host', inventory);
   });
 
   it("can view a host's facts on the facts tab of a host inside an inventory", () => {
-    //1) Use the inventory, access the host tab of that inventory
-    //2) Visit the host details page, then navigate to the host Facts tab
-    //3) Assert that no facts are showing
-    //4) Create a JT designed to populate the facts for the host, launch the job template
-    //5) Navigate back to the facts tab of that host and assert that the facts exist
     checkFactsInHost(inventory, 'inventory_host');
   });
 
@@ -84,7 +66,7 @@ describe('Inventory Host Tab Tests for regular inventory', () => {
     //1) Use inventory and host
     //2) create a job template that uses that inventory, launch the job template, wait for job to finish
     //3) Navigate back to inventory -> host tab -> jobs tab -> assert presence of job in that list
-    cy.createAwxProject({ organization: organization.id }).then((project) => {
+    cy.createAwxProject(organization).then((project) => {
       cy.createInventoryHost(organization, '').then((result) => {
         launchHostJob(result.inventory, result.host, organization.id, project.id, 'InventoryHost');
         cy.deleteAwxInventory(result.inventory, { failOnStatusCode: false });
@@ -94,32 +76,18 @@ describe('Inventory Host Tab Tests for regular inventory', () => {
   });
 
   it('can cancel a currently running job from the host jobs tab inside an inventory', () => {
-    //1) Use the inventory and host
-    //2) create a job template that uses that inventory, utilize a playbook that will cause the job to be long running
-    //3) Launch the job template
-    //4) Navigate back to inventory -> host tab -> jobs tab -> assert presence of job in that list
-    //5) Cancel the job and assert that it has been canceled
     createHostAndCancelJob(inventory, organization.id, project.id, true);
   });
 
   it(`can run an ad-hoc command against a host on the inventory hosts tab`, () => {
-    //1) Use the inventory created in before, access the host tab of that inventory
-    //2) Use a host, EE, and credential - these resources are needed to run a command against a host
-    //3) Assert redirect to the job output screen
-    //4) Navigate to the details page of the job and assert the values there match what was entered in the Run Command Wizard
-    //5) Navigate back to the Inventory -> Jobs Tab to assert that the Run Command job shows up there
     createHost('inventory_host', inventory.id);
-
     cy.navigateTo('awx', 'inventories');
     cy.intercept('get', awxAPI`/inventories/?name=${inventory.name}*`).as('getInventories');
     cy.filterTableByMultiSelect('name', [inventory.name]);
     cy.wait('@getInventories');
-
     cy.contains('a', inventory.name).click();
     cy.contains(`a[role="tab"]`, 'Hosts').click();
-
     cy.getByDataCy('run-command').click();
-
     runCommand({
       selections: 'all',
       module: 'shell',
@@ -132,37 +100,24 @@ describe('Inventory Host Tab Tests for regular inventory', () => {
   });
 
   it('can run an ad-hoc command against the host on the groups tab of a host-inventory from the host details page', () => {
-    //1) Use the inventory created in before, access the host tab of that inventory, visit the host details page
-    //2) Use a host, EE, and credential - these resources are needed to run a command against a host
-    //3) Assert redirect to the job output screen
-    //4) Navigate to the details page of the job and assert the values there match what was entered in the Run Command Wizard
-    //5) Navigate back to the Inventory -> Jobs Tab to assert that the Run Command job shows up there
-
     createHost('inventory_host', inventory.id);
     const groupName = 'E2E group ' + randomString(4);
     cy.createInventoryGroup(inventory, groupName);
     cy.log(`inv: ${inventory.name}, group: ${groupName}`);
-
     cy.navigateTo('awx', 'inventories');
-
     cy.intercept('get', awxAPI`/inventories/?name=${inventory.name}*`).as('getInventories');
     cy.filterTableByMultiSelect('name', [inventory.name]);
     cy.wait('@getInventories');
-
     cy.contains('a', inventory.name).click();
-
     cy.contains(`a[role="tab"]`, 'Groups').click();
     cy.reload();
     cy.contains('a', groupName).click();
-
     cy.contains(`a[role="tab"]`, 'Hosts').click();
     // add existing host
     cy.getByDataCy('add-existing-host').click();
     cy.getByDataCy('select-all').click();
     cy.clickModalButton('Add hosts');
-
     cy.getByDataCy('run-command').click();
-
     runCommand({
       selections: 'all',
       module: 'shell',
diff --git a/cypress/e2e/awx/resources/inventoryHost/inventoryHostSmart.cy.ts b/cypress/e2e/awx/resources/inventoryHost/inventoryHostSmart.cy.ts
index 0ff26e86a..98a153a4a 100644
--- a/cypress/e2e/awx/resources/inventoryHost/inventoryHostSmart.cy.ts
+++ b/cypress/e2e/awx/resources/inventoryHost/inventoryHostSmart.cy.ts
@@ -76,7 +76,7 @@ describe('Inventory Host Tab Tests for smart inventory', () => {
     //1) Use inventory and host
     //2) create a job template that uses that inventory, launch the job template, wait for job to finish
     //3) Navigate back to inventory -> host tab -> jobs tab -> assert presence of job in that list
-    cy.createAwxProject({ organization: organization.id }).then((project) => {
+    cy.createAwxProject(organization).then((project) => {
       cy.createInventoryHost(organization, 'smart').then((result) => {
         launchHostJob(result.inventory, result.host, organization.id, project.id, 'InventoryHost');
         cy.deleteAwxInventory(result.inventory, { failOnStatusCode: false });
diff --git a/cypress/e2e/awx/resources/inventorySource.cy.ts b/cypress/e2e/awx/resources/inventorySource.cy.ts
index 651bdf7ae..b96d88b0d 100644
--- a/cypress/e2e/awx/resources/inventorySource.cy.ts
+++ b/cypress/e2e/awx/resources/inventorySource.cy.ts
@@ -9,20 +9,20 @@ import { Project } from '../../../../frontend/awx/interfaces/Project';
 import { Schedule } from '../../../../frontend/awx/interfaces/Schedule';
 import { awxAPI } from '../../../support/formatApiPathForAwx';
 
-describe('Inventory Sources', () => {
+describe.skip('Inventory Sources', () => {
   const scheduleName = 'e2e-' + randomString(4);
 
-  let organization: Organization;
   let project: Project;
   let inventory: Inventory;
   let inventorySource: InventorySource;
+  let organization: Organization;
 
   beforeEach(function () {
     cy.createAwxOrganization().then(function (org) {
       organization = org;
-      cy.createAwxInventory({ organization: organization.id }).then((inv) => {
+      cy.createAwxInventory(organization).then((inv) => {
         inventory = inv;
-        cy.createAwxProject({ organization: organization.id }).then((proj) => {
+        cy.createAwxProject(organization).then((proj) => {
           project = proj;
           cy.createAwxInventorySource(inv, project).then((invSrc) => {
             inventorySource = invSrc;
@@ -59,7 +59,6 @@ describe('Inventory Sources', () => {
     it('inventory source tab - user can create an inventory and create a source from a project', () => {
       const credentialName = 'e2e-' + randomString(4);
       const executionEnvironmentName = 'e2e-' + randomString(4);
-
       let credential: Credential;
       let executionEnvironment: ExecutionEnvironment;
 
@@ -72,9 +71,7 @@ describe('Inventory Sources', () => {
           credential_type: 9,
         }).then((cred) => {
           credential = cred;
-
           goToSourceList(inventory.name);
-
           cy.clickButton(/^Add source/);
           cy.verifyPageTitle('Add new source');
           cy.getBy('[data-cy="name"]').type('project source');
@@ -125,7 +122,6 @@ describe('Inventory Sources', () => {
 
     it('can access the Edit form of an existing Source from the list view, update info, and verify the presence of edited info on the details page', () => {
       goToSourceList(inventory.name);
-
       cy.clickTableRowAction('name', inventorySource.name, 'edit-inventory-source', {
         disableFilter: true,
       });
@@ -194,6 +190,84 @@ describe('Inventory Sources', () => {
   });
 
   describe('Inventory Source Schedules List Page', () => {
+    it('can navigate to the Create Schedules form, create a new Schedule, verify schedule is enabled, and verify all expected information is showing on the details page', () => {
+      cy.navigateTo('awx', 'inventories');
+      cy.filterTableBySingleSelect('name', inventory.name);
+      cy.clickTableRowLink('name', inventory.name, { disableFilter: true });
+      cy.verifyPageTitle(inventory.name);
+      cy.clickLink(/^Sources$/);
+      cy.getByDataCy('name-column-cell')
+        .should('contain', inventorySource.name)
+        .within(() => {
+          cy.clickLink(inventorySource.name);
+        });
+      cy.clickTab('Schedules', true);
+      cy.clickButton('Create schedule');
+      cy.get('[data-cy="wizard-nav"]').within(() => {
+        ['Details', 'Rules', 'Exceptions', 'Review'].forEach((text, index) => {
+          cy.get('li')
+            .eq(index)
+            .should((el) => expect(el.text().trim()).to.equal(text));
+        });
+      });
+      cy.getByDataCy('name').clear().type('new schedule');
+      cy.clickButton(/^Next$/);
+      cy.clickButton(/^Save rule$/);
+      cy.clickButton(/^Next$/);
+      cy.clickButton(/^Next$/);
+      cy.clickButton(/^Finish$/);
+      cy.verifyPageTitle('new schedule');
+      cy.get('.pf-v5-c-switch__label.pf-m-on')
+        .should('have.text', 'Schedule enabled')
+        .should('be.visible');
+      cy.getByDataCy('name').should('contain', 'new schedule');
+      cy.getByDataCy('next-run').should('exist');
+      cy.getByDataCy('first-run').should('exist');
+      cy.getByDataCy('time-zone').should('contain', 'America/New_York');
+    });
+
+    it("can access the Edit form of an existing Schedule, update information, and verify the presence of the edited information on the schedule's details page", () => {
+      cy.createAWXSchedule({
+        name: scheduleName,
+        unified_job_template: inventorySource.id,
+        rrule: 'DTSTART:20240415T124133Z RRULE:FREQ=WEEKLY;INTERVAL=1;BYDAY=SU',
+      }).then((schedule1: Schedule) => {
+        cy.navigateTo('awx', 'inventories');
+        cy.filterTableBySingleSelect('name', inventory.name);
+        cy.clickTableRowLink('name', inventory.name, { disableFilter: true });
+        cy.verifyPageTitle(inventory.name);
+        cy.clickLink(/^Sources$/);
+        cy.getByDataCy('name-column-cell')
+          .should('contain', inventorySource.name)
+          .within(() => {
+            cy.clickLink(inventorySource.name);
+          });
+        cy.clickTab('Schedules', true);
+        cy.clickTableRowAction('name', scheduleName, 'edit-schedule', {
+          disableFilter: true,
+        });
+        cy.intercept('PATCH', awxAPI`/schedules/${schedule1.id.toString()}/`).as('editSchedule');
+        cy.getByDataCy('description').should('be.empty');
+        cy.getByDataCy('description').type('mock description');
+        cy.getByDataCy('timezone').should('contain', schedule1.timezone);
+        cy.singleSelectByDataCy('timezone', 'America/New_York');
+        cy.clickButton(/^Next$/);
+        cy.clickButton(/^Next$/);
+        cy.clickButton(/^Next$/);
+        cy.clickButton(/^Finish$/);
+        cy.wait('@editSchedule')
+          .then((response) => {
+            expect(response?.response?.statusCode).to.eql(200);
+          })
+          .its('response.body')
+          .then((response: Schedule) => {
+            expect(response.name).contains(scheduleName);
+            expect(response.description).contains('mock description');
+            expect(response.timezone).contains('America/New_York');
+          });
+      });
+    });
+
     it('can delete a single schedule from the Source Schedule list and confirm delete', () => {
       cy.createAWXSchedule({
         name: scheduleName,
@@ -201,7 +275,6 @@ describe('Inventory Sources', () => {
         rrule: 'DTSTART:20240415T124133Z RRULE:FREQ=WEEKLY;INTERVAL=1;BYDAY=SU',
       }).then((schedule1: Schedule) => {
         goToSourceDetails(inventory.name, inventorySource.name);
-
         cy.clickTab('Schedules', true);
         cy.clickTableRowKebabAction(scheduleName, 'delete-schedule', false);
         cy.intercept('DELETE', awxAPI`/schedules/${schedule1.id.toString()}/`).as('deleteSchedule');
@@ -220,9 +293,11 @@ describe('Inventory Sources', () => {
     let notification: NotificationTemplate;
 
     beforeEach(() => {
-      cy.createNotificationTemplate('e2e-' + randomString(4)).then((notificationTemplate) => {
-        notification = notificationTemplate;
-      });
+      cy.createNotificationTemplate('e2e-' + randomString(4), organization).then(
+        (notificationTemplate) => {
+          notification = notificationTemplate;
+        }
+      );
     });
 
     afterEach(() => {
@@ -231,7 +306,6 @@ describe('Inventory Sources', () => {
 
     it('can visit the Notifications tab of an Inventory Source and enable a notification upon Start', () => {
       goToSourceDetails(inventory.name, inventorySource.name);
-
       cy.clickTab('Notifications', true);
       cy.intercept(
         'POST',
@@ -268,7 +342,6 @@ describe('Inventory Sources', () => {
 
     it('can visit the Notifications tab of an Inventory Source and enable a notification upon Failure', () => {
       goToSourceDetails(inventory.name, inventorySource.name);
-
       cy.clickTab('Notifications', true);
       cy.intercept(
         'POST',
diff --git a/cypress/e2e/awx/resources/jobTemplateSurveys.cy.ts b/cypress/e2e/awx/resources/jobTemplateSurveys.cy.ts
index 497e59cef..6e708d76c 100644
--- a/cypress/e2e/awx/resources/jobTemplateSurveys.cy.ts
+++ b/cypress/e2e/awx/resources/jobTemplateSurveys.cy.ts
@@ -4,13 +4,27 @@ import { Organization } from '../../../../frontend/awx/interfaces/Organization';
 import { Project } from '../../../../frontend/awx/interfaces/Project';
 import { ReusableTemplateSurveyTestSuite } from './sharedTemplateSurvey';
 
-describe('Job Templates Surveys', function () {
+describe.skip('Job Templates Surveys', function () {
   let inventory: Inventory;
   let jobTemplate: JobTemplate;
-  let organization: Organization;
+  let awxOrganization: Organization;
   let project: Project;
   let reusableTemplateSurveyTestSuite: ReusableTemplateSurveyTestSuite;
 
+  before(() => {
+    cy.createAwxOrganization().then((org) => {
+      awxOrganization = org;
+      cy.createAwxProject(awxOrganization).then((proj) => {
+        project = proj;
+      });
+    });
+  });
+
+  after(() => {
+    cy.deleteAwxProject(project, { failOnStatusCode: false });
+    cy.deleteAwxOrganization(awxOrganization, { failOnStatusCode: false });
+  });
+
   describe('JT Surveys: Create, Edit and Delete', function () {
     const question = {
       question_name: "Who's that?",
@@ -25,26 +39,12 @@ describe('Job Templates Surveys', function () {
       choices: [],
     };
 
-    before(function () {
-      cy.createAwxOrganization().then((org) => {
-        organization = org;
-        cy.createAwxProject({ organization: organization.id }).then((proj) => {
-          project = proj;
-        });
-      });
-    });
-
-    after(() => {
-      cy.deleteAwxProject(project, { failOnStatusCode: false });
-      cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
-    });
-
     beforeEach(() => {
-      cy.createAwxInventory({ organization: organization.id }).then((inv) => {
+      cy.createAwxInventory(awxOrganization).then((inv) => {
         inventory = inv;
 
         cy.createAwxJobTemplate({
-          organization: organization.id,
+          organization: awxOrganization.id,
           project: project.id,
           inventory: inventory.id,
         }).then((jT) => {
@@ -73,26 +73,12 @@ describe('Job Templates Surveys', function () {
   });
 
   describe('JT Surveys: Launch JT with Survey Enabled', function () {
-    before(() => {
-      cy.createAwxOrganization().then((org) => {
-        organization = org;
-        cy.createAwxProject({ organization: organization.id }).then((proj) => {
-          project = proj;
-        });
-      });
-    });
-
-    after(() => {
-      cy.deleteAwxProject(project, { failOnStatusCode: false });
-      cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
-    });
-
     beforeEach(() => {
-      cy.createAwxInventory({ organization: organization.id }).then((inv) => {
+      cy.createAwxInventory(awxOrganization).then((inv) => {
         inventory = inv;
 
         cy.createAwxJobTemplate({
-          organization: organization.id,
+          organization: awxOrganization.id,
           project: project.id,
           inventory: inventory.id,
         }).then((jt) => {
@@ -124,11 +110,9 @@ describe('Job Templates Surveys', function () {
         cy.createTemplateSurvey(jobTemplate, 'Text', question);
         reusableTemplateSurveyTestSuite.canEnableSurvey(question);
         const groupType = reusableTemplateSurveyTestSuite.canLaunchSurvey(question);
-
         cy.getByDataCy(groupType)
           .getByDataCy(`survey-${question.type.toLowerCase()}-answer`)
           .should('have.value', question.default);
-
         reusableTemplateSurveyTestSuite.canFinishSurvey(question);
       });
 
@@ -148,11 +132,9 @@ describe('Job Templates Surveys', function () {
         cy.createTemplateSurvey(jobTemplate, 'Textarea', question);
         reusableTemplateSurveyTestSuite.canEnableSurvey(question);
         const groupType = reusableTemplateSurveyTestSuite.canLaunchSurvey(question);
-
         cy.getByDataCy(groupType)
           .getByDataCy(`survey-${question.type.toLowerCase()}-answer`)
           .should('have.value', question.default);
-
         reusableTemplateSurveyTestSuite.canFinishSurvey(question);
       });
 
@@ -172,11 +154,9 @@ describe('Job Templates Surveys', function () {
         cy.createTemplateSurvey(jobTemplate, 'Password', question);
         reusableTemplateSurveyTestSuite.canEnableSurvey(question);
         const groupType = reusableTemplateSurveyTestSuite.canLaunchSurvey(question);
-
         cy.getByDataCy(groupType)
           .getByDataCy(`survey-${question.type.toLowerCase()}-answer`)
           .should('have.value', '$encrypted$');
-
         reusableTemplateSurveyTestSuite.canFinishSurvey(question);
       });
 
@@ -196,11 +176,9 @@ describe('Job Templates Surveys', function () {
         cy.createTemplateSurvey(jobTemplate, 'Integer', question);
         reusableTemplateSurveyTestSuite.canEnableSurvey(question);
         const groupType = reusableTemplateSurveyTestSuite.canLaunchSurvey(question);
-
         cy.getByDataCy(groupType)
           .getByDataCy(`survey-${question.type.toLowerCase()}-answer`)
           .should('have.value', question.default);
-
         reusableTemplateSurveyTestSuite.canFinishSurvey(question);
       });
 
@@ -220,11 +198,9 @@ describe('Job Templates Surveys', function () {
         cy.createTemplateSurvey(jobTemplate, 'Float', question);
         reusableTemplateSurveyTestSuite.canEnableSurvey(question);
         const groupType = reusableTemplateSurveyTestSuite.canLaunchSurvey(question);
-
         cy.getByDataCy(groupType)
           .getByDataCy(`survey-${question.type.toLowerCase()}-answer`)
           .should('have.value', question.default);
-
         reusableTemplateSurveyTestSuite.canFinishSurvey(question);
       });
 
@@ -244,7 +220,6 @@ describe('Job Templates Surveys', function () {
         cy.createTemplateSurvey(jobTemplate, 'Multiple Choice (single select)', question);
         reusableTemplateSurveyTestSuite.canEnableSurvey(question);
         const groupType = reusableTemplateSurveyTestSuite.canLaunchSurvey(question);
-
         cy.getByDataCy(groupType).within(() => {
           cy.contains(question.default);
           cy.get('div[data-ouia-component-id="menu-select"]').click();
@@ -252,7 +227,6 @@ describe('Job Templates Surveys', function () {
             cy.getByDataCy('survey-multiplechoice-answer').contains(choice);
           });
         });
-
         reusableTemplateSurveyTestSuite.canFinishSurvey(question);
       });
 
@@ -272,7 +246,6 @@ describe('Job Templates Surveys', function () {
         cy.createTemplateSurvey(jobTemplate, 'Multiple Choice (multiple select)', question);
         reusableTemplateSurveyTestSuite.canEnableSurvey(question);
         const groupType = reusableTemplateSurveyTestSuite.canLaunchSurvey(question);
-
         cy.getByDataCy(groupType).within(() => {
           const defaults = question.default.toString().split('\n');
           defaults.forEach((defaultValue) => {
@@ -280,13 +253,11 @@ describe('Job Templates Surveys', function () {
           });
           cy.get('#survey-multiselect-answer').click();
         });
-
         cy.get('#survey-multiselect-answer-select').within(() => {
           question?.choices?.forEach((choice) => {
             cy.getByDataCy(choice);
           });
         });
-
         reusableTemplateSurveyTestSuite.canFinishSurvey(question);
       });
     });
diff --git a/cypress/e2e/awx/resources/jobTemplates.cy.ts b/cypress/e2e/awx/resources/jobTemplates.cy.ts
index c1be54f59..4fca727d1 100644
--- a/cypress/e2e/awx/resources/jobTemplates.cy.ts
+++ b/cypress/e2e/awx/resources/jobTemplates.cy.ts
@@ -9,7 +9,24 @@ import { Project } from '../../../../frontend/awx/interfaces/Project';
 import { awxAPI } from '../../../support/formatApiPathForAwx';
 import { randomE2Ename } from '../../../support/utils';
 
-describe('Job Templates Tests', function () {
+describe.skip('Job Templates Tests', function () {
+  let awxOrganization: Organization;
+  let project: Project;
+
+  before(function () {
+    cy.createAwxOrganization().then((thisAwxOrg) => {
+      awxOrganization = thisAwxOrg;
+      cy.createAwxProject(awxOrganization).then((proj) => {
+        project = proj;
+      });
+    });
+  });
+
+  after(function () {
+    cy.deleteAwxProject(project, { failOnStatusCode: false });
+    cy.deleteAwxOrganization(awxOrganization, { failOnStatusCode: false });
+  });
+
   describe('Job Templates Tests: Create', function () {
     let inventory: Inventory;
     let inventoryWithHost: Inventory;
@@ -20,14 +37,11 @@ describe('Job Templates Tests', function () {
     const instanceGroup = 'default';
 
     beforeEach(function () {
-      cy.createAwxInventory({
-        organization: (this.globalAwxOrganization as Organization).id,
-      }).then((inv) => {
+      cy.createAwxInventory(awxOrganization).then((inv) => {
         inventory = inv;
-
         cy.createAWXCredential({
           kind: 'machine',
-          organization: (this.globalAwxOrganization as Organization).id,
+          organization: awxOrganization.id,
           credential_type: 1,
         }).then((cred) => {
           machineCredential = cred;
@@ -54,7 +68,7 @@ describe('Job Templates Tests', function () {
       cy.getBy('[data-cy="name"]').type(jtName);
       cy.getBy('[data-cy="description"]').type('This is a JT description');
       cy.selectDropdownOptionByResourceName('inventory', inventory.name);
-      cy.selectDropdownOptionByResourceName('project', `${(this.globalProject as Project).name}`);
+      cy.selectDropdownOptionByResourceName('project', `${project.name}`);
       cy.selectDropdownOptionByResourceName('playbook', 'hello_world.yml');
       cy.getBy('[data-cy="Submit"]').click();
       cy.wait('@createJT')
@@ -92,11 +106,10 @@ describe('Job Templates Tests', function () {
 
     it('can create a job template that inherits the execution environment from the project', function () {
       cy.createAwxExecutionEnvironment({
-        organization: (this.globalAwxOrganization as Organization).id,
+        organization: awxOrganization.id,
       }).then((ee: ExecutionEnvironment) => {
         executionEnvironment = ee;
-        cy.createAwxProject({
-          organization: (this.globalAwxOrganization as Organization).id,
+        cy.createAwxProject(awxOrganization, {
           default_environment: ee.id,
         }).then((proj: Project) => {
           project = proj;
@@ -112,7 +125,6 @@ describe('Job Templates Tests', function () {
           cy.selectDropdownOptionByResourceName('playbook', 'hello_world.yml');
           cy.getBy('[data-cy="Submit"]').click();
           cy.wait('@createJT');
-
           cy.getByDataCy('execution-environment').contains(ee.name);
           cy.getByDataCy('project').contains(proj.name);
         });
@@ -128,7 +140,7 @@ describe('Job Templates Tests', function () {
       cy.getBy('[data-cy="name"]').type(jtName);
       cy.getBy('[data-cy="description"]').type('This is a JT with POL wizard description');
       cy.selectPromptOnLaunch('inventory');
-      cy.selectDropdownOptionByResourceName('project', `${(this.globalProject as Project).name}`);
+      cy.selectDropdownOptionByResourceName('project', `${project.name}`);
       cy.selectDropdownOptionByResourceName('playbook', 'hello_world.yml');
       cy.selectPromptOnLaunch('execution_environment');
       cy.selectPromptOnLaunch('credential');
@@ -203,7 +215,7 @@ describe('Job Templates Tests', function () {
       cy.getBy('[data-cy="name"]').type(jtName);
       cy.getBy('[data-cy="description"]').type('This is a JT with POL wizard description');
       cy.selectPromptOnLaunch('inventory');
-      cy.selectDropdownOptionByResourceName('project', `${(this.globalProject as Project).name}`);
+      cy.selectDropdownOptionByResourceName('project', `${project.name}`);
       cy.selectDropdownOptionByResourceName('playbook', 'hello_world.yml');
       cy.selectPromptOnLaunch('execution_environment');
       cy.selectPromptOnLaunch('credential');
@@ -265,56 +277,49 @@ describe('Job Templates Tests', function () {
         });
     });
 
-    it('can create a job template, select concurrent jobs, and verify that two jobs will run concurrently', function () {
+    it('can create a job template, select concurrent jobs, launch the job template two times and verify that both jobs appear in the table', function () {
       const jtName = 'E2E Concurrent JT ' + randomString(4);
-      cy.createAwxProject({
-        organization: (this.globalAwxOrganization as Organization).id,
-        scm_type: 'git',
-        scm_url: 'https://github.com/ansible/test-playbooks',
-      }).then((gitProject: Project) => {
-        cy.createInventoryHost(this.globalAwxOrganization as Organization, '').then(
-          (inventoryHost) => {
-            const { inventory } = inventoryHost;
-            inventoryWithHost = inventory;
-
-            cy.visit('/templates/job-template/create');
-            cy.getByDataCy('name').type(jtName);
-            cy.selectDropdownOptionByResourceName('inventory', inventory.name);
-            cy.selectDropdownOptionByResourceName('project', gitProject.name);
-            cy.selectDropdownOptionByResourceName('playbook', 'debug-loop.yml');
-            cy.getByDataCy('allow_simultaneous').click();
-            cy.clickButton('Create job template');
-
-            cy.intercept('POST', awxAPI`/job_templates/*/launch/`).as('launchTemplate');
-            cy.clickButton('Launch template');
-
-            cy.wait('@launchTemplate')
-              .its('response.body')
-              .then(({ id: jobId, name }: { id: number; name: string }) => {
-                cy.url().should('contain', `/jobs/playbook/${jobId}/output`);
-                cy.contains('Running');
-                cy.contains(jtName);
-
-                cy.intercept('POST', awxAPI`/jobs/${jobId.toString()}/relaunch/`).as('relaunchJob');
-                cy.getByDataCy('relaunch-job').click();
-                cy.wait('@relaunchJob')
-                  .its('response.body')
-                  .then(({ id: jobId2, name: name2 }: { id: number; name: string }) => {
-                    cy.url().should('contain', `/jobs/playbook/${jobId2}/output`);
-                    cy.contains('Running');
-                    cy.contains(jtName);
-
-                    cy.visit('/jobs');
-
-                    cy.filterTableBySingleSelect('name', name);
-                    cy.contains('Running');
-
-                    cy.filterTableBySingleSelect('name', name2);
-                    cy.contains('Running');
+      cy.createAwxProject(
+        awxOrganization,
+        { name: randomE2Ename() },
+        'https://github.com/ansible/test-playbooks'
+      ).then((gitProject: Project) => {
+        cy.createInventoryHost(awxOrganization, '').then((inventoryHost) => {
+          const { inventory } = inventoryHost;
+          inventoryWithHost = inventory;
+          cy.navigateTo('awx', 'templates');
+          cy.getBy('[data-cy="create-template"]').click();
+          cy.clickLink(/^Create job template$/);
+          cy.getByDataCy('name').type(jtName);
+          cy.selectDropdownOptionByResourceName('inventory', inventory.name);
+          cy.selectDropdownOptionByResourceName('project', gitProject.name);
+          cy.selectDropdownOptionByResourceName('playbook', 'debug-loop.yml');
+          cy.getByDataCy('allow_simultaneous').click();
+          cy.clickButton('Create job template');
+          cy.intercept('POST', awxAPI`/job_templates/*/launch/`).as('launchTemplate');
+          cy.clickButton('Launch template');
+          cy.wait('@launchTemplate')
+            .its('response.body')
+            .then(({ id: jobId, name }: { id: number; name: string }) => {
+              cy.url().should('contain', `/jobs/playbook/${jobId}/output`);
+              cy.contains('Running');
+              cy.contains(jtName);
+              cy.intercept('POST', awxAPI`/jobs/${jobId.toString()}/relaunch/`).as('relaunchJob');
+              cy.getByDataCy('relaunch-job').click();
+              cy.wait('@relaunchJob')
+                .its('response.body')
+                .then(({ id: jobId2, name: name2 }: { id: number; name: string }) => {
+                  cy.url().should('contain', `/jobs/playbook/${jobId2}/output`);
+                  cy.contains('Running');
+                  cy.contains(jtName);
+                  cy.navigateTo('awx', 'jobs');
+                  cy.filterTableByMultiSelect('name', [name, name2]);
+                  cy.contains('Running').each(($element) => {
+                    cy.wrap($element).should('be.visible');
                   });
-              });
-          }
-        );
+                });
+            });
+        });
       });
     });
   });
@@ -327,21 +332,17 @@ describe('Job Templates Tests', function () {
     let jobTemplate: JobTemplate;
 
     beforeEach(function () {
-      cy.createAwxInventory({
-        organization: (this.globalAwxOrganization as Organization).id,
-      }).then((inv) => {
+      cy.createAwxInventory(awxOrganization).then((inv) => {
         inventory = inv;
-
         cy.createAWXCredential({
           kind: 'machine',
-          organization: (this.globalAwxOrganization as Organization).id,
+          organization: awxOrganization.id,
           credential_type: 1,
         }).then((cred) => {
           machineCredential = cred;
-
           cy.createAwxJobTemplate({
-            organization: (this.globalAwxOrganization as Organization).id,
-            project: (this.globalProject as Project).id,
+            organization: awxOrganization.id,
+            project: project.id,
             inventory: inventory.id,
           }).then((jt1) => {
             jobTemplate = jt1;
@@ -387,123 +388,105 @@ describe('Job Templates Tests', function () {
     });
 
     it('can assign a new inventory to a job template if the originally assigned inventory was deleted', function () {
-      cy.createAwxInventory({ organization: (this.globalAwxOrganization as Organization).id }).then(
-        (inv) => {
-          inventory2 = inv;
-
-          cy.visit(`templates/job-template/${jobTemplate.id}/details`);
-          cy.contains(jobTemplate.name);
-          cy.getByDataCy('inventory').contains(jobTemplate.summary_fields.inventory.name).click();
-
-          cy.clickKebabAction('actions-dropdown', 'delete-inventory');
-          cy.clickModalConfirmCheckbox();
-          cy.intercept('DELETE', awxAPI`/inventories/${inventory.id.toString()}/`).as(
-            'deleteInventory'
-          );
-          cy.clickModalButton('Delete inventory');
-          cy.wait('@deleteInventory');
-
-          cy.visit(`templates/job-template/${jobTemplate.id}/details`);
-          cy.contains(jobTemplate.name);
-          cy.getByDataCy('inventory').contains('Deleted');
-          cy.clickLink('Edit template');
-
-          cy.selectDropdownOptionByResourceName('inventory', inv.name);
-          cy.intercept('PATCH', awxAPI`/job_templates/${jobTemplate.id.toString()}/`).as('saveJT');
-          cy.clickButton('Save job template');
-          cy.wait('@saveJT');
-
-          cy.contains(inv.name);
-        }
-      );
+      cy.createAwxInventory(awxOrganization).then((inv) => {
+        inventory2 = inv;
+        cy.navigateTo('awx', 'templates');
+        cy.filterTableByMultiSelect('name', [jobTemplate.name]);
+        cy.clickTableRowLink('name', jobTemplate.name, {
+          disableFilter: true,
+        });
+        cy.verifyPageTitle(jobTemplate.name);
+        cy.getByDataCy('inventory').contains(jobTemplate.summary_fields.inventory.name).click();
+        cy.clickKebabAction('actions-dropdown', 'delete-inventory');
+        cy.clickModalConfirmCheckbox();
+        cy.intercept('DELETE', awxAPI`/inventories/${inventory.id.toString()}/`).as(
+          'deleteInventory'
+        );
+        cy.clickModalButton('Delete inventory');
+        cy.wait('@deleteInventory');
+        cy.navigateTo('awx', 'templates');
+        cy.filterTableByMultiSelect('name', [jobTemplate.name]);
+        cy.clickTableRowLink('name', jobTemplate.name, {
+          disableFilter: true,
+        });
+        cy.verifyPageTitle(jobTemplate.name);
+        cy.getByDataCy('inventory').contains('Deleted');
+        cy.clickLink('Edit template');
+        cy.selectDropdownOptionByResourceName('inventory', inv.name);
+        cy.intercept('PATCH', awxAPI`/job_templates/${jobTemplate.id.toString()}/`).as('saveJT');
+        cy.clickButton('Save job template');
+        cy.wait('@saveJT');
+        cy.contains(inv.name).should('be.visible');
+      });
     });
 
     it('can edit a job template to enable provisioning callback and enable webhook, then edit again to disable those options', function () {
       const jtURL = document.location.origin + awxAPI`/job_templates/${jobTemplate.id.toString()}`;
-
-      cy.visit(`templates/job-template/${jobTemplate.id}/details`);
+      cy.navigateTo('awx', 'templates');
+      cy.filterTableByMultiSelect('name', [jobTemplate.name]);
+      cy.clickTableRowLink('name', jobTemplate.name, { disableFilter: true });
       cy.get('[data-cy="enabled-options"]').should('not.exist');
       cy.clickLink('Edit template');
-
       cy.getByDataCy('isWebhookEnabled').should('not.be.checked');
       cy.getByDataCy('isProvisioningCallbackEnabled').should('not.be.checked');
-
       // Enable webhook
       cy.getByDataCy('isWebhookEnabled').click();
       cy.getByDataCy('isWebhookEnabled').should('be.checked');
-
       cy.get('[data-cy="related-webhook-receiver"]').should('have.value', '');
-
       cy.selectDropdownOptionByResourceName('webhook-service', 'GitLab');
       cy.getByDataCy('related-webhook-receiver').should('have.attr', 'readonly');
-
       cy.getByDataCy('related-webhook-receiver').should('have.value', `${jtURL}/gitlab/`);
-
       cy.selectDropdownOptionByResourceName('webhook-service', 'GitHub');
-
       cy.getByDataCy('related-webhook-receiver').should('have.value', `${jtURL}/github/`);
-
       cy.getByDataCy('related-webhook-receiver').should('have.attr', 'readonly');
       cy.getByDataCy('webhook-key').should(
         'have.value',
         'A NEW WEBHOOK KEY WILL BE GENERATED ON SAVE.'
       );
-
       cy.intercept('PATCH', awxAPI`/job_templates/${jobTemplate.id.toString()}/`).as('editJT');
       cy.clickButton('Save job template');
       cy.wait('@editJT');
-
       cy.getByDataCy('enabled-options').contains('Webhooks');
-
       cy.clickLink('Edit template');
       cy.getByDataCy('isWebhookEnabled').should('be.checked');
-
       cy.getByDataCy('webhook-service-form-group').contains('GitHub');
       cy.getByDataCy('related-webhook-receiver').should('have.value', `${jtURL}/github/`);
       cy.getByDataCy('webhook-key').should(
         'not.have.value',
         'A NEW WEBHOOK KEY WILL BE GENERATED ON SAVE.'
       );
-
       cy.getByDataCy('isWebhookEnabled').click();
       cy.getByDataCy('isWebhookEnabled').should('not.be.checked');
       cy.contains('Webhook details').should('not.exist');
-
       cy.getByDataCy('isWebhookEnabled').click();
       cy.getByDataCy('isWebhookEnabled').should('be.checked');
       cy.getByDataCy('webhook-service-form-group').contains('GitHub');
       cy.getByDataCy('related-webhook-receiver').should('have.value', `${jtURL}/github/`);
-
       // Enable provisioning callback
       cy.getByDataCy('isProvisioningCallbackEnabled').click();
       cy.contains('Provisioning callback details');
       cy.getByDataCy('host-config-key').type('foobar');
       cy.clickButton('Save job template');
       cy.getByDataCy('enabled-options').contains('Provisioning Callbacks');
-
       cy.clickLink('Edit template');
       cy.getByDataCy('isProvisioningCallbackEnabled').should('be.checked');
       cy.get('[data-cy="host-config-key"]').should('have.value', 'foobar');
-
       cy.get('[data-cy="related-callback"]').should('have.attr', 'disabled');
       cy.get('[data-cy="related-callback"]').should('have.value', `${jtURL}/callback/`);
-
       cy.getByDataCy('isProvisioningCallbackEnabled').click();
       cy.getByDataCy('isProvisioningCallbackEnabled').should('not.be.checked');
       cy.clickButton('Save job template');
-
       cy.getByDataCy('enabled-options').contains('Provisioning Callbacks').should('not.exist');
     });
 
     it('can edit a job template to enable webhook, regenerate webhook key and set webhook credentials', function () {
       cy.createAWXCredential({
         kind: 'github_token',
-        organization: (this.globalAwxOrganization as Organization).id,
+        organization: awxOrganization.id,
         credential_type: 11,
       }).then((ghCred) => {
         githubCredential = ghCred;
         let webhookKey: string;
-
         cy.navigateTo('awx', 'templates');
         cy.verifyPageTitle('Templates');
         cy.filterTableByMultiSelect('name', [jobTemplate.name]);
@@ -511,28 +494,23 @@ describe('Job Templates Tests', function () {
           inKebab: false,
           disableFilter: true,
         });
-
         cy.getByDataCy('isWebhookEnabled').click();
         cy.selectDropdownOptionByResourceName('webhook-service', 'GitHub');
         cy.singleSelectByDataCy('webhook_credential', ghCred.name);
         cy.clickButton('Save job template');
         cy.contains('Webhook credential');
         cy.getByDataCy('webhook-credential').contains(ghCred.name);
-
         cy.intercept('GET', awxAPI`/job_templates/${jobTemplate.id.toString()}/webhook_key/`).as(
           'getWebhookKey'
         );
         cy.clickLink('Edit template');
-
         cy.wait('@getWebhookKey')
           .its('response.body.webhook_key')
           .then((webhook_key: string) => {
             webhookKey = webhook_key;
             cy.getByDataCy('webhook_credential').should('have.text', ghCred.name);
-
             cy.getByDataCy('webhook-service-form-group').contains('GitHub');
             cy.getByDataCy('webhook-key').should('have.value', webhookKey);
-
             cy.intercept(
               'POST',
               awxAPI`/job_templates/${jobTemplate.id.toString()}/webhook_key/`
@@ -544,7 +522,6 @@ describe('Job Templates Tests', function () {
               .its('response.body.webhook_key')
               .then((webhook_key: string) => {
                 webhookKey = webhook_key;
-
                 cy.intercept('PATCH', awxAPI`/job_templates/${jobTemplate.id.toString()}/`).as(
                   'saveJT'
                 );
@@ -585,19 +562,16 @@ describe('Job Templates Tests', function () {
     let jobTemplate: JobTemplate;
 
     beforeEach(function () {
-      cy.createAwxInventory({ organization: (this.globalAwxOrganization as Organization).id }).then(
-        (inv) => {
-          inventory = inv;
-
-          cy.createAwxJobTemplate({
-            organization: (this.globalAwxOrganization as Organization).id,
-            project: (this.globalProject as Project).id,
-            inventory: inventory.id,
-          }).then((jt) => {
-            jobTemplate = jt;
-          });
-        }
-      );
+      cy.createAwxInventory(awxOrganization).then((inv) => {
+        inventory = inv;
+        cy.createAwxJobTemplate({
+          organization: awxOrganization.id,
+          project: project.id,
+          inventory: inventory.id,
+        }).then((jt) => {
+          jobTemplate = jt;
+        });
+      });
     });
 
     afterEach(function () {
@@ -606,7 +580,7 @@ describe('Job Templates Tests', function () {
     });
 
     it('can copy an existing job template from the list', function () {
-      cy.visit('/templates');
+      cy.navigateTo('awx', 'templates');
       cy.filterTableBySingleSelect('name', jobTemplate.name);
       cy.intercept('POST', awxAPI`/job_templates/${jobTemplate.id.toString()}/copy/`).as(
         'copyTemplate'
@@ -624,7 +598,12 @@ describe('Job Templates Tests', function () {
     });
 
     it('can copy an existing job template from the details page', function () {
-      cy.visit(`/templates/job-template/${jobTemplate.id.toString()}/details`);
+      cy.navigateTo('awx', 'templates');
+      cy.filterTableByMultiSelect('name', [jobTemplate.name]);
+      cy.clickTableRowLink('name', jobTemplate.name, {
+        disableFilter: true,
+      });
+      cy.verifyPageTitle(jobTemplate.name);
       cy.intercept('POST', awxAPI`/job_templates/${jobTemplate.id.toString()}/copy/`).as(
         'copyTemplate'
       );
@@ -632,9 +611,13 @@ describe('Job Templates Tests', function () {
       cy.getByDataCy('alert-toaster').contains(`${jobTemplate.name} copied.`);
       cy.wait('@copyTemplate')
         .its('response.body')
-        .then(({ id, name }: { id: number; name: string }) => {
-          cy.visit(`/templates/job-template/${id}/details`);
-          cy.contains(name);
+        .then(({ name }: { name: string }) => {
+          cy.navigateTo('awx', 'templates');
+          cy.filterTableByMultiSelect('name', [jobTemplate.name]);
+          cy.clickTableRowLink('name', jobTemplate.name, {
+            disableFilter: true,
+          });
+          cy.verifyPageTitle(name);
         });
     });
   });
@@ -648,34 +631,30 @@ describe('Job Templates Tests', function () {
     let jobTemplateWithDeletedInventory: JobTemplate;
 
     beforeEach(function () {
-      cy.createAwxInventory({ organization: (this.globalAwxOrganization as Organization).id }).then(
-        (inv) => {
-          inventory = inv;
-
-          cy.createAWXCredential({
-            kind: 'machine',
-            organization: (this.globalAwxOrganization as Organization).id,
-            credential_type: 1,
-          }).then((cred) => {
-            machineCredential = cred;
-
-            cy.createAwxJobTemplate({
-              organization: (this.globalAwxOrganization as Organization).id,
-              project: (this.globalProject as Project).id,
-              inventory: inventory.id,
-            }).then((jt1) => {
-              jobTemplate = jt1;
-            });
-            cy.createAwxJobTemplate({
-              organization: (this.globalAwxOrganization as Organization).id,
-              project: (this.globalProject as Project).id,
-              inventory: inventory.id,
-            }).then((jt2) => {
-              jobTemplate2 = jt2;
-            });
+      cy.createAwxInventory(awxOrganization).then((inv) => {
+        inventory = inv;
+        cy.createAWXCredential({
+          kind: 'machine',
+          organization: awxOrganization.id,
+          credential_type: 1,
+        }).then((cred) => {
+          machineCredential = cred;
+          cy.createAwxJobTemplate({
+            organization: awxOrganization.id,
+            project: project.id,
+            inventory: inventory.id,
+          }).then((jt1) => {
+            jobTemplate = jt1;
           });
-        }
-      );
+          cy.createAwxJobTemplate({
+            organization: awxOrganization.id,
+            project: project.id,
+            inventory: inventory.id,
+          }).then((jt2) => {
+            jobTemplate2 = jt2;
+          });
+        });
+      });
     });
 
     afterEach(function () {
@@ -683,13 +662,12 @@ describe('Job Templates Tests', function () {
       cy.deleteAwxJobTemplate(jobTemplate2, { failOnStatusCode: false });
       cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
       cy.deleteAwxCredential(machineCredential, { failOnStatusCode: false });
-
       jobTemplateWithDeletedInventory?.id &&
         cy.deleteAwxJobTemplate(jobTemplateWithDeletedInventory, { failOnStatusCode: false });
     });
 
     it('can delete a job template from the list line item', function () {
-      cy.visit('/templates');
+      cy.navigateTo('awx', 'templates');
       cy.filterTableBySingleSelect('name', jobTemplate.name);
       cy.getByDataCy('actions-column-cell').within(() => {
         cy.getByDataCy('actions-dropdown').click();
@@ -728,35 +706,41 @@ describe('Job Templates Tests', function () {
     });
 
     it('can delete a resource related to a JT and view warning on the JT', function () {
-      cy.createAwxInventory({ organization: (this.globalAwxOrganization as Organization).id }).then(
-        (inv) => {
-          deletedInventory = inv;
-
-          cy.createAwxJobTemplate({
-            organization: (this.globalAwxOrganization as Organization).id,
-            project: (this.globalProject as Project).id,
-            inventory: deletedInventory.id,
-          }).then((jt) => {
-            jobTemplateWithDeletedInventory = jt;
-
-            cy.visit(`templates/job-template/${jobTemplateWithDeletedInventory.id}/details`);
-            cy.getByDataCy('inventory').contains(deletedInventory.name).click();
-            cy.clickKebabAction('actions-dropdown', 'delete-inventory');
-            cy.clickModalConfirmCheckbox();
-            cy.intercept('DELETE', awxAPI`/inventories/${deletedInventory.id.toString()}/`).as(
-              'deleteInventory'
-            );
-            cy.clickModalButton('Delete inventory');
-            cy.wait('@deleteInventory')
-              .its('response')
-              .then((response) => {
-                expect(response?.statusCode).to.eql(202);
-              });
-            cy.visit(`templates/job-template/${jobTemplateWithDeletedInventory.id}/details`);
-            cy.getByDataCy('inventory').contains('Deleted');
+      cy.createAwxInventory(awxOrganization).then((inv) => {
+        deletedInventory = inv;
+        cy.createAwxJobTemplate({
+          organization: awxOrganization.id,
+          project: project.id,
+          inventory: deletedInventory.id,
+        }).then((jt) => {
+          jobTemplateWithDeletedInventory = jt;
+          cy.navigateTo('awx', 'templates');
+          cy.filterTableByMultiSelect('name', [jobTemplateWithDeletedInventory.name]);
+          cy.clickTableRowLink('name', jobTemplateWithDeletedInventory.name, {
+            disableFilter: true,
           });
-        }
-      );
+          cy.verifyPageTitle(jobTemplateWithDeletedInventory.name);
+          cy.getByDataCy('inventory').contains(deletedInventory.name).click();
+          cy.clickKebabAction('actions-dropdown', 'delete-inventory');
+          cy.clickModalConfirmCheckbox();
+          cy.intercept('DELETE', awxAPI`/inventories/${deletedInventory.id.toString()}/`).as(
+            'deleteInventory'
+          );
+          cy.clickModalButton('Delete inventory');
+          cy.wait('@deleteInventory')
+            .its('response')
+            .then((response) => {
+              expect(response?.statusCode).to.eql(202);
+            });
+          cy.navigateTo('awx', 'templates');
+          cy.filterTableByMultiSelect('name', [jobTemplateWithDeletedInventory.name]);
+          cy.clickTableRowLink('name', jobTemplateWithDeletedInventory.name, {
+            disableFilter: true,
+          });
+          cy.verifyPageTitle(jobTemplateWithDeletedInventory.name);
+          cy.getByDataCy('inventory').contains('Deleted');
+        });
+      });
     });
 
     it('can bulk delete job templates from the list page', function () {
@@ -813,20 +797,17 @@ describe('Job Templates Tests', function () {
         ).as('toggleStart');
         cy.getByDataCy('toggle-switch').contains(switchType).click();
         cy.wait('@toggleStart');
-
         cy.getByDataCy('toggle-switch')
           .contains(switchType)
           .within(() => {
             cy.get(`[aria-label="Click to disable ${type}"]`);
           });
-
         cy.intercept(
           'POST',
           awxAPI`/job_templates/${jobTemplate.id.toString()}/notification_templates_${apiSuffix}/`
         ).as('toggleStart');
         cy.getByDataCy('toggle-switch').contains(switchType).click();
         cy.wait('@toggleStart');
-
         cy.getByDataCy('toggle-switch')
           .contains(switchType)
           .within(() => {
@@ -836,33 +817,36 @@ describe('Job Templates Tests', function () {
     }
 
     beforeEach(function () {
-      cy.createAwxInventory({ organization: (this.globalAwxOrganization as Organization).id }).then(
-        (inv) => {
-          inventory = inv;
+      cy.createAwxInventory(awxOrganization).then((inv) => {
+        inventory = inv;
 
-          cy.createAwxJobTemplate({
-            organization: (this.globalAwxOrganization as Organization).id,
-            project: (this.globalProject as Project).id,
-            inventory: inventory.id,
-          }).then((jt) => {
-            jobTemplate = jt;
+        cy.createAwxJobTemplate({
+          organization: awxOrganization.id,
+          project: project.id,
+          inventory: inventory.id,
+        }).then((jt) => {
+          jobTemplate = jt;
 
-            cy.createNotificationTemplate(randomE2Ename()).then((n) => {
-              notification = n;
-            });
+          cy.createNotificationTemplate(randomE2Ename(), awxOrganization).then((n) => {
+            notification = n;
           });
-        }
-      );
+        });
+      });
     });
 
     afterEach(function () {
+      cy.deleteNotificationTemplate(notification, { failOnStatusCode: false });
       cy.deleteAwxJobTemplate(jobTemplate, { failOnStatusCode: false });
       cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
-      cy.deleteNotificationTemplate(notification, { failOnStatusCode: false });
     });
 
     it('can navigate to the Job Templates -> Notifications list and then to the details page of the Notification', () => {
-      cy.visit(`/templates/job-template/${jobTemplate.id}/details`);
+      cy.navigateTo('awx', 'templates');
+      cy.filterTableByMultiSelect('name', [jobTemplate.name]);
+      cy.clickTableRowLink('name', jobTemplate.name, {
+        disableFilter: true,
+      });
+      cy.verifyPageTitle(jobTemplate.name);
       cy.clickTab('Notifications', true);
       cy.filterTableByTextFilter('name', notification.name);
       cy.getByDataCy('name-column-cell').contains(notification.name).click();
@@ -871,17 +855,35 @@ describe('Job Templates Tests', function () {
     });
 
     it('can toggle the Job Templates -> Notification on and off for job start', () => {
-      cy.visit(`/templates/job-template/${jobTemplate.id}/notifications`);
+      cy.navigateTo('awx', 'templates');
+      cy.filterTableByMultiSelect('name', [jobTemplate.name]);
+      cy.clickTableRowLink('name', jobTemplate.name, {
+        disableFilter: true,
+      });
+      cy.verifyPageTitle(jobTemplate.name);
+      cy.clickTab('Notifications', true);
       toggleNotificationType('start');
     });
 
     it('can toggle the Job Templates -> Notification on and off for job success', () => {
-      cy.visit(`/templates/job-template/${jobTemplate.id}/notifications`);
+      cy.navigateTo('awx', 'templates');
+      cy.filterTableByMultiSelect('name', [jobTemplate.name]);
+      cy.clickTableRowLink('name', jobTemplate.name, {
+        disableFilter: true,
+      });
+      cy.verifyPageTitle(jobTemplate.name);
+      cy.clickTab('Notifications', true);
       toggleNotificationType('success');
     });
 
     it('can toggle the Job Templates -> Notification on and off for job failure', () => {
-      cy.visit(`/templates/job-template/${jobTemplate.id}/notifications`);
+      cy.navigateTo('awx', 'templates');
+      cy.filterTableByMultiSelect('name', [jobTemplate.name]);
+      cy.clickTableRowLink('name', jobTemplate.name, {
+        disableFilter: true,
+      });
+      cy.verifyPageTitle(jobTemplate.name);
+      cy.clickTab('Notifications', true);
       toggleNotificationType('failure');
     });
   });
diff --git a/cypress/e2e/awx/resources/projects.cy.ts b/cypress/e2e/awx/resources/projects.cy.ts
index c28723fbc..3532edce8 100644
--- a/cypress/e2e/awx/resources/projects.cy.ts
+++ b/cypress/e2e/awx/resources/projects.cy.ts
@@ -1,6 +1,3 @@
-/* eslint-disable @typescript-eslint/no-non-null-assertion */
-/// <reference types="cypress" />
-
 import { randomString } from '../../../../framework/utils/random-string';
 import { Inventory } from '../../../../frontend/awx/interfaces/Inventory';
 import { Job } from '../../../../frontend/awx/interfaces/Job';
@@ -9,31 +6,44 @@ import { NotificationTemplate } from '../../../../frontend/awx/interfaces/Notifi
 import { Organization } from '../../../../frontend/awx/interfaces/Organization';
 import { Project } from '../../../../frontend/awx/interfaces/Project';
 import { Schedule } from '../../../../frontend/awx/interfaces/Schedule';
-import { AwxUser } from '../../../../frontend/awx/interfaces/User';
 import { awxAPI } from '../../../support/formatApiPathForAwx';
 import { randomE2Ename } from '../../../support/utils';
 
 describe('Projects', () => {
-  describe('Projects: Create and delete', () => {
-    let organization: Organization;
+  let schedule: Schedule;
+  let project: Project;
+  let awxOrganization: Organization;
+  let inventory: Inventory;
 
-    beforeEach(() => {
-      cy.createAwxOrganization().then((org) => {
-        organization = org;
-      });
+  before(() => {
+    cy.createAwxOrganization().then((org) => {
+      awxOrganization = org;
     });
+  });
 
-    afterEach(() => {
-      cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
+  after(() => {
+    cy.deleteAwxOrganization(awxOrganization, { failOnStatusCode: false });
+  });
+
+  beforeEach(() => {
+    cy.createAwxProject(awxOrganization).then((proj) => {
+      project = proj;
     });
+  });
 
+  afterEach(() => {
+    cy.deleteAwxProject(project, { failOnStatusCode: false });
+  });
+
+  describe('Projects: List View', () => {
     it('can create a project and then delete it from the project details page', () => {
       const projectName = 'E2E Project ' + randomString(4);
+
       cy.navigateTo('awx', 'projects');
       cy.verifyPageTitle('Projects');
       cy.clickLink(/^Create project$/);
       cy.get('[data-cy="name"]').type(projectName);
-      cy.singleSelectByDataCy('organization', organization.name);
+      cy.singleSelectByDataCy('organization', `${awxOrganization.name}`);
       cy.selectDropdownOptionByResourceName('source_control_type', 'Git');
       cy.get('[data-cy="scm-url"]').type('https://github.com/ansible/ansible-ui');
       cy.get('[data-cy="option-allow-override"]').click();
@@ -43,7 +53,7 @@ describe('Projects', () => {
         .its('response.body')
         .then((newProject: Project) => {
           cy.verifyPageTitle(newProject.name);
-          cy.hasDetail(/^Organization$/, `${organization.name}`);
+          cy.hasDetail(/^Organization$/, `${awxOrganization.name}`);
           cy.hasDetail(/^Source control type$/, 'Git');
           cy.hasDetail(/^Enabled options$/, 'Allow branch override');
           cy.waitForProjectToFinishSyncing(newProject.id);
@@ -63,29 +73,6 @@ describe('Projects', () => {
   });
 
   describe('Projects: List View', () => {
-    let organization: Organization;
-    let project: Project;
-    let user: AwxUser;
-
-    beforeEach(() => {
-      cy.createAwxOrganization().then((org) => {
-        organization = org;
-        cy.createAwxUser({ organization: organization.id }).then((testUser) => {
-          user = testUser;
-          cy.createAwxProject({ organization: organization.id }).then((proj) => {
-            project = proj;
-            cy.giveUserProjectAccess(project.name, user.id, 'Read');
-          });
-        });
-      });
-    });
-
-    afterEach(() => {
-      cy.deleteAwxProject(project, { failOnStatusCode: false });
-      cy.deleteAwxUser(user, { failOnStatusCode: false });
-      cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
-    });
-
     it('can edit a project from the project list row', () => {
       cy.navigateTo('awx', 'projects');
       cy.verifyPageTitle('Projects');
@@ -143,11 +130,13 @@ describe('Projects', () => {
         });
     });
 
-    it('can sync a project from the projects list row', function () {
+    it('can sync a project from the projects list row', () => {
       cy.navigateTo('awx', 'projects');
       cy.verifyPageTitle('Projects');
       cy.filterTableByMultiSelect('name', [project.name]);
-      cy.intercept(awxAPI`/projects/${project.id.toString()}/update/`).as('projectUpdateRequest');
+      cy.intercept('POST', awxAPI`/projects/${project.id.toString()}/update/`).as(
+        'projectUpdateRequest'
+      );
       cy.clickTableRowAction('name', `${project.name}`, 'sync-project', {
         disableFilter: true,
       });
@@ -160,7 +149,7 @@ describe('Projects', () => {
         });
     });
 
-    it('can delete a project from the projects list row', function () {
+    it('can delete a project from the projects list row', () => {
       cy.navigateTo('awx', 'projects');
       cy.verifyPageTitle('Projects');
       cy.filterTableByMultiSelect('name', [project.name]);
@@ -203,30 +192,6 @@ describe('Projects', () => {
   });
 
   describe('Projects: Details View', () => {
-    let organization: Organization;
-    let project: Project;
-    let user: AwxUser;
-
-    beforeEach(() => {
-      cy.createAwxOrganization().then((org) => {
-        organization = org;
-
-        cy.createAwxUser({ organization: organization.id }).then((testUser) => {
-          user = testUser;
-          cy.createAwxProject({ organization: organization.id }).then((proj) => {
-            project = proj;
-            cy.giveUserProjectAccess(project.name, user.id, 'Read');
-          });
-        });
-      });
-    });
-
-    afterEach(() => {
-      cy.deleteAwxProject(project, { failOnStatusCode: false });
-      cy.deleteAwxUser(user, { failOnStatusCode: false });
-      cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
-    });
-
     it('can edit a project from the project details page', () => {
       cy.navigateTo('awx', 'projects');
       cy.filterTableByMultiSelect('name', [project.name]);
@@ -251,7 +216,7 @@ describe('Projects', () => {
         });
     });
 
-    it('can copy a project from the project details page', function () {
+    it('can copy a project from the project details page', () => {
       const endOfProject = project.name.split(' ').slice(-1).toString();
       cy.navigateTo('awx', 'projects');
       cy.verifyPageTitle('Projects');
@@ -287,7 +252,7 @@ describe('Projects', () => {
         });
     });
 
-    it('can sync a project from the project details page', function () {
+    it('can sync a project from the project details page', () => {
       cy.navigateTo('awx', 'projects');
       cy.verifyPageTitle('Projects');
       cy.filterTableByMultiSelect('name', [project.name]);
@@ -295,9 +260,10 @@ describe('Projects', () => {
         disableFilter: true,
       });
       cy.verifyPageTitle(`${project.name}`);
-      cy.intercept(awxAPI`/projects/${project.id.toString()}/update/`).as('projectUpdateRequest');
+      cy.intercept('POST', awxAPI`/projects/${project.id.toString()}/update/`).as(
+        'projectUpdateRequest'
+      );
       cy.clickButton(/^Sync project$/);
-      cy.get('[data-cy="last-job-status"]').should('contain', 'Running');
       cy.waitForProjectToFinishSyncing(project.id);
       cy.wait('@projectUpdateRequest')
         .its('response')
@@ -306,7 +272,7 @@ describe('Projects', () => {
         });
     });
 
-    it('can delete a project from project details page', function () {
+    it('can delete a project from project details page', () => {
       cy.navigateTo('awx', 'projects');
       cy.verifyPageTitle('Projects');
       cy.filterTableByMultiSelect('name', [project.name]);
@@ -328,58 +294,46 @@ describe('Projects', () => {
   });
 
   describe('Projects: User Access Tab', () => {
-    it('can navigate to project access tab', function () {
+    it('can navigate to project access tab', () => {
       cy.navigateTo('awx', 'projects');
-      cy.filterTableByMultiSelect('name', [(this.globalProject as Project).name]);
-      cy.clickTableRowLink('name', `${(this.globalProject as Project).name}`, {
+      cy.filterTableByMultiSelect('name', [project.name]);
+      cy.clickTableRowLink('name', `${project.name}`, {
         disableFilter: true,
       });
-      cy.verifyPageTitle(`${(this.globalProject as Project).name}`);
+      cy.verifyPageTitle(`${project.name}`);
       cy.clickTab(/^User Access$/, true);
     });
   });
+
   describe('Projects: Team Access Tab', () => {
-    it('can navigate to project access tab', function () {
+    it('can navigate to project access tab', () => {
       cy.navigateTo('awx', 'projects');
-      cy.filterTableByMultiSelect('name', [(this.globalProject as Project).name]);
-      cy.clickTableRowLink('name', `${(this.globalProject as Project).name}`, {
+      cy.filterTableByMultiSelect('name', [project.name]);
+      cy.clickTableRowLink('name', `${project.name}`, {
         disableFilter: true,
       });
-      cy.verifyPageTitle(`${(this.globalProject as Project).name}`);
+      cy.verifyPageTitle(`${project.name}`);
       cy.clickTab(/^Team Access$/, true);
     });
   });
 
   describe('Projects: Schedules Tab', () => {
-    let schedule: Schedule;
-    let project: Project;
-    let organization: Organization;
-
-    beforeEach(function () {
-      cy.createAwxOrganization().then((org) => {
-        organization = org;
-        cy.createAwxProject({ organization: organization.id }).then((proj) => {
-          project = proj;
-          const name = 'E2E' + randomString(4);
-          cy.createAWXSchedule({
-            name,
-            unified_job_template: project.id,
-            rrule: 'DTSTART:20240415T124133Z RRULE:FREQ=WEEKLY;INTERVAL=1;BYDAY=SU',
-          }).then((sched: Schedule) => {
-            schedule = sched;
-            cy.navigateTo('awx', 'projects');
-            cy.filterTableBySingleSelect('name', project.name);
-            cy.get('[data-cy="name-column-cell"]').click();
-            cy.clickTab('Schedules', true);
-          });
-        });
+    beforeEach(() => {
+      cy.createAWXSchedule({
+        name: `Schedule` + `${randomE2Ename()}`,
+        unified_job_template: project.id,
+        rrule: 'DTSTART:20240415T124133Z RRULE:FREQ=WEEKLY;INTERVAL=1;BYDAY=SU',
+      }).then((sched: Schedule) => {
+        schedule = sched;
+        cy.navigateTo('awx', 'projects');
+        cy.filterTableBySingleSelect('name', project.name);
+        cy.get('[data-cy="name-column-cell"]').click();
+        cy.clickTab('Schedules', true);
       });
     });
 
     afterEach(() => {
       cy.deleteAWXSchedule(schedule, { failOnStatusCode: false });
-      cy.deleteAwxProject(project, { failOnStatusCode: false });
-      cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
     });
 
     it('can edit a simple schedule from details page', () => {
@@ -585,36 +539,26 @@ describe('Projects', () => {
     });
   });
 
+  // FLAKY_06_13_2024
   describe('Projects: Job Templates Tab', () => {
-    let inventory: Inventory;
     let jobTemplate: JobTemplate;
-    let organization: Organization;
-    let project: Project;
-
     beforeEach(() => {
-      cy.createAwxOrganization().then((org) => {
-        organization = org;
-        cy.createAwxProject({ organization: organization.id }).then((proj) => {
-          project = proj;
-          cy.createAwxInventory({ organization: organization.id }).then((inv) => {
-            inventory = inv;
-            cy.createAwxJobTemplate({
-              organization: organization.id,
-              project: project.id,
-              inventory: inventory.id,
-            }).then((jt1) => {
-              jobTemplate = jt1;
-            });
-          });
+      cy.createAwxInventory(awxOrganization).then((inv) => {
+        inventory = inv;
+        cy.createAwxJobTemplate({
+          organization: awxOrganization.id,
+          project: project.id,
+          inventory: inventory.id,
+        }).then((jt1) => {
+          jobTemplate = jt1;
         });
       });
     });
 
-    after(() => {
+    afterEach(() => {
       cy.deleteAwxJobTemplate(jobTemplate, { failOnStatusCode: false });
       cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
       cy.deleteAwxProject(project, { failOnStatusCode: false });
-      cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
     });
 
     it('can navigate to project job templates tab', () => {
@@ -628,20 +572,20 @@ describe('Projects', () => {
     });
 
     it('can associate a project with a newly created job template and view that JT on the templates tab of the project', () => {
-      cy.createAwxProject({ organization: organization.id }).then((newProject) => {
+      cy.createAwxProject(awxOrganization).then((thisProject) => {
         cy.navigateTo('awx', 'templates');
         cy.filterTableByMultiSelect('name', [jobTemplate.name]);
         cy.getTableRow('name', jobTemplate.name, { disableFilter: true }).should('be.visible');
         cy.selectTableRow(jobTemplate.name, false);
         cy.getBy('[data-cy="edit-template"]').click();
         cy.verifyPageTitle('Edit Job Template');
-        cy.selectDropdownOptionByResourceName('project', newProject.name);
+        cy.selectDropdownOptionByResourceName('project', thisProject.name);
         cy.intercept('PATCH', awxAPI`/job_templates/${jobTemplate.id.toString()}/`).as('edited');
         cy.getByDataCy('Submit').click();
         cy.wait('@edited')
           .its('response.body')
           .then((editedJt: JobTemplate) => {
-            expect(editedJt.project).to.eql(newProject.id);
+            expect(editedJt.project).to.eql(thisProject.id);
             cy.intercept('GET', awxAPI`/job_templates/${editedJt.id.toString()}/launch/`).as(
               'clickLaunch'
             );
@@ -661,14 +605,20 @@ describe('Projects', () => {
           });
         cy.navigateTo('awx', 'projects');
         cy.verifyPageTitle('Projects');
-        cy.filterTableByMultiSelect('name', [newProject.name]);
-        cy.get(`[data-cy="row-id-${newProject.id}"]`).within(() => {
+        cy.filterTableByMultiSelect('name', [thisProject.name]);
+        cy.get(`[data-cy="row-id-${thisProject.id}"]`).within(() => {
+          cy.get('[data-cy="name-column-cell"]').click();
+        });
+        cy.navigateTo('awx', 'projects');
+        cy.verifyPageTitle('Projects');
+        cy.filterTableByMultiSelect('name', [thisProject.name]);
+        cy.get(`[data-cy="row-id-${thisProject.id}"]`).within(() => {
           cy.get('[data-cy="name-column-cell"]').click();
         });
         cy.clickTab('Job templates', true);
         cy.url().should(
           'contain',
-          `/projects/${newProject.id}/job-templates?page=1&perPage=10&sort=name`
+          `/projects/${thisProject.id}/job-templates?page=1&perPage=10&sort=name`
         );
         cy.filterTableByMultiSelect('name', [jobTemplate.name]);
         cy.getTableRow('name', jobTemplate.name, { disableFilter: true }).should('be.visible');
@@ -690,25 +640,15 @@ describe('Projects', () => {
 
   describe('Projects: Notifications Tab', () => {
     let notification: NotificationTemplate;
-    let project: Project;
-    let organization: Organization;
 
     beforeEach(() => {
-      cy.createAwxOrganization().then((org) => {
-        organization = org;
-        cy.createAwxProject({ organization: organization.id }).then((proj) => {
-          project = proj;
-          const notificationName = `${randomE2Ename()}`;
-          cy.createNotificationTemplate(notificationName).then((notifier) => {
-            notification = notifier;
-          });
-        });
+      const notificationName = `${randomE2Ename()}`;
+      cy.createNotificationTemplate(notificationName, awxOrganization).then((notifier) => {
+        notification = notifier;
       });
     });
 
     afterEach(() => {
-      cy.deleteAwxProject(project, { failOnStatusCode: false });
-      cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
       cy.deleteNotificationTemplate(notification, { failOnStatusCode: false });
     });
 
diff --git a/cypress/e2e/awx/resources/sharedTemplateSurvey.ts b/cypress/e2e/awx/resources/sharedTemplateSurvey.ts
index 96320cb0b..f63d187f3 100644
--- a/cypress/e2e/awx/resources/sharedTemplateSurvey.ts
+++ b/cypress/e2e/awx/resources/sharedTemplateSurvey.ts
@@ -26,30 +26,24 @@ export class ReusableTemplateSurveyTestSuite {
 
   canCreateSurvey(question: Spec) {
     this.navigateToTemplateDetails();
-
     cy.contains(this.template.name);
     cy.get('[aria-selected="true"]').contains('Survey');
     cy.contains('There are currently no survey questions.');
     cy.contains('Create a survey question by clicking the button below.');
     cy.clickButton('Create survey question');
-
     cy.getByDataCy('question-name').type(question.question_name);
     cy.getByDataCy('question-description').type(question.question_description);
     cy.getByDataCy('question-variable').type(question.variable);
     cy.getByDataCy('question-default').type(question.default.toString());
-
     cy.intercept(
       'POST',
       awxAPI`/${this.templateType}/${this.template.id.toString()}/survey_spec/`
     ).as('createQuestion');
     cy.clickButton('Create question');
     cy.wait('@createQuestion');
-
     cy.contains('Survey disabled');
-
     cy.get('[for="survey-switch"]').click();
     cy.contains('Survey enabled');
-
     cy.getByDataCy('row-0').within(() => {
       cy.contains(question?.question_name);
       cy.contains(question?.type);
@@ -59,23 +53,16 @@ export class ReusableTemplateSurveyTestSuite {
   canEditSurvey(question: Spec) {
     cy.createTemplateSurvey(this.template, 'Text', question);
     this.navigateToTemplateDetails();
-
     cy.getByDataCy('name-column-cell').contains(question?.question_name);
     cy.getByDataCy('type-column-cell').contains(question?.type);
     cy.getByDataCy('default-column-cell').contains(question?.default);
-
     cy.getByDataCy('edit-question').click();
-
     cy.getByDataCy('question-name').clear().type('foo');
     cy.getByDataCy('question-description').clear();
-
     cy.selectDropdownOptionByResourceName('type', 'Integer');
-
     cy.getByDataCy('question-max').type('0');
     cy.getByDataCy('question-default').clear().type('1337');
-
     cy.clickButton('Save question');
-
     cy.getByDataCy('name-column-cell').contains('foo');
     cy.getByDataCy('type-column-cell').contains('integer');
     cy.getByDataCy('default-column-cell').contains('1337');
@@ -84,7 +71,6 @@ export class ReusableTemplateSurveyTestSuite {
   canDeleteSurvey(question: Spec) {
     cy.createTemplateSurvey(this.template, 'Text', question);
     this.navigateToTemplateDetails();
-
     cy.getByDataCy('row-0').within(() => {
       cy.contains(question.question_name);
       cy.contains(question.default);
@@ -99,7 +85,6 @@ export class ReusableTemplateSurveyTestSuite {
     ).as('deleteSurveySpec');
     cy.clickModalButton('Delete');
     cy.wait('@deleteSurveySpec');
-
     cy.contains('There are currently no survey questions.');
     cy.contains('Create a survey question by clicking the button below.');
   }
@@ -143,16 +128,13 @@ export class ReusableTemplateSurveyTestSuite {
         choices: [],
       },
     ];
-
     const survey = {
       name: '',
       description: '',
       spec: specs,
     };
-
     cy.createAwxSurvey(survey, this.template).then(() => {
       this.navigateToTemplateDetails();
-
       specs.forEach((spec, index) => {
         cy.getByDataCy(`row-${index}`).within(() => {
           cy.getByDataCy('name-column-cell').contains(spec.question_name);
@@ -160,11 +142,9 @@ export class ReusableTemplateSurveyTestSuite {
           cy.getByDataCy('default-column-cell').contains(spec.default);
         });
       });
-
       cy.clickToolbarKebabAction('manage-question-order');
       cy.get('#draggable-row-Foo').drag('#draggable-row-Baz');
       cy.clickButton('Apply');
-
       ['Bar', 'Baz', 'Foo'].forEach((spec, index) => {
         cy.getByDataCy(`row-${index}`).within(() => {
           cy.getByDataCy('name-column-cell').contains(spec);
@@ -175,9 +155,7 @@ export class ReusableTemplateSurveyTestSuite {
 
   canEnableSurvey(survey: Spec) {
     this.navigateToTemplateDetails();
-
     cy.getByDataCy('name-column-cell').contains(survey.question_name);
-
     cy.intercept('PATCH', awxAPI`/${this.templateType}/${this.template.id.toString()}/`).as(
       'enableSurvey'
     );
@@ -189,12 +167,9 @@ export class ReusableTemplateSurveyTestSuite {
     cy.intercept('GET', awxAPI`/${this.templateType}/${this.template.id.toString()}/launch/`).as(
       'launchTemplate'
     );
-
     cy.clickButton('Launch template');
     cy.wait('@launchTemplate');
-
     cy.contains('Prompt on Launch');
-
     const groupType = `survey-${survey.type}-answer-form-group`;
     cy.getByDataCy(groupType).within(() => {
       cy.contains(survey.question_name);
@@ -202,13 +177,11 @@ export class ReusableTemplateSurveyTestSuite {
       cy.get('.pf-v5-c-icon').click();
     });
     cy.contains(survey.question_description);
-
     return groupType;
   }
 
   canFinishSurvey(survey: Spec) {
     cy.clickButton('Next');
-
     cy.getByDataCy('code-block-value').within(() => {
       cy.contains(survey.variable);
       if (survey.type === 'password') cy.contains('$encrypted$');
@@ -221,9 +194,7 @@ export class ReusableTemplateSurveyTestSuite {
           });
       }
     });
-
     cy.clickButton('Finish');
-
     cy.intercept('POST', awxAPI`/${this.templateType}/${this.template.id.toString()}/launch/`).as(
       'postLaunch'
     );
@@ -233,10 +204,13 @@ export class ReusableTemplateSurveyTestSuite {
       .then((job: Job) => {
         if (['running', 'pending'].includes(job.status ?? '')) cy.cancelJob(job);
 
-        const jobType = this.templateType === 'workflow_job_templates' ? 'workflow' : 'playbook';
-        cy.visit(`/jobs/${jobType}/${job.id}/details`);
-        cy.verifyPageTitle(job.name);
-
+        cy.navigateTo('awx', 'jobs');
+        cy.verifyPageTitle('Jobs');
+        const jobId = job.id ? job.id.toString() : '';
+        const jobName = job.name ? job.name : '';
+        cy.filterTableByMultiSelect('id', [jobId]);
+        cy.clickTableRowLink('name', jobName, { disableFilter: true });
+        cy.verifyPageTitle(jobName);
         cy.contains(survey.variable);
         if (survey.type === 'password') {
           cy.contains('$encrypted$');
diff --git a/cypress/e2e/awx/resources/workflowJobTemplateSurveys.cy.ts b/cypress/e2e/awx/resources/workflowJobTemplateSurveys.cy.ts
index a7556ec4e..87f769deb 100644
--- a/cypress/e2e/awx/resources/workflowJobTemplateSurveys.cy.ts
+++ b/cypress/e2e/awx/resources/workflowJobTemplateSurveys.cy.ts
@@ -3,12 +3,22 @@ import { Organization } from '../../../../frontend/awx/interfaces/Organization';
 import { WorkflowJobTemplate } from '../../../../frontend/awx/interfaces/WorkflowJobTemplate';
 import { ReusableTemplateSurveyTestSuite } from './sharedTemplateSurvey';
 
-describe('Workflow Job Templates Surveys', function () {
+describe.skip('Workflow Job Templates Surveys', function () {
   let inventory: Inventory;
   let workflowJobTemplate: WorkflowJobTemplate;
-  let organization: Organization;
+  let awxOrganization: Organization;
   let reusableTemplateSurveyTestSuite: ReusableTemplateSurveyTestSuite;
 
+  before(function () {
+    cy.createAwxOrganization().then((org) => {
+      awxOrganization = org;
+    });
+  });
+
+  after(() => {
+    cy.deleteAwxOrganization(awxOrganization, { failOnStatusCode: false });
+  });
+
   describe('WFJT Surveys: Create, Edit and Delete', function () {
     const question = {
       question_name: "Who's that?",
@@ -23,22 +33,12 @@ describe('Workflow Job Templates Surveys', function () {
       choices: [],
     };
 
-    before(function () {
-      cy.createAwxOrganization().then((org) => {
-        organization = org;
-      });
-    });
-
-    after(() => {
-      cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
-    });
-
     beforeEach(() => {
-      cy.createAwxInventory({ organization: organization.id }).then((inv) => {
+      cy.createAwxInventory(awxOrganization).then((inv) => {
         inventory = inv;
 
         cy.createAwxWorkflowJobTemplate({
-          organization: organization.id,
+          organization: awxOrganization.id,
           inventory: inventory.id,
         }).then((wfjt) => {
           workflowJobTemplate = wfjt;
@@ -68,22 +68,12 @@ describe('Workflow Job Templates Surveys', function () {
   });
 
   describe('WFJT Surveys: Launch WFJT with Survey Enabled', function () {
-    before(() => {
-      cy.createAwxOrganization().then((org) => {
-        organization = org;
-      });
-    });
-
-    after(() => {
-      cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
-    });
-
     beforeEach(() => {
-      cy.createAwxInventory({ organization: organization.id }).then((inv) => {
+      cy.createAwxInventory(awxOrganization).then((inv) => {
         inventory = inv;
 
         cy.createAwxWorkflowJobTemplate({
-          organization: organization.id,
+          organization: awxOrganization.id,
           inventory: inventory.id,
         }).then((wfjt) => {
           workflowJobTemplate = wfjt;
@@ -116,11 +106,9 @@ describe('Workflow Job Templates Surveys', function () {
         cy.createTemplateSurvey(workflowJobTemplate, 'Text', question);
         reusableTemplateSurveyTestSuite.canEnableSurvey(question);
         const groupType = reusableTemplateSurveyTestSuite.canLaunchSurvey(question);
-
         cy.getByDataCy(groupType)
           .getByDataCy(`survey-${question.type.toLowerCase()}-answer`)
           .should('have.value', question.default);
-
         reusableTemplateSurveyTestSuite.canFinishSurvey(question);
       });
 
@@ -140,11 +128,9 @@ describe('Workflow Job Templates Surveys', function () {
         cy.createTemplateSurvey(workflowJobTemplate, 'Textarea', question);
         reusableTemplateSurveyTestSuite.canEnableSurvey(question);
         const groupType = reusableTemplateSurveyTestSuite.canLaunchSurvey(question);
-
         cy.getByDataCy(groupType)
           .getByDataCy(`survey-${question.type.toLowerCase()}-answer`)
           .should('have.value', question.default);
-
         reusableTemplateSurveyTestSuite.canFinishSurvey(question);
       });
 
@@ -164,11 +150,9 @@ describe('Workflow Job Templates Surveys', function () {
         cy.createTemplateSurvey(workflowJobTemplate, 'Password', question);
         reusableTemplateSurveyTestSuite.canEnableSurvey(question);
         const groupType = reusableTemplateSurveyTestSuite.canLaunchSurvey(question);
-
         cy.getByDataCy(groupType)
           .getByDataCy(`survey-${question.type.toLowerCase()}-answer`)
           .should('have.value', '$encrypted$');
-
         reusableTemplateSurveyTestSuite.canFinishSurvey(question);
       });
 
@@ -188,11 +172,9 @@ describe('Workflow Job Templates Surveys', function () {
         cy.createTemplateSurvey(workflowJobTemplate, 'Integer', question);
         reusableTemplateSurveyTestSuite.canEnableSurvey(question);
         const groupType = reusableTemplateSurveyTestSuite.canLaunchSurvey(question);
-
         cy.getByDataCy(groupType)
           .getByDataCy(`survey-${question.type.toLowerCase()}-answer`)
           .should('have.value', question.default);
-
         reusableTemplateSurveyTestSuite.canFinishSurvey(question);
       });
 
@@ -212,11 +194,9 @@ describe('Workflow Job Templates Surveys', function () {
         cy.createTemplateSurvey(workflowJobTemplate, 'Float', question);
         reusableTemplateSurveyTestSuite.canEnableSurvey(question);
         const groupType = reusableTemplateSurveyTestSuite.canLaunchSurvey(question);
-
         cy.getByDataCy(groupType)
           .getByDataCy(`survey-${question.type.toLowerCase()}-answer`)
           .should('have.value', question.default);
-
         reusableTemplateSurveyTestSuite.canFinishSurvey(question);
       });
 
@@ -236,7 +216,6 @@ describe('Workflow Job Templates Surveys', function () {
         cy.createTemplateSurvey(workflowJobTemplate, 'Multiple Choice (single select)', question);
         reusableTemplateSurveyTestSuite.canEnableSurvey(question);
         const groupType = reusableTemplateSurveyTestSuite.canLaunchSurvey(question);
-
         cy.getByDataCy(groupType).within(() => {
           cy.contains(question.default);
           cy.get('div[data-ouia-component-id="menu-select"]').click();
@@ -244,7 +223,6 @@ describe('Workflow Job Templates Surveys', function () {
             cy.getByDataCy('survey-multiplechoice-answer').contains(choice);
           });
         });
-
         reusableTemplateSurveyTestSuite.canFinishSurvey(question);
       });
 
@@ -264,7 +242,6 @@ describe('Workflow Job Templates Surveys', function () {
         cy.createTemplateSurvey(workflowJobTemplate, 'Multiple Choice (multiple select)', question);
         reusableTemplateSurveyTestSuite.canEnableSurvey(question);
         const groupType = reusableTemplateSurveyTestSuite.canLaunchSurvey(question);
-
         cy.getByDataCy(groupType).within(() => {
           const defaults = question.default.toString().split('\n');
           defaults.forEach((defaultValue) => {
@@ -272,13 +249,11 @@ describe('Workflow Job Templates Surveys', function () {
           });
           cy.get('#survey-multiselect-answer').click();
         });
-
         cy.get('#survey-multiselect-answer-select').within(() => {
           question?.choices?.forEach((choice) => {
             cy.getByDataCy(choice);
           });
         });
-
         reusableTemplateSurveyTestSuite.canFinishSurvey(question);
       });
     });
diff --git a/cypress/e2e/awx/resources/workflowJobTemplates.cy.ts b/cypress/e2e/awx/resources/workflowJobTemplates.cy.ts
index 1214a1c4e..eb23fce89 100644
--- a/cypress/e2e/awx/resources/workflowJobTemplates.cy.ts
+++ b/cypress/e2e/awx/resources/workflowJobTemplates.cy.ts
@@ -10,29 +10,29 @@ import { awxAPI } from '../../../support/formatApiPathForAwx';
 import { Credential } from '../../../../frontend/awx/interfaces/Credential';
 
 describe('Workflow Job Templates Tests', () => {
-  describe('Workflow Job Templates: Create', function () {
-    let organization: Organization;
-    let inventory: Inventory;
-    let label: Label;
-
-    beforeEach(() => {
-      cy.createAwxOrganization().then((o) => {
-        organization = o;
-        cy.createAwxInventory({ organization: organization.id }).then((i) => {
-          inventory = i;
-        });
-        cy.createAwxLabel({ organization: organization.id }).then((l) => {
-          label = l;
-        });
+  let organization: Organization;
+  let inventory: Inventory;
+  let label: Label;
+
+  beforeEach(() => {
+    cy.createAwxOrganization().then((o) => {
+      organization = o;
+      cy.createAwxInventory(organization).then((i) => {
+        inventory = i;
+      });
+      cy.createAwxLabel({ organization: organization.id }).then((l) => {
+        label = l;
       });
     });
+  });
 
-    afterEach(() => {
-      cy.deleteAwxLabel(label, { failOnStatusCode: false });
-      cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
-      cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
-    });
+  afterEach(() => {
+    cy.deleteAwxLabel(label, { failOnStatusCode: false });
+    cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
+    cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
+  });
 
+  describe('Workflow Job Templates: Create', function () {
     it('can create a WFJT with only a name and then edit it to add all optional fields, including extra vars', () => {
       const jtName = 'E2E ' + randomString(4);
 
@@ -117,7 +117,6 @@ describe('Workflow Job Templates Tests', () => {
 
   describe('Workflow Job Templates: Edit', function () {
     let workflowJobTemplate: WorkflowJobTemplate;
-    let organization: Organization;
     let newOrganization: Organization;
     let inventory: Inventory;
     let tokenCredential: Credential;
@@ -126,17 +125,14 @@ describe('Workflow Job Templates Tests', () => {
       cy.createAwxOrganization().then((orgA) => {
         newOrganization = orgA;
       });
-      cy.createAwxOrganization().then((orgB) => {
-        organization = orgB;
-        cy.createAwxInventory({ organization: organization.id }).then((i) => {
-          inventory = i;
-
-          cy.createAwxWorkflowJobTemplate({
-            organization: organization.id,
-            inventory: inventory.id,
-          }).then((wfJT) => {
-            workflowJobTemplate = wfJT;
-          });
+      cy.createAwxInventory(organization).then((i) => {
+        inventory = i;
+
+        cy.createAwxWorkflowJobTemplate({
+          organization: organization.id,
+          inventory: inventory.id,
+        }).then((wfJT) => {
+          workflowJobTemplate = wfJT;
         });
       });
     });
@@ -144,7 +140,6 @@ describe('Workflow Job Templates Tests', () => {
     afterEach(function () {
       cy.deleteAwxWorkflowJobTemplate(workflowJobTemplate, { failOnStatusCode: false });
       cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
-      cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
       cy.deleteAwxOrganization(newOrganization, { failOnStatusCode: false });
     });
 
@@ -174,10 +169,8 @@ describe('Workflow Job Templates Tests', () => {
         tokenCredential = cred;
         cy.navigateTo('awx', 'templates');
         cy.filterTableByMultiSelect('name', [workflowJobTemplate?.name]);
-
         //Assert original values
         expect(workflowJobTemplate.webhook_service).equals('');
-
         //Edit WFJT to add webhook credential
         cy.clickTableRowAction('name', workflowJobTemplate.name, 'edit-template', {
           disableFilter: true,
@@ -195,7 +188,6 @@ describe('Workflow Job Templates Tests', () => {
           .then((editedWFJT: WorkflowJobTemplate) => {
             expect(editedWFJT.webhook_service).contains('github');
           });
-
         //Edit to remove webhook credential
         cy.clickLink('Edit template');
         cy.get('[data-cy="isWebhookEnabled"]').click();
@@ -209,7 +201,6 @@ describe('Workflow Job Templates Tests', () => {
           .then((editedWFJT: WorkflowJobTemplate) => {
             expect(editedWFJT.webhook_service).contains('');
           });
-
         //Delete credential
         cy.deleteAwxCredential(tokenCredential, { failOnStatusCode: false });
       });
@@ -285,21 +276,17 @@ describe('Workflow Job Templates Tests', () => {
 
   describe('Workflow Job Templates: Copy', function () {
     let workflowJobTemplate: WorkflowJobTemplate;
-    let organization: Organization;
     let inventory: Inventory;
 
     beforeEach(function () {
-      cy.createAwxOrganization().then((orgB) => {
-        organization = orgB;
-        cy.createAwxInventory({ organization: organization.id }).then((i) => {
-          inventory = i;
-
-          cy.createAwxWorkflowJobTemplate({
-            organization: organization.id,
-            inventory: inventory.id,
-          }).then((wfjt) => {
-            workflowJobTemplate = wfjt;
-          });
+      cy.createAwxInventory(organization).then((i) => {
+        inventory = i;
+
+        cy.createAwxWorkflowJobTemplate({
+          organization: organization.id,
+          inventory: inventory.id,
+        }).then((wfjt) => {
+          workflowJobTemplate = wfjt;
         });
       });
     });
@@ -307,7 +294,6 @@ describe('Workflow Job Templates Tests', () => {
     afterEach(function () {
       cy.deleteAwxWorkflowJobTemplate(workflowJobTemplate, { failOnStatusCode: false });
       cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
-      cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
     });
 
     it('can copy an existing workflow job template from the list', () => {
@@ -386,21 +372,17 @@ describe('Workflow Job Templates Tests', () => {
 
   describe('Workflow Job Templates: Delete', function () {
     let workflowJobTemplate: WorkflowJobTemplate;
-    let organization: Organization;
     let inventory: Inventory;
 
     beforeEach(function () {
-      cy.createAwxOrganization().then((orgB) => {
-        organization = orgB;
-        cy.createAwxInventory({ organization: organization.id }).then((i) => {
-          inventory = i;
-
-          cy.createAwxWorkflowJobTemplate({
-            organization: organization.id,
-            inventory: inventory.id,
-          }).then((wfjt) => {
-            workflowJobTemplate = wfjt;
-          });
+      cy.createAwxInventory(organization).then((i) => {
+        inventory = i;
+
+        cy.createAwxWorkflowJobTemplate({
+          organization: organization.id,
+          inventory: inventory.id,
+        }).then((wfjt) => {
+          workflowJobTemplate = wfjt;
         });
       });
     });
@@ -408,7 +390,6 @@ describe('Workflow Job Templates Tests', () => {
     afterEach(function () {
       cy.deleteAwxWorkflowJobTemplate(workflowJobTemplate, { failOnStatusCode: false });
       cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
-      cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
     });
 
     it('can bulk delete multiple workflow job templates from the list toolbar', () => {
@@ -453,30 +434,21 @@ describe('Workflow Job Templates Tests', () => {
 
   describe('Workflow Job Templates: Delete without using org and inventory', function () {
     let workflowJobTemplate: WorkflowJobTemplate;
-    let organization: Organization;
     let inventory: Inventory;
-    before(function () {
-      cy.createAwxOrganization().then((orgB) => {
-        organization = orgB;
-        cy.createAwxInventory({ organization: organization.id }).then((i) => {
-          inventory = i;
-        });
-      });
-    });
 
     beforeEach(function () {
-      cy.createAwxWorkflowJobTemplate({
-        organization: organization.id,
-        inventory: inventory.id,
-      }).then((wfjt) => (workflowJobTemplate = wfjt));
+      cy.createAwxInventory(organization).then((i) => {
+        inventory = i;
+
+        cy.createAwxWorkflowJobTemplate({
+          organization: organization.id,
+          inventory: inventory.id,
+        }).then((wfjt) => (workflowJobTemplate = wfjt));
+      });
     });
 
     afterEach(() => {
       cy.deleteAwxWorkflowJobTemplate(workflowJobTemplate, { failOnStatusCode: false });
-    });
-
-    after(() => {
-      cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
       cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
     });
 
@@ -527,20 +499,19 @@ describe('Workflow Job Templates Tests', () => {
   describe.skip('Workflow Job Templates: Launch', function () {
     let workflowJobTemplate: WorkflowJobTemplate;
     let jobTemplate: JobTemplate;
-    let organization: Organization;
-    let newOrg: Organization;
     let inventory: Inventory;
     let project: Project;
 
     beforeEach(function () {
-      cy.createAwxOrganization().then((orgB) => {
-        organization = orgB;
-        cy.createAwxInventory({ organization: organization.id }).then((i) => {
-          inventory = i;
+      cy.createAwxInventory(organization).then((i) => {
+        inventory = i;
+
+        cy.createAwxProject(organization).then((proj) => {
+          project = proj;
 
           cy.createAwxJobTemplate({
             organization: organization.id,
-            project: (this.globalProject as Project).id,
+            project: project.id,
             inventory: inventory.id,
           }).then((jt) => {
             jobTemplate = jt;
@@ -551,44 +522,34 @@ describe('Workflow Job Templates Tests', () => {
             }).then((wfjt) => {
               workflowJobTemplate = wfjt;
 
-              cy.createAwxWorkflowVisualizerProjectNode(
-                workflowJobTemplate,
-                this.globalProject as Project
-              ).then((projectNode) => {
-                cy.createAwxWorkflowVisualizerJobTemplateNode(
-                  workflowJobTemplate,
-                  jobTemplate
-                ).then((jobTemplateNode) => {
-                  cy.createAwxOrganization().then((org) => {
-                    newOrg = org;
-                    cy.createAwxProject({ organization: organization.id }).then((p) => {
-                      project = p;
-                      let inventorySource: InventorySource;
-                      cy.createAwxInventorySource(inventory, project).then((invSrc) => {
-                        inventorySource = invSrc;
-                        cy.createAwxWorkflowVisualizerInventorySourceNode(
-                          workflowJobTemplate,
-                          inventorySource
-                        ).then((inventorySourceNode) => {
-                          cy.createAwxWorkflowVisualizerManagementNode(workflowJobTemplate, 2).then(
-                            (managementNode) => {
-                              cy.createWorkflowJTSuccessNodeLink(projectNode, jobTemplateNode);
-                              cy.createWorkflowJTSuccessNodeLink(
-                                jobTemplateNode,
-                                inventorySourceNode
-                              );
-                              cy.createWorkflowJTFailureNodeLink(
-                                inventorySourceNode,
-                                managementNode
-                              );
-                            }
-                          );
-                        });
+              cy.createAwxWorkflowVisualizerProjectNode(workflowJobTemplate, project).then(
+                (projectNode) => {
+                  cy.createAwxWorkflowVisualizerJobTemplateNode(
+                    workflowJobTemplate,
+                    jobTemplate
+                  ).then((jobTemplateNode) => {
+                    let inventorySource: InventorySource;
+                    cy.createAwxInventorySource(inventory, project).then((invSrc) => {
+                      inventorySource = invSrc;
+                      cy.createAwxWorkflowVisualizerInventorySourceNode(
+                        workflowJobTemplate,
+                        inventorySource
+                      ).then((inventorySourceNode) => {
+                        cy.createAwxWorkflowVisualizerManagementNode(workflowJobTemplate, 2).then(
+                          (managementNode) => {
+                            cy.createWorkflowJTSuccessNodeLink(projectNode, jobTemplateNode);
+                            cy.createWorkflowJTSuccessNodeLink(
+                              jobTemplateNode,
+                              inventorySourceNode
+                            );
+                            cy.createWorkflowJTFailureNodeLink(inventorySourceNode, managementNode);
+                          }
+                        );
                       });
                     });
                   });
-                });
-              });
+                }
+              );
             });
           });
         });
@@ -600,8 +561,6 @@ describe('Workflow Job Templates Tests', () => {
       cy.deleteAwxJobTemplate(jobTemplate, { failOnStatusCode: false });
       cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
       cy.deleteAwxProject(project, { failOnStatusCode: false });
-      cy.deleteAwxOrganization(newOrg, { failOnStatusCode: false });
-      cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
     });
 
     it('can save and launch a workflow job template from list view', function () {
diff --git a/cypress/e2e/awx/resources/workflowVisualizerCRUD.cy.ts b/cypress/e2e/awx/resources/workflowVisualizerCRUD.cy.ts
index 02ed9be03..7d79e41ac 100644
--- a/cypress/e2e/awx/resources/workflowVisualizerCRUD.cy.ts
+++ b/cypress/e2e/awx/resources/workflowVisualizerCRUD.cy.ts
@@ -9,7 +9,7 @@ import { WorkflowNode } from '../../../../frontend/awx/interfaces/WorkflowNode';
 import { awxAPI } from '../../../support/formatApiPathForAwx';
 
 describe('Workflow Visualizer', () => {
-  let organization: Organization;
+  let awxOrganization: Organization;
   let project: Project;
   let inventory: Inventory;
   let inventorySource: InventorySource;
@@ -19,43 +19,92 @@ describe('Workflow Visualizer', () => {
   let approvalNode: WorkflowNode;
   let workflowJtNode: WorkflowNode;
 
-  beforeEach(function () {
-    cy.createAwxOrganization().then((org) => {
-      organization = org;
-      cy.createAwxInventory({ organization: organization.id })
-        .then((i) => {
-          inventory = i;
-        })
-        .then(() => {
-          cy.createAwxProject({ organization: organization.id })
-            .then((proj) => {
-              project = proj;
-            })
-            .then(() => {
-              cy.createAwxInventorySource(inventory, project).then((invSrc) => {
-                inventorySource = invSrc;
-              });
-              cy.createAwxJobTemplate({
-                organization: organization.id,
-                project: project.id,
-                inventory: inventory.id,
-              }).then((jt) => (jobTemplate = jt));
-              cy.createAwxWorkflowJobTemplate({
-                organization: organization.id,
-                inventory: inventory.id,
-              }).then((wfjt) => (workflowJobTemplate = wfjt));
+  before(function () {
+    cy.createAwxOrganization().then((thisAwxOrg) => {
+      awxOrganization = thisAwxOrg;
+
+      cy.createAwxProject(awxOrganization).then((proj) => {
+        project = proj;
+
+        cy.createAwxInventory(awxOrganization)
+          .then((i) => {
+            inventory = i;
+          })
+          .then(() => {
+            cy.createAwxInventorySource(inventory, project).then((invSrc) => {
+              inventorySource = invSrc;
             });
-        });
+            cy.createAwxJobTemplate({
+              organization: awxOrganization.id,
+              project: project.id,
+              inventory: inventory.id,
+            }).then((jt) => (jobTemplate = jt));
+          });
+      });
     });
   });
 
+  beforeEach(function () {
+    cy.createAwxWorkflowJobTemplate({
+      organization: awxOrganization.id,
+      inventory: inventory.id,
+    }).then((wfjt) => (workflowJobTemplate = wfjt));
+  });
+
   afterEach(() => {
     cy.deleteAwxWorkflowJobTemplate(workflowJobTemplate, { failOnStatusCode: false });
-    cy.deleteAwxJobTemplate(jobTemplate, { failOnStatusCode: false });
+  });
+
+  after(() => {
     cy.deleteAwxInventorySource(inventorySource, { failOnStatusCode: false });
-    cy.deleteAwxProject(project, { failOnStatusCode: false });
     cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
-    cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
+    cy.deleteAwxJobTemplate(jobTemplate, { failOnStatusCode: false });
+    cy.deleteAwxProject(project, { failOnStatusCode: false });
+    cy.deleteAwxOrganization(awxOrganization, { failOnStatusCode: false });
+  });
+
+  describe('Workflow Visualizer: Add Nodes', () => {
+    it('should render a workflow visualizer view with multiple nodes present', () => {
+      cy.renderWorkflowVisualizerNodesFromFixtureFile(
+        `${workflowJobTemplate.name}`,
+        'wf_vis_testing_A.json'
+      );
+      cy.get('[class*="66-node-label"]')
+        .should('exist')
+        .should('contain', 'Cleanup Activity Stream');
+      cy.get('[class*="43-node-label"]').should('exist').should('contain', 'bar');
+      cy.get('[class*="42-node-label"]').should('exist').should('contain', '1');
+      cy.get('[class*="41-node-label"]').should('exist').should('contain', 'Demo Project');
+    });
+
+    it('Should create a workflow job template and then navigate to the visualizer, and then navigate to the details view after clicking cancel', () => {
+      const jtName = 'E2E ' + randomString(4);
+      // Create workflow job template
+      cy.navigateTo('awx', 'templates');
+      cy.clickButton(/^Create template$/);
+      cy.clickLink(/^Create workflow job template$/);
+      cy.get('[data-cy="name"]').type(jtName);
+      cy.get('[data-cy="description"]').type('this is a description');
+      cy.intercept('POST', awxAPI`/workflow_job_templates/`).as('newWfjt');
+      cy.get('[data-cy="Submit"]').click();
+      cy.wait('@newWfjt')
+        .its('response.body')
+        .then((wfjt: WorkflowJobTemplate) => {
+          expect(wfjt.description).to.eql('this is a description');
+          cy.get('[data-cy="workflow-visualizer"]').should('be.visible');
+          cy.get('h4.pf-v5-c-empty-state__title-text').should(
+            'have.text',
+            'There are currently no nodes in this workflow'
+          );
+          cy.get('div.pf-v5-c-empty-state__actions').within(() => {
+            cy.get('[data-cy="add-node-button"]').should('be.visible');
+          });
+          cy.get('button[data-cy="workflow-visualizer-toolbar-close"]').click();
+          cy.getByDataCy('description').should('contain', wfjt.description);
+          cy.verifyPageTitle(`${jtName}`);
+          cy.deleteAwxWorkflowJobTemplate(wfjt, { failOnStatusCode: false });
+        });
+    });
   });
 
   describe('Workflow Visualizer: Add Node to Existing Visualizer', () => {
@@ -68,11 +117,12 @@ describe('Workflow Visualizer', () => {
         });
       });
     });
+
     it('Adds a new node linked to an existing node with always status, and save the visualizer.', function () {
       cy.navigateTo('awx', 'templates');
       cy.filterTableByMultiSelect('name', [workflowJobTemplate.name]);
       cy.clickTableRowLink('name', workflowJobTemplate.name, { disableFilter: true });
-      cy.getByDataCy('view-workflow-visualizer').click();
+      cy.get('a[href*="/visualizer"]').click();
       cy.contains('Workflow Visualizer').should('be.visible');
       cy.get(`g[data-id=${approvalNode.id}] .pf-topology__node__action-icon`).click({
         force: true,
@@ -102,11 +152,12 @@ describe('Workflow Visualizer', () => {
       cy.getByDataCy('workflow-visualizer-toolbar-close').click();
       cy.verifyPageTitle(`${workflowJobTemplate.name}`);
     });
+
     it('Adds a new node specifically linked to an already existing node.', function () {
       cy.navigateTo('awx', 'templates');
       cy.filterTableByMultiSelect('name', [workflowJobTemplate.name]);
       cy.clickTableRowLink('name', workflowJobTemplate.name, { disableFilter: true });
-      cy.getByDataCy('view-workflow-visualizer').click();
+      cy.get('a[href*="/visualizer"]').click();
       cy.contains('Workflow Visualizer').should('be.visible');
       cy.get(`g[data-id="${projectNode.id}"]`)
         .should('be.visible')
@@ -157,7 +208,7 @@ describe('Workflow Visualizer', () => {
                 cy.navigateTo('awx', 'templates');
                 cy.filterTableByMultiSelect('name', [workflowJobTemplate.name]);
                 cy.clickTableRowLink('name', workflowJobTemplate.name, { disableFilter: true });
-                cy.getByDataCy('view-workflow-visualizer').click();
+                cy.get('a[href*="/visualizer"]').click();
                 cy.get(`g[data-id=${projectNode.id}] .pf-topology__node__action-icon`).click({
                   force: true,
                 });
@@ -202,7 +253,7 @@ describe('Workflow Visualizer', () => {
           cy.navigateTo('awx', 'templates');
           cy.filterTableByMultiSelect('name', [workflowJobTemplate.name]);
           cy.clickTableRowLink('name', workflowJobTemplate.name, { disableFilter: true });
-          cy.getByDataCy('view-workflow-visualizer').click();
+          cy.get('a[href*="/visualizer"]').click();
           cy.contains('Workflow Visualizer').should('be.visible');
           cy.get(`g[data-id="${projectNode.id}-${approvalNode.id}"]`).should(
             'have.text',
@@ -218,11 +269,12 @@ describe('Workflow Visualizer', () => {
           cy.verifyPageTitle(`${workflowJobTemplate.name}`);
         });
     });
+
     it('Create a job template node using a JT with multiple dependencies and then edit the node to use a different resource', function () {
       cy.navigateTo('awx', 'templates');
       cy.filterTableByMultiSelect('name', [workflowJobTemplate.name]);
       cy.clickTableRowLink('name', workflowJobTemplate.name, { disableFilter: true });
-      cy.getByDataCy('view-workflow-visualizer').click();
+      cy.get('a[href*="/visualizer"]').click();
       cy.contains('Workflow Visualizer').should('be.visible');
       cy.clickButton('Add step');
       cy.selectDropdownOptionByResourceName('node-type', 'Job Template');
@@ -249,8 +301,9 @@ describe('Workflow Visualizer', () => {
       cy.getByDataCy('page-title').should('have.text', `${workflowJobTemplate.name}`);
     });
   });
+
   describe('Workflow Visualizer: Remove and Add Nodes', () => {
-    it.skip('Can manually delete all nodes, save the visualizer, then add new nodes, and successfully save again.', function () {
+    it('Can manually delete all nodes, save the visualizer, then add new nodes, and successfully save again.', function () {
       cy.createAwxWorkflowVisualizerProjectNode(workflowJobTemplate, project)
         .then((projNode) => {
           projectNode = projNode;
@@ -263,7 +316,7 @@ describe('Workflow Visualizer', () => {
           cy.navigateTo('awx', 'templates');
           cy.filterTableByMultiSelect('name', [workflowJobTemplate.name]);
           cy.clickTableRowLink('name', workflowJobTemplate.name, { disableFilter: true });
-          cy.getByDataCy('view-workflow-visualizer').click();
+          cy.get('a[href*="/visualizer"]').click();
           cy.contains('Workflow Visualizer').should('be.visible');
           cy.get(`g[data-id=${projectNode.id}] .pf-topology__node__action-icon`).click({
             force: true,
@@ -323,8 +376,8 @@ describe('Workflow Visualizer', () => {
                 cy.navigateTo('awx', 'templates');
                 cy.filterTableByMultiSelect('name', [workflowJobTemplate.name]);
                 cy.clickTableRowLink('name', workflowJobTemplate.name, { disableFilter: true });
-                cy.getByDataCy('view-workflow-visualizer').click();
-                cy.getByDataCy('wf-vzr-name')
+                cy.get('a[href*="/visualizer"]').click();
+                cy.get('[data-cy="wf-vzr-name"]')
                   .should('contain', `${workflowJobTemplate.name}`)
                   .should('be.visible');
                 cy.removeAllNodesFromVisualizerToolbar();
@@ -355,6 +408,7 @@ describe('Workflow Visualizer', () => {
       );
     });
   });
+
   describe('Workflow Visualizer: Delete Nodes or Links', () => {
     it('Remove all steps using the kebab menu of the visualizer toolbar and save changes', function () {
       cy.createAwxWorkflowVisualizerProjectNode(workflowJobTemplate, project).then(
@@ -373,8 +427,8 @@ describe('Workflow Visualizer', () => {
           cy.navigateTo('awx', 'templates');
           cy.filterTableByMultiSelect('name', [workflowJobTemplate.name]);
           cy.clickTableRowLink('name', workflowJobTemplate.name, { disableFilter: true });
-          cy.getByDataCy('view-workflow-visualizer').click();
-          cy.getByDataCy('wf-vzr-name')
+          cy.get('a[href*="/visualizer"]').click();
+          cy.get('[data-cy="wf-vzr-name"]')
             .should('contain', `${workflowJobTemplate.name}`)
             .should('be.visible');
           cy.removeAllNodesFromVisualizerToolbar();
@@ -391,7 +445,7 @@ describe('Workflow Visualizer', () => {
           cy.navigateTo('awx', 'templates');
           cy.filterTableByMultiSelect('name', [workflowJobTemplate.name]);
           cy.clickTableRowLink('name', workflowJobTemplate.name, { disableFilter: true });
-          cy.getByDataCy('view-workflow-visualizer').click();
+          cy.get('a[href*="/visualizer"]').click();
           cy.contains('Workflow Visualizer').should('be.visible');
           cy.get('[data-kind="node"]').should('have.length', 3);
           cy.get(`g[data-id=${projectNode.id}] .pf-topology__node__action-icon`).click({
@@ -435,7 +489,10 @@ describe('Workflow Visualizer', () => {
           });
         })
         .then(() => {
-          cy.visit(`/templates/workflow-job-template/${workflowJobTemplate?.id}/visualizer`);
+          cy.navigateTo('awx', 'templates');
+          cy.filterTableByMultiSelect('name', [workflowJobTemplate.name]);
+          cy.clickTableRowLink('name', workflowJobTemplate.name, { disableFilter: true });
+          cy.get('a[href*="/visualizer"]').click();
           cy.contains('Workflow Visualizer').should('be.visible');
           cy.contains('Run on fail').should('be.visible');
           cy.get(`g[data-id="${projectNode.id}-${workflowJtNode.id}"]`).within(() => {
@@ -468,7 +525,7 @@ describe('Workflow Visualizer: Add Nodes', () => {
   before(function () {
     cy.createAwxOrganization().then((org) => {
       organization = org;
-      cy.createAwxInventory({ organization: organization.id }).then((i) => {
+      cy.createAwxInventory(organization).then((i) => {
         inventory = i;
       });
     });
diff --git a/cypress/e2e/awx/resources/workflowVisualizerOutput.cy.ts b/cypress/e2e/awx/resources/workflowVisualizerOutput.cy.ts
index 61640f364..5408cab0d 100644
--- a/cypress/e2e/awx/resources/workflowVisualizerOutput.cy.ts
+++ b/cypress/e2e/awx/resources/workflowVisualizerOutput.cy.ts
@@ -1,5 +1,6 @@
 import { Inventory } from '../../../../frontend/awx/interfaces/Inventory';
 import { InventorySource } from '../../../../frontend/awx/interfaces/InventorySource';
+import { Job } from '../../../../frontend/awx/interfaces/Job';
 import { JobTemplate } from '../../../../frontend/awx/interfaces/JobTemplate';
 import { Organization } from '../../../../frontend/awx/interfaces/Organization';
 import { Project } from '../../../../frontend/awx/interfaces/Project';
@@ -7,8 +8,8 @@ import { WorkflowJobTemplate } from '../../../../frontend/awx/interfaces/Workflo
 import { WorkflowNode } from '../../../../frontend/awx/interfaces/WorkflowNode';
 import { awxAPI } from '../../../support/formatApiPathForAwx';
 
-describe.skip('Workflow Visualizer', () => {
-  let organization: Organization;
+describe('Workflow Visualizer', () => {
+  let awxOrganization: Organization;
   let project: Project;
   let inventory: Inventory;
   let inventorySource: InventorySource;
@@ -17,28 +18,33 @@ describe.skip('Workflow Visualizer', () => {
   let projectNode: WorkflowNode;
   let jobTemplateNode: WorkflowNode;
 
+  before(function () {
+    cy.createAwxOrganization().then((thisAwxOrg) => {
+      awxOrganization = thisAwxOrg;
+    });
+  });
+
   beforeEach(function () {
-    organization = this.globalAwxOrganization as Organization;
-    cy.createAwxInventory({ organization: organization.id })
+    cy.createAwxInventory(awxOrganization)
       .then((i) => {
         inventory = i;
       })
       .then(() => {
-        cy.createAwxProject({ organization: organization.id }).then((proj) => {
+        cy.createAwxProject(awxOrganization).then((proj) => {
           project = proj;
 
           cy.createAwxInventorySource(inventory, project).then((invSrc) => {
             inventorySource = invSrc;
 
             cy.createAwxJobTemplate({
-              organization: organization.id,
+              organization: awxOrganization.id,
               project: project.id,
               inventory: inventory.id,
             }).then((jt) => {
               jobTemplate = jt;
 
               cy.createAwxWorkflowJobTemplate({
-                organization: organization.id,
+                organization: awxOrganization.id,
                 inventory: inventory.id,
               }).then((wfjt) => (workflowJobTemplate = wfjt));
             });
@@ -54,6 +60,10 @@ describe.skip('Workflow Visualizer', () => {
     cy.deleteAwxJobTemplate(jobTemplate, { failOnStatusCode: false });
   });
 
+  after(() => {
+    cy.deleteAwxOrganization(awxOrganization, { failOnStatusCode: false });
+  });
+
   describe('Workflow Visualizer- Job Output', () => {
     beforeEach(function () {
       cy.createAwxWorkflowVisualizerProjectNode(workflowJobTemplate, project).then((projNode) => {
@@ -92,7 +102,7 @@ describe.skip('Workflow Visualizer', () => {
       });
     });
 
-    it('Can configure the prompt on launch values of a node, launch the job, and view the output screen', function () {
+    it.skip('Can configure the prompt on launch values of a node, launch the job, and view the output screen', function () {
       cy.navigateTo('awx', 'templates');
       cy.verifyPageTitle('Templates');
       cy.filterTableBySingleSelect('name', `${jobTemplate?.name}`);
@@ -113,7 +123,6 @@ describe.skip('Workflow Visualizer', () => {
       });
       cy.contains('Workflow Visualizer').should('be.visible');
       cy.get('[data-cy="wf-vzr-name"]').should('have.text', `${workflowJobTemplate?.name}`);
-
       cy.getBy(`g[data-id=${jobTemplateNode.id}] .pf-topology__node__action-icon`).click({
         force: true,
       });
@@ -124,22 +133,36 @@ describe.skip('Workflow Visualizer', () => {
       cy.getBy('[class="view-lines monaco-mouse-cursor-text"]').type('foo: bar');
       cy.getByDataCy('Submit').click();
       cy.getBy('.scrollable-inner').scrollIntoView({ offset: { top: 150, left: 0 } });
-      cy.getByDataCy('extra-vars').should('contain', 'foo: bar');
+      cy.get('[data-cy="extra-vars"]')
+        .scrollIntoView({ offset: { top: 150, left: 0 } })
+        .should('contain', 'foo: bar');
       cy.getByDataCy('wizard-next').click();
       cy.getByDataCy('workflow-visualizer-toolbar-save').click();
       cy.getBy('.pf-v5-c-alert__action').click();
       cy.getByDataCy('workflow-visualizer-toolbar-kebab').click();
+      cy.intercept(
+        'POST',
+        awxAPI`/workflow_job_templates/${workflowJobTemplate.id.toString()}/launch/`
+      ).as('launch');
       cy.getByDataCy('workflow-visualizer-toolbar-launch').click();
-      cy.url().should('contain', `/output`);
-      cy.contains('Running').should('be.visible');
-      cy.contains('Unreachable').should('be.visible');
-      cy.getBy(`g[class*="node-label"]`).contains(jobTemplate.name).should('be.visible');
-      cy.getBy(`g[class*="node-label"]`).contains(project.name).should('be.visible');
-      cy.contains('Success').should('be.visible');
+      cy.wait('@launch')
+        .its('response.body')
+        .then((job: Job) => {
+          cy.url().should('contain', `/output`);
+          cy.contains('Running').should('be.visible');
+          cy.waitForWorkflowJobStatus(`${job.id}`).then(() => {
+            cy.getBy(`g[class*="node-label"]`).contains(jobTemplate.name).should('be.visible');
+            cy.getBy(`g[class*="node-label"]`).contains(project.name).should('be.visible');
+            cy.contains('Success').should('be.visible');
+          });
+        });
     });
 
     it.skip('can view the details pages of related job on a WFJT either by clicking the job nodes or by toggling the Workflow Jobs dropdown', function () {
-      cy.visit(`/templates/workflow-job-template/${workflowJobTemplate?.id}/visualizer`);
+      cy.navigateTo('awx', 'templates');
+      cy.filterTableByMultiSelect('name', [workflowJobTemplate.name]);
+      cy.clickTableRowLink('name', workflowJobTemplate.name, { disableFilter: true });
+      cy.get('a[href*="/visualizer"]').click();
       cy.contains('Workflow Visualizer').should('be.visible');
       cy.getBy('[data-cy="workflow-visualizer-toolbar-kebab"]').click();
       cy.intercept(
@@ -148,53 +171,61 @@ describe.skip('Workflow Visualizer', () => {
       ).as('launchWJT-WithNodes');
       cy.clickButton('Launch');
       cy.wait('@launchWJT-WithNodes')
-        .its('response.body.id')
-        .then((jobId: string) => {
-          cy.url().should('contain', `/jobs/workflow/${jobId}/output`);
-          cy.intercept('GET', awxAPI`/project_updates/**`).as('wfJobs');
+        .its('response.body')
+        .then((job: Job) => {
+          cy.intercept('GET', awxAPI`/workflow_jobs/${job.id.toString()}/`).as('firstJob');
+          cy.url().should('contain', `/jobs/workflow/${job.id}/output`);
+          cy.wait('@firstJob');
           cy.contains(project.name).click({ force: true });
-          cy.wait('@wfJobs');
-          cy.intercept('GET', awxAPI`/workflow_jobs/${jobId}/`).as('job');
-          cy.intercept(
-            'GET',
-            awxAPI`/workflow_jobs/${jobId}/workflow_nodes/?page=1&page_size=200`
-          ).as('wfNodes');
+          cy.intercept('GET', awxAPI`/workflow_jobs/${job.id.toString()}/**`).as('job');
           cy.getByDataCy(project.name).should('be.visible');
           cy.getByDataCy('Output').should('be.visible');
-          cy.visit(`/jobs/workflow/${jobId}/output`);
+          cy.intercept('POST', awxAPI`/workflow_jobs/${job.id.toString()}/relaunch/`).as(
+            'relaunchWJT-WithNodes'
+          );
+          cy.navigateTo('awx', 'jobs');
+          const jobId = job.id ? job.id.toString() : '';
+          const jobName = job.name ? job.name : '';
+          cy.filterTableByMultiSelect('id', [jobId]);
+          cy.clickTableRowPinnedAction(jobName, 'relaunch-job', false);
           cy.wait('@job', { timeout: 10000 });
-          cy.wait('@wfNodes')
-            .its('response.body.results[1]')
-            .then((results: WorkflowNode) => {
-              cy.getByDataCy('page-title')
-                .should('be.visible')
-                .and('contain', `${workflowJobTemplate.name}`);
-              cy.intercept('GET', awxAPI`/workflow_jobs/${jobId}/workflow_nodes/**`).as('jobs');
-              cy.getBy('button[id="fit-to-screen"]').click();
-              cy.contains(jobTemplate.name).should('be.visible');
-              cy.getByDataCy('relaunch-job').should('be.visible');
-              cy.intercept('GET', awxAPI`/workflow_job_nodes/${results.id.toString()}/`).as(
-                'jtNode'
-              );
-              cy.getBy(`g[data-id="${results.id}"]`)
-                .getBy('[data-cy="successful-icon"]')
-                .should('be.visible');
-              cy.wait('@jtNode');
-              cy.getBy(`g[data-id="${results.id}"]`).within(() => {
-                cy.contains(jobTemplate.name).click({ force: true });
-              });
-              cy.getByDataCy(`${jobTemplate.name}`).should('be.visible');
-              cy.getByDataCy('Output').should('be.visible');
-              cy.contains('button', 'Workflow Job 1/1')
-                .click()
-                .then(() => {
-                  cy.contains(project.name).click();
-                });
-              cy.getByDataCy('page-title').should('be.visible').and('contain', project.name);
-              cy.contains('button', 'Workflow Job 1/1')
-                .click()
-                .then(() => {
-                  cy.contains(`${jobTemplate.name}`).click();
+          cy.wait('@relaunchWJT-WithNodes')
+            .its('response.body')
+            .then((relaunch: Job) => {
+              cy.intercept(
+                'GET',
+                awxAPI`/workflow_jobs/${relaunch.id.toString()}/workflow_nodes/**`
+              ).as('wfNodes');
+              cy.wait('@wfNodes')
+                .its('response.body.results[1]')
+                .then((results: WorkflowNode) => {
+                  cy.getByDataCy('page-title')
+                    .should('be.visible')
+                    .and('contain', `${workflowJobTemplate.name}`);
+                  cy.intercept('GET', awxAPI`/workflow_jobs/${jobId}/workflow_nodes/**`).as('jobs');
+                  cy.getBy('button[id="fit-to-screen"]').click();
+                  cy.contains(jobTemplate.name).should('be.visible');
+                  cy.getByDataCy('relaunch-job').should('be.visible');
+                  cy.getBy(`g[data-id="${results.id}"]`)
+                    .getBy('[data-cy="successful-icon"]')
+                    .should('be.visible');
+                  cy.getBy(`g[data-id="${results.id}"]`).within(() => {
+                    cy.contains(jobTemplate.name).click({ force: true });
+                  });
+                  cy.getByDataCy(`${jobTemplate.name}`).should('be.visible');
+                  cy.getByDataCy('Output').should('be.visible');
+                  cy.contains('button', 'Workflow Job 1/1')
+                    .click()
+                    .then(() => {
+                      cy.contains(project.name).click();
+                    });
+                  cy.wait(5000);
+                  cy.getByDataCy('page-title').should('be.visible').and('contain', project.name);
+                  cy.contains('button', 'Workflow Job 1/1')
+                    .click()
+                    .then(() => {
+                      cy.contains(`${jobTemplate.name}`).click();
+                    });
                 });
             });
         });
diff --git a/cypress/e2e/awx/views/jobs.cy.ts b/cypress/e2e/awx/views/jobs.cy.ts
index 5cd98ddf6..da5cd525e 100644
--- a/cypress/e2e/awx/views/jobs.cy.ts
+++ b/cypress/e2e/awx/views/jobs.cy.ts
@@ -9,522 +9,424 @@ import { Project } from '../../../../frontend/awx/interfaces/Project';
 import { WorkflowJobTemplate } from '../../../../frontend/awx/interfaces/WorkflowJobTemplate';
 import { awxAPI } from '../../../support/formatApiPathForAwx';
 
-describe('Jobs: List', () => {
+describe('Jobs', () => {
+  let project: Project;
+  let awxOrganization: Organization;
   let inventory: Inventory;
   let jobTemplate: JobTemplate;
   let job: Job;
-  let project: Project;
-  let organization: Organization;
 
   before(() => {
     cy.createAwxOrganization().then((org) => {
-      organization = org;
-      cy.createAwxProject({ organization: org.id }).then((p) => {
+      awxOrganization = org;
+      cy.createAwxProject(awxOrganization).then((p) => {
         project = p;
-      });
-    });
-  });
-
-  after(() => {
-    cy.deleteAwxProject(project, { failOnStatusCode: false }).then(() => {
-      cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
-    });
-  });
 
-  beforeEach(function () {
-    cy.createAwxInventory({ organization: organization.id }).then((inv) => {
-      inventory = inv;
-      cy.createAwxJobTemplate({
-        organization: organization.id,
-        project: project.id,
-        inventory: inv.id,
-      }).then((jt) => {
-        jobTemplate = jt;
-
-        // Launch job to populate jobs list
-        cy.requestPost<Job, Partial<Omit<Job, 'id'>>>(
-          awxAPI`/job_templates/${jobTemplate.id.toString()}/launch/`,
-          {}
-        ).then((jl: Job) => {
-          job = jl;
+        cy.createAwxInventory(awxOrganization).then((inv) => {
+          inventory = inv;
         });
       });
     });
   });
 
-  afterEach(() => {
-    cy.deleteAwxJob(job, { failOnStatusCode: false });
-    cy.deleteAwxJobTemplate(jobTemplate, { failOnStatusCode: false });
+  after(() => {
     cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
+    cy.deleteAwxProject(project, { failOnStatusCode: false });
+    cy.deleteAwxOrganization(awxOrganization, { failOnStatusCode: false });
   });
 
-  it('can render the jobs list', () => {
-    cy.navigateTo('awx', 'jobs');
-    cy.verifyPageTitle('Jobs');
-    const jobId = job.id ? job.id.toString() : '';
-    const jobName = job.name ? job.name : '';
-    cy.filterTableByMultiSelect('id', [jobId]);
-    cy.contains(jobName);
-    cy.clearAllFilters();
-  });
-
-  it('can relaunch the job and navigate to job output', () => {
-    cy.navigateTo('awx', 'jobs');
-    const jobId = job.id ? job.id.toString() : '';
-    const jobName = job.name ? job.name : '';
-    cy.filterTableByMultiSelect('id', [jobId]);
-    cy.clickTableRowPinnedAction(jobName, 'relaunch-job', false);
-    cy.verifyPageTitle(jobName);
-    cy.contains('.pf-v5-c-tabs a', 'Output').should('have.attr', 'aria-selected', 'true');
-  });
-
-  it('can render the toolbar and row actions', () => {
-    cy.navigateTo('awx', 'jobs');
-    cy.get('.pf-v5-c-toolbar__group button.toggle-kebab').click();
-    cy.get('.pf-v5-c-dropdown__menu').within(() => {
-      cy.contains(/^Delete selected jobs$/).should('exist');
-      cy.contains(/^Cancel selected jobs$/).should('exist');
-    });
-    cy.filterTableByMultiSelect('id', [job.id ? job.id.toString() : '']);
-    const jobName = job.name ? job.name : '';
-    cy.contains('td', jobName)
-      .parent()
-      .within(() => {
-        // Relaunch job
-        cy.get('#relaunch-job').should('exist');
-        cy.get('.pf-v5-c-dropdown__toggle').click();
-        cy.contains('.pf-v5-c-dropdown__menu-item', /^Delete job$/).should('exist');
+  describe('Jobs List', () => {
+    beforeEach(function () {
+      cy.createAwxInventory(awxOrganization).then((inv) => {
+        inventory = inv;
+        cy.createAwxJobTemplate({
+          organization: awxOrganization.id,
+          project: project.id,
+          inventory: inventory.id,
+        }).then((jt) => {
+          jobTemplate = jt;
+
+          // Launch job to populate jobs list
+          cy.requestPost<Job, Partial<Omit<Job, 'id'>>>(
+            awxAPI`/job_templates/${jobTemplate.id.toString()}/launch/`,
+            {}
+          ).then((jl: Job) => {
+            job = jl;
+          });
+        });
       });
-    cy.clearAllFilters();
-  });
-
-  it('can render additional details on expanding job row', () => {
-    cy.navigateTo('awx', 'jobs');
-    cy.filterTableByMultiSelect('id', [job.id ? job.id.toString() : '']);
-    const jobName = job.name ? job.name : '';
-    cy.expandTableRow(jobName, false);
-    cy.hasDetail('Inventory', 'E2E Inventory');
-    cy.hasDetail('Project', 'Project');
-    cy.hasDetail('Job slice', '0/1');
-    cy.clearAllFilters();
-  });
-
-  it('can filter jobs by id', () => {
-    cy.navigateTo('awx', 'jobs');
-    const jobId = job.id ? job.id.toString() : '';
-    cy.filterTableByMultiSelect('id', [jobId]);
-    cy.get('tr').should('have.length.greaterThan', 0);
-    if (job.name) {
-      cy.contains(job.name).should('be.visible');
-    }
-    cy.clearAllFilters();
-  });
-});
-
-describe('Jobs: Delete', () => {
-  let inventory: Inventory;
-  let jobTemplate: JobTemplate;
-  let project: Project;
-  let organization: Organization;
+    });
 
-  before(() => {
-    cy.createAwxOrganization().then((org) => {
-      organization = org;
-      cy.createAwxProject({ organization: org.id }).then((p) => {
-        project = p;
-      });
+    it('can render the jobs list', () => {
+      cy.navigateTo('awx', 'jobs');
+      cy.verifyPageTitle('Jobs');
+      const jobId = job.id ? job.id.toString() : '';
+      const jobName = job.name ? job.name : '';
+      cy.filterTableByMultiSelect('id', [jobId]);
+      cy.contains(jobName);
+      cy.clearAllFilters();
     });
-  });
 
-  after(() => {
-    cy.deleteAwxProject(project, { failOnStatusCode: false }).then(() => {
-      cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
+    it('can relaunch the job and navigate to job output', () => {
+      cy.navigateTo('awx', 'jobs');
+      const jobId = job.id ? job.id.toString() : '';
+      const jobName = job.name ? job.name : '';
+      cy.filterTableByMultiSelect('id', [jobId]);
+      cy.clickTableRowPinnedAction(jobName, 'relaunch-job', false);
+      cy.verifyPageTitle(jobName);
+      cy.contains('.pf-v5-c-tabs a', 'Output').should('have.attr', 'aria-selected', 'true');
     });
-  });
 
-  beforeEach(function () {
-    cy.createAwxInventory({ organization: organization.id }).then((inv) => {
-      inventory = inv;
-      cy.createAwxJobTemplate({
-        organization: organization.id,
-        project: project.id,
-        inventory: inv.id,
-      }).then((jt) => {
-        jobTemplate = jt;
+    it('can render the toolbar and row actions', () => {
+      cy.navigateTo('awx', 'jobs');
+      cy.get('.pf-v5-c-toolbar__group button.toggle-kebab').click();
+      cy.get('.pf-v5-c-dropdown__menu').within(() => {
+        cy.contains(/^Delete selected jobs$/).should('exist');
+        cy.contains(/^Cancel selected jobs$/).should('exist');
       });
+      cy.filterTableByMultiSelect('id', [job.id ? job.id.toString() : '']);
+      const jobName = job.name ? job.name : '';
+      cy.contains('td', jobName)
+        .parent()
+        .within(() => {
+          // Relaunch job
+          cy.get('#relaunch-job').should('exist');
+          cy.get('.pf-v5-c-dropdown__toggle').click();
+          cy.contains('.pf-v5-c-dropdown__menu-item', /^Delete job$/).should('exist');
+        });
+      cy.clearAllFilters();
     });
-  });
-
-  afterEach(() => {
-    cy.deleteAwxJobTemplate(jobTemplate, { failOnStatusCode: false });
-    cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
-  });
 
-  it('can delete a job from the jobs list row', () => {
-    const jobTemplateId = jobTemplate.id ? jobTemplate.id.toString() : '';
-    cy.requestPost<UnifiedJobList>(awxAPI`/job_templates/${jobTemplateId}/launch/`, {}).then(
-      (testJob) => {
-        cy.navigateTo('awx', 'jobs');
-        const jobId = testJob.id ? testJob.id.toString() : '';
-        cy.filterTableByMultiSelect('id', [jobId]);
-        const jobName = testJob.name ? testJob.name : '';
-        cy.waitForJobToProcessEvents(jobId, 'jobs');
-        cy.get('[data-cy="refresh"]').click();
-        cy.contains('tr', jobName, { timeout: 60 * 1000 }).should('contain', 'Success');
-        cy.clickTableRowKebabAction(jobName, 'delete-job', false);
-        cy.get('.pf-v5-c-modal-box__footer')
-          .prev()
-          .find('td[data-cy="status-column-cell"]')
-          .within(() => {
-            cy.contains('Success').should('be.visible');
-          });
-        cy.get('input[id="confirm"]').should('be.visible');
-        cy.get('#confirm').click();
-        cy.clickButton(/^Delete job/);
-        cy.contains(/^Success$/);
-        cy.clickButton(/^Close$/);
-        cy.contains('tr', jobId).should('not.exist');
-        cy.clickButton(/^Clear all filters$/);
-      }
-    );
-  });
-
-  it('can delete a job from the jobs list toolbar', () => {
-    const jobTemplateId = jobTemplate.id ? jobTemplate.id.toString() : '';
-    cy.requestPost<UnifiedJobList>(awxAPI`/job_templates/${jobTemplateId}/launch/`, {}).then(
-      (testJob) => {
-        cy.navigateTo('awx', 'jobs');
-        const jobId = testJob.id ? testJob.id.toString() : '';
-        cy.filterTableByMultiSelect('id', [jobId]);
-        const jobName = testJob.name ? testJob.name : '';
-        cy.waitForJobToProcessEvents(jobId, 'jobs');
-        cy.get('[data-cy="refresh"]').click();
-        cy.contains('tr', jobName, { timeout: 60 * 1000 }).should('contain', 'Success');
-        cy.selectTableRow(jobName, false);
-        cy.clickToolbarKebabAction('delete-selected-jobs');
-        cy.get('.pf-v5-c-modal-box__footer')
-          .prev()
-          .find('td[data-cy="status-column-cell"]')
-          .within(() => {
-            cy.contains('Success').should('be.visible');
-          });
-        cy.get('input[id="confirm"]').should('be.visible');
-        cy.get('#confirm').click();
-        cy.clickButton(/^Delete job/);
-        cy.contains(/^Success$/);
-        cy.clickButton(/^Close$/);
-        cy.contains('tr', jobId).should('not.exist');
-        cy.clickButton(/^Clear all filters$/);
-      }
-    );
-  });
-});
-
-describe('Jobs: Output and Details Screen', () => {
-  let thisId: string;
-  let organization: Organization;
-
-  before(() => {
-    cy.createAwxOrganization().then((org) => {
-      organization = org;
+    it('can render additional details on expanding job row', () => {
+      cy.navigateTo('awx', 'jobs');
+      cy.filterTableByMultiSelect('id', [job.id ? job.id.toString() : '']);
+      const jobName = job.name ? job.name : '';
+      cy.expandTableRow(jobName, false);
+      cy.hasDetail('Inventory', 'E2E Inventory');
+      cy.hasDetail('Project', 'Project');
+      cy.hasDetail('Job slice', '0/1');
+      cy.clearAllFilters();
     });
-  });
-
-  after(() => {
-    cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
-  });
 
-  it('can launch a Management job, let it finish, and assert expected results on the output screen', () => {
-    cy.navigateTo('awx', 'management-jobs');
-    cy.verifyPageTitle('Management Jobs');
-    cy.filterTableBySingleSelect('name', 'Cleanup Expired Sessions');
-    cy.intercept('POST', awxAPI`/system_job_templates/*/launch/`).as('postLaunch');
-    cy.getByDataCy('launch-management-job').click();
-    cy.wait('@postLaunch')
-      .then((response) => {
-        expect(response?.response?.statusCode).to.eql(201);
-      })
-      .its('response.body.id')
-      .then((jobId: string) => {
-        thisId = jobId;
-        cy.waitForManagementJobToProcess(thisId);
-      });
-    cy.verifyPageTitle('Cleanup Expired Sessions');
-    cy.url().then((currentUrl) => {
-      expect(currentUrl.includes(`/jobs/management/${thisId}/output`)).to.be.true;
-    });
-    cy.clickTab(/^Details$/, true);
-    cy.url().then((currentUrl) => {
-      expect(currentUrl.includes(`/jobs/management/${thisId}/details`)).to.be.true;
+    it('can filter jobs by id', () => {
+      cy.navigateTo('awx', 'jobs');
+      const jobId = job.id ? job.id.toString() : '';
+      cy.filterTableByMultiSelect('id', [jobId]);
+      cy.get('tr').should('have.length.greaterThan', 0);
+      if (job.name) {
+        cy.contains(job.name).should('be.visible');
+      }
+      cy.clearAllFilters();
     });
-    cy.getByDataCy('name').should('contain', 'Cleanup Expired Sessions');
-    cy.getByDataCy('status').should('contain', 'Success');
-    cy.getByDataCy('type').should('contain', 'Management job');
   });
 
-  it('can launch a Source Control Update job, let it finish, and assert expected results on the output screen', function () {
-    const projectName = 'E2E Project Jobs ' + randomString(4);
-    cy.navigateTo('awx', 'projects');
-    cy.verifyPageTitle('Projects');
-    cy.clickLink(/^Create project$/);
-    cy.get('[data-cy="name"]').type(projectName);
-    cy.singleSelectByDataCy('organization', `${organization.name}`);
-    cy.selectDropdownOptionByResourceName('source_control_type', 'Git');
-    cy.get('[data-cy="scm-url"]').type('https://github.com/ansible/ansible-ui');
-    cy.intercept('POST', awxAPI`/projects/`).as('newProject');
-    cy.clickButton(/^Create project$/);
-    cy.wait('@newProject')
-      .then((response) => {
-        expect(response?.response?.statusCode).to.eql(201);
-      })
-      .its('response.body')
-      .then((newProject: Project) => {
-        thisId = newProject.summary_fields.current_update.id.toString();
-        expect(newProject.status).contains('pending');
-        cy.waitForProjectToFinishSyncing(newProject.id);
-        cy.getByDataCy('name').should('contain', projectName);
-        cy.getByDataCy('source-control-type').should('contain', 'Git');
-        cy.getByDataCy('last-job-status').should('contain', 'Success');
-        cy.clickLink(/^Success$/);
-        cy.verifyPageTitle(projectName);
-        cy.url().then((currentUrl) => {
-          expect(currentUrl.includes(`/jobs/project/${thisId}/output`)).to.be.true;
-        });
-        cy.clickTab(/^Details$/, true);
-        cy.url().then((currentUrl) => {
-          expect(currentUrl.includes(`/jobs/project/${thisId}/details`)).to.be.true;
+  describe('Jobs: Delete', () => {
+    beforeEach(function () {
+      cy.createAwxInventory(awxOrganization).then((inv) => {
+        inventory = inv;
+        cy.createAwxJobTemplate({
+          organization: awxOrganization.id,
+          project: project.id,
+          inventory: inventory.id,
+        }).then((jt) => {
+          jobTemplate = jt;
         });
-        cy.getByDataCy('name').should('contain', projectName);
-        cy.getByDataCy('type').should('contain', 'Source control update');
-        cy.getByDataCy('status').should('contain', 'Success');
-        cy.deleteAwxProject(newProject, { failOnStatusCode: false });
       });
-  });
-});
 
-describe('Job template: Output and Details Screen', () => {
-  let inventory: Inventory;
-  let jobTemplate: JobTemplate;
-  let thisId: string;
-  let project: Project;
-  let organization: Organization;
-
-  before(() => {
-    cy.createAwxOrganization().then((org) => {
-      organization = org;
-      cy.createAwxProject({ organization: org.id }).then((p) => {
-        project = p;
+      afterEach(() => {
+        cy.deleteAwxJobTemplate(jobTemplate, { failOnStatusCode: false });
+        cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
       });
-    });
-  });
 
-  after(() => {
-    cy.deleteAwxProject(project, { failOnStatusCode: false }).then(() => {
-      cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
-    });
-  });
+      it('can delete a job from the jobs list row', () => {
+        const jobTemplateId = jobTemplate.id ? jobTemplate.id.toString() : '';
+        cy.requestPost<UnifiedJobList>(awxAPI`/job_templates/${jobTemplateId}/launch/`, {}).then(
+          (testJob) => {
+            cy.navigateTo('awx', 'jobs');
+            const jobId = testJob.id ? testJob.id.toString() : '';
+            cy.filterTableByMultiSelect('id', [jobId]);
+            const jobName = testJob.name ? testJob.name : '';
+            cy.waitForJobToProcessEvents(jobId, 'jobs');
+            cy.get('[data-cy="refresh"]').click();
+            cy.contains('tr', jobName, { timeout: 60 * 1000 }).should('contain', 'Success');
+            cy.clickTableRowKebabAction(jobName, 'delete-job', false);
+            cy.get('.pf-v5-c-modal-box__footer')
+              .prev()
+              .find('td[data-cy="status-column-cell"]')
+              .within(() => {
+                cy.contains('Success').should('be.visible');
+              });
+            cy.get('input[id="confirm"]').should('be.visible');
+            cy.get('#confirm').click();
+            cy.clickButton(/^Delete job/);
+            cy.contains(/^Success$/);
+            cy.clickButton(/^Close$/);
+            cy.contains('tr', jobId).should('not.exist');
+            cy.clickButton(/^Clear all filters$/);
+          }
+        );
+      });
 
-  beforeEach(function () {
-    cy.createAwxInventory({ organization: organization.id }).then((i) => {
-      inventory = i;
-      cy.createAwxJobTemplate({
-        organization: organization.id,
-        project: project.id,
-        inventory: i.id,
-      }).then((jt) => {
-        jobTemplate = jt;
+      it('can delete a job from the jobs list toolbar', () => {
+        const jobTemplateId = jobTemplate.id ? jobTemplate.id.toString() : '';
+        cy.requestPost<UnifiedJobList>(awxAPI`/job_templates/${jobTemplateId}/launch/`, {}).then(
+          (testJob) => {
+            cy.navigateTo('awx', 'jobs');
+            const jobId = testJob.id ? testJob.id.toString() : '';
+            cy.filterTableByMultiSelect('id', [jobId]);
+            const jobName = testJob.name ? testJob.name : '';
+            cy.waitForJobToProcessEvents(jobId, 'jobs');
+            cy.get('[data-cy="refresh"]').click();
+            cy.contains('tr', jobName, { timeout: 60 * 1000 }).should('contain', 'Success');
+            cy.selectTableRow(jobName, false);
+            cy.clickToolbarKebabAction('delete-selected-jobs');
+            cy.get('.pf-v5-c-modal-box__footer')
+              .prev()
+              .find('td[data-cy="status-column-cell"]')
+              .within(() => {
+                cy.contains('Success').should('be.visible');
+              });
+            cy.get('input[id="confirm"]').should('be.visible');
+            cy.get('#confirm').click();
+            cy.clickButton(/^Delete job/);
+            cy.contains(/^Success$/);
+            cy.clickButton(/^Close$/);
+            cy.contains('tr', jobId).should('not.exist');
+            cy.clickButton(/^Clear all filters$/);
+          }
+        );
       });
     });
   });
 
-  afterEach(() => {
-    cy.deleteAwxJobTemplate(jobTemplate, { failOnStatusCode: false });
-    cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
-  });
+  describe('Jobs: Output and Details Screen', () => {
+    let thisId: string;
 
-  it('can launch a Playbook Run job, let it finish, and assert expected results on the output screen', () => {
-    cy.navigateTo('awx', 'templates');
-    cy.verifyPageTitle('Templates');
-    cy.filterTableBySingleSelect('name', jobTemplate.name);
-    cy.intercept('POST', awxAPI`/job_templates/${jobTemplate.id.toString()}/launch/`).as(
-      'postLaunch'
-    );
-    cy.getByDataCy('launch-template').click();
-    cy.wait('@postLaunch')
-      .then((response) => {
-        expect(response?.response?.statusCode).to.eql(201);
-      })
-      .its('response.body.id')
-      .then((jobId: string) => {
-        thisId = jobId;
-        cy.waitForTemplateStatus(thisId);
+    it('can launch a Management job, let it finish, and assert expected results on the output screen', () => {
+      cy.navigateTo('awx', 'management-jobs');
+      cy.verifyPageTitle('Management Jobs');
+      cy.filterTableBySingleSelect('name', 'Cleanup Expired Sessions');
+      cy.intercept('POST', awxAPI`/system_job_templates/*/launch/`).as('postLaunch');
+      cy.getByDataCy('launch-management-job').click();
+      cy.wait('@postLaunch')
+        .then((response) => {
+          expect(response?.response?.statusCode).to.eql(201);
+        })
+        .its('response.body.id')
+        .then((jobId: string) => {
+          thisId = jobId;
+          cy.waitForManagementJobToProcess(thisId);
+        });
+      cy.verifyPageTitle('Cleanup Expired Sessions');
+      cy.url().then((currentUrl) => {
+        expect(currentUrl.includes(`/jobs/management/${thisId}/output`)).to.be.true;
       });
-    cy.verifyPageTitle(jobTemplate.name);
-    cy.url().then((currentUrl) => {
-      expect(currentUrl.includes(`/jobs/playbook/${thisId}/output`)).to.be.true;
     });
-    cy.clickTab(/^Details$/, true);
-    cy.url().then((currentUrl) => {
-      expect(currentUrl.includes(`/jobs/playbook/${thisId}/details`)).to.be.true;
+
+    it('can launch a Source Control Update job, let it finish, and assert expected results on the output screen', function () {
+      const projectName = 'E2E Project Jobs ' + randomString(4);
+      cy.navigateTo('awx', 'projects');
+      cy.verifyPageTitle('Projects');
+      cy.clickLink(/^Create project$/);
+      cy.get('[data-cy="name"]').type(projectName);
+      cy.singleSelectByDataCy('organization', `${awxOrganization.name}`);
+      cy.selectDropdownOptionByResourceName('source_control_type', 'Git');
+      cy.get('[data-cy="scm-url"]').type('https://github.com/ansible/ansible-ui');
+      cy.intercept('POST', awxAPI`/projects/`).as('newProject');
+      cy.clickButton(/^Create project$/);
+      cy.wait('@newProject')
+        .then((response) => {
+          expect(response?.response?.statusCode).to.eql(201);
+        })
+        .its('response.body')
+        .then((newProject: Project) => {
+          thisId = newProject.summary_fields.current_update.id.toString();
+          expect(newProject.status).contains('pending');
+          cy.waitForProjectToFinishSyncing(newProject.id);
+          cy.getByDataCy('name').should('contain', projectName);
+          cy.getByDataCy('source-control-type').should('contain', 'Git');
+          cy.getByDataCy('last-job-status').should('contain', 'Success');
+          cy.clickLink(/^Success$/);
+          cy.verifyPageTitle(projectName);
+          cy.url().then((currentUrl) => {
+            expect(currentUrl.includes(`/jobs/project/${thisId}/output`)).to.be.true;
+          });
+          cy.clickTab(/^Details$/, true);
+          cy.url().then((currentUrl) => {
+            expect(currentUrl.includes(`/jobs/project/${thisId}/details`)).to.be.true;
+          });
+          cy.getByDataCy('name').should('contain', projectName);
+          cy.getByDataCy('type').should('contain', 'Source control update');
+          cy.getByDataCy('status').should('contain', 'Success');
+          cy.deleteAwxProject(newProject, { failOnStatusCode: false });
+        });
     });
-    cy.getByDataCy('name').should('contain', jobTemplate.name);
-    cy.getByDataCy('status').should('contain', 'Success');
-    cy.getByDataCy('inventory').should('contain', inventory.name);
   });
-});
 
-describe('Inventory source: Output and Details Screen', () => {
-  let inventory: Inventory;
-  let inventorySource: InventorySource;
-  let thisId: string;
-
-  let project: Project;
-  let organization: Organization;
+  describe('Job template: Output and Details Screen', () => {
+    let inventory: Inventory;
+    let jobTemplate: JobTemplate;
 
-  before(() => {
-    cy.createAwxOrganization().then((org) => {
-      organization = org;
-      cy.createAwxProject({ organization: org.id }).then((p) => {
-        project = p;
+    beforeEach(function () {
+      cy.createAwxInventory(awxOrganization).then((i) => {
+        inventory = i;
+        cy.createAwxJobTemplate({
+          organization: awxOrganization.id,
+          project: project.id,
+          inventory: inventory.id,
+        }).then((jt) => {
+          jobTemplate = jt;
+        });
       });
     });
-  });
 
-  after(() => {
-    cy.deleteAwxProject(project, { failOnStatusCode: false }).then(() => {
-      cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
+    afterEach(() => {
+      cy.deleteAwxJobTemplate(jobTemplate, { failOnStatusCode: false });
+      cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
     });
-  });
 
-  beforeEach(function () {
-    cy.createAwxInventory({ organization: organization.id }).then((i) => {
-      inventory = i;
-      cy.createAwxInventorySource(i, project).then((invSrc) => {
-        inventorySource = invSrc;
-      });
+    it('can launch a Playbook Run job, let it finish, and assert expected results on the output screen', () => {
+      cy.navigateTo('awx', 'templates');
+      cy.verifyPageTitle('Templates');
+      cy.filterTableBySingleSelect('name', jobTemplate.name);
+      cy.intercept('POST', awxAPI`/job_templates/${jobTemplate.id.toString()}/launch/`).as(
+        'postLaunch'
+      );
+      cy.getByDataCy('launch-template').click();
+      cy.wait('@postLaunch')
+        .then((response) => {
+          expect(response?.response?.statusCode).to.eql(201);
+        })
+        .its('response.body')
+        .then((job: Job) => {
+          cy.waitForTemplateStatus(job.id.toString());
+          cy.verifyPageTitle(jobTemplate.name);
+          cy.url().then((currentUrl) => {
+            expect(currentUrl.includes(`/jobs/playbook/${job.id}/output`)).to.be.true;
+          });
+          cy.clickTab(/^Details$/, true);
+          cy.url().then((currentUrl) => {
+            expect(currentUrl.includes(`/jobs/playbook/${job.id}/details`)).to.be.true;
+          });
+          cy.getByDataCy('name').should('contain', jobTemplate.name);
+          cy.getByDataCy('status').should('contain', 'Success');
+          cy.getByDataCy('inventory').should('contain', inventory.name);
+        });
     });
   });
 
-  afterEach(() => {
-    cy.deleteAwxInventorySource(inventorySource, { failOnStatusCode: false });
-    cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
-  });
+  describe('Inventory source: Output and Details Screen', () => {
+    let inventory: Inventory;
+    let inventorySource: InventorySource;
 
-  it('can launch an Inventory Sync job, let it finish, and assert expected results on the output screen', () => {
-    cy.navigateTo('awx', 'inventories');
-    cy.verifyPageTitle('Inventories');
-    cy.filterTableBySingleSelect('name', inventory.name);
-    cy.clickTableRowLink('name', inventory.name, { disableFilter: true });
-    cy.verifyPageTitle(inventory.name);
-    cy.clickTab(/^Sources$/, true);
-    cy.intercept('POST', awxAPI`/inventory_sources/${inventorySource.id.toString()}/update/`).as(
-      'postLaunch'
-    );
-    cy.getByDataCy('launch-inventory-update').click();
-    cy.wait('@postLaunch')
-      .then((response) => {
-        expect(response?.response?.statusCode).to.eql(202);
-      })
-      .its('response.body.id')
-      .then((invId: string) => {
-        thisId = invId;
+    beforeEach(function () {
+      cy.createAwxInventory(awxOrganization).then((i) => {
+        inventory = i;
+        cy.createAwxInventorySource(inventory, project).then((invSrc) => {
+          inventorySource = invSrc;
+        });
       });
-    cy.clickTab(/^Jobs$/, true);
-    cy.filterTableBySingleSelect('name', inventorySource.name);
-    cy.clickTableRowLink('name', inventorySource.name, { disableFilter: true });
-    cy.url().then((currentUrl) => {
-      expect(currentUrl.includes(`/jobs/inventory/${thisId}/details`)).to.be.true;
     });
-    cy.getByDataCy('name').should('contain', inventory.name + ' - ' + inventorySource.name);
-    cy.getByDataCy('type').should('contain', 'Inventory sync');
-  });
-});
 
-describe('Workflow template: Output and Details Screen', () => {
-  let workflowJobTemplate: WorkflowJobTemplate;
-  let jobTemplate: JobTemplate;
-  let inventory: Inventory;
-  let project: Project;
-  let organization: Organization;
-
-  before(() => {
-    cy.createAwxOrganization().then((org) => {
-      organization = org;
-      cy.createAwxProject({ organization: org.id }).then((p) => {
-        project = p;
-      });
+    afterEach(() => {
+      cy.deleteAwxInventorySource(inventorySource, { failOnStatusCode: false });
+      cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
     });
-  });
 
-  after(() => {
-    cy.deleteAwxProject(project, { failOnStatusCode: false }).then(() => {
-      cy.deleteAwxOrganization(organization, { failOnStatusCode: false });
+    it('can launch an Inventory Sync job, let it finish, and assert expected results on the output screen', () => {
+      cy.navigateTo('awx', 'inventories');
+      cy.verifyPageTitle('Inventories');
+      cy.filterTableBySingleSelect('name', inventory.name);
+      cy.clickTableRowLink('name', inventory.name, { disableFilter: true });
+      cy.verifyPageTitle(inventory.name);
+      cy.clickTab(/^Sources$/, true);
+      cy.intercept('POST', awxAPI`/inventory_sources/${inventorySource.id.toString()}/update/`).as(
+        'postLaunch'
+      );
+      cy.getByDataCy('launch-inventory-update').click();
+      cy.wait('@postLaunch')
+        .then((response) => {
+          expect(response?.response?.statusCode).to.eql(202);
+        })
+        .its('response.body')
+        .then((inv: Inventory) => {
+          cy.clickTab(/^Jobs$/, true);
+          cy.filterTableBySingleSelect('name', inventorySource.name);
+          cy.clickTableRowLink('name', inventorySource.name, { disableFilter: true });
+          cy.url().then((currentUrl) => {
+            expect(currentUrl.includes(`/jobs/inventory/${inv.id}/details`)).to.be.true;
+          });
+        });
     });
   });
 
-  beforeEach(function () {
-    cy.createAwxInventory({ organization: organization.id }).then((i) => {
-      inventory = i;
-      cy.createAwxJobTemplate({
-        organization: organization.id,
-        project: project.id,
-        inventory: inventory.id,
-      }).then((jt) => {
-        jobTemplate = jt;
-        cy.createAwxWorkflowJobTemplate({
-          organization: organization.id,
+  describe('Workflow template: Output and Details Screen', () => {
+    let workflowJobTemplate: WorkflowJobTemplate;
+    let jobTemplate: JobTemplate;
+    let inventory: Inventory;
+
+    beforeEach(function () {
+      cy.createAwxInventory(awxOrganization).then((i) => {
+        inventory = i;
+        cy.createAwxJobTemplate({
+          organization: awxOrganization.id,
+          project: project.id,
           inventory: inventory.id,
-        }).then((wfjt) => {
-          workflowJobTemplate = wfjt;
-          cy.createAwxWorkflowVisualizerJobTemplateNode(workflowJobTemplate, jobTemplate).then(
-            (jobTemplateNode) => {
-              cy.createAwxWorkflowVisualizerManagementNode(workflowJobTemplate, 2).then(
-                (managementNode) => {
-                  cy.createWorkflowJTFailureNodeLink(jobTemplateNode, managementNode);
-                }
-              );
-            }
-          );
+        }).then((jt) => {
+          jobTemplate = jt;
+          cy.createAwxWorkflowJobTemplate({
+            organization: awxOrganization.id,
+            inventory: inventory.id,
+          }).then((wfjt) => {
+            workflowJobTemplate = wfjt;
+            cy.createAwxWorkflowVisualizerJobTemplateNode(workflowJobTemplate, jobTemplate).then(
+              (jobTemplateNode) => {
+                cy.createAwxWorkflowVisualizerManagementNode(workflowJobTemplate, 2).then(
+                  (managementNode) => {
+                    cy.createWorkflowJTFailureNodeLink(jobTemplateNode, managementNode);
+                  }
+                );
+              }
+            );
+          });
         });
       });
     });
-  });
-
-  afterEach(function () {
-    cy.deleteAwxWorkflowJobTemplate(workflowJobTemplate, { failOnStatusCode: false });
-    cy.deleteAwxJobTemplate(jobTemplate, { failOnStatusCode: false });
-    cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
-  });
 
-  it('can launch a Workflow job, let it finish, and assert expected results on the output screen', () => {
-    let thisId: string;
-    cy.navigateTo('awx', 'templates');
-    cy.verifyPageTitle('Templates');
-    cy.filterTableBySingleSelect('name', workflowJobTemplate.name);
-    cy.intercept(
-      'POST',
-      awxAPI`/workflow_job_templates/${workflowJobTemplate.id.toString()}/launch/`
-    ).as('postLaunch');
-    cy.getByDataCy('launch-template').click();
-    cy.wait('@postLaunch')
-      .then((response) => {
-        expect(response?.response?.statusCode).to.eql(201);
-      })
-      .its('response.body.id')
-      .then((jobId: string) => {
-        thisId = jobId;
-        cy.waitForWorkflowJobStatus(thisId);
-      });
-    cy.verifyPageTitle(workflowJobTemplate.name);
-    cy.url().then((currentUrl) => {
-      expect(currentUrl.includes(`/jobs/workflow/${thisId}/output`)).to.be.true;
+    afterEach(function () {
+      cy.deleteAwxWorkflowJobTemplate(workflowJobTemplate, { failOnStatusCode: false });
+      cy.deleteAwxJobTemplate(jobTemplate, { failOnStatusCode: false });
+      cy.deleteAwxInventory(inventory, { failOnStatusCode: false });
     });
-    cy.clickTab(/^Details$/, true);
-    cy.url().then((currentUrl) => {
-      expect(currentUrl.includes(`/jobs/workflow/${thisId}/details`)).to.be.true;
+
+    it('can launch a Workflow job, let it finish, and assert expected results on the output screen', () => {
+      cy.navigateTo('awx', 'templates');
+      cy.verifyPageTitle('Templates');
+      cy.filterTableBySingleSelect('name', workflowJobTemplate.name);
+      cy.intercept(
+        'POST',
+        awxAPI`/workflow_job_templates/${workflowJobTemplate.id.toString()}/launch/`
+      ).as('postLaunch');
+      cy.getByDataCy('launch-template').click();
+      cy.wait('@postLaunch')
+        .then((response) => {
+          expect(response?.response?.statusCode).to.eql(201);
+        })
+        .its('response.body')
+        .then((wfJob: WorkflowJobTemplate) => {
+          cy.waitForWorkflowJobStatus(wfJob.id.toString());
+          cy.verifyPageTitle(workflowJobTemplate.name);
+          cy.url().then((currentUrl) => {
+            expect(currentUrl.includes(`/jobs/workflow/${wfJob.id}/output`)).to.be.true;
+          });
+          cy.clickTab(/^Details$/, true);
+          cy.url().then((currentUrl) => {
+            expect(currentUrl.includes(`/jobs/workflow/${wfJob.id}/details`)).to.be.true;
+          });
+          cy.getByDataCy('name').should('contain', workflowJobTemplate.name);
+          cy.getByDataCy('type').should('contain', 'Workflow job');
+          cy.getByDataCy('inventory').should('contain', inventory.name);
+        });
     });
-    cy.getByDataCy('name').should('contain', workflowJobTemplate.name);
-    cy.getByDataCy('type').should('contain', 'Workflow job');
-    cy.getByDataCy('inventory').should('contain', inventory.name);
   });
 });
diff --git a/cypress/e2e/awx/views/schedules.cy.ts b/cypress/e2e/awx/views/schedules.cy.ts
index dbd30213d..0cdf0a76f 100644
--- a/cypress/e2e/awx/views/schedules.cy.ts
+++ b/cypress/e2e/awx/views/schedules.cy.ts
@@ -8,7 +8,7 @@ import { Schedule } from '../../../../frontend/awx/interfaces/Schedule';
 import { WorkflowJobTemplate } from '../../../../frontend/awx/interfaces/WorkflowJobTemplate';
 import { awxAPI } from '../../../support/formatApiPathForAwx';
 
-describe('Schedules - Create and Delete', () => {
+describe.skip('Schedules - Create and Delete', () => {
   describe('Schedules - Create schedule of resource type Job template', () => {
     let organization: Organization;
     let jobTemplate: JobTemplate;
@@ -18,9 +18,9 @@ describe('Schedules - Create and Delete', () => {
     before(() => {
       cy.createAwxOrganization().then((o) => {
         organization = o;
-        cy.createAwxProject({ organization: organization.id }).then((proj) => {
+        cy.createAwxProject(organization).then((proj) => {
           project = proj;
-          cy.createAwxInventory({ organization: organization.id }).then((i) => {
+          cy.createAwxInventory(organization).then((i) => {
             inventory = i;
             cy.createAwxJobTemplate({
               name: 'E2E Credentials ' + randomString(4),
@@ -83,7 +83,7 @@ describe('Schedules - Create and Delete', () => {
     beforeEach(() => {
       cy.createAwxOrganization().then((org) => {
         organization = org;
-        cy.createAwxProject({ organization: organization.id }).then((proj) => {
+        cy.createAwxProject(organization).then((proj) => {
           project = proj;
         });
       });
@@ -185,7 +185,7 @@ describe('Schedules - Create and Delete', () => {
     beforeEach(() => {
       cy.createAwxOrganization().then((o) => {
         organization = o;
-        cy.createAwxInventory({ organization: organization.id }).then((i) => {
+        cy.createAwxInventory(organization).then((i) => {
           inventory = i;
           cy.createAwxWorkflowJobTemplate({
             name: 'E2E Workflow Job Template ' + randomString(4),
@@ -281,9 +281,9 @@ describe('Schedules - Create and Delete', () => {
     before(() => {
       cy.createAwxOrganization().then((o) => {
         organization = o;
-        cy.createAwxProject({ organization: organization.id }).then((proj) => {
+        cy.createAwxProject(organization).then((proj) => {
           project = proj;
-          cy.createAwxInventory({ organization: organization.id }).then((i) => {
+          cy.createAwxInventory(organization).then((i) => {
             inventory = i;
             cy.createAwxInventorySource(i, project).then((invSrc) => {
               inventorySource = invSrc;
@@ -346,9 +346,9 @@ describe('Schedules - Create and Delete', () => {
     beforeEach(() => {
       cy.createAwxOrganization().then((o) => {
         organization = o;
-        cy.createAwxProject({ organization: organization.id }).then((proj) => {
+        cy.createAwxProject(organization).then((proj) => {
           project = proj;
-          cy.createAwxInventory({ organization: organization.id }).then((i) => {
+          cy.createAwxInventory(organization).then((i) => {
             inventory = i;
             cy.createAwxJobTemplate({
               name: 'E2E Complex Job template ' + randomString(4),
@@ -554,7 +554,7 @@ describe('Schedules - Bulk deletion', () => {
   before(() => {
     cy.createAwxOrganization().then((org) => {
       organization = org;
-      cy.createAwxProject({ organization: organization.id }).then((proj) => {
+      cy.createAwxProject(organization).then((proj) => {
         project = proj;
         for (let i = 0; i < 5; i++) {
           const scheduleName = generateScheduleName();
@@ -606,7 +606,7 @@ describe('Schedules - Edit', () => {
     const name = 'E2E Edit Schedule ' + randomString(4);
     cy.createAwxOrganization().then((org) => {
       organization = org;
-      cy.createAwxProject({ organization: organization.id }).then((proj) => {
+      cy.createAwxProject(organization).then((proj) => {
         project = proj;
         cy.createAWXSchedule({
           name,
diff --git a/cypress/e2e/eda/Projects/project-sync.cy.ts b/cypress/e2e/eda/Projects/project-sync.cy.ts
index e58bde120..27b2efab2 100644
--- a/cypress/e2e/eda/Projects/project-sync.cy.ts
+++ b/cypress/e2e/eda/Projects/project-sync.cy.ts
@@ -1,6 +1,4 @@
 describe('EDA Projects Syncing', () => {
-  before(() => cy.edaLogin());
-
   it('can sync a single project', () => {
     cy.createEdaProject().then((edaProject) => {
       cy.navigateTo('eda', 'projects');
diff --git a/cypress/e2e/eda/Projects/projects-crud.cy.ts b/cypress/e2e/eda/Projects/projects-crud.cy.ts
index 9161dc2fa..590a62774 100644
--- a/cypress/e2e/eda/Projects/projects-crud.cy.ts
+++ b/cypress/e2e/eda/Projects/projects-crud.cy.ts
@@ -7,8 +7,6 @@ import { randomString } from '../../../../framework/utils/random-string';
 import { edaAPI } from '../../../support/formatApiPathForEDA';
 
 describe('EDA Projects CRUD', () => {
-  before(() => cy.edaLogin());
-
   it('can create a Project, sync it, and assert the information showing on the details page', () => {
     const name = 'E2E Project ' + randomString(4);
     cy.navigateTo('eda', 'projects');
diff --git a/cypress/e2e/eda/Projects/projects-list.cy.ts b/cypress/e2e/eda/Projects/projects-list.cy.ts
index 14464714c..064883870 100644
--- a/cypress/e2e/eda/Projects/projects-list.cy.ts
+++ b/cypress/e2e/eda/Projects/projects-list.cy.ts
@@ -6,8 +6,6 @@ import { edaAPI } from '../../../support/formatApiPathForEDA';
 //Tests a user's ability to perform necessary actions on the Projects list in the EDA UI.
 
 describe('EDA Projects List', () => {
-  before(() => cy.edaLogin());
-
   it('renders the EDA projects page', () => {
     cy.navigateTo('eda', 'projects');
     cy.verifyPageTitle('Projects');
diff --git a/cypress/e2e/eda/admin-user/controller-token.cy.ts b/cypress/e2e/eda/admin-user/controller-token.cy.ts
index 760ad67e9..8db1f8e6b 100644
--- a/cypress/e2e/eda/admin-user/controller-token.cy.ts
+++ b/cypress/e2e/eda/admin-user/controller-token.cy.ts
@@ -1,4 +1,5 @@
 import { EdaControllerToken } from '../../../../frontend/eda/interfaces/EdaControllerToken';
+import { edaAPI } from '../../../support/formatApiPathForEDA';
 
 describe('EDA Admin User', () => {
   const checkEmptyState = () => {
@@ -12,7 +13,7 @@ describe('EDA Admin User', () => {
 
   it('checks the empty state for Controller token page and create Controller token CTA does not exist with existing token', () => {
     cy.getEdaActiveUser().then((edaUser) => {
-      cy.intercept('GET', 'api/eda/v1/users/me/awx-tokens/?page=1&page_size=10').as('checkToken');
+      cy.intercept('GET', edaAPI`/users/me/awx-tokens/?page=1&page_size=10`).as('checkToken');
       cy.navigateTo('eda', 'users');
       cy.contains('h1', 'Users');
       cy.contains(
diff --git a/cypress/e2e/eda/overview/eda-overview.cy.ts b/cypress/e2e/eda/overview/eda-overview.cy.ts
index bcf7e3245..b5644bd89 100644
--- a/cypress/e2e/eda/overview/eda-overview.cy.ts
+++ b/cypress/e2e/eda/overview/eda-overview.cy.ts
@@ -48,6 +48,7 @@ describe('EDA Overview', () => {
     cy.intercept('GET', edaAPI`/decision-environments/?page=1&page_size=10&page=1&page_size=10`).as(
       'getDEs'
     );
+    cy.navigateTo('eda', 'overview');
     cy.verifyPageTitle('Welcome to Event Driven Automation');
     cy.wait('@getDEs')
       .its('response.body.results')
diff --git a/cypress/support/auth.ts b/cypress/support/auth.ts
index cd4fef4a7..ed7d0944b 100644
--- a/cypress/support/auth.ts
+++ b/cypress/support/auth.ts
@@ -117,7 +117,7 @@ Cypress.Commands.add('awxLogout', () => {
   cy.getByDataCy('account-menu')
     .click()
     .then(() => {
-      cy.intercept('GET', `/api/logout/`).as('logout');
+      cy.intercept('GET', awxAPI`logout/`).as('logout');
       cy.get('ul>li>a').contains('Logout').click();
       cy.wait('@logout');
       cy.then(Cypress.session.clearAllSavedSessions);
diff --git a/cypress/support/awx-access-commands.ts b/cypress/support/awx-access-commands.ts
index 46b025166..f17796329 100644
--- a/cypress/support/awx-access-commands.ts
+++ b/cypress/support/awx-access-commands.ts
@@ -71,3 +71,10 @@ Cypress.Commands.add('createAwxUser', (awxUser?: Partial<AwxUser>) => {
 Cypress.Commands.add('deleteAwxUser', (user: AwxUser, options?: { failOnStatusCode?: boolean }) => {
   cy.requestDelete(awxAPI`/users/${user.id.toString()}/`, options);
 });
+
+Cypress.Commands.add('getCurrentUser', () => {
+  const url = awxAPI`/me/`;
+  cy.pollAWXResults<AwxUser>(url).then((user) => {
+    return user[0];
+  });
+});
diff --git a/cypress/support/awx-commands.ts b/cypress/support/awx-commands.ts
index 3819668ae..fa858184e 100644
--- a/cypress/support/awx-commands.ts
+++ b/cypress/support/awx-commands.ts
@@ -47,7 +47,7 @@ Cypress.Commands.add('removeAllNodesFromVisualizerToolbar', () => {
   cy.clickModalButton('Close');
 });
 
-/* Custom Cypress command called `deleteWFApprovalConfirmModal`.
+/* Custom Cypress command called `actionsWFApprovalConfirmModal`.
 This command deletes a workflow approval request.
 It verifies that the remove modal is visible, clicks the confirm checkbox,
 clicks the delete workflow approvals, asserts all workflows were removed
@@ -69,7 +69,7 @@ Cypress.Commands.add(
   }
 );
 
-/* The above code is adding a custom Cypress command called
+/* The following code is adding a custom Cypress command called
 `createAwxWorkflowVisualizerJobTemplateNode`. This command is used to create a new workflow job
 template node in an AWX (Ansible Tower) instance. */
 Cypress.Commands.add(
@@ -84,12 +84,10 @@ Cypress.Commands.add(
   }
 );
 
-/* The above code is adding a custom Cypress command called
-`createAwxWorkflowVisualizerManagementNode`. This command is used to create a workflow node for a
-given workflow job template in an AWX (Ansible Tower) application. The `workflowJobTemplateId`
-parameter is the ID of the workflow job template, and the `managementId` parameter is the ID of the
-management node (1, 2, 3, or 4). The command makes a POST request to the AWX API to create the
-workflow node with the specified parameters. */
+/** The following code is adding a custom Cypress command called
+`createAwxWorkflowVisualizerManagementNode`. This command is used to create a management job node for a workflow visualizer in an AWX (Ansible Controller) application.
+@param {'1'|'2'|'3'|'4'} managementId - Id of the management job template
+*/
 Cypress.Commands.add(
   'createAwxWorkflowVisualizerManagementNode',
   (workflowJobTemplateId: WorkflowJobTemplate, managementId: 1 | 2 | 3 | 4) => {
@@ -102,7 +100,7 @@ Cypress.Commands.add(
   }
 );
 
-/* The above code is adding a custom Cypress command called `createAwxWorkflowVisualizerWJTNode`. This
+/* The following code is adding a custom Cypress command called `createAwxWorkflowVisualizerWJTNode`. This
 command is used to create a new workflow node for a given workflow job template. It makes a POST
 request to the awxAPI`/workflow_job_templates/{id}/workflow_nodes/` endpoint with the necessary
 data to create the node. */
@@ -120,7 +118,7 @@ Cypress.Commands.add(
   }
 );
 
-/* The above code is adding a custom Cypress command called `createAwxWorkflowVisualizerProjectNode`.
+/* The following code is adding a custom Cypress command called `createAwxWorkflowVisualizerProjectNode`.
 This command is used to create a new workflow node for a given `workflowJobTemplate` and `project`
 in an AWX (Ansible Tower) environment. */
 Cypress.Commands.add(
@@ -154,7 +152,7 @@ Cypress.Commands.add(
   }
 );
 
-/* The above code is adding a custom Cypress command called
+/* The following code is adding a custom Cypress command called
 `createAwxWorkflowVisualizerInventorySourceNode`. This command is used to create a workflow node for
 an Ansible Tower workflow job template. The function takes two parameters: `workflowJobTemplate` (of
 type `WorkflowJobTemplate`) and `inventorySource` (of type `InventorySource`). */
@@ -174,7 +172,7 @@ Cypress.Commands.add(
   }
 );
 
-/* The above code is adding a custom Cypress command called `createWorkflowJTSuccessNodeLink`. This
+/* The following code is adding a custom Cypress command called `createWorkflowJTSuccessNodeLink`. This
 command is used to create a link between two nodes in a workflow job template. It takes two
 parameters, `firstNode` and `secondNode`, which are objects representing the first and second nodes
 respectively. */
@@ -190,11 +188,10 @@ Cypress.Commands.add(
   }
 );
 
-/* The above code is adding a custom Cypress command called `createWorkflowJTFailureNodeLink`. This
+/* The following code is adding a custom Cypress command called `createWorkflowJTFailureNodeLink`. This
 command is used to create a failure node link between two workflow job template nodes. It makes a
 POST request to the awxAPI`/workflow_job_template_nodes/{firstNode.id}/failure_nodes/` endpoint
 with the `id` of the second node as the request payload. */
-
 Cypress.Commands.add(
   'createWorkflowJTFailureNodeLink',
   function (firstNode: WorkflowNode, secondNode: WorkflowNode) {
@@ -251,9 +248,15 @@ Cypress.Commands.add(
   }
 );
 
-/**
- * cy.inputCustomCredTypeConfig(json/yml, input/injector config)
- */
+Cypress.Commands.add('pollAWXResults', <T>(url: string) => {
+  cy.requestGet<AwxItemsResponse<T>>(url).then((result) => {
+    if (Array.isArray(result?.results) && result.results.length > 0) {
+      cy.wrap(result.results);
+    } else {
+      cy.wait(100).then(() => cy.pollAWXResults(url));
+    }
+  });
+});
 
 Cypress.Commands.add('inputCustomCredTypeConfig', (configType: string, config: string) => {
   cy.get(`[data-cy="${configType}"]`)
@@ -268,10 +271,6 @@ Cypress.Commands.add('inputCustomCredTypeConfig', (configType: string, config: s
     .type('{esc}');
 });
 
-/**@param
- * createAWXCredentialTypeUI
- */
-
 Cypress.Commands.add(
   'createAndDeleteCustomAWXCredentialTypeUI',
   (
@@ -518,9 +517,6 @@ Cypress.Commands.add(
 
 Cypress.Commands.add('clickModalButton', (label: string | RegExp) => {
   cy.get('[data-ouia-component-type="PF5/ModalContent"]').within(() => {
-    // cy.contains('button', label).click();
-    // FIXME: contains doesn't work inside modals !?
-    // ref.: https://github.com/cypress-io/cypress/issues/9268
     cy.clickButton(label);
   });
 });
@@ -600,12 +596,14 @@ Cypress.Commands.add(
 Cypress.Commands.add(
   'createAwxProject',
   (
-    project?: SetRequired<Partial<Omit<Project, 'id'>>, 'organization'>,
+    organization: Organization,
+    project?: Partial<Project>,
     scm_url?: string,
     skipSync?: boolean
   ) => {
     cy.requestPost<Project>(awxAPI`/projects/`, {
       name: 'E2E Project ' + randomString(4),
+      organization: organization.id,
       scm_type: 'git',
       scm_url: scm_url ? scm_url : 'https://github.com/ansible/ansible-ui',
       ...project,
@@ -700,28 +698,22 @@ Cypress.Commands.add(
   }
 );
 
-Cypress.Commands.add('createAwxInventory', (inventory?: Partial<Omit<Inventory, 'id'>>) => {
-  if (inventory?.organization !== undefined) {
-    cy.requestPost<Inventory, Partial<Omit<Inventory, 'id'>>>(awxAPI`/inventories/`, {
+Cypress.Commands.add(
+  'createAwxInventory',
+  (organization: Organization, inventory?: Partial<Inventory>) => {
+    cy.requestPost<Inventory>(awxAPI`/inventories/`, {
       name: 'E2E Inventory ' + randomString(4),
+      organization: organization.id,
       ...inventory,
     });
-  } else {
-    cy.createAwxOrganization().then((organization) => {
-      cy.requestPost<Inventory, Partial<Omit<Inventory, 'id'>>>(awxAPI`/inventories/`, {
-        name: 'E2E Inventory ' + randomString(4),
-        organization: organization.id,
-        ...inventory,
-      });
-    });
   }
-});
+);
 
 Cypress.Commands.add('createAwxConstructedInventory', (organization: Organization) => {
   const arrayOfInventories: number[] = [];
   // creates 3 inventories
   for (let i = 0; i < 3; i++) {
-    cy.createAwxInventory({ organization: organization.id }).then((inv) => {
+    cy.createAwxInventory(organization).then((inv: Inventory) => {
       arrayOfInventories.push(inv.id);
     });
   }
@@ -926,7 +918,6 @@ Cypress.Commands.add(
     cy.getAwxWorkflowJobTemplateByName(workflowJobTemplateName)
       .its('results[0]')
       .then((results: WorkflowJobTemplate) => {
-        cy.log('THIS ONE THIS ONE', results.id);
         cy.intercept(
           {
             method: 'GET',
@@ -936,7 +927,10 @@ Cypress.Commands.add(
         )
           .as('newVisualizerView')
           .then(() => {
-            cy.visit(`/templates/workflow-job-template/${results.id}/visualizer`);
+            cy.navigateTo('awx', 'templates');
+            cy.filterTableByMultiSelect('name', [results.name]);
+            cy.clickTableRowLink('name', results.name, { disableFilter: true });
+            cy.get('a[href*="/visualizer"]').click();
           });
       });
   }
@@ -1130,7 +1124,6 @@ Cypress.Commands.add(
       failOnStatusCode?: boolean;
     }
   ) => {
-    // const instanceGroupId = instanceGroup.id;
     if (instanceGroup?.id) {
       cy.requestDelete(awxAPI`/instance_groups/${instanceGroup.id.toString()}/`, options);
     }
@@ -1286,7 +1279,8 @@ Cypress.Commands.add('cancelJob', (job: Job) => {
 const GLOBAL_PROJECT_NAME = 'Global Project';
 const GLOBAL_PROJECT_DESCRIPTION = 'Global Read Only Project for E2E tests';
 const GLOBAL_PROJECT_SCM_URL = 'https://github.com/ansible/ansible-ui';
-const GLOBAL_ORG_NAME = 'Global Organization';
+const GLOBAL_ORG_NAME = 'Global Platform Level Organization';
+const GLOBAL_ORG_DESCRIPTION = 'DO NOT DELETE: Global Organization';
 
 /** Create a global organization if it doesn't exist. */
 Cypress.Commands.add('createGlobalOrganization', function () {
@@ -1296,7 +1290,7 @@ Cypress.Commands.add('createGlobalOrganization', function () {
       if (orgResults.length === 0) {
         cy.requestPost<AwxItemsResponse<Organization>, Partial<Organization>>(
           awxAPI`/organizations/`,
-          { name: GLOBAL_ORG_NAME }
+          { name: GLOBAL_ORG_NAME, description: GLOBAL_ORG_DESCRIPTION }
         );
         cy.wait(100).then(() => cy.createGlobalOrganization());
       } else {
@@ -1545,7 +1539,7 @@ Cypress.Commands.add('removeAwxInstance', (id: string) => {
 
 Cypress.Commands.add(
   'createNotificationTemplate',
-  function (notificationName: string, organization_id?: number) {
+  function (notificationName: string, organization: Organization) {
     cy.requestPost<
       Pick<
         NotificationTemplate,
@@ -1554,9 +1548,7 @@ Cypress.Commands.add(
       NotificationTemplate
     >(awxAPI`/notification_templates/`, {
       name: notificationName ? notificationName : 'E2E Notification ' + randomString(4),
-      organization: organization_id
-        ? organization_id
-        : (this.globalAwxOrganization as Organization).id,
+      organization: organization.id,
       notification_type: 'email',
       notification_configuration: {
         host: '127.0.0.1',
@@ -1589,9 +1581,15 @@ Cypress.Commands.add(
 Cypress.Commands.add(
   'createTemplateSurvey',
   (template: JobTemplate | WorkflowJobTemplate, label: string, spec: Spec) => {
-    cy.visit(
-      `/templates/${template.type === 'job_template' ? 'job-template' : 'workflow-job-template'}/${template.id}/survey/add`
-    );
+    cy.navigateTo('awx', 'templates');
+    cy.verifyPageTitle('Templates');
+    cy.filterTableByMultiSelect('name', [template.name]);
+    cy.get('[data-cy="name-column-cell"]').within(() => {
+      cy.get('a').click();
+    });
+    cy.verifyPageTitle(template.name);
+    cy.get('a[href*="survey"]').click();
+
     cy.getByDataCy('question-name').type(spec.question_name ?? '');
     cy.getByDataCy('question-description').type(spec?.question_description ?? '');
     cy.getByDataCy('question-variable').type(spec?.variable ?? '');
diff --git a/cypress/support/commands.d.ts b/cypress/support/commands.d.ts
index f92fa742a..50f113c9b 100644
--- a/cypress/support/commands.d.ts
+++ b/cypress/support/commands.d.ts
@@ -673,7 +673,8 @@ declare global {
        * @returns {Chainable<Project>}
        */
       createAwxProject(
-        project?: SetRequired<Partial<Omit<Project, 'id'>>, 'organization'>,
+        organization: Organization,
+        project?: Partial<Project>,
         scm_url?: string,
         skipSync?: boolean
       ): Chainable<Project>;
@@ -694,14 +695,11 @@ declare global {
       ): Chainable<Credential>;
       /** Creates a credential type in AWX */
       createAwxCredentialType(): Chainable<CredentialType>;
-      /**
-       * Creates a project in AWX that is specific to being utilized in an EDA test.
-       */
-      createEdaSpecificAwxProject(options?: {
-        project?: Partial<Omit<Project, 'id'>>;
-      }): Chainable<Project>;
 
-      createAwxInventory(inventory?: Partial<Omit<Inventory, 'id'>>): Chainable<Inventory>;
+      createAwxInventory(
+        organization: Organization,
+        inventory?: Partial<Inventory>
+      ): Chainable<Inventory>;
 
       createAwxConstructedInventory(organization: Organization): Chainable<Inventory>;
 
@@ -769,6 +767,26 @@ declare global {
 
       getAwxInstanceGroupByName(instanceGroupName: string): Chainable<InstanceGroup>;
 
+      getAwxOrgByAnsibleId(orgAnsibleId: string | undefined): Chainable<Organization>;
+
+      getGatewayOrgByAnsibleId(orgAnsibleId: string | undefined): Chainable<Organization>;
+
+      getAwxUserByAnsibleId(userAnsibleId: string | undefined): Chainable<AwxUser>;
+
+      getAwxTeamByAnsibleId(teamAnsibleId: string | undefined): Chainable<Team>;
+
+      /**
+       * pollAWXResults - Polls AWX until results are found
+       * @param url The url for the get request
+       *
+       * @example
+       *  cy.pollAWXResults<Project>(awxAPI`/projects/`).then(
+       *    (projects: Project[]) => {
+       *      // Do something with projects
+       *    }
+       */
+      pollAWXResults<T = unknown>(url: string): Chainable<T[]>;
+
       renderWorkflowVisualizerNodesFromFixtureFile(
         workflowJobTemplateName: string,
         fixtureFile: string
@@ -864,6 +882,7 @@ declare global {
        */
       createAwxTeam(awxTeam?: Partial<Team>): Chainable<Team>;
       createAwxUser(awxUser?: Partial<AwxUser>): Chainable<AwxUser>;
+      getCurrentUser(): Chainable<AwxUser>;
       getAwxRoles(): Chainable<RoleSerializerWithParentAccess>;
       createAwxInstanceGroup(
         instanceGroup?: Partial<Omit<InstanceGroup, 'id'>>
@@ -1161,7 +1180,7 @@ declare global {
 
       createNotificationTemplate(
         notificationName: string,
-        organization_id?: number
+        organization: Organization
       ): Chainable<NotificationTemplate>;
 
       deleteNotificationTemplate(
diff --git a/frontend/awx/administration/instances/InstancesPage.cy.tsx b/frontend/awx/administration/instances/InstancesPage.cy.tsx
index 08b14859d..45ca097b6 100644
--- a/frontend/awx/administration/instances/InstancesPage.cy.tsx
+++ b/frontend/awx/administration/instances/InstancesPage.cy.tsx
@@ -1,3 +1,4 @@
+import { awxAPI } from '../../common/api/awx-utils';
 import { InstancePage } from './InstancesPage';
 
 describe('Instances Page', () => {
@@ -8,7 +9,7 @@ describe('Instances Page', () => {
   });
 
   it('Component renders, displays instance in breadcrumb and buttons enabled', () => {
-    cy.intercept('GET', '/api/v2/settings/system*', {
+    cy.intercept('GET', awxAPI`/settings/system*`, {
       IS_K8S: true,
     }).as('isK8s');
     cy.mount(<InstancePage />);
@@ -29,16 +30,16 @@ describe('Instances Page', () => {
     cy.getByDataCy('run-health-check').should('have.attr', 'aria-disabled', 'false');
   });
 
-  it('edit instance button should be hidden for non-k8s system', () => {
-    cy.intercept('GET', '/api/v2/settings/system*', {
+  it('edit instance button should be hidden for non-k8s deployment', () => {
+    cy.intercept('GET', awxAPI`/settings/system*`, {
       IS_K8S: false,
     }).as('isK8s');
     cy.mount(<InstancePage />);
     cy.get('[data-cy="edit-instance"]').should('not.exist');
   });
 
-  it('edit instance button should be shown for k8s system', () => {
-    cy.intercept('GET', '/api/v2/settings/system*', {
+  it('edit instance button should be shown for k8s deployment', () => {
+    cy.intercept('GET', awxAPI`/settings/system*`, {
       IS_K8S: true,
     }).as('isK8s');
     cy.mount(<InstancePage />);
@@ -47,7 +48,7 @@ describe('Instances Page', () => {
   });
 
   it('only admin users can edit instance', () => {
-    cy.intercept('GET', '/api/v2/settings/system*', {
+    cy.intercept('GET', awxAPI`/settings/system*`, {
       IS_K8S: true,
     }).as('isK8s');
     cy.mount(<InstancePage />);
@@ -61,7 +62,7 @@ describe('Instances Page', () => {
   });
 
   it('edit instance button should be hidden for managed instance', () => {
-    cy.intercept('GET', '/api/v2/settings/system*', {
+    cy.intercept('GET', awxAPI`/settings/system*`, {
       IS_K8S: true,
     }).as('isK8s');
     cy.intercept('GET', '/api/v2/instances/*', {
@@ -85,27 +86,30 @@ describe('Instances Page', () => {
       });
   });
 
-  it('remove instance button should be hidden for non-k8s system', () => {
-    cy.intercept('GET', '/api/v2/settings/system*', {
+  it('remove instance button should be hidden for non-k8s deployment', () => {
+    cy.intercept('GET', awxAPI`/settings/system*`, {
       IS_K8S: false,
     }).as('isK8s');
     cy.mount(<InstancePage />);
-    cy.get('[data-cy="actions-dropdown"]').click();
-    cy.get('[data-cy="remove-instance"]').should('not.exist');
+    cy.wait('@isK8s').then(() => {
+      cy.get('actions-dropdown').should('not.exist');
+    });
   });
 
-  it('remove instance button should be shown for k8s system', () => {
-    cy.intercept('GET', '/api/v2/settings/system*', {
+  it('remove instance button should be shown for k8s deployment', () => {
+    cy.intercept('GET', awxAPI`/settings/system*`, {
       IS_K8S: true,
     }).as('isK8s');
     cy.mount(<InstancePage />);
-    cy.getByDataCy('actions-dropdown').click();
-    cy.getByDataCy('remove-instance').should('be.visible');
-    cy.getByDataCy('remove-instance').should('have.attr', 'aria-disabled', 'false');
+    cy.wait('@isK8s').then(() => {
+      cy.getByDataCy('actions-dropdown').click();
+      cy.getByDataCy('remove-instance').should('be.visible');
+      cy.getByDataCy('remove-instance').should('have.attr', 'aria-disabled', 'false');
+    });
   });
 
   it('only admin users can remove instance', () => {
-    cy.intercept('GET', '/api/v2/settings/system*', {
+    cy.intercept('GET', awxAPI`/settings/system*`, {
       IS_K8S: true,
     }).as('isK8s');
     cy.mount(<InstancePage />);
@@ -119,7 +123,7 @@ describe('Instances Page', () => {
   });
 
   it('remove instance button should be hidden for managed instance', () => {
-    cy.intercept('GET', '/api/v2/settings/system*', {
+    cy.intercept('GET', awxAPI`/settings/system*`, {
       IS_K8S: true,
     }).as('isK8s');
     cy.intercept('GET', '/api/v2/instances/*', {
@@ -134,16 +138,16 @@ describe('Instances Page', () => {
       });
   });
 
-  it('peers tab should be hidden for non-k8s system', () => {
-    cy.intercept('GET', '/api/v2/settings/system*', {
+  it('peers tab should be hidden for non-k8s deployment', () => {
+    cy.intercept('GET', awxAPI`/settings/system*`, {
       IS_K8S: false,
     }).as('isK8s');
     cy.mount(<InstancePage />);
     cy.get('[data-cy="instances-peers-tab"]').should('not.exist');
   });
 
-  it('peers tab should be shown for k8s system', () => {
-    cy.intercept('GET', '/api/v2/settings/system*', {
+  it('peers tab should be shown for k8s deployment', () => {
+    cy.intercept('GET', awxAPI`/settings/system*`, {
       IS_K8S: true,
     }).as('isK8s');
     cy.mount(<InstancePage />);
@@ -151,16 +155,16 @@ describe('Instances Page', () => {
     cy.getByDataCy('instances-peers-tab').should('be.enabled');
   });
 
-  it('listener addresses tab should be hidden for non-k8s system', () => {
-    cy.intercept('GET', '/api/v2/settings/system*', {
+  it('listener addresses tab should be hidden for non-k8s deployment', () => {
+    cy.intercept('GET', awxAPI`/settings/system*`, {
       IS_K8S: false,
     }).as('isK8s');
     cy.mount(<InstancePage />);
     cy.get('[data-cy="instances-listener-addresses-tab"]').should('not.exist');
   });
 
-  it('listener addresses tab should be shown for k8s system', () => {
-    cy.intercept('GET', '/api/v2/settings/system*', {
+  it('listener addresses tab should be shown for k8s deployment', () => {
+    cy.intercept('GET', awxAPI`/settings/system*`, {
       IS_K8S: true,
     }).as('isK8s');
     cy.mount(<InstancePage />);
diff --git a/tsconfig.json b/tsconfig.json
index 2332dc7db..0265dd738 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -36,6 +36,7 @@
     "cypress",
     "*.config.ts",
     "cypress.d.ts",
+    "webpack/environment.d.ts",
     "i18next-parser.config.cjs"
   ]
 }
diff --git a/webpack/environment.cjs b/webpack/environment.cjs
index c5ac0492f..62196c95e 100644
--- a/webpack/environment.cjs
+++ b/webpack/environment.cjs
@@ -46,4 +46,4 @@ module.exports = {
   HUB_SERVER,
   HUB_USERNAME,
   ROUTE_PREFIX,
-};
+};
\ No newline at end of file
diff --git a/webpack/webpack.config.cjs b/webpack/webpack.config.cjs
index e11aa2220..057c5e9ab 100644
--- a/webpack/webpack.config.cjs
+++ b/webpack/webpack.config.cjs
@@ -170,4 +170,4 @@ module.exports = function (env, argv) {
     },
   };
   return config;
-};
+};
\ No newline at end of file
