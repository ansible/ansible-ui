{
  "openapi": "3.0.3",
  "info": {
    "title": "Event Driven Ansible API",
    "version": "1.0.0"
  },
  "paths": {
    "/activation-instances/": {
      "get": {
        "operationId": "activation_instances_list",
        "description": "List all the Activation Instances",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by activation instance name."
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "description": "Filter by activation instance status."
          }
        ],
        "tags": ["activation-instances"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedActivationInstanceList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/activation-instances/{id}/logs/": {
      "get": {
        "operationId": "activation_instances_logs_list",
        "description": "List all logs for the Activation Instance",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Activation Instance.",
            "required": true
          },
          {
            "in": "query",
            "name": "log",
            "schema": {
              "type": "string"
            },
            "description": "Filter by activation instance log."
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["activation-instances"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedActivationInstanceLogList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/activation-instances/{id}/": {
      "get": {
        "operationId": "activation_instances_retrieve",
        "description": "Get the Activation Instance by its id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this rulebook process.",
            "required": true
          }
        ],
        "tags": ["activation-instances"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivationInstance"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/activations/": {
      "get": {
        "operationId": "activations_list",
        "description": "List all Activations",
        "parameters": [
          {
            "in": "query",
            "name": "decision_environment_id",
            "schema": {
              "type": "number"
            },
            "description": "Filter by Decision Environment ID."
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by activation name."
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "description": "Filter by activation status."
          }
        ],
        "tags": ["activations"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedActivationListList"
                }
              }
            },
            "description": "Return a list of Activations."
          }
        }
      },
      "post": {
        "operationId": "activations_create",
        "tags": ["activations"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivationCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ActivationCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ActivationCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivationRead"
                }
              }
            },
            "description": ""
          },
          "400": {
            "description": "Invalid data to create activation."
          }
        }
      }
    },
    "/activations/{id}/instances/": {
      "get": {
        "operationId": "activations_instances_list",
        "description": "List all instances for the Activation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this rulebook.",
            "required": true
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by activation instance name."
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "description": "Filter by activation instance status."
          }
        ],
        "tags": ["activations"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedActivationInstanceList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/activations/{id}/": {
      "get": {
        "operationId": "activations_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this activation.",
            "required": true
          }
        ],
        "tags": ["activations"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivationRead"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "activations_destroy",
        "description": "Delete an existing Activation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this activation.",
            "required": true
          }
        ],
        "tags": ["activations"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "204": {
            "description": "The Activation has been deleted."
          }
        }
      }
    },
    "/activations/{id}/disable/": {
      "post": {
        "operationId": "activations_disable_create",
        "description": "Disable the Activation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this activation.",
            "required": true
          }
        ],
        "tags": ["activations"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "204": {
            "description": "Activation has been disabled."
          }
        }
      }
    },
    "/activations/{id}/enable/": {
      "post": {
        "operationId": "activations_enable_create",
        "description": "Enable the Activation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this activation.",
            "required": true
          }
        ],
        "tags": ["activations"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "204": {
            "description": "Activation has been enabled."
          },
          "400": {
            "description": "Activation not enabled."
          },
          "409": {
            "description": "Activation not enabled do to current activation status"
          }
        }
      }
    },
    "/activations/{id}/restart/": {
      "post": {
        "operationId": "activations_restart_create",
        "description": "Restart the Activation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this activation.",
            "required": true
          }
        ],
        "tags": ["activations"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "204": {
            "description": "Activation restart was successful."
          },
          "400": {
            "description": "Activation not enabled."
          }
        }
      }
    },
    "/audit-rules/": {
      "get": {
        "operationId": "audit_rules_list",
        "description": "List all fired rules",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by rule audit name."
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["audit-rules"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAuditRuleListList"
                }
              }
            },
            "description": "Return a list of fired rules."
          }
        }
      }
    },
    "/audit-rules/{id}/actions/": {
      "get": {
        "operationId": "audit_rules_actions_list",
        "description": "Action list of a fired rule by its id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this rule audit.",
            "required": true
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by rule audit action name."
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["audit-rules"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAuditActionList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/audit-rules/{id}/events/": {
      "get": {
        "operationId": "audit_rules_events_list",
        "description": "Event list of a fired rule by its id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Audit Rule.",
            "required": true
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "source_name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by rule audit event source name."
          }
        ],
        "tags": ["audit-rules"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAuditEventList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/audit-rules/{id}/": {
      "get": {
        "operationId": "audit_rules_retrieve",
        "description": "Get the fired rule by its id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this audit rule.",
            "required": true
          }
        ],
        "tags": ["audit-rules"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditRuleDetail"
                }
              }
            },
            "description": "Return the fired rule by its id."
          }
        }
      }
    },
    "/auth/session/login/": {
      "get": {
        "operationId": "auth_session_preflight",
        "description": "Use this method to set a CSRF cookie.",
        "tags": ["auth"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "auth_session_login",
        "description": "Session cookie login",
        "tags": ["auth"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "403": {
            "description": "Invalid credentials or user is disabled."
          },
          "204": {
            "description": "Login successful."
          }
        }
      }
    },
    "/auth/session/logout/": {
      "post": {
        "operationId": "auth_session_logout",
        "description": "Session logout.",
        "tags": ["auth"],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Logout successful."
          }
        }
      }
    },
    "/auth/token/refresh/": {
      "post": {
        "operationId": "auth_token_refresh_create",
        "description": "Takes a refresh type JSON web token and returns an access type JSON web\ntoken if the refresh token is valid.",
        "tags": ["auth"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRefresh"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TokenRefresh"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/TokenRefresh"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenRefresh"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/credential-types/": {
      "get": {
        "operationId": "credential_types_list",
        "description": "List all credential types",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by credential type name."
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["credential-types"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCredentialTypeList"
                }
              }
            },
            "description": "Return a list of credential types."
          }
        }
      },
      "post": {
        "operationId": "credential_types_create",
        "description": "Create a new credential type.",
        "tags": ["credential-types"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialTypeCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CredentialTypeCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CredentialTypeCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialType"
                }
              }
            },
            "description": "Return the new credential type."
          }
        }
      }
    },
    "/credential-types/{id}/": {
      "get": {
        "operationId": "credential_types_retrieve",
        "description": "Get credential type by id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this credential type.",
            "required": true
          }
        ],
        "tags": ["credential-types"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialType"
                }
              }
            },
            "description": "Return a credential type by id."
          }
        }
      },
      "patch": {
        "operationId": "credential_types_partial_update",
        "description": "Partial update of a credential type",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this credential type.",
            "required": true
          }
        ],
        "tags": ["credential-types"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCredentialTypeCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCredentialTypeCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCredentialTypeCreate"
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialType"
                }
              }
            },
            "description": "Update successful. Return an updated credential type."
          }
        }
      },
      "delete": {
        "operationId": "credential_types_destroy",
        "description": "Delete a credential type by id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this credential type.",
            "required": true
          }
        ],
        "tags": ["credential-types"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successful."
          },
          "409": {
            "description": "CredentialType in use by Credentials."
          }
        }
      }
    },
    "/decision-environments/": {
      "get": {
        "operationId": "decision_environments_list",
        "description": "List all decision environments",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by decision environment name."
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["decision-environments"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedDecisionEnvironmentList"
                }
              }
            },
            "description": "Return a list of decision environment."
          }
        }
      },
      "post": {
        "operationId": "decision_environments_create",
        "description": "Create a new decision environment.",
        "tags": ["decision-environments"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DecisionEnvironmentCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DecisionEnvironmentCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DecisionEnvironmentCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecisionEnvironment"
                }
              }
            },
            "description": "Return the new decision environment."
          }
        }
      }
    },
    "/decision-environments/{id}/": {
      "get": {
        "operationId": "decision_environments_retrieve",
        "description": "Get a decision environment by id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this decision environment.",
            "required": true
          }
        ],
        "tags": ["decision-environments"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecisionEnvironmentRead"
                }
              }
            },
            "description": "Return a decision environment by id."
          }
        }
      },
      "patch": {
        "operationId": "decision_environments_partial_update",
        "description": "Partially update a decision environment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this decision environment.",
            "required": true
          }
        ],
        "tags": ["decision-environments"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedDecisionEnvironmentCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedDecisionEnvironmentCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedDecisionEnvironmentCreate"
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecisionEnvironment"
                }
              }
            },
            "description": "Update successful. Return an updated decision environment."
          }
        }
      },
      "delete": {
        "operationId": "decision_environments_destroy",
        "description": "Delete a decision environment by id",
        "parameters": [
          {
            "in": "query",
            "name": "force",
            "schema": {
              "type": "boolean"
            },
            "description": "Force deletion if there are dependent objects"
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this decision environment.",
            "required": true
          }
        ],
        "tags": ["decision-environments"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successful."
          },
          "409": {
            "description": "Decision Environment in use by Activations."
          }
        }
      }
    },
    "/eda-credentials/": {
      "get": {
        "operationId": "eda_credentials_list",
        "description": "List all EDA credentials",
        "parameters": [
          {
            "in": "query",
            "name": "credential_type__kind",
            "schema": {
              "type": "string"
            },
            "description": "Kind of CredentialType"
          },
          {
            "in": "query",
            "name": "credential_type_id",
            "schema": {
              "type": "number"
            },
            "description": "Filter by Credential Type ID."
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by EDA credential name."
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["eda-credentials"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedEdaCredentialList"
                }
              }
            },
            "description": "Return a list of EDA credentials."
          }
        }
      },
      "post": {
        "operationId": "eda_credentials_create",
        "description": "Create a new EDA credential.",
        "tags": ["eda-credentials"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EdaCredentialCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/EdaCredentialCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/EdaCredentialCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdaCredential"
                }
              }
            },
            "description": "Return the new EDA credential."
          }
        }
      }
    },
    "/eda-credentials/{id}/": {
      "get": {
        "operationId": "eda_credentials_retrieve",
        "description": "Get EDA credential by id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this eda credential.",
            "required": true
          },
          {
            "in": "query",
            "name": "refs",
            "schema": {
              "type": "string",
              "enum": ["false", "true"]
            },
            "description": "Query resources that have reference to the credential by its id"
          }
        ],
        "tags": ["eda-credentials"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdaCredential"
                }
              }
            },
            "description": "Return an EDA credential by id."
          }
        }
      },
      "patch": {
        "operationId": "eda_credentials_partial_update",
        "description": "Partial update of an EDA credential",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this eda credential.",
            "required": true
          }
        ],
        "tags": ["eda-credentials"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEdaCredentialCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEdaCredentialCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEdaCredentialCreate"
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdaCredential"
                }
              }
            },
            "description": "Update successful. Return an updated EDA credential."
          }
        }
      },
      "delete": {
        "operationId": "eda_credentials_destroy",
        "description": "Delete an eda credential by id",
        "parameters": [
          {
            "in": "query",
            "name": "force",
            "schema": {
              "type": "boolean"
            },
            "description": "Force deletion if there are dependent objects"
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this eda credential.",
            "required": true
          }
        ],
        "tags": ["eda-credentials"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successful."
          }
        }
      }
    },
    "/organizations/": {
      "get": {
        "operationId": "organizations_list",
        "description": "List all organizations.",
        "parameters": [
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string"
            },
            "description": "Filter by organization description."
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by organization name."
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "resource__ansible_id",
            "schema": {
              "type": "string"
            },
            "description": "Filter by resource ansible ID."
          }
        ],
        "tags": ["organizations"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedOrganizationList"
                }
              }
            },
            "description": "Return a list of organizations."
          }
        }
      },
      "post": {
        "operationId": "organizations_create",
        "description": "Create a new organization",
        "tags": ["organizations"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            },
            "description": "Return the new organization."
          }
        }
      }
    },
    "/organizations/{id}/": {
      "get": {
        "operationId": "organizations_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this organization.",
            "required": true
          }
        ],
        "tags": ["organizations"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "organizations_partial_update",
        "description": "Partially update an organization",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this organization.",
            "required": true
          }
        ],
        "tags": ["organizations"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedOrganizationCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedOrganizationCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedOrganizationCreate"
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            },
            "description": "Update successful. Return an updated organization."
          }
        }
      },
      "delete": {
        "operationId": "organizations_destroy",
        "description": "Delete an organization by id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this organization.",
            "required": true
          }
        ],
        "tags": ["organizations"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successful."
          },
          "409": {
            "description": "Default Organization cannot be deleted."
          }
        }
      }
    },
    "/organizations/{id}/teams/": {
      "get": {
        "operationId": "organizations_teams_list",
        "description": "List all teams of the organization",
        "parameters": [
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string"
            },
            "description": "Filter by team description."
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this organization.",
            "required": true
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by team name."
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "resource__ansible_id",
            "schema": {
              "type": "string"
            },
            "description": "Filter by resource ansible ID."
          }
        ],
        "tags": ["organizations"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTeamList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/projects/": {
      "get": {
        "operationId": "projects_list",
        "description": "List all projects",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by project name."
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "url",
            "schema": {
              "type": "string"
            },
            "description": "Filter by project url."
          }
        ],
        "tags": ["projects"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedProjectList"
                }
              }
            },
            "description": "Return a list of projects."
          }
        }
      },
      "post": {
        "operationId": "projects_create",
        "description": "Import a project.",
        "tags": ["projects"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreateRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreateRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreateRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": "Return a created project."
          }
        }
      }
    },
    "/projects/{id}/": {
      "get": {
        "operationId": "projects_retrieve",
        "description": "Get a project by id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this project.",
            "required": true
          }
        ],
        "tags": ["projects"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectRead"
                }
              }
            },
            "description": "Return a project by id."
          }
        }
      },
      "patch": {
        "operationId": "projects_partial_update",
        "description": "Partial update of a project",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this project.",
            "required": true
          }
        ],
        "tags": ["projects"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedProjectUpdateRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedProjectUpdateRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedProjectUpdateRequest"
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": "Update successful. Return an updated project."
          },
          "400": {
            "description": "Update failed with bad request."
          },
          "409": {
            "description": "Update failed with integrity checking."
          }
        }
      },
      "delete": {
        "operationId": "projects_destroy",
        "description": "Delete a project by id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this project.",
            "required": true
          }
        ],
        "tags": ["projects"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successful."
          }
        }
      }
    },
    "/projects/{id}/sync/": {
      "post": {
        "operationId": "projects_sync_create",
        "description": "Sync a project",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this project.",
            "required": true
          }
        ],
        "tags": ["projects"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/role_definitions/": {
      "get": {
        "operationId": "role_definitions_list",
        "description": "Role Definitions (roles) contain a list of permissions and can be used to\nassign those permissions to a user or team through the respective\nassignment endpoints.\n\nCustom roles can be created, modified, and deleted through this endpoint.\nSystem-managed roles are shown here, which cannot be edited or deleted,\nbut can be assigned to users.",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "A search term.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": ["role_definitions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRoleDefinitionList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "role_definitions_create",
        "description": "Create a RoleDefinition.",
        "tags": ["role_definitions"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleDefinitionCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RoleDefinitionCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/RoleDefinitionCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDefinition"
                }
              }
            },
            "description": "Return a created RoleDefinition."
          }
        }
      }
    },
    "/role_definitions/{id}/": {
      "get": {
        "operationId": "role_definitions_retrieve",
        "description": "Role Definitions (roles) contain a list of permissions and can be used to\nassign those permissions to a user or team through the respective\nassignment endpoints.\n\nCustom roles can be created, modified, and deleted through this endpoint.\nSystem-managed roles are shown here, which cannot be edited or deleted,\nbut can be assigned to users.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this role definition.",
            "required": true
          }
        ],
        "tags": ["role_definitions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDefinition"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "role_definitions_update",
        "description": "Role Definitions (roles) contain a list of permissions and can be used to\nassign those permissions to a user or team through the respective\nassignment endpoints.\n\nCustom roles can be created, modified, and deleted through this endpoint.\nSystem-managed roles are shown here, which cannot be edited or deleted,\nbut can be assigned to users.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this role definition.",
            "required": true
          }
        ],
        "tags": ["role_definitions"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleDefinitionDetail"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RoleDefinitionDetail"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/RoleDefinitionDetail"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDefinitionDetail"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "role_definitions_partial_update",
        "description": "Role Definitions (roles) contain a list of permissions and can be used to\nassign those permissions to a user or team through the respective\nassignment endpoints.\n\nCustom roles can be created, modified, and deleted through this endpoint.\nSystem-managed roles are shown here, which cannot be edited or deleted,\nbut can be assigned to users.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this role definition.",
            "required": true
          }
        ],
        "tags": ["role_definitions"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedRoleDefinition"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedRoleDefinition"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedRoleDefinition"
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDefinition"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "role_definitions_destroy",
        "description": "Role Definitions (roles) contain a list of permissions and can be used to\nassign those permissions to a user or team through the respective\nassignment endpoints.\n\nCustom roles can be created, modified, and deleted through this endpoint.\nSystem-managed roles are shown here, which cannot be edited or deleted,\nbut can be assigned to users.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this role definition.",
            "required": true
          }
        ],
        "tags": ["role_definitions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/role_definitions/{id}/team_assignments/": {
      "get": {
        "operationId": "role_definitions_team_assignments_list",
        "description": "Use this endpoint to give a team permission to a resource or an organization.\nThe needed data is the user, the role definition, and the object id.\nThe object must be of the type specified in the role definition.\nThe type given in the role definition and the provided object_id are used\nto look up the resource.\n\nAfter creation, the assignment cannot be edited, but can be deleted to\nremove those permissions.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "A search term.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": ["role_definitions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRoleTeamAssignmentList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/role_definitions/{id}/team_assignments/{team_assignments}/": {
      "get": {
        "operationId": "role_definitions_team_assignments_retrieve",
        "description": "Use this endpoint to give a team permission to a resource or an organization.\nThe needed data is the user, the role definition, and the object id.\nThe object must be of the type specified in the role definition.\nThe type given in the role definition and the provided object_id are used\nto look up the resource.\n\nAfter creation, the assignment cannot be edited, but can be deleted to\nremove those permissions.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "team_assignments",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["role_definitions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleTeamAssignment"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/role_definitions/{id}/user_assignments/": {
      "get": {
        "operationId": "role_definitions_user_assignments_list",
        "description": "Use this endpoint to give a user permission to a resource or an organization.\nThe needed data is the team, the role definition, and the object id.\nThe object must be of the type specified in the role definition.\nThe type given in the role definition and the provided object_id are used\nto look up the resource.\n\nAfter creation, the assignment cannot be edited, but can be deleted to\nremove those permissions.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "A search term.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": ["role_definitions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRoleUserAssignmentList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/role_definitions/{id}/user_assignments/{user_assignments}/": {
      "get": {
        "operationId": "role_definitions_user_assignments_retrieve",
        "description": "Use this endpoint to give a user permission to a resource or an organization.\nThe needed data is the team, the role definition, and the object id.\nThe object must be of the type specified in the role definition.\nThe type given in the role definition and the provided object_id are used\nto look up the resource.\n\nAfter creation, the assignment cannot be edited, but can be deleted to\nremove those permissions.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "user_assignments",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["role_definitions"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleUserAssignment"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/role_team_assignments/": {
      "get": {
        "operationId": "role_team_assignments_list",
        "description": "Use this endpoint to give a team permission to a resource or an organization.\nThe needed data is the user, the role definition, and the object id.\nThe object must be of the type specified in the role definition.\nThe type given in the role definition and the provided object_id are used\nto look up the resource.\n\nAfter creation, the assignment cannot be edited, but can be deleted to\nremove those permissions.",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "A search term.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": ["role_team_assignments"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRoleTeamAssignmentList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "role_team_assignments_create",
        "description": "Create a RoleTeamAssignment.",
        "tags": ["role_team_assignments"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleTeamAssignmentCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RoleTeamAssignmentCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/RoleTeamAssignmentCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleTeamAssignment"
                }
              }
            },
            "description": "Return a created RoleTeamAssignment."
          }
        }
      }
    },
    "/role_team_assignments/{id}/": {
      "get": {
        "operationId": "role_team_assignments_retrieve",
        "description": "Use this endpoint to give a team permission to a resource or an organization.\nThe needed data is the user, the role definition, and the object id.\nThe object must be of the type specified in the role definition.\nThe type given in the role definition and the provided object_id are used\nto look up the resource.\n\nAfter creation, the assignment cannot be edited, but can be deleted to\nremove those permissions.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this role team assignment.",
            "required": true
          }
        ],
        "tags": ["role_team_assignments"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleTeamAssignment"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "role_team_assignments_destroy",
        "description": "Use this endpoint to give a team permission to a resource or an organization.\nThe needed data is the user, the role definition, and the object id.\nThe object must be of the type specified in the role definition.\nThe type given in the role definition and the provided object_id are used\nto look up the resource.\n\nAfter creation, the assignment cannot be edited, but can be deleted to\nremove those permissions.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this role team assignment.",
            "required": true
          }
        ],
        "tags": ["role_team_assignments"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/role_user_assignments/": {
      "get": {
        "operationId": "role_user_assignments_list",
        "description": "Use this endpoint to give a user permission to a resource or an organization.\nThe needed data is the team, the role definition, and the object id.\nThe object must be of the type specified in the role definition.\nThe type given in the role definition and the provided object_id are used\nto look up the resource.\n\nAfter creation, the assignment cannot be edited, but can be deleted to\nremove those permissions.",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "A search term.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": ["role_user_assignments"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRoleUserAssignmentList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "role_user_assignments_create",
        "description": "Create a RoleUserAssignment.",
        "tags": ["role_user_assignments"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleUserAssignmentCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RoleUserAssignmentCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/RoleUserAssignmentCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleUserAssignment"
                }
              }
            },
            "description": "Return a created RoleUserAssignment."
          }
        }
      }
    },
    "/role_user_assignments/{id}/": {
      "get": {
        "operationId": "role_user_assignments_retrieve",
        "description": "Use this endpoint to give a user permission to a resource or an organization.\nThe needed data is the team, the role definition, and the object id.\nThe object must be of the type specified in the role definition.\nThe type given in the role definition and the provided object_id are used\nto look up the resource.\n\nAfter creation, the assignment cannot be edited, but can be deleted to\nremove those permissions.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this role user assignment.",
            "required": true
          }
        ],
        "tags": ["role_user_assignments"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleUserAssignment"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "role_user_assignments_destroy",
        "description": "Use this endpoint to give a user permission to a resource or an organization.\nThe needed data is the team, the role definition, and the object id.\nThe object must be of the type specified in the role definition.\nThe type given in the role definition and the provided object_id are used\nto look up the resource.\n\nAfter creation, the assignment cannot be edited, but can be deleted to\nremove those permissions.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this role user assignment.",
            "required": true
          }
        ],
        "tags": ["role_user_assignments"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/rulebooks/": {
      "get": {
        "operationId": "rulebooks_list",
        "description": "List all rulebooks",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by rulebook name."
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "project_id",
            "schema": {
              "type": "number"
            },
            "description": "Filter by rulebook's project id."
          }
        ],
        "tags": ["rulebooks"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRulebookList"
                }
              }
            },
            "description": "Return a list of rulebooks."
          }
        }
      }
    },
    "/rulebooks/{id}/": {
      "get": {
        "operationId": "rulebooks_retrieve",
        "description": "Get the rulebook by its id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this rulebook.",
            "required": true
          }
        ],
        "tags": ["rulebooks"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rulebook"
                }
              }
            },
            "description": "Return the rulebook by its id."
          }
        }
      }
    },
    "/rulebooks/{id}/json/": {
      "get": {
        "operationId": "rulebooks_json_retrieve",
        "description": "Get the JSON format of a rulebook by its id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this rulebook.",
            "required": true
          }
        ],
        "tags": ["rulebooks"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rulebook"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/service-index/": {
      "get": {
        "operationId": "service_index_retrieve",
        "description": "Link other resource registry endpoints",
        "tags": ["service-index"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/service-index/metadata/": {
      "get": {
        "operationId": "service_index_metadata_retrieve",
        "tags": ["service-index"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/service-index/resource-types/": {
      "get": {
        "operationId": "service_index_resource_types_list",
        "description": "Index of the resource types that are configured in the system.",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["service-index"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResourceTypeList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/service-index/resource-types/{name}/": {
      "get": {
        "operationId": "service_index_resource_types_retrieve",
        "description": "Index of the resource types that are configured in the system.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string",
              "pattern": "^[^/]+$"
            },
            "required": true
          }
        ],
        "tags": ["service-index"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceType"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/service-index/resource-types/{name}/manifest/": {
      "get": {
        "operationId": "service_index_resource_types_manifest_retrieve",
        "description": "Returns the as a stream the csv of resource_id,hash for a given resource type.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string",
              "pattern": "^[^/]+$"
            },
            "required": true
          }
        ],
        "tags": ["service-index"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceType"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/service-index/resources/": {
      "get": {
        "operationId": "service_index_resources_list",
        "description": "Index of all the resources in the system.",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["service-index"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResourceListList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "service_index_resources_create",
        "description": "Index of all the resources in the system.",
        "tags": ["service-index"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Resource"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Resource"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Resource"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/service-index/resources/{ansible_id}/": {
      "get": {
        "operationId": "service_index_resources_retrieve",
        "description": "Index of all the resources in the system.",
        "parameters": [
          {
            "in": "path",
            "name": "ansible_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "tags": ["service-index"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "service_index_resources_update",
        "description": "Index of all the resources in the system.",
        "parameters": [
          {
            "in": "path",
            "name": "ansible_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "tags": ["service-index"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Resource"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Resource"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Resource"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "service_index_resources_partial_update",
        "description": "Index of all the resources in the system.",
        "parameters": [
          {
            "in": "path",
            "name": "ansible_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "tags": ["service-index"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedResource"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedResource"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedResource"
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "service_index_resources_destroy",
        "description": "Index of all the resources in the system.",
        "parameters": [
          {
            "in": "path",
            "name": "ansible_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "tags": ["service-index"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/service-index/resources/{ansible_id}/additional_data/": {
      "get": {
        "operationId": "service_index_resources_additional_data_retrieve",
        "description": "Index of all the resources in the system.",
        "parameters": [
          {
            "in": "path",
            "name": "ansible_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "tags": ["service-index"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/service-index/validate-local-account/": {
      "post": {
        "operationId": "service_index_validate_local_account_create",
        "description": "Validate a user's username and password.",
        "tags": ["service-index"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/status/": {
      "get": {
        "operationId": "status_retrieve",
        "tags": ["status"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          },
          {}
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/teams/": {
      "get": {
        "operationId": "teams_list",
        "description": "List all teams.",
        "parameters": [
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string"
            },
            "description": "Filter by team description."
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by team name."
          },
          {
            "in": "query",
            "name": "organization_id",
            "schema": {
              "type": "number"
            },
            "description": "Filter by organization ID."
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "resource__ansible_id",
            "schema": {
              "type": "string"
            },
            "description": "Filter by resource ansible ID."
          }
        ],
        "tags": ["teams"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTeamList"
                }
              }
            },
            "description": "Return a list of teams."
          }
        }
      },
      "post": {
        "operationId": "teams_create",
        "description": "Create a new team",
        "tags": ["teams"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TeamCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/TeamCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            },
            "description": "Return the new team."
          }
        }
      }
    },
    "/teams/{id}/": {
      "get": {
        "operationId": "teams_retrieve",
        "description": "Get team by its id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this team.",
            "required": true
          }
        ],
        "tags": ["teams"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamDetail"
                }
              }
            },
            "description": "Return a team by its id."
          }
        }
      },
      "patch": {
        "operationId": "teams_partial_update",
        "description": "Partially update a team",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this team.",
            "required": true
          }
        ],
        "tags": ["teams"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTeamUpdate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTeamUpdate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTeamUpdate"
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            },
            "description": "Update successful. Return an updated team."
          }
        }
      },
      "delete": {
        "operationId": "teams_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this team.",
            "required": true
          }
        ],
        "tags": ["teams"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/users/": {
      "get": {
        "operationId": "users_list",
        "description": "List all users",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by Username."
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "resource__ansible_id",
            "schema": {
              "type": "string"
            },
            "description": "Filter by resource ansible ID."
          },
          {
            "in": "query",
            "name": "username",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": ["users"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUserListList"
                }
              }
            },
            "description": "Return a list of users."
          }
        }
      },
      "post": {
        "operationId": "users_create",
        "description": "Create a user",
        "tags": ["users"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateUpdate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateUpdate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateUpdate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetail"
                }
              }
            },
            "description": "Return the created user."
          }
        }
      }
    },
    "/users/{id}/": {
      "get": {
        "operationId": "users_retrieve",
        "description": "Retrieve a user by their id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this user.",
            "required": true
          }
        ],
        "tags": ["users"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetail"
                }
              }
            },
            "description": "Return a user."
          }
        }
      },
      "patch": {
        "operationId": "users_partial_update",
        "description": "Partial update of a user.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this user.",
            "required": true
          }
        ],
        "tags": ["users"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUserCreateUpdate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUserCreateUpdate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUserCreateUpdate"
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetail"
                }
              }
            },
            "description": "Update successful. Return an updated user."
          }
        }
      },
      "delete": {
        "operationId": "users_destroy",
        "description": "Delete a user by id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this user.",
            "required": true
          }
        ],
        "tags": ["users"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "204": {
            "description": "The user has been deleted successful."
          },
          "403": {
            "description": "Deleting your own account is not permitted."
          }
        }
      }
    },
    "/users/me/": {
      "get": {
        "operationId": "get_current_user",
        "description": "Get current user.",
        "tags": ["users"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetail"
                }
              }
            },
            "description": "Return current user."
          }
        }
      },
      "patch": {
        "operationId": "update_current_user",
        "description": "Update current user.",
        "tags": ["users"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCurrentUserUpdate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCurrentUserUpdate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCurrentUserUpdate"
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetail"
                }
              }
            },
            "description": "Return current user."
          }
        }
      }
    },
    "/users/me/awx-tokens/": {
      "get": {
        "operationId": "users_me_awx_tokens_list",
        "description": "List current user AWX tokens.",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["users"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAwxTokenList"
                }
              }
            },
            "description": "Return a list of AWX tokens."
          }
        }
      },
      "post": {
        "operationId": "users_me_awx_tokens_create",
        "description": "Create a AWX token for a current user.",
        "tags": ["users"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AwxTokenCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AwxTokenCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AwxTokenCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwxToken"
                }
              }
            },
            "description": "Return the created AWX token."
          }
        }
      }
    },
    "/users/me/awx-tokens/{id}/": {
      "get": {
        "operationId": "users_me_awx_tokens_retrieve",
        "description": "Get current user AWX token by ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this token.",
            "required": true
          }
        ],
        "tags": ["users"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwxToken"
                }
              }
            },
            "description": "Return a AWX tokens."
          }
        }
      },
      "delete": {
        "operationId": "users_me_awx_tokens_destroy",
        "description": "Delete AWX token of a current user by ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this token.",
            "required": true
          }
        ],
        "tags": ["users"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          },
          {
            "jwtAuth": []
          },
          {
            "EDAJWTAuthentication": []
          }
        ],
        "responses": {
          "204": {
            "description": "The AWX token has been deleted."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActivationCreate": {
        "type": "object",
        "description": "Serializer for creating the Activation.",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "is_enabled": {
            "type": "boolean"
          },
          "decision_environment_id": {
            "type": "integer"
          },
          "rulebook_id": {
            "type": "integer"
          },
          "extra_var": {
            "type": "string",
            "nullable": true
          },
          "organization_id": {
            "type": "integer",
            "nullable": true
          },
          "restart_policy": {
            "$ref": "#/components/schemas/RestartPolicyEnum"
          },
          "awx_token_id": {
            "type": "integer",
            "nullable": true
          },
          "event_streams": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "nullable": true
          },
          "log_level": {
            "$ref": "#/components/schemas/LogLevelEnum"
          },
          "eda_credentials": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "nullable": true
          },
          "k8s_service_name": {
            "type": "string",
            "nullable": true
          }
        },
        "required": ["decision_environment_id", "name", "rulebook_id"]
      },
      "ActivationInstance": {
        "type": "object",
        "description": "Serializer for the Activation Instance model.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/StatusEnum"
          },
          "git_hash": {
            "type": "string"
          },
          "status_message": {
            "type": "string",
            "nullable": true
          },
          "activation_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "event_stream_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "organization_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "ended_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "queue_name": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          }
        },
        "required": [
          "activation_id",
          "ended_at",
          "event_stream_id",
          "id",
          "organization_id",
          "queue_name",
          "started_at"
        ]
      },
      "ActivationInstanceLog": {
        "type": "object",
        "description": "Serializer for the Activation Instance Log model.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "line_number": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "log": {
            "type": "string"
          },
          "log_timestamp": {
            "type": "integer",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "format": "int64"
          },
          "activation_instance": {
            "type": "integer"
          }
        },
        "required": ["activation_instance", "id", "line_number", "log"]
      },
      "ActivationList": {
        "type": "object",
        "description": "Serializer for listing the Activation model objects.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "is_enabled": {
            "type": "boolean"
          },
          "status": {
            "$ref": "#/components/schemas/StatusEnum"
          },
          "extra_var": {
            "type": "string",
            "nullable": true
          },
          "decision_environment_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "project_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "rulebook_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "organization_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "restart_policy": {
            "$ref": "#/components/schemas/RestartPolicyEnum"
          },
          "restart_count": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "rulebook_name": {
            "type": "string",
            "description": "Name of the referenced rulebook"
          },
          "current_job_id": {
            "type": "string",
            "nullable": true
          },
          "rules_count": {
            "type": "integer"
          },
          "rules_fired_count": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "status_message": {
            "type": "string",
            "nullable": true
          },
          "awx_token_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "event_streams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventStreamOut"
            },
            "nullable": true
          },
          "log_level": {
            "$ref": "#/components/schemas/LogLevelEnum"
          },
          "eda_credentials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EdaCredential"
            },
            "nullable": true
          },
          "k8s_service_name": {
            "type": "string",
            "nullable": true,
            "description": "Service name of the activation"
          }
        },
        "required": [
          "awx_token_id",
          "created_at",
          "decision_environment_id",
          "id",
          "modified_at",
          "name",
          "organization_id",
          "project_id",
          "rulebook_id",
          "rulebook_name",
          "rules_count",
          "rules_fired_count"
        ]
      },
      "ActivationRead": {
        "type": "object",
        "description": "Serializer for reading the Activation with related objects info.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "is_enabled": {
            "type": "boolean"
          },
          "decision_environment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DecisionEnvironmentRef"
              }
            ],
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/StatusEnum"
          },
          "git_hash": {
            "type": "string"
          },
          "project": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectRef"
              }
            ],
            "nullable": true
          },
          "rulebook": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RulebookRef"
              }
            ],
            "nullable": true
          },
          "extra_var": {
            "type": "string",
            "nullable": true
          },
          "organization": {
            "$ref": "#/components/schemas/OrganizationRef"
          },
          "instances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivationInstance"
            }
          },
          "restart_policy": {
            "$ref": "#/components/schemas/RestartPolicyEnum"
          },
          "restart_count": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "rulebook_name": {
            "type": "string",
            "description": "Name of the referenced rulebook"
          },
          "current_job_id": {
            "type": "string",
            "nullable": true
          },
          "rules_count": {
            "type": "integer"
          },
          "rules_fired_count": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "restarted_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status_message": {
            "type": "string",
            "nullable": true
          },
          "awx_token_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "eda_credentials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EdaCredential"
            },
            "nullable": true
          },
          "event_streams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventStreamOut"
            },
            "nullable": true
          },
          "log_level": {
            "$ref": "#/components/schemas/LogLevelEnum"
          },
          "k8s_service_name": {
            "type": "string",
            "nullable": true,
            "description": "Service name of the activation"
          }
        },
        "required": [
          "awx_token_id",
          "created_at",
          "id",
          "instances",
          "modified_at",
          "name",
          "organization",
          "rulebook_name",
          "rules_count",
          "rules_fired_count"
        ]
      },
      "AuditAction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the triggered action"
          },
          "name": {
            "type": "string",
            "description": "Name of the action"
          },
          "status": {
            "type": "string",
            "description": "Status of the action"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "The URL in the action"
          },
          "fired_at": {
            "type": "string",
            "format": "date-time",
            "description": "The fired timestamp of the action"
          },
          "rule_fired_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "audit_rule_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "status_message": {
            "type": "string",
            "nullable": true,
            "description": "Message of the action"
          }
        },
        "required": ["audit_rule_id", "fired_at", "id", "name"]
      },
      "AuditEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the triggered event"
          },
          "source_name": {
            "type": "string",
            "description": "Name of the source"
          },
          "source_type": {
            "type": "string",
            "description": "Type of the source"
          },
          "payload": {
            "type": "string",
            "nullable": true,
            "description": "The payload in the event"
          },
          "audit_actions": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "received_at": {
            "type": "string",
            "format": "date-time",
            "description": "The received timestamp of the event"
          },
          "rule_fired_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": ["audit_actions", "id", "received_at", "source_name", "source_type"]
      },
      "AuditRuleDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the fired rule"
          },
          "name": {
            "type": "string",
            "description": "Name of the fired rule"
          },
          "status": {
            "type": "string",
            "description": "Status of the fired rule"
          },
          "activation_instance": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "nullable": true
              },
              "name": {
                "type": "string"
              }
            },
            "example": {
              "id": 0,
              "name": "string"
            },
            "readOnly": true
          },
          "organization": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "nullable": false
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            },
            "example": {
              "id": 0,
              "name": "string",
              "description": "string"
            },
            "readOnly": true
          },
          "ruleset_name": {
            "type": "string",
            "description": "Name of the related ruleset"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The created timestamp of the action"
          },
          "fired_at": {
            "type": "string",
            "format": "date-time",
            "description": "The fired timestamp of the rule"
          }
        },
        "required": ["activation_instance", "created_at", "fired_at", "id", "name", "organization"]
      },
      "AuditRuleList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the fired rule"
          },
          "name": {
            "type": "string",
            "description": "Name of the fired rule"
          },
          "status": {
            "type": "string",
            "description": "Status of the fired rule"
          },
          "activation_instance": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "nullable": true
              },
              "name": {
                "type": "string"
              }
            },
            "example": {
              "id": 0,
              "name": "string"
            },
            "readOnly": true
          },
          "organization": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "nullable": false
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            },
            "example": {
              "id": 0,
              "name": "string",
              "description": "string"
            },
            "readOnly": true
          },
          "fired_at": {
            "type": "string",
            "format": "date-time",
            "description": "The fired timestamp of the rule"
          }
        },
        "required": ["activation_instance", "fired_at", "id", "name", "organization"]
      },
      "AwxToken": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": ["created_at", "id", "modified_at", "name", "user_id"]
      },
      "AwxTokenCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "required": ["name", "token"]
      },
      "ContentTypeEnum": {
        "enum": [
          "eda.activation",
          "eda.auditrule",
          "eda.credentialtype",
          "eda.decisionenvironment",
          "eda.edacredential",
          "eda.project",
          "eda.rulebook",
          "eda.rulebookprocess",
          "shared.organization",
          "shared.team"
        ],
        "type": "string",
        "description": "* `eda.activation` - Activation\n* `eda.auditrule` - Audit Rule\n* `eda.credentialtype` - Credential Type\n* `eda.decisionenvironment` - Decision Environment\n* `eda.edacredential` - Eda Credential\n* `eda.project` - Project\n* `eda.rulebook` - Rulebook\n* `eda.rulebookprocess` - Rulebook Process\n* `shared.organization` - Organization\n* `shared.team` - Team"
      },
      "CredentialType": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string",
            "nullable": true
          },
          "kind": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "inputs": {
            "type": "object",
            "additionalProperties": {}
          },
          "injectors": {
            "type": "object",
            "additionalProperties": {}
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "managed": {
            "type": "boolean",
            "readOnly": true
          },
          "organization_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          }
        },
        "required": ["created_at", "id", "managed", "modified_at", "name", "organization_id"]
      },
      "CredentialTypeCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "inputs": {
            "type": "object",
            "additionalProperties": {},
            "description": "Name of the credential type"
          },
          "injectors": {
            "type": "object",
            "additionalProperties": {}
          },
          "organization_id": {
            "type": "integer",
            "nullable": true
          }
        },
        "required": ["inputs", "name"]
      },
      "CredentialTypeRef": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string",
            "nullable": true
          },
          "kind": {
            "type": "string"
          },
          "organization_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          }
        },
        "required": ["id", "name", "organization_id"]
      },
      "DecisionEnvironment": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "image_url": {
            "type": "string"
          },
          "organization_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "eda_credential_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "created_at",
          "eda_credential_id",
          "id",
          "image_url",
          "modified_at",
          "name",
          "organization_id"
        ]
      },
      "DecisionEnvironmentCreate": {
        "type": "object",
        "description": "Serializer for creating the DecisionEnvironment.",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "image_url": {
            "type": "string"
          },
          "organization_id": {
            "type": "integer",
            "nullable": true
          },
          "eda_credential_id": {
            "type": "integer",
            "nullable": true
          }
        },
        "required": ["image_url", "name"]
      },
      "DecisionEnvironmentRead": {
        "type": "object",
        "description": "Serializer for reading the DecisionEnvironment with embedded objects.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "image_url": {
            "type": "string"
          },
          "organization": {
            "$ref": "#/components/schemas/OrganizationRef"
          },
          "eda_credential": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EdaCredentialRef"
              }
            ],
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": ["created_at", "id", "image_url", "modified_at", "name", "organization"]
      },
      "DecisionEnvironmentRef": {
        "type": "object",
        "description": "Serializer for DecisionEnvironment reference.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "image_url": {
            "type": "string"
          },
          "organization_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          }
        },
        "required": ["id", "image_url", "name", "organization_id"]
      },
      "EdaCredential": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "inputs": {
            "type": "object",
            "additionalProperties": {},
            "readOnly": true
          },
          "credential_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CredentialTypeRef"
              }
            ],
            "nullable": true
          },
          "references": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EdaCredentialReference"
            },
            "nullable": true
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "managed": {
            "type": "boolean",
            "readOnly": true
          },
          "organization": {
            "$ref": "#/components/schemas/OrganizationRef"
          }
        },
        "required": ["created_at", "id", "inputs", "managed", "modified_at", "name", "organization"]
      },
      "EdaCredentialCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "inputs": {
            "type": "object",
            "additionalProperties": {}
          },
          "credential_type_id": {
            "type": "integer",
            "nullable": true
          },
          "organization_id": {
            "type": "integer",
            "nullable": true
          }
        },
        "required": ["credential_type_id", "inputs", "name"]
      },
      "EdaCredentialRef": {
        "type": "object",
        "description": "Serializer for EdaCredential reference.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "inputs": {
            "type": "object",
            "additionalProperties": {},
            "readOnly": true
          },
          "managed": {
            "type": "boolean"
          },
          "credential_type_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "organization_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          }
        },
        "required": ["credential_type_id", "id", "inputs", "name", "organization_id"]
      },
      "EdaCredentialReference": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the related resource"
          },
          "id": {
            "type": "integer",
            "description": "ID of the related resource"
          },
          "name": {
            "type": "string",
            "description": "Name of the related resource"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "URL of the related resource"
          }
        },
        "required": ["id", "name", "type", "url"]
      },
      "EventStreamOut": {
        "type": "object",
        "description": "Serializer for UI to show EventStream.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string"
          }
        },
        "required": ["id", "name"]
      },
      "ImportStateEnum": {
        "enum": ["pending", "running", "failed", "completed"],
        "type": "string",
        "description": "* `pending` - Pending\n* `running` - Running\n* `failed` - Failed\n* `completed` - Completed"
      },
      "LogLevelEnum": {
        "enum": ["debug", "info", "error"],
        "type": "string",
        "description": "* `debug` - debug\n* `info` - info\n* `error` - error"
      },
      "Login": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": ["password", "username"]
      },
      "NullEnum": {
        "enum": [null]
      },
      "Organization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of this resource",
            "maxLength": 512
          },
          "description": {
            "type": "string",
            "description": "The organization description."
          },
          "resource": {
            "type": "object",
            "additionalProperties": {},
            "readOnly": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The date/time this resource was created"
          },
          "created_by": {
            "type": "integer",
            "readOnly": true,
            "nullable": true,
            "description": "The user who created this resource"
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The date/time this resource was created"
          },
          "modified_by": {
            "type": "integer",
            "readOnly": true,
            "nullable": true,
            "description": "The user who last modified this resource"
          }
        },
        "required": ["created", "created_by", "id", "modified", "modified_by", "name", "resource"]
      },
      "OrganizationCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of this resource",
            "maxLength": 512
          },
          "description": {
            "type": "string",
            "description": "The organization description."
          }
        },
        "required": ["name"]
      },
      "OrganizationRef": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of this resource",
            "maxLength": 512
          },
          "description": {
            "type": "string",
            "description": "The organization description."
          }
        },
        "required": ["id", "name"]
      },
      "PaginatedActivationInstanceList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivationInstance"
            }
          }
        }
      },
      "PaginatedActivationInstanceLogList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivationInstanceLog"
            }
          }
        }
      },
      "PaginatedActivationListList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivationList"
            }
          }
        }
      },
      "PaginatedAuditActionList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditAction"
            }
          }
        }
      },
      "PaginatedAuditEventList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditEvent"
            }
          }
        }
      },
      "PaginatedAuditRuleListList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditRuleList"
            }
          }
        }
      },
      "PaginatedAwxTokenList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AwxToken"
            }
          }
        }
      },
      "PaginatedCredentialTypeList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CredentialType"
            }
          }
        }
      },
      "PaginatedDecisionEnvironmentList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DecisionEnvironment"
            }
          }
        }
      },
      "PaginatedEdaCredentialList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EdaCredential"
            }
          }
        }
      },
      "PaginatedOrganizationList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organization"
            }
          }
        }
      },
      "PaginatedProjectList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project"
            }
          }
        }
      },
      "PaginatedResourceListList": {
        "type": "object",
        "required": ["count", "results"],
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceList"
            }
          }
        }
      },
      "PaginatedResourceTypeList": {
        "type": "object",
        "required": ["count", "results"],
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceType"
            }
          }
        }
      },
      "PaginatedRoleDefinitionList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleDefinition"
            }
          }
        }
      },
      "PaginatedRoleTeamAssignmentList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleTeamAssignment"
            }
          }
        }
      },
      "PaginatedRoleUserAssignmentList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleUserAssignment"
            }
          }
        }
      },
      "PaginatedRulebookList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rulebook"
            }
          }
        }
      },
      "PaginatedTeamList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Team"
            }
          }
        }
      },
      "PaginatedUserListList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserList"
            }
          }
        }
      },
      "PatchedCredentialTypeCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "inputs": {
            "type": "object",
            "additionalProperties": {},
            "description": "Name of the credential type"
          },
          "injectors": {
            "type": "object",
            "additionalProperties": {}
          },
          "organization_id": {
            "type": "integer",
            "nullable": true
          }
        }
      },
      "PatchedCurrentUserUpdate": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "maxLength": 150
          },
          "last_name": {
            "type": "string",
            "maxLength": 150
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email address",
            "maxLength": 254
          },
          "password": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "PatchedDecisionEnvironmentCreate": {
        "type": "object",
        "description": "Serializer for creating the DecisionEnvironment.",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "image_url": {
            "type": "string"
          },
          "organization_id": {
            "type": "integer",
            "nullable": true
          },
          "eda_credential_id": {
            "type": "integer",
            "nullable": true
          }
        }
      },
      "PatchedEdaCredentialCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "inputs": {
            "type": "object",
            "additionalProperties": {}
          },
          "credential_type_id": {
            "type": "integer",
            "nullable": true
          },
          "organization_id": {
            "type": "integer",
            "nullable": true
          }
        }
      },
      "PatchedOrganizationCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of this resource",
            "maxLength": 512
          },
          "description": {
            "type": "string",
            "description": "The organization description."
          }
        }
      },
      "PatchedProjectUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the project"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Description of the project"
          },
          "eda_credential_id": {
            "type": "integer",
            "nullable": true,
            "description": "EdaCredential id of the project"
          },
          "signature_validation_credential_id": {
            "type": "integer",
            "nullable": true,
            "description": "ID of an optional credential used for validating files in the project against unexpected changes"
          },
          "scm_branch": {
            "type": "string",
            "nullable": true,
            "description": "Specific branch, tag or commit to checkout."
          },
          "scm_refspec": {
            "type": "string",
            "nullable": true,
            "description": "For git projects, an additional refspec to fetch."
          },
          "verify_ssl": {
            "type": "boolean",
            "description": "Indicates if SSL verification is enabled"
          },
          "proxy": {
            "type": "string",
            "nullable": true,
            "description": "Proxy server for http or https connection"
          }
        }
      },
      "PatchedResource": {
        "type": "object",
        "properties": {
          "object_id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "ansible_id": {
            "type": "string",
            "format": "uuid"
          },
          "service_id": {
            "type": "string",
            "format": "uuid"
          },
          "resource_type": {
            "type": "string"
          },
          "has_serializer": {
            "type": "boolean",
            "readOnly": true
          },
          "resource_data": {
            "type": "object",
            "additionalProperties": {}
          },
          "url": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "PatchedRoleDefinition": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "related": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "readOnly": true
          },
          "summary_fields": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {}
            },
            "readOnly": true
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionsEnum"
            }
          },
          "content_type": {
            "nullable": true,
            "description": "The type of resource this applies to\n\n* `eda.activation` - Activation\n* `eda.auditrule` - Audit Rule\n* `eda.credentialtype` - Credential Type\n* `eda.decisionenvironment` - Decision Environment\n* `eda.edacredential` - Eda Credential\n* `eda.project` - Project\n* `eda.rulebook` - Rulebook\n* `eda.rulebookprocess` - Rulebook Process\n* `shared.organization` - Organization\n* `shared.team` - Team",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ContentTypeEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The date/time this resource was created"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The date/time this resource was created"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "managed": {
            "type": "boolean",
            "readOnly": true
          },
          "modified_by": {
            "type": "integer",
            "readOnly": true,
            "nullable": true,
            "description": "The user who last modified this resource"
          },
          "created_by": {
            "type": "integer",
            "readOnly": true,
            "nullable": true,
            "description": "The user who created this resource"
          }
        }
      },
      "PatchedTeamUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of this resource",
            "maxLength": 512
          },
          "description": {
            "type": "string",
            "description": "The team description."
          }
        }
      },
      "PatchedUserCreateUpdate": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The user's log in name."
          },
          "first_name": {
            "type": "string",
            "maxLength": 150
          },
          "last_name": {
            "type": "string",
            "maxLength": 150
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email address",
            "maxLength": 254
          },
          "password": {
            "type": "string",
            "writeOnly": true
          },
          "is_superuser": {
            "type": "boolean",
            "title": "Superuser status",
            "description": "Designates that this user has all permissions without explicitly assigning them."
          }
        }
      },
      "PermissionsEnum": {
        "enum": [
          "eda.add_activation",
          "eda.add_credentialtype",
          "eda.add_decisionenvironment",
          "eda.add_edacredential",
          "eda.add_project",
          "eda.add_team",
          "eda.change_credentialtype",
          "eda.change_decisionenvironment",
          "eda.change_edacredential",
          "eda.change_organization",
          "eda.change_project",
          "eda.change_team",
          "eda.delete_activation",
          "eda.delete_credentialtype",
          "eda.delete_decisionenvironment",
          "eda.delete_edacredential",
          "eda.delete_organization",
          "eda.delete_project",
          "eda.delete_team",
          "eda.disable_activation",
          "eda.enable_activation",
          "eda.member_organization",
          "eda.member_team",
          "eda.restart_activation",
          "eda.view_activation",
          "eda.view_auditrule",
          "eda.view_credentialtype",
          "eda.view_decisionenvironment",
          "eda.view_edacredential",
          "eda.view_organization",
          "eda.view_project",
          "eda.view_rulebook",
          "eda.view_rulebookprocess",
          "eda.view_team"
        ],
        "type": "string",
        "description": "* `eda.add_activation` - eda.add_activation\n* `eda.add_credentialtype` - eda.add_credentialtype\n* `eda.add_decisionenvironment` - eda.add_decisionenvironment\n* `eda.add_edacredential` - eda.add_edacredential\n* `eda.add_project` - eda.add_project\n* `eda.add_team` - eda.add_team\n* `eda.change_credentialtype` - eda.change_credentialtype\n* `eda.change_decisionenvironment` - eda.change_decisionenvironment\n* `eda.change_edacredential` - eda.change_edacredential\n* `eda.change_organization` - eda.change_organization\n* `eda.change_project` - eda.change_project\n* `eda.change_team` - eda.change_team\n* `eda.delete_activation` - eda.delete_activation\n* `eda.delete_credentialtype` - eda.delete_credentialtype\n* `eda.delete_decisionenvironment` - eda.delete_decisionenvironment\n* `eda.delete_edacredential` - eda.delete_edacredential\n* `eda.delete_organization` - eda.delete_organization\n* `eda.delete_project` - eda.delete_project\n* `eda.delete_team` - eda.delete_team\n* `eda.disable_activation` - eda.disable_activation\n* `eda.enable_activation` - eda.enable_activation\n* `eda.member_organization` - eda.member_organization\n* `eda.member_team` - eda.member_team\n* `eda.restart_activation` - eda.restart_activation\n* `eda.view_activation` - eda.view_activation\n* `eda.view_auditrule` - eda.view_auditrule\n* `eda.view_credentialtype` - eda.view_credentialtype\n* `eda.view_decisionenvironment` - eda.view_decisionenvironment\n* `eda.view_edacredential` - eda.view_edacredential\n* `eda.view_organization` - eda.view_organization\n* `eda.view_project` - eda.view_project\n* `eda.view_rulebook` - eda.view_rulebook\n* `eda.view_rulebookprocess` - eda.view_rulebookprocess\n* `eda.view_team` - eda.view_team"
      },
      "Project": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "organization_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "eda_credential_id": {
            "type": "integer",
            "nullable": true
          },
          "signature_validation_credential_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "scm_branch": {
            "type": "string"
          },
          "scm_refspec": {
            "type": "string"
          },
          "verify_ssl": {
            "type": "boolean"
          },
          "proxy": {
            "type": "string",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "scm_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScmTypeEnum"
              }
            ],
            "readOnly": true
          },
          "git_hash": {
            "type": "string",
            "readOnly": true
          },
          "import_state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ImportStateEnum"
              }
            ],
            "readOnly": true
          },
          "import_error": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "created_at",
          "git_hash",
          "id",
          "import_error",
          "import_state",
          "modified_at",
          "name",
          "organization_id",
          "proxy",
          "scm_type",
          "signature_validation_credential_id",
          "url"
        ]
      },
      "ProjectCreateRequest": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "proxy": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "organization_id": {
            "type": "integer",
            "nullable": true
          },
          "eda_credential_id": {
            "type": "integer",
            "nullable": true
          },
          "signature_validation_credential_id": {
            "type": "integer",
            "nullable": true
          },
          "verify_ssl": {
            "type": "boolean"
          },
          "scm_type": {
            "$ref": "#/components/schemas/ScmTypeEnum"
          },
          "scm_branch": {
            "type": "string"
          },
          "scm_refspec": {
            "type": "string"
          }
        },
        "required": ["name", "url"]
      },
      "ProjectRead": {
        "type": "object",
        "description": "Serializer for reading the Project with embedded objects.",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "organization": {
            "$ref": "#/components/schemas/OrganizationRef"
          },
          "eda_credential": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EdaCredentialRef"
              }
            ],
            "nullable": true
          },
          "signature_validation_credential": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EdaCredentialRef"
              }
            ],
            "nullable": true
          },
          "verify_ssl": {
            "type": "boolean"
          },
          "scm_branch": {
            "type": "string"
          },
          "scm_refspec": {
            "type": "string"
          },
          "proxy": {
            "type": "string",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "scm_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScmTypeEnum"
              }
            ],
            "readOnly": true
          },
          "git_hash": {
            "type": "string",
            "readOnly": true
          },
          "import_state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ImportStateEnum"
              }
            ],
            "readOnly": true
          },
          "import_error": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "created_at",
          "git_hash",
          "id",
          "import_error",
          "import_state",
          "modified_at",
          "name",
          "organization",
          "proxy",
          "scm_type",
          "url"
        ]
      },
      "ProjectRef": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "git_hash": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "scm_type": {
            "$ref": "#/components/schemas/ScmTypeEnum"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "organization_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          }
        },
        "required": ["git_hash", "id", "name", "organization_id", "url"]
      },
      "Resource": {
        "type": "object",
        "properties": {
          "object_id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "ansible_id": {
            "type": "string",
            "format": "uuid"
          },
          "service_id": {
            "type": "string",
            "format": "uuid"
          },
          "resource_type": {
            "type": "string"
          },
          "has_serializer": {
            "type": "boolean",
            "readOnly": true
          },
          "resource_data": {
            "type": "object",
            "additionalProperties": {}
          },
          "url": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": ["has_serializer", "name", "object_id", "resource_data", "url"]
      },
      "ResourceList": {
        "type": "object",
        "properties": {
          "object_id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "ansible_id": {
            "type": "string",
            "format": "uuid"
          },
          "service_id": {
            "type": "string",
            "format": "uuid"
          },
          "resource_type": {
            "type": "string"
          },
          "has_serializer": {
            "type": "boolean",
            "readOnly": true
          },
          "resource_data": {
            "type": "object",
            "additionalProperties": {},
            "writeOnly": true
          },
          "url": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": ["has_serializer", "name", "object_id", "resource_data", "url"]
      },
      "ResourceType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "externally_managed": {
            "type": "boolean"
          },
          "shared_resource_type": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "url": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": ["externally_managed", "id", "name", "shared_resource_type", "url"]
      },
      "RestartPolicyEnum": {
        "enum": ["always", "on-failure", "never"],
        "type": "string",
        "description": "* `always` - always\n* `on-failure` - on-failure\n* `never` - never"
      },
      "RoleDefinition": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "related": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "readOnly": true
          },
          "summary_fields": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {}
            },
            "readOnly": true
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionsEnum"
            }
          },
          "content_type": {
            "nullable": true,
            "description": "The type of resource this applies to\n\n* `eda.activation` - Activation\n* `eda.auditrule` - Audit Rule\n* `eda.credentialtype` - Credential Type\n* `eda.decisionenvironment` - Decision Environment\n* `eda.edacredential` - Eda Credential\n* `eda.project` - Project\n* `eda.rulebook` - Rulebook\n* `eda.rulebookprocess` - Rulebook Process\n* `shared.organization` - Organization\n* `shared.team` - Team",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ContentTypeEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The date/time this resource was created"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The date/time this resource was created"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "managed": {
            "type": "boolean",
            "readOnly": true
          },
          "modified_by": {
            "type": "integer",
            "readOnly": true,
            "nullable": true,
            "description": "The user who last modified this resource"
          },
          "created_by": {
            "type": "integer",
            "readOnly": true,
            "nullable": true,
            "description": "The user who created this resource"
          }
        },
        "required": [
          "created",
          "created_by",
          "id",
          "managed",
          "modified",
          "modified_by",
          "name",
          "permissions",
          "related",
          "summary_fields",
          "url"
        ]
      },
      "RoleDefinitionCreate": {
        "type": "object",
        "properties": {
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionsEnum"
            }
          },
          "content_type": {
            "nullable": true,
            "description": "The type of resource this applies to\n\n* `eda.activation` - Activation\n* `eda.auditrule` - Audit Rule\n* `eda.credentialtype` - Credential Type\n* `eda.decisionenvironment` - Decision Environment\n* `eda.edacredential` - Eda Credential\n* `eda.project` - Project\n* `eda.rulebook` - Rulebook\n* `eda.rulebookprocess` - Rulebook Process\n* `shared.organization` - Organization\n* `shared.team` - Team",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ContentTypeEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": ["name", "permissions"]
      },
      "RoleDefinitionDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "related": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "readOnly": true
          },
          "summary_fields": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {}
            },
            "readOnly": true
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionsEnum"
            }
          },
          "content_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContentTypeEnum"
              }
            ],
            "readOnly": true,
            "description": "The type of resource this applies to\n\n* `eda.activation` - Activation\n* `eda.auditrule` - Audit Rule\n* `eda.credentialtype` - Credential Type\n* `eda.decisionenvironment` - Decision Environment\n* `eda.edacredential` - Eda Credential\n* `eda.project` - Project\n* `eda.rulebook` - Rulebook\n* `eda.rulebookprocess` - Rulebook Process\n* `shared.organization` - Organization\n* `shared.team` - Team"
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The date/time this resource was created"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The date/time this resource was created"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "managed": {
            "type": "boolean",
            "readOnly": true
          },
          "modified_by": {
            "type": "integer",
            "readOnly": true,
            "nullable": true,
            "description": "The user who last modified this resource"
          },
          "created_by": {
            "type": "integer",
            "readOnly": true,
            "nullable": true,
            "description": "The user who created this resource"
          }
        },
        "required": [
          "content_type",
          "created",
          "created_by",
          "id",
          "managed",
          "modified",
          "modified_by",
          "name",
          "permissions",
          "related",
          "summary_fields",
          "url"
        ]
      },
      "RoleTeamAssignment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "related": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "readOnly": true
          },
          "summary_fields": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {}
            },
            "readOnly": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The date/time this resource was created"
          },
          "created_by": {
            "type": "integer",
            "readOnly": true,
            "nullable": true,
            "description": "The user who created this resource"
          },
          "content_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContentTypeEnum"
              }
            ],
            "readOnly": true,
            "description": "The type of resource this applies to\n\n* `eda.activation` - Activation\n* `eda.auditrule` - Audit Rule\n* `eda.credentialtype` - Credential Type\n* `eda.decisionenvironment` - Decision Environment\n* `eda.edacredential` - Eda Credential\n* `eda.project` - Project\n* `eda.rulebook` - Rulebook\n* `eda.rulebookprocess` - Rulebook Process\n* `shared.organization` - Organization\n* `shared.team` - Team"
          },
          "object_id": {
            "type": "string",
            "nullable": true,
            "description": "Primary key of the object this assignment applies to, null value indicates system-wide assignment"
          },
          "object_ansible_id": {
            "type": "string",
            "format": "uuid",
            "description": "Resource id of the object this role applies to. Alternative to the object_id field."
          },
          "role_definition": {
            "type": "integer",
            "description": "The role definition which defines permissions conveyed by this assignment"
          },
          "team": {
            "type": "integer"
          },
          "team_ansible_id": {
            "type": "string",
            "format": "uuid",
            "description": "Resource id of the team who will receive permissions from this assignment. Alternative to team field."
          }
        },
        "required": [
          "content_type",
          "created",
          "created_by",
          "id",
          "related",
          "role_definition",
          "summary_fields",
          "url"
        ]
      },
      "RoleTeamAssignmentCreate": {
        "type": "object",
        "properties": {
          "object_id": {
            "type": "string",
            "nullable": true,
            "description": "Primary key of the object this assignment applies to, null value indicates system-wide assignment"
          },
          "object_ansible_id": {
            "type": "string",
            "format": "uuid",
            "description": "Resource id of the object this role applies to. Alternative to the object_id field."
          },
          "role_definition": {
            "type": "integer",
            "description": "The role definition which defines permissions conveyed by this assignment"
          },
          "team": {
            "type": "integer"
          },
          "team_ansible_id": {
            "type": "string",
            "format": "uuid",
            "description": "Resource id of the team who will receive permissions from this assignment. Alternative to team field."
          }
        },
        "required": ["role_definition"]
      },
      "RoleUserAssignment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "related": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "readOnly": true
          },
          "summary_fields": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {}
            },
            "readOnly": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The date/time this resource was created"
          },
          "created_by": {
            "type": "integer",
            "readOnly": true,
            "nullable": true,
            "description": "The user who created this resource"
          },
          "content_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContentTypeEnum"
              }
            ],
            "readOnly": true,
            "description": "The type of resource this applies to\n\n* `eda.activation` - Activation\n* `eda.auditrule` - Audit Rule\n* `eda.credentialtype` - Credential Type\n* `eda.decisionenvironment` - Decision Environment\n* `eda.edacredential` - Eda Credential\n* `eda.project` - Project\n* `eda.rulebook` - Rulebook\n* `eda.rulebookprocess` - Rulebook Process\n* `shared.organization` - Organization\n* `shared.team` - Team"
          },
          "object_id": {
            "type": "string",
            "nullable": true,
            "description": "Primary key of the object this assignment applies to, null value indicates system-wide assignment"
          },
          "object_ansible_id": {
            "type": "string",
            "format": "uuid",
            "description": "Resource id of the object this role applies to. Alternative to the object_id field."
          },
          "role_definition": {
            "type": "integer",
            "description": "The role definition which defines permissions conveyed by this assignment"
          },
          "user": {
            "type": "integer"
          },
          "user_ansible_id": {
            "type": "string",
            "format": "uuid",
            "description": "Resource id of the user who will receive permissions from this assignment. Alternative to user field."
          }
        },
        "required": [
          "content_type",
          "created",
          "created_by",
          "id",
          "related",
          "role_definition",
          "summary_fields",
          "url"
        ]
      },
      "RoleUserAssignmentCreate": {
        "type": "object",
        "properties": {
          "object_id": {
            "type": "string",
            "nullable": true,
            "description": "Primary key of the object this assignment applies to, null value indicates system-wide assignment"
          },
          "object_ansible_id": {
            "type": "string",
            "format": "uuid",
            "description": "Resource id of the object this role applies to. Alternative to the object_id field."
          },
          "role_definition": {
            "type": "integer",
            "description": "The role definition which defines permissions conveyed by this assignment"
          },
          "user": {
            "type": "integer"
          },
          "user_ansible_id": {
            "type": "string",
            "format": "uuid",
            "description": "Resource id of the user who will receive permissions from this assignment. Alternative to user field."
          }
        },
        "required": ["role_definition"]
      },
      "Rulebook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rulesets": {
            "type": "string"
          },
          "project_id": {
            "type": "integer",
            "nullable": true,
            "description": "ID of the project"
          },
          "organization_id": {
            "type": "integer",
            "description": "ID of the organization"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": ["created_at", "id", "modified_at", "name", "organization_id"]
      },
      "RulebookRef": {
        "type": "object",
        "description": "Serializer for Rulebook reference.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "organization_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          }
        },
        "required": ["id", "name", "organization_id"]
      },
      "ScmTypeEnum": {
        "enum": ["git"],
        "type": "string",
        "description": "* `git` - Git"
      },
      "StatusEnum": {
        "enum": [
          "starting",
          "running",
          "pending",
          "failed",
          "stopping",
          "stopped",
          "deleting",
          "completed",
          "unresponsive",
          "error",
          "workers offline"
        ],
        "type": "string",
        "description": "* `starting` - starting\n* `running` - running\n* `pending` - pending\n* `failed` - failed\n* `stopping` - stopping\n* `stopped` - stopped\n* `deleting` - deleting\n* `completed` - completed\n* `unresponsive` - unresponsive\n* `error` - error\n* `workers offline` - workers offline"
      },
      "Team": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of this resource",
            "maxLength": 512
          },
          "description": {
            "type": "string",
            "description": "The team description."
          },
          "organization_id": {
            "type": "integer",
            "description": "The organization of this team.",
            "readOnly": true
          },
          "resource": {
            "type": "object",
            "additionalProperties": {},
            "readOnly": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The date/time this resource was created"
          },
          "created_by": {
            "type": "integer",
            "readOnly": true,
            "nullable": true,
            "description": "The user who created this resource"
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The date/time this resource was created"
          },
          "modified_by": {
            "type": "integer",
            "readOnly": true,
            "nullable": true,
            "description": "The user who last modified this resource"
          }
        },
        "required": [
          "created",
          "created_by",
          "id",
          "modified",
          "modified_by",
          "name",
          "organization_id",
          "resource"
        ]
      },
      "TeamCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of this resource",
            "maxLength": 512
          },
          "description": {
            "type": "string",
            "description": "The team description."
          },
          "organization_id": {
            "type": "integer",
            "nullable": true
          }
        },
        "required": ["name"]
      },
      "TeamDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of this resource",
            "maxLength": 512
          },
          "description": {
            "type": "string",
            "description": "The team description."
          },
          "organization": {
            "$ref": "#/components/schemas/OrganizationRef"
          },
          "resource": {
            "type": "object",
            "additionalProperties": {},
            "readOnly": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The date/time this resource was created"
          },
          "created_by": {
            "type": "integer",
            "readOnly": true,
            "nullable": true,
            "description": "The user who created this resource"
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The date/time this resource was created"
          },
          "modified_by": {
            "type": "integer",
            "readOnly": true,
            "nullable": true,
            "description": "The user who last modified this resource"
          }
        },
        "required": [
          "created",
          "created_by",
          "id",
          "modified",
          "modified_by",
          "name",
          "organization",
          "resource"
        ]
      },
      "TokenRefresh": {
        "type": "object",
        "properties": {
          "access": {
            "type": "string",
            "readOnly": true
          },
          "refresh": {
            "type": "string",
            "writeOnly": true
          }
        },
        "required": ["access", "refresh"]
      },
      "UserCreateUpdate": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The user's log in name."
          },
          "first_name": {
            "type": "string",
            "maxLength": 150
          },
          "last_name": {
            "type": "string",
            "maxLength": 150
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email address",
            "maxLength": 254
          },
          "password": {
            "type": "string",
            "writeOnly": true
          },
          "is_superuser": {
            "type": "boolean",
            "title": "Superuser status",
            "description": "Designates that this user has all permissions without explicitly assigning them."
          }
        },
        "required": ["password", "username"]
      },
      "UserDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "username": {
            "type": "string",
            "description": "The user's log in name."
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email address",
            "maxLength": 254
          },
          "first_name": {
            "type": "string",
            "maxLength": 150
          },
          "last_name": {
            "type": "string",
            "maxLength": 150
          },
          "is_superuser": {
            "type": "boolean",
            "title": "Superuser status",
            "description": "Designates that this user has all permissions without explicitly assigning them."
          },
          "resource": {
            "type": "object",
            "additionalProperties": {},
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": ["created_at", "id", "modified_at", "resource", "username"]
      },
      "UserList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the user"
          },
          "username": {
            "type": "string",
            "description": "The user's log in name."
          },
          "first_name": {
            "type": "string",
            "description": "The user's first name."
          },
          "last_name": {
            "type": "string",
            "description": "The user's last name."
          },
          "is_superuser": {
            "type": "boolean",
            "description": "The user is a superuser."
          },
          "resource": {
            "type": "object",
            "additionalProperties": {},
            "readOnly": true
          }
        },
        "required": ["first_name", "id", "is_superuser", "last_name", "resource", "username"]
      }
    },
    "securitySchemes": {
      "EDAJWTAuthentication": {
        "type": "apiKey",
        "name": "X-DAB-JW-TOKEN",
        "in": "header"
      },
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      },
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "sessionid"
      },
      "jwtAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "servers": [
    {
      "url": "/api/eda/v1"
    }
  ]
}
