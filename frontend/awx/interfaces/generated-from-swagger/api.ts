/* eslint-disable */
/* tslint:disable */
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export interface ActivityStream {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /**
   * Timestamp
   * @format date-time
   */
  timestamp?: string
  /**
   * Operation
   * The action taken with respect to the given object(s).
   */
  operation?: 'create' | 'update' | 'delete' | 'associate' | 'disassociate' | null
  /**
   * Changes
   * A summary of the new and changed values when an object is created, updated, or deleted
   */
  changes?: string
  /**
   * Object1
   * For create, update, and delete events this is the object type that was affected. For associate and disassociate events this is the object type associated or disassociated with object2.
   * @minLength 1
   */
  object1?: string | null
  /**
   * Object2
   * Unpopulated for create, update, and delete events. For associate and disassociate events this is the object type that object1 is being associated with.
   * @minLength 1
   */
  object2?: string | null
  /**
   * Object association
   * When present, shows the field name of the role or relationship that changed.
   */
  object_association?: string
  /**
   * Action node
   * The cluster node the activity took place on.
   * @minLength 1
   */
  action_node?: string
  /**
   * Object type
   * When present, shows the model on which the role or relationship was defined.
   */
  object_type?: string
}

export interface AdHocCommandEvent {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /** Ad hoc command */
  ad_hoc_command?: string
  /** Event */
  event?:
    | 'runner_on_failed'
    | 'runner_on_ok'
    | 'runner_on_unreachable'
    | 'runner_on_skipped'
    | 'debug'
    | 'verbose'
    | 'deprecated'
    | 'warning'
    | 'system_warning'
    | 'error'
    | null
  /**
   * Counter
   * @min 0
   */
  counter?: number
  /**
   * Event display
   * @minLength 1
   */
  event_display?: string
  /**
   * Event data
   * @default {}
   */
  event_data?: object
  /** Failed */
  failed?: boolean
  /** Changed */
  changed?: boolean
  /**
   * Uuid
   * @minLength 1
   */
  uuid?: string
  /** Host */
  host?: number
  /**
   * Host name
   * @minLength 1
   */
  host_name?: string
  /**
   * Stdout
   * @minLength 1
   */
  stdout?: string
  /**
   * Start line
   * @min 0
   */
  start_line?: number
  /**
   * End line
   * @min 0
   */
  end_line?: number
  /**
   * Verbosity
   * @min 0
   */
  verbosity?: number
}

export interface AdHocCommandList {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   */
  name?: string | null
  /** Launch type */
  launch_type?:
    | 'manual'
    | 'relaunch'
    | 'callback'
    | 'scheduled'
    | 'dependency'
    | 'workflow'
    | 'webhook'
    | 'sync'
    | 'scm'
  /** Status */
  status?:
    | 'new'
    | 'pending'
    | 'waiting'
    | 'running'
    | 'successful'
    | 'failed'
    | 'error'
    | 'canceled'
  /**
   * Execution environment
   * The container image to be used for execution.
   */
  execution_environment?: number | null
  /** Failed */
  failed?: boolean
  /**
   * Started
   * The date and time the job was queued for starting.
   * @format date-time
   */
  started?: string
  /**
   * Finished
   * The date and time the job finished execution.
   * @format date-time
   */
  finished?: string
  /**
   * Canceled on
   * The date and time when the cancel request was sent.
   * @format date-time
   */
  canceled_on?: string
  /**
   * Elapsed
   * Elapsed time in seconds that the job ran.
   * @format decimal
   */
  elapsed?: string
  /**
   * Job explanation
   * A status field to indicate the state of the job if it wasn't able to run and capture stdout
   * @minLength 1
   */
  job_explanation?: string
  /**
   * Execution node
   * The node the job executed on.
   * @minLength 1
   */
  execution_node?: string
  /**
   * Controller node
   * The instance that managed the execution environment.
   * @minLength 1
   */
  controller_node?: string
  /** Launched by */
  launched_by?: string
  /**
   * Work unit id
   * The Receptor work unit ID associated with this job.
   * @minLength 1
   */
  work_unit_id?: string
  /**
   * Job type
   * @default "run"
   */
  job_type?: 'run' | 'check' | null
  /** Inventory */
  inventory?: number | null
  /**
   * Limit
   * @default ""
   */
  limit?: string | null
  /** Credential */
  credential?: number | null
  /**
   * Module name
   * @default "command"
   */
  module_name?:
    | 'command'
    | 'shell'
    | 'yum'
    | 'apt'
    | 'apt_key'
    | 'apt_repository'
    | 'apt_rpm'
    | 'service'
    | 'group'
    | 'user'
    | 'mount'
    | 'ping'
    | 'selinux'
    | 'setup'
    | 'win_ping'
    | 'win_service'
    | 'win_updates'
    | 'win_group'
    | 'win_user'
  /**
   * Module args
   * @default ""
   */
  module_args?: string | null
  /**
   * Forks
   * @min 0
   * @max 2147483647
   * @default 0
   */
  forks?: number
  /**
   * Verbosity
   * @default 0
   */
  verbosity?: 0 | 1 | 2 | 3 | 4 | 5
  /**
   * Extra vars
   * @default ""
   */
  extra_vars?: string | null
  /**
   * Become enabled
   * @default false
   */
  become_enabled?: boolean | null
  /**
   * Diff mode
   * @default false
   */
  diff_mode?: boolean | null
}

export interface AdHocCommandDetail {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   */
  name?: string | null
  /** Launch type */
  launch_type?:
    | 'manual'
    | 'relaunch'
    | 'callback'
    | 'scheduled'
    | 'dependency'
    | 'workflow'
    | 'webhook'
    | 'sync'
    | 'scm'
  /** Status */
  status?:
    | 'new'
    | 'pending'
    | 'waiting'
    | 'running'
    | 'successful'
    | 'failed'
    | 'error'
    | 'canceled'
  /**
   * Execution environment
   * The container image to be used for execution.
   */
  execution_environment?: number | null
  /** Failed */
  failed?: boolean
  /**
   * Started
   * The date and time the job was queued for starting.
   * @format date-time
   */
  started?: string
  /**
   * Finished
   * The date and time the job finished execution.
   * @format date-time
   */
  finished?: string
  /**
   * Canceled on
   * The date and time when the cancel request was sent.
   * @format date-time
   */
  canceled_on?: string
  /**
   * Elapsed
   * Elapsed time in seconds that the job ran.
   * @format decimal
   */
  elapsed?: string
  /**
   * Job args
   * @minLength 1
   */
  job_args?: string
  /**
   * Job cwd
   * @minLength 1
   */
  job_cwd?: string
  /** Job env */
  job_env?: object
  /**
   * Job explanation
   * A status field to indicate the state of the job if it wasn't able to run and capture stdout
   * @minLength 1
   */
  job_explanation?: string
  /**
   * Execution node
   * The node the job executed on.
   * @minLength 1
   */
  execution_node?: string
  /**
   * Controller node
   * The instance that managed the execution environment.
   * @minLength 1
   */
  controller_node?: string
  /**
   * Result traceback
   * @minLength 1
   */
  result_traceback?: string
  /**
   * Event processing finished
   * Indicates whether all of the events generated by this unified job have been saved to the database.
   */
  event_processing_finished?: boolean
  /** Launched by */
  launched_by?: string
  /**
   * Work unit id
   * The Receptor work unit ID associated with this job.
   * @minLength 1
   */
  work_unit_id?: string
  /**
   * Job type
   * @default "run"
   */
  job_type?: 'run' | 'check' | null
  /** Inventory */
  inventory?: number | null
  /**
   * Limit
   * @default ""
   */
  limit?: string | null
  /** Credential */
  credential?: number | null
  /**
   * Module name
   * @default "command"
   */
  module_name?:
    | 'command'
    | 'shell'
    | 'yum'
    | 'apt'
    | 'apt_key'
    | 'apt_repository'
    | 'apt_rpm'
    | 'service'
    | 'group'
    | 'user'
    | 'mount'
    | 'ping'
    | 'selinux'
    | 'setup'
    | 'win_ping'
    | 'win_service'
    | 'win_updates'
    | 'win_group'
    | 'win_user'
  /**
   * Module args
   * @default ""
   */
  module_args?: string | null
  /**
   * Forks
   * @min 0
   * @max 2147483647
   * @default 0
   */
  forks?: number
  /**
   * Verbosity
   * @default 0
   */
  verbosity?: 0 | 1 | 2 | 3 | 4 | 5
  /**
   * Extra vars
   * @default ""
   */
  extra_vars?: string | null
  /**
   * Become enabled
   * @default false
   */
  become_enabled?: boolean | null
  /**
   * Diff mode
   * @default false
   */
  diff_mode?: boolean | null
  /**
   * Host status counts
   * Playbook stats from the Ansible playbook_on_stats event.
   */
  host_status_counts?: object
}

export interface AdHocCommandCancel {
  /** Can cancel */
  can_cancel?: boolean
}

export interface Notification {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /** Notification template */
  notification_template?: number
  /**
   * Error
   * @minLength 1
   */
  error?: string
  /** Status */
  status?: 'pending' | 'successful' | 'failed'
  /** Notifications sent */
  notifications_sent?: number
  /** Notification type */
  notification_type?:
    | 'email'
    | 'grafana'
    | 'irc'
    | 'mattermost'
    | 'pagerduty'
    | 'rocketchat'
    | 'slack'
    | 'twilio'
    | 'webhook'
    | null
  /**
   * Recipients
   * @minLength 1
   */
  recipients?: string
  /**
   * Subject
   * @minLength 1
   */
  subject?: string
  /**
   * Body
   * Notification body
   */
  body?: string
}

export type AdHocCommandRelaunch = object

export interface UnifiedJobStdout {
  /** Result stdout */
  result_stdout?: string
}

export interface OAuth2Application {
  /** Id */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @maxLength 255
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /**
   * Client id
   * @minLength 1
   */
  client_id?: string | null
  /**
   * Client Secret
   * Used for more stringent verification of access to an application when creating a token.
   * @minLength 1
   */
  client_secret?: string | null
  /**
   * Client Type
   * Set to Public or Confidential depending on how secure the client device is.
   */
  client_type?: 'confidential' | 'public' | null
  /**
   * Redirect URIs
   * Allowed URIs list, space separated
   */
  redirect_uris?: string | null
  /**
   * Authorization Grant Type
   * The Grant type the user must use for acquire tokens for this application.
   */
  authorization_grant_type?: 'authorization-code' | 'password' | null
  /**
   * Skip Authorization
   * Set True to skip authorization step for completely trusted applications.
   * @default false
   */
  skip_authorization?: boolean | null
  /**
   * Organization
   * Organization containing this application.
   */
  organization: number
}

export interface OAuth2Token {
  /** Id */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /**
   * User
   * The user representing the token owner
   */
  user?: number
  /** Token */
  token?: string
  /** Refresh token */
  refresh_token?: string
  /** Application */
  application?: number | null
  /**
   * Expires
   * @format date-time
   */
  expires?: string
  /**
   * Scope
   * Allowed scopes, further restricts user's permissions. Must be a simple space-separated string with allowed scopes ['read', 'write'].
   * @default "write"
   */
  scope?: string | null
}

export interface CredentialInputSource {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /**
   * Input field name
   * @minLength 1
   * @maxLength 1024
   */
  input_field_name?: string | null
  /**
   * Metadata
   * @default {}
   */
  metadata?: object
  /** Target credential */
  target_credential?: number | null
  /** Source credential */
  source_credential?: number | null
}

export interface CredentialType {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /** Kind */
  kind?:
    | 'ssh'
    | 'vault'
    | 'net'
    | 'scm'
    | 'cloud'
    | 'registry'
    | 'token'
    | 'insights'
    | 'external'
    | 'kubernetes'
    | 'galaxy'
    | 'cryptography'
    | null
  /**
   * Namespace
   * @minLength 1
   */
  namespace?: string
  /** Managed */
  managed?: string
  /**
   * Inputs
   * Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax.
   * @default {}
   */
  inputs?: object
  /**
   * Injectors
   * Enter injectors using either JSON or YAML syntax. Refer to the documentation for example syntax.
   * @default {}
   */
  injectors?: object
}

export interface Credential {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /** Organization */
  organization?: number | null
  /**
   * Credential Type
   * Specify the type of credential you want to create. Refer to the documentation for details on each type.
   */
  credential_type: number
  /** Managed */
  managed?: string
  /**
   * Inputs
   * Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax.
   * @default {}
   */
  inputs?: object
  /** Kind */
  kind?: string
  /** Cloud */
  cloud?: string
  /** Kubernetes */
  kubernetes?: string
}

export type Empty = object

export interface CredentialSerializerCreate {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /**
   * Organization
   * Inherit permissions from organization roles. If provided on creation, do not give either user or team.
   */
  organization?: number | null
  /**
   * Credential Type
   * Specify the type of credential you want to create. Refer to the documentation for details on each type.
   */
  credential_type: number
  /** Managed */
  managed?: string
  /**
   * Inputs
   * Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax.
   * @default {}
   */
  inputs?: object
  /** Kind */
  kind?: string
  /** Cloud */
  cloud?: string
  /** Kubernetes */
  kubernetes?: string
  /**
   * User
   * Write-only field used to add user to owner role. If provided, do not give either team or organization. Only valid for creation.
   */
  user?: number | null
  /**
   * Team
   * Write-only field used to add team to owner role. If provided, do not give either user or organization. Only valid for creation.
   */
  team?: number | null
}

export interface ResourceAccessListElement {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Username
   * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
   * @minLength 1
   * @maxLength 150
   * @pattern ^[\w.@+-]+$
   */
  username?: string | null
  /**
   * First name
   * @maxLength 150
   */
  first_name?: string | null
  /**
   * Last name
   * @maxLength 150
   */
  last_name?: string | null
  /**
   * Email address
   * @maxLength 254
   */
  email?: string | null
  /**
   * Superuser status
   * Designates that this user has all permissions without explicitly assigning them.
   * @default false
   */
  is_superuser?: boolean | null
  /**
   * Is system auditor
   * @default false
   */
  is_system_auditor?: boolean
  /**
   * Password
   * Write-only field used to change the password.
   * @minLength 1
   * @default ""
   */
  password?: string
  /**
   * Ldap dn
   * @minLength 1
   */
  ldap_dn?: string
  /**
   * Last login
   * @format date-time
   */
  last_login?: string | null
  /**
   * External account
   * Set if the account is managed by an external service
   */
  external_account?: string
}

export interface Copy {
  /**
   * Name
   * @minLength 1
   */
  name: string
}

export interface Role {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Name */
  name?: string
  /** Description */
  description?: string
}

export interface Team {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /** Organization */
  organization: number
}

export interface User {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Username
   * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
   * @minLength 1
   * @maxLength 150
   * @pattern ^[\w.@+-]+$
   */
  username?: string | null
  /**
   * First name
   * @maxLength 150
   */
  first_name?: string | null
  /**
   * Last name
   * @maxLength 150
   */
  last_name?: string | null
  /**
   * Email address
   * @maxLength 254
   */
  email?: string | null
  /**
   * Superuser status
   * Designates that this user has all permissions without explicitly assigning them.
   * @default false
   */
  is_superuser?: boolean | null
  /**
   * Is system auditor
   * @default false
   */
  is_system_auditor?: boolean
  /**
   * Password
   * Write-only field used to change the password.
   * @minLength 1
   * @default ""
   */
  password?: string
  /**
   * Ldap dn
   * @minLength 1
   */
  ldap_dn?: string
  /**
   * Last login
   * @format date-time
   */
  last_login?: string | null
  /**
   * External account
   * Set if the account is managed by an external service
   */
  external_account?: string
}

export interface ExecutionEnvironment {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /**
   * Organization
   * The organization used to determine access to this execution environment.
   */
  organization?: number | null
  /**
   * Image location
   * The full image location, including the container registry, image name, and version tag.
   * @minLength 1
   * @maxLength 1024
   */
  image?: string | null
  /** Managed */
  managed?: string
  /** Credential */
  credential?: number | null
  /**
   * Pull
   * Pull image before running?
   * @default ""
   */
  pull?: 'always' | 'missing' | 'never' | null
}

export interface UnifiedJobTemplate {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /**
   * Last job run
   * @format date-time
   */
  last_job_run?: string
  /** Last job failed */
  last_job_failed?: boolean
  /**
   * Next job run
   * @format date-time
   */
  next_job_run?: string
  /** Status */
  status?:
    | 'new'
    | 'pending'
    | 'waiting'
    | 'running'
    | 'successful'
    | 'failed'
    | 'error'
    | 'canceled'
    | 'never updated'
    | 'ok'
    | 'missing'
    | 'none'
    | 'updating'
  /**
   * Execution environment
   * The container image to be used for execution.
   */
  execution_environment?: number | null
}

export interface Group {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /** Inventory */
  inventory: number
  /**
   * Variables
   * Group variables in JSON or YAML format.
   * @default ""
   */
  variables?: string | null
}

export interface Host {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /** Inventory */
  inventory: number
  /**
   * Enabled
   * Is this host online and available for running jobs?
   * @default true
   */
  enabled?: boolean | null
  /**
   * Instance id
   * The value used by the remote inventory source to uniquely identify the host
   * @maxLength 1024
   * @default ""
   */
  instance_id?: string | null
  /**
   * Variables
   * Host variables in JSON or YAML format.
   * @default ""
   */
  variables?: string | null
  /** Has active failures */
  has_active_failures?: string
  /** Has inventory sources */
  has_inventory_sources?: string
  /** Last job */
  last_job?: string
  /** Last job host summary */
  last_job_host_summary?: number
  /**
   * Ansible facts modified
   * The date and time ansible_facts was last modified.
   * @format date-time
   */
  ansible_facts_modified?: string
}

export interface InventorySource {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /** Source */
  source?:
    | 'file'
    | 'scm'
    | 'ec2'
    | 'gce'
    | 'azure_rm'
    | 'vmware'
    | 'satellite6'
    | 'openstack'
    | 'rhv'
    | 'controller'
    | 'insights'
    | null
  /**
   * Source path
   * @maxLength 1024
   * @default ""
   */
  source_path?: string | null
  /**
   * Source vars
   * Inventory source variables in YAML or JSON format.
   * @default ""
   */
  source_vars?: string | null
  /**
   * Credential
   * Cloud credential to use for inventory updates.
   * @min 1
   */
  credential?: number | null
  /**
   * Enabled var
   * Retrieve the enabled state from the given dict of host variables. The enabled variable may be specified as "foo.bar", in which case the lookup will traverse into nested dicts, equivalent to: from_dict.get("foo", {}).get("bar", default)
   * @default ""
   */
  enabled_var?: string | null
  /**
   * Enabled value
   * Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var="status.power_state"and enabled_value="powered_on" with host variables:{   "status": {     "power_state": "powered_on",     "created": "2020-08-04T18:13:04+00:00",     "healthy": true    },    "name": "foobar",    "ip_address": "192.168.2.1"}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled
   * @default ""
   */
  enabled_value?: string | null
  /**
   * Host filter
   * Regex where only matching hosts will be imported.
   * @default ""
   */
  host_filter?: string | null
  /**
   * Overwrite
   * Overwrite local groups and hosts from remote inventory source.
   * @default false
   */
  overwrite?: boolean | null
  /**
   * Overwrite vars
   * Overwrite local variables from remote inventory source.
   * @default false
   */
  overwrite_vars?: boolean | null
  /**
   * Custom virtualenv
   * Local absolute file path containing a custom Python virtualenv to use
   * @minLength 1
   */
  custom_virtualenv?: string | null
  /**
   * Timeout
   * The amount of time (in seconds) to run before the task is canceled.
   * @min -2147483648
   * @max 2147483647
   * @default 0
   */
  timeout?: number
  /**
   * Verbosity
   * @default 1
   */
  verbosity?: 0 | 1 | 2
  /**
   * Last job run
   * @format date-time
   */
  last_job_run?: string
  /** Last job failed */
  last_job_failed?: boolean
  /**
   * Next job run
   * @format date-time
   */
  next_job_run?: string
  /** Status */
  status?:
    | 'new'
    | 'pending'
    | 'waiting'
    | 'running'
    | 'successful'
    | 'failed'
    | 'error'
    | 'canceled'
    | 'never updated'
    | 'none'
  /**
   * Execution environment
   * The container image to be used for execution.
   */
  execution_environment?: number | null
  /** Inventory */
  inventory?: number | null
  /**
   * Update on launch
   * @default false
   */
  update_on_launch?: boolean | null
  /**
   * Update cache timeout
   * @min 0
   * @max 2147483647
   * @default 0
   */
  update_cache_timeout?: number
  /**
   * Source project
   * Project containing inventory file used as source.
   */
  source_project?: string | null
  /** Last update failed */
  last_update_failed?: boolean
  /**
   * Last updated
   * @format date-time
   */
  last_updated?: string
}

export interface JobEvent {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /** Job */
  job?: string
  /** Event */
  event?:
    | 'runner_on_failed'
    | 'runner_on_start'
    | 'runner_on_ok'
    | 'runner_on_error'
    | 'runner_on_skipped'
    | 'runner_on_unreachable'
    | 'runner_on_no_hosts'
    | 'runner_on_async_poll'
    | 'runner_on_async_ok'
    | 'runner_on_async_failed'
    | 'runner_item_on_ok'
    | 'runner_item_on_failed'
    | 'runner_item_on_skipped'
    | 'runner_retry'
    | 'runner_on_file_diff'
    | 'playbook_on_start'
    | 'playbook_on_notify'
    | 'playbook_on_include'
    | 'playbook_on_no_hosts_matched'
    | 'playbook_on_no_hosts_remaining'
    | 'playbook_on_task_start'
    | 'playbook_on_vars_prompt'
    | 'playbook_on_setup'
    | 'playbook_on_import_for_host'
    | 'playbook_on_not_import_for_host'
    | 'playbook_on_play_start'
    | 'playbook_on_stats'
    | 'debug'
    | 'verbose'
    | 'deprecated'
    | 'warning'
    | 'system_warning'
    | 'error'
    | null
  /**
   * Counter
   * @min 0
   */
  counter?: number
  /**
   * Event display
   * @minLength 1
   */
  event_display?: string
  /**
   * Event data
   * @default {}
   */
  event_data?: object
  /** Event level */
  event_level?: number
  /** Failed */
  failed?: boolean
  /** Changed */
  changed?: boolean
  /**
   * Uuid
   * @minLength 1
   */
  uuid?: string
  /**
   * Parent uuid
   * @minLength 1
   */
  parent_uuid?: string
  /** Host */
  host?: number
  /**
   * Host name
   * @minLength 1
   */
  host_name?: string
  /**
   * Playbook
   * @minLength 1
   */
  playbook?: string
  /**
   * Play
   * @minLength 1
   */
  play?: string
  /**
   * Task
   * @minLength 1
   */
  task?: string
  /**
   * Role
   * @minLength 1
   */
  role?: string
  /**
   * Stdout
   * @minLength 1
   */
  stdout?: string
  /**
   * Start line
   * @min 0
   */
  start_line?: number
  /**
   * End line
   * @min 0
   */
  end_line?: number
  /**
   * Verbosity
   * @min 0
   */
  verbosity?: number
}

export interface JobHostSummary {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /** Job */
  job?: string
  /** Host */
  host?: number
  /**
   * Host name
   * @minLength 1
   * @default ""
   */
  host_name?: string
  /**
   * Changed
   * @min 0
   */
  changed?: number
  /**
   * Dark
   * @min 0
   */
  dark?: number
  /**
   * Failures
   * @min 0
   */
  failures?: number
  /**
   * Ok
   * @min 0
   */
  ok?: number
  /**
   * Processed
   * @min 0
   */
  processed?: number
  /**
   * Skipped
   * @min 0
   */
  skipped?: number
  /** Failed */
  failed?: boolean
  /**
   * Ignored
   * @min 0
   */
  ignored?: number
  /**
   * Rescued
   * @min 0
   */
  rescued?: number
}

export interface GroupVariableData {
  /**
   * Variables
   * Group variables in JSON or YAML format.
   * @default ""
   */
  variables?: string | null
}

export interface AnsibleFacts {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
}

export interface Inventory {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /**
   * Organization
   * Organization containing this inventory.
   */
  organization?: number | null
  /**
   * Kind
   * Kind of inventory being represented.
   * @default ""
   */
  kind?: '' | 'smart' | null
  /**
   * Host filter
   * Filter that will be applied to the hosts of this inventory.
   */
  host_filter?: string | null
  /**
   * Variables
   * Inventory variables in JSON or YAML format.
   * @default ""
   */
  variables?: string | null
  /**
   * Has active failures
   * This field is deprecated and will be removed in a future release. Flag indicating whether any hosts in this inventory have failed.
   */
  has_active_failures?: boolean
  /**
   * Total hosts
   * This field is deprecated and will be removed in a future release. Total number of hosts in this inventory.
   * @min 0
   */
  total_hosts?: number
  /**
   * Hosts with active failures
   * This field is deprecated and will be removed in a future release. Number of hosts in this inventory with active failures.
   * @min 0
   */
  hosts_with_active_failures?: number
  /**
   * Total groups
   * This field is deprecated and will be removed in a future release. Total number of groups in this inventory.
   * @min 0
   */
  total_groups?: number
  /**
   * Has inventory sources
   * This field is deprecated and will be removed in a future release. Flag indicating whether this inventory has any external inventory sources.
   */
  has_inventory_sources?: boolean
  /**
   * Total inventory sources
   * Total number of external inventory sources configured within this inventory.
   * @min 0
   */
  total_inventory_sources?: number
  /**
   * Inventory sources with failures
   * Number of external inventory sources in this inventory with failures.
   * @min 0
   */
  inventory_sources_with_failures?: number
  /**
   * Pending deletion
   * Flag indicating the inventory is being deleted.
   */
  pending_deletion?: boolean
  /**
   * Prevent instance group fallback
   * If enabled, the inventory will prevent adding any organization instance groups to the list of preferred instances groups to run associated job templates on.If this setting is enabled and you provided an empty list, the global instance groups will be applied.
   * @default false
   */
  prevent_instance_group_fallback?: boolean | null
}

export interface HostVariableData {
  /**
   * Variables
   * Host variables in JSON or YAML format.
   * @default ""
   */
  variables?: string | null
}

export interface InstanceGroup {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 250
   */
  name?: string | null
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /** Capacity */
  capacity?: string
  /** Consumed capacity */
  consumed_capacity?: string
  /** Percent capacity remaining */
  percent_capacity_remaining?: string
  /**
   * Jobs running
   * Count of jobs in the running or waiting state that are targeted for this instance group
   */
  jobs_running?: number
  /**
   * Jobs total
   * Count of all jobs that target this instance group
   */
  jobs_total?: number
  /** Instances */
  instances?: string
  /**
   * Is container group
   * Indicates whether instances in this group are containerized.Containerized groups have a designated Openshift or Kubernetes cluster.
   */
  is_container_group?: boolean
  /** Credential */
  credential?: number | null
  /**
   * Policy Instance Percentage
   * Minimum percentage of all instances that will be automatically assigned to this group when new instances come online.
   * @min 0
   * @max 100
   * @default 0
   */
  policy_instance_percentage?: number
  /**
   * Policy Instance Minimum
   * Static minimum number of Instances that will be automatically assign to this group when new instances come online.
   * @min 0
   * @default 0
   */
  policy_instance_minimum?: number
  /** List of exact-match Instances that will be assigned to this group */
  policy_instance_list?: string[]
  /**
   * Pod spec override
   * @default ""
   */
  pod_spec_override?: string | null
  /** Summary fields */
  summary_fields?: string
}

export interface Instance {
  /** ID */
  id?: number
  /**
   * Hostname
   * @minLength 1
   * @maxLength 250
   */
  hostname?: string | null
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /**
   * Uuid
   * @minLength 1
   */
  uuid?: string | null
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Last seen
   * Last time instance ran its heartbeat task for main cluster nodes. Last known connection to receptor mesh for execution nodes.
   * @format date-time
   */
  last_seen?: string
  /**
   * Health check started
   * The last time a health check was initiated on this instance.
   * @format date-time
   */
  health_check_started?: string
  /** Health check pending */
  health_check_pending?: string
  /**
   * Last health check
   * Last time a health check was ran on this instance to refresh cpu, memory, and capacity.
   * @format date-time
   */
  last_health_check?: string
  /**
   * Errors
   * Any error details from the last health check.
   * @minLength 1
   */
  errors?: string
  /**
   * Capacity adjustment
   * @format decimal
   * @default "1.00"
   */
  capacity_adjustment?: string
  /**
   * Version
   * @minLength 1
   */
  version?: string | null
  /**
   * Capacity
   * @min 0
   */
  capacity?: number
  /** Consumed capacity */
  consumed_capacity?: string
  /** Percent capacity remaining */
  percent_capacity_remaining?: string
  /**
   * Jobs running
   * Count of jobs in the running or waiting state that are targeted for this instance
   */
  jobs_running?: number
  /**
   * Jobs total
   * Count of all jobs that target this instance
   */
  jobs_total?: number
  /**
   * Cpu
   * @format decimal
   */
  cpu?: string
  /**
   * Memory
   * Total system memory of this instance in bytes.
   */
  memory?: number
  /** Cpu capacity */
  cpu_capacity?: number
  /** Mem capacity */
  mem_capacity?: number
  /**
   * Enabled
   * @default true
   */
  enabled?: boolean | null
  /**
   * Managed by policy
   * @default true
   */
  managed_by_policy?: boolean | null
  /**
   * Node type
   * Role that this node plays in the mesh.
   * @default "execution"
   */
  node_type?: 'control' | 'execution' | 'hybrid' | 'hop' | null
  /**
   * Node state
   * Indicates the current life cycle stage of this instance.
   * @default "installed"
   */
  node_state?:
    | 'provisioning'
    | 'provision-fail'
    | 'installed'
    | 'ready'
    | 'unavailable'
    | 'deprovisioning'
    | 'deprovision-fail'
    | null
  /**
   * Ip address
   * @minLength 1
   */
  ip_address?: string | null
  /**
   * Listener port
   * Port that Receptor will listen for incoming connections on.
   * @min 0
   * @max 65535
   * @default 27199
   */
  listener_port?: number
}

export interface UnifiedJobList {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /** unified job template */
  unified_job_template?: string
  /** Launch type */
  launch_type?:
    | 'manual'
    | 'relaunch'
    | 'callback'
    | 'scheduled'
    | 'dependency'
    | 'workflow'
    | 'webhook'
    | 'sync'
    | 'scm'
  /** Status */
  status?:
    | 'new'
    | 'pending'
    | 'waiting'
    | 'running'
    | 'successful'
    | 'failed'
    | 'error'
    | 'canceled'
  /**
   * Execution environment
   * The container image to be used for execution.
   */
  execution_environment?: number | null
  /** Failed */
  failed?: boolean
  /**
   * Started
   * The date and time the job was queued for starting.
   * @format date-time
   */
  started?: string
  /**
   * Finished
   * The date and time the job finished execution.
   * @format date-time
   */
  finished?: string
  /**
   * Canceled on
   * The date and time when the cancel request was sent.
   * @format date-time
   */
  canceled_on?: string
  /**
   * Elapsed
   * Elapsed time in seconds that the job ran.
   * @format decimal
   */
  elapsed?: string
  /**
   * Job explanation
   * A status field to indicate the state of the job if it wasn't able to run and capture stdout
   * @minLength 1
   */
  job_explanation?: string
  /**
   * Execution node
   * The node the job executed on.
   * @minLength 1
   */
  execution_node?: string
  /**
   * Controller node
   * The instance that managed the execution environment.
   * @minLength 1
   */
  controller_node?: string
  /** Launched by */
  launched_by?: string
  /**
   * Work unit id
   * The Receptor work unit ID associated with this job.
   * @minLength 1
   */
  work_unit_id?: string
}

export interface InstanceHealthCheck {
  /**
   * Uuid
   * @minLength 1
   */
  uuid?: string | null
  /**
   * Hostname
   * @minLength 1
   */
  hostname?: string | null
  /**
   * Version
   * @minLength 1
   */
  version?: string | null
  /**
   * Last health check
   * Last time a health check was ran on this instance to refresh cpu, memory, and capacity.
   * @format date-time
   */
  last_health_check?: string
  /**
   * Errors
   * Any error details from the last health check.
   * @minLength 1
   */
  errors?: string
  /**
   * Cpu
   * @format decimal
   */
  cpu?: string
  /**
   * Memory
   * Total system memory of this instance in bytes.
   */
  memory?: number
  /** Cpu capacity */
  cpu_capacity?: number
  /** Mem capacity */
  mem_capacity?: number
  /** Capacity */
  capacity?: number
}

export interface JobTemplate {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /**
   * Job type
   * @default "run"
   */
  job_type?: 'run' | 'check' | null
  /** Inventory */
  inventory?: number | null
  /** Project */
  project?: string | null
  /**
   * Playbook
   * @maxLength 1024
   * @default ""
   */
  playbook?: string | null
  /**
   * Scm branch
   * Branch to use in job run. Project default used if blank. Only allowed if project allow_override field is set to true.
   * @maxLength 1024
   * @default ""
   */
  scm_branch?: string | null
  /**
   * Forks
   * @min 0
   * @max 2147483647
   * @default 0
   */
  forks?: number
  /**
   * Limit
   * @default ""
   */
  limit?: string | null
  /**
   * Verbosity
   * @default 0
   */
  verbosity?: 0 | 1 | 2 | 3 | 4 | 5
  /**
   * Extra vars
   * @default ""
   */
  extra_vars?: string | null
  /**
   * Job tags
   * @default ""
   */
  job_tags?: string | null
  /**
   * Force handlers
   * @default false
   */
  force_handlers?: boolean | null
  /**
   * Skip tags
   * @maxLength 1024
   * @default ""
   */
  skip_tags?: string | null
  /**
   * Start at task
   * @maxLength 1024
   * @default ""
   */
  start_at_task?: string | null
  /**
   * Timeout
   * The amount of time (in seconds) to run before the task is canceled.
   * @min -2147483648
   * @max 2147483647
   * @default 0
   */
  timeout?: number
  /**
   * Use fact cache
   * If enabled, the service will act as an Ansible Fact Cache Plugin; persisting facts at the end of a playbook run to the database and caching facts for use by Ansible.
   * @default false
   */
  use_fact_cache?: boolean | null
  /**
   * Organization
   * The organization used to determine access to this template.
   */
  organization?: number | null
  /**
   * Last job run
   * @format date-time
   */
  last_job_run?: string
  /** Last job failed */
  last_job_failed?: boolean
  /**
   * Next job run
   * @format date-time
   */
  next_job_run?: string
  /** Status */
  status?:
    | 'new'
    | 'pending'
    | 'waiting'
    | 'running'
    | 'successful'
    | 'failed'
    | 'error'
    | 'canceled'
    | 'never updated'
  /**
   * Execution environment
   * The container image to be used for execution.
   */
  execution_environment?: number | null
  /**
   * Host config key
   * @maxLength 1024
   * @default ""
   */
  host_config_key?: string | null
  /**
   * Ask scm branch on launch
   * @default false
   */
  ask_scm_branch_on_launch?: boolean | null
  /**
   * Ask diff mode on launch
   * @default false
   */
  ask_diff_mode_on_launch?: boolean | null
  /**
   * Ask variables on launch
   * @default false
   */
  ask_variables_on_launch?: boolean | null
  /**
   * Ask limit on launch
   * @default false
   */
  ask_limit_on_launch?: boolean | null
  /**
   * Ask tags on launch
   * @default false
   */
  ask_tags_on_launch?: boolean | null
  /**
   * Ask skip tags on launch
   * @default false
   */
  ask_skip_tags_on_launch?: boolean | null
  /**
   * Ask job type on launch
   * @default false
   */
  ask_job_type_on_launch?: boolean | null
  /**
   * Ask verbosity on launch
   * @default false
   */
  ask_verbosity_on_launch?: boolean | null
  /**
   * Ask inventory on launch
   * @default false
   */
  ask_inventory_on_launch?: boolean | null
  /**
   * Ask credential on launch
   * @default false
   */
  ask_credential_on_launch?: boolean | null
  /**
   * Ask execution environment on launch
   * @default false
   */
  ask_execution_environment_on_launch?: boolean | null
  /**
   * Ask labels on launch
   * @default false
   */
  ask_labels_on_launch?: boolean | null
  /**
   * Ask forks on launch
   * @default false
   */
  ask_forks_on_launch?: boolean | null
  /**
   * Ask job slice count on launch
   * @default false
   */
  ask_job_slice_count_on_launch?: boolean | null
  /**
   * Ask timeout on launch
   * @default false
   */
  ask_timeout_on_launch?: boolean | null
  /**
   * Ask instance groups on launch
   * @default false
   */
  ask_instance_groups_on_launch?: boolean | null
  /**
   * Survey enabled
   * @default false
   */
  survey_enabled?: boolean | null
  /**
   * Become enabled
   * @default false
   */
  become_enabled?: boolean | null
  /**
   * Diff mode
   * If enabled, textual changes made to any templated files on the host are shown in the standard output
   * @default false
   */
  diff_mode?: boolean | null
  /**
   * Allow simultaneous
   * @default false
   */
  allow_simultaneous?: boolean | null
  /**
   * Custom virtualenv
   * Local absolute file path containing a custom Python virtualenv to use
   * @minLength 1
   */
  custom_virtualenv?: string | null
  /**
   * Job slice count
   * The number of jobs to slice into at runtime. Will cause the Job Template to launch a workflow if value is greater than 1.
   * @min 0
   * @max 2147483647
   * @default 1
   */
  job_slice_count?: number
  /**
   * Webhook service
   * Service that webhook requests will be accepted from
   */
  webhook_service?: 'github' | 'gitlab' | null
  /**
   * Webhook credential
   * Personal Access Token for posting back the status to the service API
   */
  webhook_credential?: number | null
  /**
   * Prevent instance group fallback
   * If enabled, the job template will prevent adding any inventory or organization instance groups to the list of preferred instances groups to run on.If this setting is enabled and you provided an empty list, the global instance groups will be applied.
   * @default false
   */
  prevent_instance_group_fallback?: boolean | null
}

export interface Label {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Organization
   * Organization this label belongs to.
   */
  organization: number
}

export type InventoryScript = object

export interface GroupTree {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /** Inventory */
  inventory: number
  /**
   * Variables
   * Group variables in JSON or YAML format.
   * @default ""
   */
  variables?: string | null
  /** Children */
  children?: string
}

export interface InventorySourceUpdate {
  /** Can update */
  can_update?: boolean
}

export interface InventoryVariableData {
  /**
   * Variables
   * Inventory variables in JSON or YAML format.
   * @default ""
   */
  variables?: string | null
}

export interface InventoryUpdateList {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /** unified job template */
  unified_job_template?: string
  /** Launch type */
  launch_type?:
    | 'manual'
    | 'relaunch'
    | 'callback'
    | 'scheduled'
    | 'dependency'
    | 'workflow'
    | 'webhook'
    | 'sync'
    | 'scm'
  /** Status */
  status?:
    | 'new'
    | 'pending'
    | 'waiting'
    | 'running'
    | 'successful'
    | 'failed'
    | 'error'
    | 'canceled'
  /**
   * Execution environment
   * The container image to be used for execution.
   */
  execution_environment?: number | null
  /** Failed */
  failed?: boolean
  /**
   * Started
   * The date and time the job was queued for starting.
   * @format date-time
   */
  started?: string
  /**
   * Finished
   * The date and time the job finished execution.
   * @format date-time
   */
  finished?: string
  /**
   * Canceled on
   * The date and time when the cancel request was sent.
   * @format date-time
   */
  canceled_on?: string
  /**
   * Elapsed
   * Elapsed time in seconds that the job ran.
   * @format decimal
   */
  elapsed?: string
  /**
   * Job explanation
   * A status field to indicate the state of the job if it wasn't able to run and capture stdout
   * @minLength 1
   */
  job_explanation?: string
  /**
   * Execution node
   * The node the job executed on.
   * @minLength 1
   */
  execution_node?: string
  /**
   * Controller node
   * The instance that managed the execution environment.
   * @minLength 1
   */
  controller_node?: string
  /** Launched by */
  launched_by?: string
  /**
   * Work unit id
   * The Receptor work unit ID associated with this job.
   * @minLength 1
   */
  work_unit_id?: string
  /** Source */
  source?:
    | 'file'
    | 'scm'
    | 'ec2'
    | 'gce'
    | 'azure_rm'
    | 'vmware'
    | 'satellite6'
    | 'openstack'
    | 'rhv'
    | 'controller'
    | 'insights'
    | null
  /**
   * Source path
   * @maxLength 1024
   * @default ""
   */
  source_path?: string | null
  /**
   * Source vars
   * Inventory source variables in YAML or JSON format.
   * @default ""
   */
  source_vars?: string | null
  /**
   * Credential
   * Cloud credential to use for inventory updates.
   * @min 1
   */
  credential?: number | null
  /**
   * Enabled var
   * Retrieve the enabled state from the given dict of host variables. The enabled variable may be specified as "foo.bar", in which case the lookup will traverse into nested dicts, equivalent to: from_dict.get("foo", {}).get("bar", default)
   * @default ""
   */
  enabled_var?: string | null
  /**
   * Enabled value
   * Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var="status.power_state"and enabled_value="powered_on" with host variables:{   "status": {     "power_state": "powered_on",     "created": "2020-08-04T18:13:04+00:00",     "healthy": true    },    "name": "foobar",    "ip_address": "192.168.2.1"}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled
   * @default ""
   */
  enabled_value?: string | null
  /**
   * Host filter
   * Regex where only matching hosts will be imported.
   * @default ""
   */
  host_filter?: string | null
  /**
   * Overwrite
   * Overwrite local groups and hosts from remote inventory source.
   * @default false
   */
  overwrite?: boolean | null
  /**
   * Overwrite vars
   * Overwrite local variables from remote inventory source.
   * @default false
   */
  overwrite_vars?: boolean | null
  /** Custom virtualenv */
  custom_virtualenv?: string
  /**
   * Timeout
   * The amount of time (in seconds) to run before the task is canceled.
   * @min -2147483648
   * @max 2147483647
   * @default 0
   */
  timeout?: number
  /**
   * Verbosity
   * @default 1
   */
  verbosity?: 0 | 1 | 2
  /** Inventory */
  inventory?: number | null
  /** Inventory source */
  inventory_source?: string
  /** License error */
  license_error?: boolean
  /** Org host limit error */
  org_host_limit_error?: boolean
  /**
   * Source project update
   * Inventory files from this Project Update were used for the inventory update.
   */
  source_project_update?: string | null
  /**
   * Instance group
   * The Instance group the job was run under
   */
  instance_group?: number | null
  /**
   * SCM Revision
   * The SCM Revision from the Project used for this inventory update.  Only applicable to inventories source from scm
   * @minLength 1
   */
  scm_revision?: string
}

export interface NotificationTemplate {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /** Organization */
  organization?: number | null
  /** Notification type */
  notification_type?:
    | 'email'
    | 'grafana'
    | 'irc'
    | 'mattermost'
    | 'pagerduty'
    | 'rocketchat'
    | 'slack'
    | 'twilio'
    | 'webhook'
    | null
  /**
   * Notification configuration
   * @default {}
   */
  notification_configuration?: object
  /**
   * Messages
   * Optional custom messages for notification template.
   * @default {}
   */
  messages?: object | null
}

export interface Schedule {
  /**
   * Rrule
   * A value representing the schedules iCal recurrence rule.
   * @minLength 1
   */
  rrule?: string | null
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /**
   * Extra data
   * @default {}
   */
  extra_data?: object
  /**
   * Inventory
   * Inventory applied as a prompt, assuming job template prompts for inventory
   */
  inventory?: number | null
  /** Scm branch */
  scm_branch?: string | null
  /** Job type */
  job_type?: 'run' | 'check' | null
  /** Job tags */
  job_tags?: string | null
  /** Skip tags */
  skip_tags?: string | null
  /** Limit */
  limit?: string | null
  /** Diff mode */
  diff_mode?: boolean | null
  /** Verbosity */
  verbosity?: '0' | '1' | '2' | '3' | '4' | '5' | null
  /**
   * Execution environment
   * The container image to be used for execution.
   */
  execution_environment?: number | null
  /**
   * Forks
   * @min 0
   */
  forks?: number | null
  /**
   * Job slice count
   * @min 0
   */
  job_slice_count?: number | null
  /** Timeout */
  timeout?: number | null
  /** Unified job template */
  unified_job_template: number
  /**
   * Enabled
   * Enables processing of this schedule.
   * @default true
   */
  enabled?: boolean | null
  /**
   * Dtstart
   * The first occurrence of the schedule occurs on or after this time.
   * @format date-time
   */
  dtstart?: string
  /**
   * Dtend
   * The last occurrence of the schedule occurs before this time, aftewards the schedule expires.
   * @format date-time
   */
  dtend?: string
  /**
   * Next run
   * The next time that the scheduled action will run.
   * @format date-time
   */
  next_run?: string
  /**
   * Timezone
   * The timezone this schedule runs in. This field is extracted from the RRULE. If the timezone in the RRULE is a link to another timezone, the link will be reflected in this field.
   */
  timezone?: string
  /**
   * Until
   * The date this schedule will end. This field is computed from the RRULE. If the schedule does not end an emptry string will be returned
   */
  until?: string
}

export interface InventoryUpdateDetail {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /** Source */
  source?:
    | 'file'
    | 'scm'
    | 'ec2'
    | 'gce'
    | 'azure_rm'
    | 'vmware'
    | 'satellite6'
    | 'openstack'
    | 'rhv'
    | 'controller'
    | 'insights'
    | null
  /**
   * Source path
   * @maxLength 1024
   * @default ""
   */
  source_path?: string | null
  /**
   * Source vars
   * Inventory source variables in YAML or JSON format.
   * @default ""
   */
  source_vars?: string | null
  /**
   * Credential
   * Cloud credential to use for inventory updates.
   * @min 1
   */
  credential?: number | null
  /**
   * Enabled var
   * Retrieve the enabled state from the given dict of host variables. The enabled variable may be specified as "foo.bar", in which case the lookup will traverse into nested dicts, equivalent to: from_dict.get("foo", {}).get("bar", default)
   * @default ""
   */
  enabled_var?: string | null
  /**
   * Enabled value
   * Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var="status.power_state"and enabled_value="powered_on" with host variables:{   "status": {     "power_state": "powered_on",     "created": "2020-08-04T18:13:04+00:00",     "healthy": true    },    "name": "foobar",    "ip_address": "192.168.2.1"}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled
   * @default ""
   */
  enabled_value?: string | null
  /**
   * Host filter
   * Regex where only matching hosts will be imported.
   * @default ""
   */
  host_filter?: string | null
  /**
   * Overwrite
   * Overwrite local groups and hosts from remote inventory source.
   * @default false
   */
  overwrite?: boolean | null
  /**
   * Overwrite vars
   * Overwrite local variables from remote inventory source.
   * @default false
   */
  overwrite_vars?: boolean | null
  /** Custom virtualenv */
  custom_virtualenv?: string
  /**
   * Timeout
   * The amount of time (in seconds) to run before the task is canceled.
   * @min -2147483648
   * @max 2147483647
   * @default 0
   */
  timeout?: number
  /**
   * Verbosity
   * @default 1
   */
  verbosity?: 0 | 1 | 2
  /** unified job template */
  unified_job_template?: string
  /** Launch type */
  launch_type?:
    | 'manual'
    | 'relaunch'
    | 'callback'
    | 'scheduled'
    | 'dependency'
    | 'workflow'
    | 'webhook'
    | 'sync'
    | 'scm'
  /** Status */
  status?:
    | 'new'
    | 'pending'
    | 'waiting'
    | 'running'
    | 'successful'
    | 'failed'
    | 'error'
    | 'canceled'
  /**
   * Execution environment
   * The container image to be used for execution.
   */
  execution_environment?: number | null
  /** Failed */
  failed?: boolean
  /**
   * Started
   * The date and time the job was queued for starting.
   * @format date-time
   */
  started?: string
  /**
   * Finished
   * The date and time the job finished execution.
   * @format date-time
   */
  finished?: string
  /**
   * Canceled on
   * The date and time when the cancel request was sent.
   * @format date-time
   */
  canceled_on?: string
  /**
   * Elapsed
   * Elapsed time in seconds that the job ran.
   * @format decimal
   */
  elapsed?: string
  /**
   * Job args
   * @minLength 1
   */
  job_args?: string
  /**
   * Job cwd
   * @minLength 1
   */
  job_cwd?: string
  /** job_env */
  job_env?: object
  /**
   * Job explanation
   * A status field to indicate the state of the job if it wasn't able to run and capture stdout
   * @minLength 1
   */
  job_explanation?: string
  /**
   * Execution node
   * The node the job executed on.
   * @minLength 1
   */
  execution_node?: string
  /**
   * Controller node
   * The instance that managed the execution environment.
   * @minLength 1
   */
  controller_node?: string
  /**
   * Result traceback
   * @minLength 1
   */
  result_traceback?: string
  /**
   * Event processing finished
   * Indicates whether all of the events generated by this unified job have been saved to the database.
   */
  event_processing_finished?: boolean
  /** Launched by */
  launched_by?: string
  /**
   * Work unit id
   * The Receptor work unit ID associated with this job.
   * @minLength 1
   */
  work_unit_id?: string
  /** Inventory */
  inventory?: number | null
  /** Inventory source */
  inventory_source?: string
  /** License error */
  license_error?: boolean
  /** Org host limit error */
  org_host_limit_error?: boolean
  /**
   * Source project update
   * Inventory files from this Project Update were used for the inventory update.
   */
  source_project_update?: string | null
  /**
   * Instance group
   * The Instance group the job was run under
   */
  instance_group?: number | null
  /**
   * SCM Revision
   * The SCM Revision from the Project used for this inventory update.  Only applicable to inventories source from scm
   * @minLength 1
   */
  scm_revision?: string
  /**
   * Source project
   * The project used for this job.
   */
  source_project?: string
}

export interface InventoryUpdateCancel {
  /** Can cancel */
  can_cancel?: boolean
}

export interface InventoryUpdateEvent {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /** Event */
  event?: string
  /**
   * Counter
   * @min 0
   */
  counter?: number
  /**
   * Event display
   * @minLength 1
   */
  event_display?: string
  /**
   * Event data
   * @default {}
   */
  event_data?: object
  /** Failed */
  failed?: string
  /** Changed */
  changed?: string
  /**
   * Uuid
   * @minLength 1
   */
  uuid?: string
  /**
   * Stdout
   * @minLength 1
   */
  stdout?: string
  /**
   * Start line
   * @min 0
   */
  start_line?: number
  /**
   * End line
   * @min 0
   */
  end_line?: number
  /**
   * Verbosity
   * @min 0
   */
  verbosity?: number
  /** Inventory update */
  inventory_update?: string
}

export interface JobList {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /** unified job template */
  unified_job_template?: string
  /** Launch type */
  launch_type?:
    | 'manual'
    | 'relaunch'
    | 'callback'
    | 'scheduled'
    | 'dependency'
    | 'workflow'
    | 'webhook'
    | 'sync'
    | 'scm'
  /** Status */
  status?:
    | 'new'
    | 'pending'
    | 'waiting'
    | 'running'
    | 'successful'
    | 'failed'
    | 'error'
    | 'canceled'
  /**
   * Execution environment
   * The container image to be used for execution.
   */
  execution_environment?: number | null
  /** Failed */
  failed?: boolean
  /**
   * Started
   * The date and time the job was queued for starting.
   * @format date-time
   */
  started?: string
  /**
   * Finished
   * The date and time the job finished execution.
   * @format date-time
   */
  finished?: string
  /**
   * Canceled on
   * The date and time when the cancel request was sent.
   * @format date-time
   */
  canceled_on?: string
  /**
   * Elapsed
   * Elapsed time in seconds that the job ran.
   * @format decimal
   */
  elapsed?: string
  /**
   * Job explanation
   * A status field to indicate the state of the job if it wasn't able to run and capture stdout
   * @minLength 1
   */
  job_explanation?: string
  /**
   * Execution node
   * The node the job executed on.
   * @minLength 1
   */
  execution_node?: string
  /**
   * Controller node
   * The instance that managed the execution environment.
   * @minLength 1
   */
  controller_node?: string
  /** Launched by */
  launched_by?: string
  /**
   * Work unit id
   * The Receptor work unit ID associated with this job.
   * @minLength 1
   */
  work_unit_id?: string
  /**
   * Job type
   * @default "run"
   */
  job_type?: 'run' | 'check' | 'scan' | null
  /** Inventory */
  inventory?: number | null
  /** Project */
  project?: string | null
  /**
   * Playbook
   * @maxLength 1024
   * @default ""
   */
  playbook?: string | null
  /**
   * Scm branch
   * Branch to use in job run. Project default used if blank. Only allowed if project allow_override field is set to true.
   * @maxLength 1024
   * @default ""
   */
  scm_branch?: string | null
  /**
   * Forks
   * @min 0
   * @max 2147483647
   * @default 0
   */
  forks?: number
  /**
   * Limit
   * @default ""
   */
  limit?: string | null
  /**
   * Verbosity
   * @default 0
   */
  verbosity?: 0 | 1 | 2 | 3 | 4 | 5
  /**
   * Extra vars
   * @default ""
   */
  extra_vars?: string | null
  /**
   * Job tags
   * @default ""
   */
  job_tags?: string | null
  /**
   * Force handlers
   * @default false
   */
  force_handlers?: boolean | null
  /**
   * Skip tags
   * @maxLength 1024
   * @default ""
   */
  skip_tags?: string | null
  /**
   * Start at task
   * @maxLength 1024
   * @default ""
   */
  start_at_task?: string | null
  /**
   * Timeout
   * The amount of time (in seconds) to run before the task is canceled.
   * @min -2147483648
   * @max 2147483647
   * @default 0
   */
  timeout?: number
  /**
   * Use fact cache
   * If enabled, the service will act as an Ansible Fact Cache Plugin; persisting facts at the end of a playbook run to the database and caching facts for use by Ansible.
   * @default false
   */
  use_fact_cache?: boolean | null
  /**
   * Organization
   * The organization used to determine access to this unified job.
   */
  organization?: number | null
  /** Job template */
  job_template?: string | null
  /** Passwords needed to start */
  passwords_needed_to_start?: string
  /**
   * Allow simultaneous
   * @default false
   */
  allow_simultaneous?: boolean | null
  /** Artifacts */
  artifacts?: string
  /**
   * SCM Revision
   * The SCM Revision from the Project used for this job, if available
   * @minLength 1
   */
  scm_revision?: string
  /**
   * Instance group
   * The Instance group the job was run under
   */
  instance_group?: number | null
  /**
   * Diff mode
   * If enabled, textual changes made to any templated files on the host are shown in the standard output
   * @default false
   */
  diff_mode?: boolean | null
  /**
   * Job slice number
   * If part of a sliced job, the ID of the inventory slice operated on. If not part of sliced job, parameter is not used.
   * @min 0
   * @max 2147483647
   * @default 0
   */
  job_slice_number?: number
  /**
   * Job slice count
   * If ran as part of sliced jobs, the total number of slices. If 1, job is not part of a sliced job.
   * @min 0
   * @max 2147483647
   * @default 1
   */
  job_slice_count?: number
  /**
   * Webhook service
   * Service that webhook requests will be accepted from
   */
  webhook_service?: 'github' | 'gitlab' | null
  /**
   * Webhook credential
   * Personal Access Token for posting back the status to the service API
   */
  webhook_credential?: number | null
  /**
   * Webhook guid
   * Unique identifier of the event that triggered this webhook
   * @maxLength 128
   */
  webhook_guid?: string | null
}

export interface JobLaunch {
  /** Can start without user input */
  can_start_without_user_input?: boolean
  /** Passwords needed to start */
  passwords_needed_to_start?: string
  /** Extra vars */
  extra_vars?: object
  /** Inventory */
  inventory?: number
  /** Scm branch */
  scm_branch?: string
  /** Limit */
  limit?: string
  /** Job tags */
  job_tags?: string
  /** Skip tags */
  skip_tags?: string
  /** Job type */
  job_type?: 'run' | 'check'
  /** Verbosity */
  verbosity?: 0 | 1 | 2 | 3 | 4 | 5
  /** Diff mode */
  diff_mode?: boolean
  /** @uniqueItems true */
  credentials?: number[]
  /** Credential passwords */
  credential_passwords?: string
  /** Ask scm branch on launch */
  ask_scm_branch_on_launch?: boolean | null
  /** Ask variables on launch */
  ask_variables_on_launch?: boolean | null
  /** Ask tags on launch */
  ask_tags_on_launch?: boolean | null
  /** Ask diff mode on launch */
  ask_diff_mode_on_launch?: boolean | null
  /** Ask skip tags on launch */
  ask_skip_tags_on_launch?: boolean | null
  /** Ask job type on launch */
  ask_job_type_on_launch?: boolean | null
  /** Ask limit on launch */
  ask_limit_on_launch?: boolean | null
  /** Ask verbosity on launch */
  ask_verbosity_on_launch?: boolean | null
  /** Ask inventory on launch */
  ask_inventory_on_launch?: boolean | null
  /** Ask credential on launch */
  ask_credential_on_launch?: boolean | null
  /** Ask execution environment on launch */
  ask_execution_environment_on_launch?: boolean | null
  /** Ask labels on launch */
  ask_labels_on_launch?: boolean | null
  /** Ask forks on launch */
  ask_forks_on_launch?: boolean | null
  /** Ask job slice count on launch */
  ask_job_slice_count_on_launch?: boolean | null
  /** Ask timeout on launch */
  ask_timeout_on_launch?: boolean | null
  /** Ask instance groups on launch */
  ask_instance_groups_on_launch?: boolean | null
  /** Survey enabled */
  survey_enabled?: string
  /** Variables needed to start */
  variables_needed_to_start?: string
  /** Credential needed to start */
  credential_needed_to_start?: string
  /** Inventory needed to start */
  inventory_needed_to_start?: string
  /** Job template data */
  job_template_data?: string
  /** Defaults */
  defaults?: string
  /** Execution environment */
  execution_environment?: number
  /** @uniqueItems true */
  labels?: number[]
  /**
   * Forks
   * @min 0
   */
  forks?: number
  /**
   * Job slice count
   * @min 0
   */
  job_slice_count?: number
  /** Timeout */
  timeout?: number
  /** @uniqueItems true */
  instance_groups?: number[]
}

export interface WorkflowJobList {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /** unified job template */
  unified_job_template?: string
  /** Launch type */
  launch_type?:
    | 'manual'
    | 'relaunch'
    | 'callback'
    | 'scheduled'
    | 'dependency'
    | 'workflow'
    | 'webhook'
    | 'sync'
    | 'scm'
  /** Status */
  status?:
    | 'new'
    | 'pending'
    | 'waiting'
    | 'running'
    | 'successful'
    | 'failed'
    | 'error'
    | 'canceled'
  /** Failed */
  failed?: boolean
  /**
   * Started
   * The date and time the job was queued for starting.
   * @format date-time
   */
  started?: string
  /**
   * Finished
   * The date and time the job finished execution.
   * @format date-time
   */
  finished?: string
  /**
   * Canceled on
   * The date and time when the cancel request was sent.
   * @format date-time
   */
  canceled_on?: string
  /**
   * Elapsed
   * Elapsed time in seconds that the job ran.
   * @format decimal
   */
  elapsed?: string
  /**
   * Job explanation
   * A status field to indicate the state of the job if it wasn't able to run and capture stdout
   * @minLength 1
   */
  job_explanation?: string
  /** Launched by */
  launched_by?: string
  /**
   * Work unit id
   * The Receptor work unit ID associated with this job.
   * @minLength 1
   */
  work_unit_id?: string
  /** Workflow job template */
  workflow_job_template?: string | null
  /**
   * Extra vars
   * @default ""
   */
  extra_vars?: string | null
  /**
   * Allow simultaneous
   * @default false
   */
  allow_simultaneous?: boolean | null
  /**
   * Job template
   * If automatically created for a sliced job run, the job template the workflow job was created from.
   */
  job_template?: string | null
  /**
   * Is sliced job
   * @default false
   */
  is_sliced_job?: boolean | null
  /**
   * Inventory
   * Inventory applied as a prompt, assuming job template prompts for inventory
   */
  inventory?: number | null
  /** Limit */
  limit?: string | null
  /** Scm branch */
  scm_branch?: string | null
  /**
   * Webhook service
   * Service that webhook requests will be accepted from
   */
  webhook_service?: 'github' | 'gitlab' | null
  /**
   * Webhook credential
   * Personal Access Token for posting back the status to the service API
   */
  webhook_credential?: number | null
  /**
   * Webhook guid
   * Unique identifier of the event that triggered this webhook
   * @maxLength 128
   */
  webhook_guid?: string | null
  /** Skip tags */
  skip_tags?: string | null
  /** Job tags */
  job_tags?: string | null
}

export interface JobDetail {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /**
   * Job type
   * @default "run"
   */
  job_type?: 'run' | 'check' | 'scan' | null
  /** Inventory */
  inventory?: number | null
  /** Project */
  project?: string | null
  /**
   * Playbook
   * @maxLength 1024
   * @default ""
   */
  playbook?: string | null
  /**
   * Scm branch
   * Branch to use in job run. Project default used if blank. Only allowed if project allow_override field is set to true.
   * @maxLength 1024
   * @default ""
   */
  scm_branch?: string | null
  /**
   * Forks
   * @min 0
   * @max 2147483647
   * @default 0
   */
  forks?: number
  /**
   * Limit
   * @default ""
   */
  limit?: string | null
  /**
   * Verbosity
   * @default 0
   */
  verbosity?: 0 | 1 | 2 | 3 | 4 | 5
  /**
   * Extra vars
   * @default ""
   */
  extra_vars?: string | null
  /**
   * Job tags
   * @default ""
   */
  job_tags?: string | null
  /**
   * Force handlers
   * @default false
   */
  force_handlers?: boolean | null
  /**
   * Skip tags
   * @maxLength 1024
   * @default ""
   */
  skip_tags?: string | null
  /**
   * Start at task
   * @maxLength 1024
   * @default ""
   */
  start_at_task?: string | null
  /**
   * Timeout
   * The amount of time (in seconds) to run before the task is canceled.
   * @min -2147483648
   * @max 2147483647
   * @default 0
   */
  timeout?: number
  /**
   * Use fact cache
   * If enabled, the service will act as an Ansible Fact Cache Plugin; persisting facts at the end of a playbook run to the database and caching facts for use by Ansible.
   * @default false
   */
  use_fact_cache?: boolean | null
  /**
   * Organization
   * The organization used to determine access to this unified job.
   */
  organization?: number | null
  /** unified job template */
  unified_job_template?: string
  /** Launch type */
  launch_type?:
    | 'manual'
    | 'relaunch'
    | 'callback'
    | 'scheduled'
    | 'dependency'
    | 'workflow'
    | 'webhook'
    | 'sync'
    | 'scm'
  /** Status */
  status?:
    | 'new'
    | 'pending'
    | 'waiting'
    | 'running'
    | 'successful'
    | 'failed'
    | 'error'
    | 'canceled'
  /**
   * Execution environment
   * The container image to be used for execution.
   */
  execution_environment?: number | null
  /** Failed */
  failed?: boolean
  /**
   * Started
   * The date and time the job was queued for starting.
   * @format date-time
   */
  started?: string
  /**
   * Finished
   * The date and time the job finished execution.
   * @format date-time
   */
  finished?: string
  /**
   * Canceled on
   * The date and time when the cancel request was sent.
   * @format date-time
   */
  canceled_on?: string
  /**
   * Elapsed
   * Elapsed time in seconds that the job ran.
   * @format decimal
   */
  elapsed?: string
  /**
   * Job args
   * @minLength 1
   */
  job_args?: string
  /**
   * Job cwd
   * @minLength 1
   */
  job_cwd?: string
  /** job_env */
  job_env?: object
  /**
   * Job explanation
   * A status field to indicate the state of the job if it wasn't able to run and capture stdout
   * @minLength 1
   */
  job_explanation?: string
  /**
   * Execution node
   * The node the job executed on.
   * @minLength 1
   */
  execution_node?: string
  /**
   * Controller node
   * The instance that managed the execution environment.
   * @minLength 1
   */
  controller_node?: string
  /**
   * Result traceback
   * @minLength 1
   */
  result_traceback?: string
  /**
   * Event processing finished
   * Indicates whether all of the events generated by this unified job have been saved to the database.
   */
  event_processing_finished?: boolean
  /** Launched by */
  launched_by?: string
  /**
   * Work unit id
   * The Receptor work unit ID associated with this job.
   * @minLength 1
   */
  work_unit_id?: string
  /** Job template */
  job_template?: string | null
  /** Passwords needed to start */
  passwords_needed_to_start?: string
  /**
   * Allow simultaneous
   * @default false
   */
  allow_simultaneous?: boolean | null
  /** Artifacts */
  artifacts?: string
  /**
   * SCM Revision
   * The SCM Revision from the Project used for this job, if available
   * @minLength 1
   */
  scm_revision?: string
  /**
   * Instance group
   * The Instance group the job was run under
   */
  instance_group?: number | null
  /**
   * Diff mode
   * If enabled, textual changes made to any templated files on the host are shown in the standard output
   * @default false
   */
  diff_mode?: boolean | null
  /**
   * Job slice number
   * If part of a sliced job, the ID of the inventory slice operated on. If not part of sliced job, parameter is not used.
   * @min 0
   * @max 2147483647
   * @default 0
   */
  job_slice_number?: number
  /**
   * Job slice count
   * If ran as part of sliced jobs, the total number of slices. If 1, job is not part of a sliced job.
   * @min 0
   * @max 2147483647
   * @default 1
   */
  job_slice_count?: number
  /**
   * Webhook service
   * Service that webhook requests will be accepted from
   */
  webhook_service?: 'github' | 'gitlab' | null
  /**
   * Webhook credential
   * Personal Access Token for posting back the status to the service API
   */
  webhook_credential?: number | null
  /**
   * Webhook guid
   * Unique identifier of the event that triggered this webhook
   * @maxLength 128
   */
  webhook_guid?: string | null
  /**
   * Host status counts
   * Playbook stats from the Ansible playbook_on_stats event.
   */
  host_status_counts?: object
  /**
   * Playbook counts
   * A count of all plays and tasks for the job run.
   */
  playbook_counts?: string
  /** Custom virtualenv */
  custom_virtualenv?: string
}

export interface JobCancel {
  /** Can cancel */
  can_cancel?: boolean
}

export interface JobCreateSchedule {
  /** Can schedule */
  can_schedule?: string
  /** Prompts */
  prompts?: string
}

export interface JobRelaunch {
  /** Passwords needed to start */
  passwords_needed_to_start?: string
  /** Retry counts */
  retry_counts?: string
  /**
   * Hosts
   * @default "all"
   */
  hosts?: 'all' | 'failed' | null
  /** Credential passwords */
  credential_passwords: string
}

export interface Organization {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /**
   * Max hosts
   * Maximum number of hosts allowed to be managed by this organization.
   * @min 0
   * @max 2147483647
   * @default 0
   */
  max_hosts?: number
  /**
   * Custom virtualenv
   * Local absolute file path containing a custom Python virtualenv to use
   * @minLength 1
   */
  custom_virtualenv?: string | null
  /**
   * Default environment
   * The default execution environment for jobs run by this organization.
   */
  default_environment?: number | null
}

export interface OrganizationCredentialSerializerCreate {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /**
   * Organization
   * Inherit permissions from organization roles. If provided on creation, do not give either user or team.
   */
  organization?: number | null
  /**
   * Credential Type
   * Specify the type of credential you want to create. Refer to the documentation for details on each type.
   */
  credential_type: number
  /** Managed */
  managed?: string
  /**
   * Inputs
   * Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax.
   * @default {}
   */
  inputs?: object
  /** Kind */
  kind?: string
  /** Cloud */
  cloud?: string
  /** Kubernetes */
  kubernetes?: string
}

export interface Project {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /**
   * Local path
   * Local path (relative to PROJECTS_ROOT) containing playbooks and related files for this project.
   * @maxLength 1024
   */
  local_path?: string | null
  /**
   * SCM Type
   * Specifies the source control system used to store the project.
   * @default ""
   */
  scm_type?: '' | 'git' | 'svn' | 'insights' | 'archive' | null
  /**
   * SCM URL
   * The location where the project is stored.
   * @maxLength 1024
   * @default ""
   */
  scm_url?: string | null
  /**
   * SCM Branch
   * Specific branch, tag or commit to checkout.
   * @maxLength 256
   * @default ""
   */
  scm_branch?: string | null
  /**
   * SCM refspec
   * For git projects, an additional refspec to fetch.
   * @maxLength 1024
   * @default ""
   */
  scm_refspec?: string | null
  /**
   * Scm clean
   * Discard any local changes before syncing the project.
   * @default false
   */
  scm_clean?: boolean | null
  /**
   * Scm track submodules
   * Track submodules latest commits on defined branch.
   * @default false
   */
  scm_track_submodules?: boolean | null
  /**
   * Scm delete on update
   * Delete the project before syncing.
   * @default false
   */
  scm_delete_on_update?: boolean | null
  /** Credential */
  credential?: number | null
  /**
   * Timeout
   * The amount of time (in seconds) to run before the task is canceled.
   * @min -2147483648
   * @max 2147483647
   * @default 0
   */
  timeout?: number
  /**
   * SCM Revision
   * The last revision fetched by a project update
   * @minLength 1
   */
  scm_revision?: string
  /**
   * Last job run
   * @format date-time
   */
  last_job_run?: string
  /** Last job failed */
  last_job_failed?: boolean
  /**
   * Next job run
   * @format date-time
   */
  next_job_run?: string
  /** Status */
  status?:
    | 'new'
    | 'pending'
    | 'waiting'
    | 'running'
    | 'successful'
    | 'failed'
    | 'error'
    | 'canceled'
    | 'never updated'
    | 'ok'
    | 'missing'
  /**
   * Organization
   * The organization used to determine access to this template.
   */
  organization?: number | null
  /**
   * Scm update on launch
   * Update the project when a job is launched that uses the project.
   * @default false
   */
  scm_update_on_launch?: boolean | null
  /**
   * Scm update cache timeout
   * The number of seconds after the last project update ran that a new project update will be launched as a job dependency.
   * @min 0
   * @max 2147483647
   * @default 0
   */
  scm_update_cache_timeout?: number
  /**
   * Allow override
   * Allow changing the SCM branch or revision in a job template that uses this project.
   * @default false
   */
  allow_override?: boolean | null
  /**
   * Custom virtualenv
   * Local absolute file path containing a custom Python virtualenv to use
   * @minLength 1
   */
  custom_virtualenv?: string | null
  /**
   * Default environment
   * The default execution environment for jobs run using this project.
   */
  default_environment?: number | null
  /**
   * Signature validation credential
   * An optional credential used for validating files in the project against unexpected changes.
   */
  signature_validation_credential?: number | null
  /** Last update failed */
  last_update_failed?: boolean
  /**
   * Last updated
   * @format date-time
   */
  last_updated?: string
}

export interface WorkflowJobTemplate {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /**
   * Last job run
   * @format date-time
   */
  last_job_run?: string
  /** Last job failed */
  last_job_failed?: boolean
  /**
   * Next job run
   * @format date-time
   */
  next_job_run?: string
  /** Status */
  status?:
    | 'new'
    | 'pending'
    | 'waiting'
    | 'running'
    | 'successful'
    | 'failed'
    | 'error'
    | 'canceled'
    | 'never updated'
    | 'ok'
    | 'missing'
    | 'none'
    | 'updating'
  /**
   * Extra vars
   * @default ""
   */
  extra_vars?: string | null
  /**
   * Organization
   * The organization used to determine access to this template.
   */
  organization?: number | null
  /**
   * Survey enabled
   * @default false
   */
  survey_enabled?: boolean | null
  /**
   * Allow simultaneous
   * @default false
   */
  allow_simultaneous?: boolean | null
  /**
   * Ask variables on launch
   * @default false
   */
  ask_variables_on_launch?: boolean | null
  /**
   * Inventory
   * Inventory applied as a prompt, assuming job template prompts for inventory
   */
  inventory?: number | null
  /** Limit */
  limit?: string | null
  /** Scm branch */
  scm_branch?: string | null
  /**
   * Ask inventory on launch
   * @default false
   */
  ask_inventory_on_launch?: boolean | null
  /**
   * Ask scm branch on launch
   * @default false
   */
  ask_scm_branch_on_launch?: boolean | null
  /**
   * Ask limit on launch
   * @default false
   */
  ask_limit_on_launch?: boolean | null
  /**
   * Webhook service
   * Service that webhook requests will be accepted from
   */
  webhook_service?: 'github' | 'gitlab' | null
  /**
   * Webhook credential
   * Personal Access Token for posting back the status to the service API
   */
  webhook_credential?: number | null
  /**
   * Ask labels on launch
   * @default false
   */
  ask_labels_on_launch?: boolean | null
  /**
   * Ask skip tags on launch
   * @default false
   */
  ask_skip_tags_on_launch?: boolean | null
  /**
   * Ask tags on launch
   * @default false
   */
  ask_tags_on_launch?: boolean | null
  /** Skip tags */
  skip_tags?: string | null
  /** Job tags */
  job_tags?: string | null
}

export interface ProjectUpdateList {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /** unified job template */
  unified_job_template?: string
  /** Launch type */
  launch_type?:
    | 'manual'
    | 'relaunch'
    | 'callback'
    | 'scheduled'
    | 'dependency'
    | 'workflow'
    | 'webhook'
    | 'sync'
    | 'scm'
  /** Status */
  status?:
    | 'new'
    | 'pending'
    | 'waiting'
    | 'running'
    | 'successful'
    | 'failed'
    | 'error'
    | 'canceled'
  /**
   * Execution environment
   * The container image to be used for execution.
   */
  execution_environment?: number | null
  /** Failed */
  failed?: boolean
  /**
   * Started
   * The date and time the job was queued for starting.
   * @format date-time
   */
  started?: string
  /**
   * Finished
   * The date and time the job finished execution.
   * @format date-time
   */
  finished?: string
  /**
   * Canceled on
   * The date and time when the cancel request was sent.
   * @format date-time
   */
  canceled_on?: string
  /**
   * Elapsed
   * Elapsed time in seconds that the job ran.
   * @format decimal
   */
  elapsed?: string
  /**
   * Job explanation
   * A status field to indicate the state of the job if it wasn't able to run and capture stdout
   * @minLength 1
   */
  job_explanation?: string
  /**
   * Execution node
   * The node the job executed on.
   * @minLength 1
   */
  execution_node?: string
  /** Launched by */
  launched_by?: string
  /**
   * Work unit id
   * The Receptor work unit ID associated with this job.
   * @minLength 1
   */
  work_unit_id?: string
  /**
   * Local path
   * Local path (relative to PROJECTS_ROOT) containing playbooks and related files for this project.
   * @maxLength 1024
   */
  local_path?: string | null
  /**
   * SCM Type
   * Specifies the source control system used to store the project.
   * @default ""
   */
  scm_type?: '' | 'git' | 'svn' | 'insights' | 'archive' | null
  /**
   * SCM URL
   * The location where the project is stored.
   * @maxLength 1024
   * @default ""
   */
  scm_url?: string | null
  /**
   * SCM Branch
   * Specific branch, tag or commit to checkout.
   * @maxLength 256
   * @default ""
   */
  scm_branch?: string | null
  /**
   * SCM refspec
   * For git projects, an additional refspec to fetch.
   * @maxLength 1024
   * @default ""
   */
  scm_refspec?: string | null
  /**
   * Scm clean
   * Discard any local changes before syncing the project.
   * @default false
   */
  scm_clean?: boolean | null
  /**
   * Scm track submodules
   * Track submodules latest commits on defined branch.
   * @default false
   */
  scm_track_submodules?: boolean | null
  /**
   * Scm delete on update
   * Delete the project before syncing.
   * @default false
   */
  scm_delete_on_update?: boolean | null
  /** Credential */
  credential?: number | null
  /**
   * Timeout
   * The amount of time (in seconds) to run before the task is canceled.
   * @min -2147483648
   * @max 2147483647
   * @default 0
   */
  timeout?: number
  /**
   * SCM Revision
   * The SCM Revision discovered by this update for the given project and branch.
   * @minLength 1
   */
  scm_revision?: string
  /** Project */
  project?: string
  /**
   * Job type
   * @default "check"
   */
  job_type?: 'run' | 'check' | null
  /**
   * Job tags
   * Parts of the project update playbook that will be run.
   * @maxLength 1024
   * @default ""
   */
  job_tags?: string | null
}

export interface ProjectUpdateDetail {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /**
   * Local path
   * Local path (relative to PROJECTS_ROOT) containing playbooks and related files for this project.
   * @maxLength 1024
   */
  local_path?: string | null
  /**
   * SCM Type
   * Specifies the source control system used to store the project.
   * @default ""
   */
  scm_type?: '' | 'git' | 'svn' | 'insights' | 'archive' | null
  /**
   * SCM URL
   * The location where the project is stored.
   * @maxLength 1024
   * @default ""
   */
  scm_url?: string | null
  /**
   * SCM Branch
   * Specific branch, tag or commit to checkout.
   * @maxLength 256
   * @default ""
   */
  scm_branch?: string | null
  /**
   * SCM refspec
   * For git projects, an additional refspec to fetch.
   * @maxLength 1024
   * @default ""
   */
  scm_refspec?: string | null
  /**
   * Scm clean
   * Discard any local changes before syncing the project.
   * @default false
   */
  scm_clean?: boolean | null
  /**
   * Scm track submodules
   * Track submodules latest commits on defined branch.
   * @default false
   */
  scm_track_submodules?: boolean | null
  /**
   * Scm delete on update
   * Delete the project before syncing.
   * @default false
   */
  scm_delete_on_update?: boolean | null
  /** Credential */
  credential?: number | null
  /**
   * Timeout
   * The amount of time (in seconds) to run before the task is canceled.
   * @min -2147483648
   * @max 2147483647
   * @default 0
   */
  timeout?: number
  /**
   * SCM Revision
   * The SCM Revision discovered by this update for the given project and branch.
   * @minLength 1
   */
  scm_revision?: string
  /** unified job template */
  unified_job_template?: string
  /** Launch type */
  launch_type?:
    | 'manual'
    | 'relaunch'
    | 'callback'
    | 'scheduled'
    | 'dependency'
    | 'workflow'
    | 'webhook'
    | 'sync'
    | 'scm'
  /** Status */
  status?:
    | 'new'
    | 'pending'
    | 'waiting'
    | 'running'
    | 'successful'
    | 'failed'
    | 'error'
    | 'canceled'
  /**
   * Execution environment
   * The container image to be used for execution.
   */
  execution_environment?: number | null
  /** Failed */
  failed?: boolean
  /**
   * Started
   * The date and time the job was queued for starting.
   * @format date-time
   */
  started?: string
  /**
   * Finished
   * The date and time the job finished execution.
   * @format date-time
   */
  finished?: string
  /**
   * Canceled on
   * The date and time when the cancel request was sent.
   * @format date-time
   */
  canceled_on?: string
  /**
   * Elapsed
   * Elapsed time in seconds that the job ran.
   * @format decimal
   */
  elapsed?: string
  /**
   * Job args
   * @minLength 1
   */
  job_args?: string
  /**
   * Job cwd
   * @minLength 1
   */
  job_cwd?: string
  /** job_env */
  job_env?: object
  /**
   * Job explanation
   * A status field to indicate the state of the job if it wasn't able to run and capture stdout
   * @minLength 1
   */
  job_explanation?: string
  /**
   * Execution node
   * The node the job executed on.
   * @minLength 1
   */
  execution_node?: string
  /**
   * Result traceback
   * @minLength 1
   */
  result_traceback?: string
  /**
   * Event processing finished
   * Indicates whether all of the events generated by this unified job have been saved to the database.
   */
  event_processing_finished?: boolean
  /** Launched by */
  launched_by?: string
  /**
   * Work unit id
   * The Receptor work unit ID associated with this job.
   * @minLength 1
   */
  work_unit_id?: string
  /** Project */
  project?: string
  /**
   * Job type
   * @default "check"
   */
  job_type?: 'run' | 'check' | null
  /**
   * Job tags
   * Parts of the project update playbook that will be run.
   * @maxLength 1024
   * @default ""
   */
  job_tags?: string | null
  /**
   * Host status counts
   * Playbook stats from the Ansible playbook_on_stats event.
   */
  host_status_counts?: object
  /**
   * Playbook counts
   * A count of all plays and tasks for the job run.
   */
  playbook_counts?: string
}

export interface ProjectUpdateCancel {
  /** Can cancel */
  can_cancel?: boolean
}

export interface ProjectUpdateEvent {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /** Event */
  event?:
    | 'runner_on_failed'
    | 'runner_on_start'
    | 'runner_on_ok'
    | 'runner_on_error'
    | 'runner_on_skipped'
    | 'runner_on_unreachable'
    | 'runner_on_no_hosts'
    | 'runner_on_async_poll'
    | 'runner_on_async_ok'
    | 'runner_on_async_failed'
    | 'runner_item_on_ok'
    | 'runner_item_on_failed'
    | 'runner_item_on_skipped'
    | 'runner_retry'
    | 'runner_on_file_diff'
    | 'playbook_on_start'
    | 'playbook_on_notify'
    | 'playbook_on_include'
    | 'playbook_on_no_hosts_matched'
    | 'playbook_on_no_hosts_remaining'
    | 'playbook_on_task_start'
    | 'playbook_on_vars_prompt'
    | 'playbook_on_setup'
    | 'playbook_on_import_for_host'
    | 'playbook_on_not_import_for_host'
    | 'playbook_on_play_start'
    | 'playbook_on_stats'
    | 'debug'
    | 'verbose'
    | 'deprecated'
    | 'warning'
    | 'system_warning'
    | 'error'
    | null
  /**
   * Counter
   * @min 0
   */
  counter?: number
  /**
   * Event display
   * @minLength 1
   */
  event_display?: string
  /** Event data */
  event_data?: string
  /** Event level */
  event_level?: number
  /** Failed */
  failed?: boolean
  /** Changed */
  changed?: boolean
  /**
   * Uuid
   * @minLength 1
   */
  uuid?: string
  /** Host name */
  host_name?: string
  /**
   * Playbook
   * @minLength 1
   */
  playbook?: string
  /**
   * Play
   * @minLength 1
   */
  play?: string
  /**
   * Task
   * @minLength 1
   */
  task?: string
  /**
   * Role
   * @minLength 1
   */
  role?: string
  /** Stdout */
  stdout?: string
  /**
   * Start line
   * @min 0
   */
  start_line?: number
  /**
   * End line
   * @min 0
   */
  end_line?: number
  /**
   * Verbosity
   * @min 0
   */
  verbosity?: number
  /** Project update */
  project_update?: string
}

export interface ProjectInventories {
  /**
   * Inventory files
   * Array of inventory files and directories available within this project, not comprehensive.
   */
  inventory_files?: string
}

export interface ProjectPlaybooks {
  /**
   * Playbooks
   * Array of playbooks available within this project.
   */
  playbooks?: string
}

export interface ProjectUpdateView {
  /** Can update */
  can_update?: boolean
}

export interface SchedulePreview {
  /**
   * Rrule
   * A value representing the schedules iCal recurrence rule.
   * @minLength 1
   */
  rrule?: string | null
}

export interface SettingCategory {
  /**
   * Url
   * @minLength 1
   */
  url?: string
  /**
   * Slug
   * @minLength 1
   */
  slug?: string
  /**
   * Name
   * @minLength 1
   */
  name?: string
}

export interface SettingSingleton {
  /**
   * Enable Activity Stream
   * Enable capturing activity for the activity stream.
   * @default true
   */
  ACTIVITY_STREAM_ENABLED: boolean
  /**
   * Enable Activity Stream for Inventory Sync
   * Enable capturing activity for the activity stream when running inventory sync.
   * @default false
   */
  ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC: boolean
  /**
   * All Users Visible to Organization Admins
   * Controls whether any Organization Admin can view all users and teams, even those not associated with their Organization.
   * @default true
   */
  ORG_ADMINS_CAN_SEE_ALL_USERS: boolean
  /**
   * Organization Admins Can Manage Users and Teams
   * Controls whether any Organization Admin has the privileges to create and manage users and teams. You may want to disable this ability if you are using an LDAP or SAML integration.
   * @default true
   */
  MANAGE_ORGANIZATION_AUTH: boolean
  /**
   * Base URL of the service
   * This setting is used by services like notifications to render a valid url to the service.
   * @minLength 1
   * @default "https://towerhost"
   */
  TOWER_URL_BASE: string
  /**
   * HTTP headers and meta keys to search to determine remote host name or IP. Add additional items to this list, such as "HTTP_X_FORWARDED_FOR", if behind a reverse proxy. See the "Proxy Support" section of the AAP Installation guide for more details.
   * @default ["REMOTE_ADDR","REMOTE_HOST"]
   */
  REMOTE_HOST_HEADERS: string[]
  /**
   * If the service is behind a reverse proxy/load balancer, use this setting to configure the proxy IP addresses from which the service should trust custom REMOTE_HOST_HEADERS header values. If this setting is an empty list (the default), the headers specified by REMOTE_HOST_HEADERS will be trusted unconditionally')
   * @default []
   */
  PROXY_IP_ALLOWED_LIST: string[]
  /**
   * License
   * The license controls which features and functionality are enabled. Use /api/v2/config/ to update or change the license.
   * @default {}
   */
  LICENSE?: Record<string, string | null>
  /**
   * Red Hat customer username
   * This username is used to send data to Automation Analytics
   * @default ""
   */
  REDHAT_USERNAME?: string
  /**
   * Red Hat customer password
   * This password is used to send data to Automation Analytics
   * @default ""
   */
  REDHAT_PASSWORD?: string
  /**
   * Red Hat or Satellite username
   * This username is used to retrieve subscription and content information
   * @default ""
   */
  SUBSCRIPTIONS_USERNAME?: string
  /**
   * Red Hat or Satellite password
   * This password is used to retrieve subscription and content information
   * @default ""
   */
  SUBSCRIPTIONS_PASSWORD?: string
  /**
   * Automation Analytics upload URL
   * This setting is used to to configure the upload URL for data collection for Automation Analytics.
   * @minLength 1
   * @default "https://example.com"
   */
  AUTOMATION_ANALYTICS_URL?: string
  /**
   * Unique identifier for an installation
   * @minLength 1
   * @default "00000000-0000-0000-0000-000000000000"
   */
  INSTALL_UUID?: string
  /**
   * The instance group where control plane tasks run
   * @minLength 1
   * @default "controlplane"
   */
  DEFAULT_CONTROL_PLANE_QUEUE_NAME?: string
  /**
   * The instance group where user jobs run (currently only on non-VM installs)
   * @minLength 1
   * @default "default"
   */
  DEFAULT_EXECUTION_QUEUE_NAME?: string
  /**
   * Global default execution environment
   * The Execution Environment to be used when one has not been configured for a job template.
   */
  DEFAULT_EXECUTION_ENVIRONMENT?: number | null
  /**
   * Paths where Tower will look for custom virtual environments (in addition to /var/lib/awx/venv/). Enter one path per line.
   * @default []
   */
  CUSTOM_VENV_PATHS?: string[]
  /**
   * List of modules allowed to be used by ad-hoc jobs.
   * @default ["command","shell","yum","apt","apt_key","apt_repository","apt_rpm","service","group","user","mount","ping","selinux","setup","win_ping","win_service","win_updates","win_group","win_user"]
   */
  AD_HOC_COMMANDS?: string[]
  /**
   * When can extra variables contain Jinja templates?
   * Ansible allows variable substitution via the Jinja2 templating language for --extra-vars. This poses a potential security risk where users with the ability to specify extra vars at job launch time can use Jinja2 templates to run arbitrary Python.  It is recommended that this value be set to "template" or "never".
   * @default "template"
   */
  ALLOW_JINJA_IN_EXTRA_VARS: 'always' | 'never' | 'template'
  /**
   * Job execution path
   * The directory in which the service will create new temporary directories for job execution and isolation (such as credential files).
   * @minLength 1
   * @default "/tmp"
   */
  AWX_ISOLATION_BASE_PATH: string
  /**
   * List of paths that would otherwise be hidden to expose to isolated jobs. Enter one path per line. Volumes will be mounted from the execution node to the container. The supported format is HOST-DIR[:CONTAINER-DIR[:OPTIONS]].
   * @default []
   */
  AWX_ISOLATION_SHOW_PATHS?: string[]
  /**
   * Extra Environment Variables
   * Additional environment variables set for playbook runs, inventory updates, project updates, and notification sending.
   * @default {}
   */
  AWX_TASK_ENV?: Record<string, string>
  /**
   * Environment Variables for Galaxy Commands
   * Additional environment variables set for invocations of ansible-galaxy within project updates. Useful if you must use a proxy server for ansible-galaxy but not git.
   * @default {"ANSIBLE_FORCE_COLOR":"false","GIT_SSH_COMMAND":"ssh -o StrictHostKeyChecking=no"}
   */
  GALAXY_TASK_ENV: Record<string, string>
  /**
   * Gather data for Automation Analytics
   * Enables the service to gather data on automation and send it to Automation Analytics.
   * @default false
   */
  INSIGHTS_TRACKING_STATE?: boolean
  /**
   * Run Project Updates With Higher Verbosity
   * Adds the CLI -vvv flag to ansible-playbook runs of project_update.yml used for project updates.
   * @default false
   */
  PROJECT_UPDATE_VVV: boolean
  /**
   * Enable Role Download
   * Allows roles to be dynamically downloaded from a requirements.yml file for SCM projects.
   * @default true
   */
  AWX_ROLES_ENABLED?: boolean
  /**
   * Enable Collection(s) Download
   * Allows collections to be dynamically downloaded from a requirements.yml file for SCM projects.
   * @default true
   */
  AWX_COLLECTIONS_ENABLED?: boolean
  /**
   * Follow symlinks
   * Follow symbolic links when scanning for playbooks. Be aware that setting this to True can lead to infinite recursion if a link points to a parent directory of itself.
   * @default false
   */
  AWX_SHOW_PLAYBOOK_LINKS?: boolean
  /**
   * Expose host paths for Container Groups
   * Expose paths via hostPath for the Pods created by a Container Group. HostPath volumes present many security risks, and it is a best practice to avoid the use of HostPaths when possible.
   * @default false
   */
  AWX_MOUNT_ISOLATED_PATHS_ON_K8S?: boolean
  /**
   * Ignore Ansible Galaxy SSL Certificate Verification
   * If set to true, certificate validation will not be done when installing content from any Galaxy server.
   * @default false
   */
  GALAXY_IGNORE_CERTS?: boolean
  /**
   * Standard Output Maximum Display Size
   * Maximum Size of Standard Output in bytes to display before requiring the output be downloaded.
   * @min 0
   * @default 1048576
   */
  STDOUT_MAX_BYTES_DISPLAY: number
  /**
   * Job Event Standard Output Maximum Display Size
   * Maximum Size of Standard Output in bytes to display for a single job or ad hoc command event. `stdout` will end with `…` when truncated.
   * @min 0
   * @default 1024
   */
  EVENT_STDOUT_MAX_BYTES_DISPLAY: number
  /**
   * Job Event Maximum Websocket Messages Per Second
   * Maximum number of messages to update the UI live job output with per second. Value of 0 means no limit.
   * @min 0
   * @default 30
   */
  MAX_WEBSOCKET_EVENT_RATE?: number
  /**
   * Maximum Scheduled Jobs
   * Maximum number of the same job template that can be waiting to run when launching from a schedule before no more are created.
   * @min 1
   * @default 10
   */
  SCHEDULE_MAX_JOBS: number
  /**
   * List of paths to search for extra callback plugins to be used when running jobs. Enter one path per line.
   * @default []
   */
  AWX_ANSIBLE_CALLBACK_PLUGINS?: string[]
  /**
   * Default Job Timeout
   * Maximum time in seconds to allow jobs to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual job template will override this.
   * @min 0
   * @default 0
   */
  DEFAULT_JOB_TIMEOUT?: number
  /**
   * Default Job Idle Timeout
   * If no output is detected from ansible in this number of seconds the execution will be terminated. Use value of 0 to indicate that no idle timeout should be imposed.
   * @min 0
   * @default 0
   */
  DEFAULT_JOB_IDLE_TIMEOUT?: number
  /**
   * Default Inventory Update Timeout
   * Maximum time in seconds to allow inventory updates to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual inventory source will override this.
   * @min 0
   * @default 0
   */
  DEFAULT_INVENTORY_UPDATE_TIMEOUT?: number
  /**
   * Default Project Update Timeout
   * Maximum time in seconds to allow project updates to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual project will override this.
   * @min 0
   * @default 0
   */
  DEFAULT_PROJECT_UPDATE_TIMEOUT?: number
  /**
   * Per-Host Ansible Fact Cache Timeout
   * Maximum time, in seconds, that stored Ansible facts are considered valid since the last time they were modified. Only valid, non-stale, facts will be accessible by a playbook. Note, this does not influence the deletion of ansible_facts from the database. Use a value of 0 to indicate that no timeout should be imposed.
   * @min 0
   * @default 0
   */
  ANSIBLE_FACT_CACHE_TIMEOUT?: number
  /**
   * Maximum number of forks per job
   * Saving a Job Template with more than this number of forks will result in an error. When set to 0, no limit is applied.
   * @default 200
   */
  MAX_FORKS?: number
  /**
   * Logging Aggregator
   * Hostname/IP where external logs will be sent to.
   * @minLength 1
   */
  LOG_AGGREGATOR_HOST?: string | null
  /**
   * Logging Aggregator Port
   * Port on Logging Aggregator to send logs to (if required and not provided in Logging Aggregator).
   */
  LOG_AGGREGATOR_PORT?: number | null
  /**
   * Logging Aggregator Type
   * Format messages for the chosen log aggregator.
   */
  LOG_AGGREGATOR_TYPE?: 'logstash' | 'splunk' | 'loggly' | 'sumologic' | 'other' | null
  /**
   * Logging Aggregator Username
   * Username for external log aggregator (if required; HTTP/s only).
   * @default ""
   */
  LOG_AGGREGATOR_USERNAME?: string
  /**
   * Logging Aggregator Password/Token
   * Password or authentication token for external log aggregator (if required; HTTP/s only).
   * @default ""
   */
  LOG_AGGREGATOR_PASSWORD?: string
  /**
   * List of loggers that will send HTTP logs to the collector, these can include any or all of:
   * awx - service logs
   * activity_stream - activity stream records
   * job_events - callback data from Ansible job events
   * system_tracking - facts gathered from scan jobs.
   * @default ["awx","activity_stream","job_events","system_tracking"]
   */
  LOG_AGGREGATOR_LOGGERS?: string[]
  /**
   * Log System Tracking Facts Individually
   * If set, system tracking facts will be sent for each package, service, or other item found in a scan, allowing for greater search query granularity. If unset, facts will be sent as a single dictionary, allowing for greater efficiency in fact processing.
   * @default false
   */
  LOG_AGGREGATOR_INDIVIDUAL_FACTS?: boolean
  /**
   * Enable External Logging
   * Enable sending logs to external log aggregator.
   * @default false
   */
  LOG_AGGREGATOR_ENABLED?: boolean
  /**
   * Cluster-wide unique identifier.
   * Useful to uniquely identify instances.
   * @default ""
   */
  LOG_AGGREGATOR_TOWER_UUID?: string
  /**
   * Logging Aggregator Protocol
   * Protocol used to communicate with log aggregator.  HTTPS/HTTP assumes HTTPS unless http:// is explicitly used in the Logging Aggregator hostname.
   * @default "https"
   */
  LOG_AGGREGATOR_PROTOCOL?: 'https' | 'tcp' | 'udp'
  /**
   * TCP Connection Timeout
   * Number of seconds for a TCP connection to external log aggregator to timeout. Applies to HTTPS and TCP log aggregator protocols.
   * @default 5
   */
  LOG_AGGREGATOR_TCP_TIMEOUT?: number
  /**
   * Enable/disable HTTPS certificate verification
   * Flag to control enable/disable of certificate verification when LOG_AGGREGATOR_PROTOCOL is "https". If enabled, the log handler will verify certificate sent by external log aggregator before establishing connection.
   * @default true
   */
  LOG_AGGREGATOR_VERIFY_CERT?: boolean
  /**
   * Logging Aggregator Level Threshold
   * Level threshold used by log handler. Severities from lowest to highest are DEBUG, INFO, WARNING, ERROR, CRITICAL. Messages less severe than the threshold will be ignored by log handler. (messages under category awx.anlytics ignore this setting)
   * @default "INFO"
   */
  LOG_AGGREGATOR_LEVEL?: 'DEBUG' | 'INFO' | 'WARNING' | 'ERROR' | 'CRITICAL'
  /**
   * Maximum disk persistance for external log aggregation (in GB)
   * Amount of data to store (in gigabytes) during an outage of the external log aggregator (defaults to 1). Equivalent to the rsyslogd queue.maxdiskspace setting.
   * @min 1
   * @default 1
   */
  LOG_AGGREGATOR_MAX_DISK_USAGE_GB?: number
  /**
   * File system location for rsyslogd disk persistence
   * Location to persist logs that should be retried after an outage of the external log aggregator (defaults to /var/lib/awx). Equivalent to the rsyslogd queue.spoolDirectory setting.
   * @minLength 1
   * @default "/var/lib/awx"
   */
  LOG_AGGREGATOR_MAX_DISK_USAGE_PATH?: string
  /**
   * Enable rsyslogd debugging
   * Enabled high verbosity debugging for rsyslogd.  Useful for debugging connection issues for external log aggregation.
   * @default false
   */
  LOG_AGGREGATOR_RSYSLOGD_DEBUG?: boolean
  /**
   * Log Format For API 4XX Errors
   * The format of logged messages when an API 4XX error occurs, the following variables will be substituted:
   * status_code - The HTTP status code of the error
   * user_name - The user name attempting to use the API
   * url_path - The URL path to the API endpoint called
   * remote_addr - The remote address seen for the user
   * error - The error set by the api endpoint
   * Variables need to be in the format {<variable name>}.
   * @minLength 1
   * @default "status {status_code} received by user {user_name} attempting to access {url_path} from {remote_addr}"
   */
  API_400_ERROR_LOG_FORMAT?: string
  /**
   * Last gather date for Automation Analytics.
   * @format date-time
   */
  AUTOMATION_ANALYTICS_LAST_GATHER?: string | null
  /**
   * Last gathered entries from the data collection service of Automation Analytics
   * @default ""
   */
  AUTOMATION_ANALYTICS_LAST_ENTRIES?: string
  /**
   * Automation Analytics Gather Interval
   * Interval (in seconds) between data gathering.
   * @min 1800
   * @default 14400
   */
  AUTOMATION_ANALYTICS_GATHER_INTERVAL?: number
  /**
   * Is k8s
   * Indicates whether the instance is part of a kubernetes-based deployment.
   * @default false
   */
  IS_K8S?: boolean
  /**
   * Idle Time Force Log Out
   * Number of seconds that a user is inactive before they will need to login again.
   * @min 60
   * @max 30000000000
   * @default 1800
   */
  SESSION_COOKIE_AGE: number
  /**
   * Maximum number of simultaneous logged in sessions
   * Maximum number of simultaneous logged in sessions a user may have. To disable enter -1.
   * @min -1
   * @default -1
   */
  SESSIONS_PER_USER: number
  /**
   * Disable the built-in authentication system
   * Controls whether users are prevented from using the built-in authentication system. You probably want to do this if you are using an LDAP or SAML integration.
   * @default false
   */
  DISABLE_LOCAL_AUTH: boolean
  /**
   * Enable HTTP Basic Auth
   * Enable HTTP Basic Auth for the API Browser.
   * @default true
   */
  AUTH_BASIC_ENABLED: boolean
  /**
   * OAuth 2 Timeout Settings
   * Dictionary for customizing OAuth 2 timeouts, available items are `ACCESS_TOKEN_EXPIRE_SECONDS`, the duration of access tokens in the number of seconds, `AUTHORIZATION_CODE_EXPIRE_SECONDS`, the duration of authorization codes in the number of seconds, and `REFRESH_TOKEN_EXPIRE_SECONDS`, the duration of refresh tokens, after expired access tokens, in the number of seconds.
   * @default {"ACCESS_TOKEN_EXPIRE_SECONDS":31536000000,"AUTHORIZATION_CODE_EXPIRE_SECONDS":600,"REFRESH_TOKEN_EXPIRE_SECONDS":2628000}
   */
  OAUTH2_PROVIDER?: Record<string, number>
  /**
   * Allow External Users to Create OAuth2 Tokens
   * For security reasons, users from external auth providers (LDAP, SAML, SSO, Radius, and others) are not allowed to create OAuth2 tokens. To change this behavior, enable this setting. Existing tokens will not be deleted when this setting is toggled off.
   * @default false
   */
  ALLOW_OAUTH2_FOR_EXTERNAL_USERS?: boolean
  /**
   * Login redirect override URL
   * URL to which unauthorized users will be redirected to log in.  If blank, users will be sent to the login page.
   * @default ""
   */
  LOGIN_REDIRECT_OVERRIDE?: string
  /**
   * User Analytics Tracking State
   * Enable or Disable User Analytics Tracking.
   * @default "off"
   */
  PENDO_TRACKING_STATE?: 'off' | 'anonymous' | 'detailed'
  /**
   * Custom Login Info
   * If needed, you can add specific information (such as a legal notice or a disclaimer) to a text box in the login modal using this setting. Any content added must be in plain text or an HTML fragment, as other markup languages are not supported.
   * @default ""
   */
  CUSTOM_LOGIN_INFO?: string
  /**
   * Custom Logo
   * To set up a custom logo, provide a file that you create. For the custom logo to look its best, use a .png file with a transparent background. GIF, PNG and JPEG formats are supported.
   * @default ""
   */
  CUSTOM_LOGO?: string
  /**
   * Max Job Events Retrieved by UI
   * Maximum number of job events for the UI to retrieve within a single request.
   * @min 100
   * @default 4000
   */
  MAX_UI_JOB_EVENTS: number
  /**
   * Enable Live Updates in the UI
   * If disabled, the page will not refresh when events are received. Reloading the page will be required to get the latest details.
   * @default true
   */
  UI_LIVE_UPDATES_ENABLED: boolean
  /**
   * List of authentication backends that are enabled based on license features and other authentication settings.
   * @default ["awx.sso.backends.TACACSPlusBackend","awx.main.backends.AWXModelBackend"]
   */
  AUTHENTICATION_BACKENDS?: string[]
  /**
   * Social Auth Organization Map
   * Mapping to organization admins/users from social auth accounts. This setting
   * controls which users are placed into which organizations based on their
   * username and email address. Configuration details are available in the
   * documentation.
   */
  SOCIAL_AUTH_ORGANIZATION_MAP?: Record<string, Record<string, string>>
  /**
   * Social Auth Team Map
   * Mapping of team members (users) from social auth accounts. Configuration
   * details are available in the documentation.
   */
  SOCIAL_AUTH_TEAM_MAP?: Record<string, Record<string, string>>
  /** When set to an empty list `[]`, this setting prevents new user accounts from being created. Only users who have previously logged in using social auth or have a user account with a matching email address will be able to login. */
  SOCIAL_AUTH_USER_FIELDS?: string[] | null
  /**
   * LDAP Server URI
   * URI to connect to LDAP server, such as "ldap://ldap.example.com:389" (non-SSL) or "ldaps://ldap.example.com:636" (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty.
   * @default ""
   */
  AUTH_LDAP_SERVER_URI?: string
  /**
   * LDAP Bind DN
   * DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax.
   * @default ""
   */
  AUTH_LDAP_BIND_DN?: string
  /**
   * LDAP Bind Password
   * Password used to bind LDAP user account.
   * @default ""
   */
  AUTH_LDAP_BIND_PASSWORD?: string
  /**
   * LDAP Start TLS
   * Whether to enable TLS when the LDAP connection is not using SSL.
   * @default false
   */
  AUTH_LDAP_START_TLS?: boolean
  /**
   * LDAP Connection Options
   * Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. "OPT_REFERRALS"). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set.
   * @default {"OPT_REFERRALS":0,"OPT_NETWORK_TIMEOUT":30}
   */
  AUTH_LDAP_CONNECTION_OPTIONS?: Record<string, string | null>
  /**
   * LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of "LDAPUnion" is possible. See the documentation for details.
   * @default []
   */
  AUTH_LDAP_USER_SEARCH?: (string | null)[]
  /**
   * LDAP User DN Template
   * Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH.
   */
  AUTH_LDAP_USER_DN_TEMPLATE?: string | null
  /**
   * LDAP User Attribute Map
   * Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details.
   * @default {}
   */
  AUTH_LDAP_USER_ATTR_MAP?: Record<string, string>
  /**
   * Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion.
   * @default []
   */
  AUTH_LDAP_GROUP_SEARCH?: (string | null)[]
  /**
   * LDAP Group Type
   * The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups
   * @default "MemberDNGroupType"
   */
  AUTH_LDAP_GROUP_TYPE?:
    | 'PosixGroupType'
    | 'GroupOfNamesType'
    | 'GroupOfUniqueNamesType'
    | 'ActiveDirectoryGroupType'
    | 'OrganizationalRoleGroupType'
    | 'MemberDNGroupType'
    | 'NestedGroupOfNamesType'
    | 'NestedGroupOfUniqueNamesType'
    | 'NestedActiveDirectoryGroupType'
    | 'NestedOrganizationalRoleGroupType'
    | 'NestedMemberDNGroupType'
    | 'PosixUIDGroupType'
  /**
   * LDAP Group Type Parameters
   * Key value parameters to send the chosen group type init method.
   * @default {"member_attr":"member","name_attr":"cn"}
   */
  AUTH_LDAP_GROUP_TYPE_PARAMS?: Record<string, string | null>
  /**
   * LDAP Require Group
   * Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported.
   */
  AUTH_LDAP_REQUIRE_GROUP?: string | null
  /**
   * LDAP Deny Group
   * Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported.
   */
  AUTH_LDAP_DENY_GROUP?: string | null
  /**
   * LDAP User Flags By Group
   * Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail.
   * @default {}
   */
  AUTH_LDAP_USER_FLAGS_BY_GROUP?: Record<string, string[]>
  /**
   * LDAP Organization Map
   * Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation.
   * @default {}
   */
  AUTH_LDAP_ORGANIZATION_MAP?: Record<string, Record<string, string>>
  /**
   * LDAP Team Map
   * Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation.
   * @default {}
   */
  AUTH_LDAP_TEAM_MAP?: Record<string, Record<string, string>>
  /**
   * LDAP Server URI
   * URI to connect to LDAP server, such as "ldap://ldap.example.com:389" (non-SSL) or "ldaps://ldap.example.com:636" (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty.
   * @default ""
   */
  AUTH_LDAP_1_SERVER_URI?: string
  /**
   * LDAP Bind DN
   * DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax.
   * @default ""
   */
  AUTH_LDAP_1_BIND_DN?: string
  /**
   * LDAP Bind Password
   * Password used to bind LDAP user account.
   * @default ""
   */
  AUTH_LDAP_1_BIND_PASSWORD?: string
  /**
   * LDAP Start TLS
   * Whether to enable TLS when the LDAP connection is not using SSL.
   * @default false
   */
  AUTH_LDAP_1_START_TLS?: boolean
  /**
   * LDAP Connection Options
   * Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. "OPT_REFERRALS"). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set.
   * @default {"OPT_REFERRALS":0,"OPT_NETWORK_TIMEOUT":30}
   */
  AUTH_LDAP_1_CONNECTION_OPTIONS?: Record<string, string | null>
  /**
   * LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of "LDAPUnion" is possible. See the documentation for details.
   * @default []
   */
  AUTH_LDAP_1_USER_SEARCH?: (string | null)[]
  /**
   * LDAP User DN Template
   * Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH.
   */
  AUTH_LDAP_1_USER_DN_TEMPLATE?: string | null
  /**
   * LDAP User Attribute Map
   * Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details.
   * @default {}
   */
  AUTH_LDAP_1_USER_ATTR_MAP?: Record<string, string>
  /**
   * Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion.
   * @default []
   */
  AUTH_LDAP_1_GROUP_SEARCH?: (string | null)[]
  /**
   * LDAP Group Type
   * The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups
   * @default "MemberDNGroupType"
   */
  AUTH_LDAP_1_GROUP_TYPE?:
    | 'PosixGroupType'
    | 'GroupOfNamesType'
    | 'GroupOfUniqueNamesType'
    | 'ActiveDirectoryGroupType'
    | 'OrganizationalRoleGroupType'
    | 'MemberDNGroupType'
    | 'NestedGroupOfNamesType'
    | 'NestedGroupOfUniqueNamesType'
    | 'NestedActiveDirectoryGroupType'
    | 'NestedOrganizationalRoleGroupType'
    | 'NestedMemberDNGroupType'
    | 'PosixUIDGroupType'
  /**
   * LDAP Group Type Parameters
   * Key value parameters to send the chosen group type init method.
   * @default {"member_attr":"member","name_attr":"cn"}
   */
  AUTH_LDAP_1_GROUP_TYPE_PARAMS?: Record<string, string | null>
  /**
   * LDAP Require Group
   * Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported.
   */
  AUTH_LDAP_1_REQUIRE_GROUP?: string | null
  /**
   * LDAP Deny Group
   * Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported.
   */
  AUTH_LDAP_1_DENY_GROUP?: string | null
  /**
   * LDAP User Flags By Group
   * Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail.
   * @default {}
   */
  AUTH_LDAP_1_USER_FLAGS_BY_GROUP?: Record<string, string[]>
  /**
   * LDAP Organization Map
   * Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation.
   * @default {}
   */
  AUTH_LDAP_1_ORGANIZATION_MAP?: Record<string, Record<string, string>>
  /**
   * LDAP Team Map
   * Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation.
   * @default {}
   */
  AUTH_LDAP_1_TEAM_MAP?: Record<string, Record<string, string>>
  /**
   * LDAP Server URI
   * URI to connect to LDAP server, such as "ldap://ldap.example.com:389" (non-SSL) or "ldaps://ldap.example.com:636" (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty.
   * @default ""
   */
  AUTH_LDAP_2_SERVER_URI?: string
  /**
   * LDAP Bind DN
   * DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax.
   * @default ""
   */
  AUTH_LDAP_2_BIND_DN?: string
  /**
   * LDAP Bind Password
   * Password used to bind LDAP user account.
   * @default ""
   */
  AUTH_LDAP_2_BIND_PASSWORD?: string
  /**
   * LDAP Start TLS
   * Whether to enable TLS when the LDAP connection is not using SSL.
   * @default false
   */
  AUTH_LDAP_2_START_TLS?: boolean
  /**
   * LDAP Connection Options
   * Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. "OPT_REFERRALS"). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set.
   * @default {"OPT_REFERRALS":0,"OPT_NETWORK_TIMEOUT":30}
   */
  AUTH_LDAP_2_CONNECTION_OPTIONS?: Record<string, string | null>
  /**
   * LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of "LDAPUnion" is possible. See the documentation for details.
   * @default []
   */
  AUTH_LDAP_2_USER_SEARCH?: (string | null)[]
  /**
   * LDAP User DN Template
   * Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH.
   */
  AUTH_LDAP_2_USER_DN_TEMPLATE?: string | null
  /**
   * LDAP User Attribute Map
   * Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details.
   * @default {}
   */
  AUTH_LDAP_2_USER_ATTR_MAP?: Record<string, string>
  /**
   * Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion.
   * @default []
   */
  AUTH_LDAP_2_GROUP_SEARCH?: (string | null)[]
  /**
   * LDAP Group Type
   * The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups
   * @default "MemberDNGroupType"
   */
  AUTH_LDAP_2_GROUP_TYPE?:
    | 'PosixGroupType'
    | 'GroupOfNamesType'
    | 'GroupOfUniqueNamesType'
    | 'ActiveDirectoryGroupType'
    | 'OrganizationalRoleGroupType'
    | 'MemberDNGroupType'
    | 'NestedGroupOfNamesType'
    | 'NestedGroupOfUniqueNamesType'
    | 'NestedActiveDirectoryGroupType'
    | 'NestedOrganizationalRoleGroupType'
    | 'NestedMemberDNGroupType'
    | 'PosixUIDGroupType'
  /**
   * LDAP Group Type Parameters
   * Key value parameters to send the chosen group type init method.
   * @default {"member_attr":"member","name_attr":"cn"}
   */
  AUTH_LDAP_2_GROUP_TYPE_PARAMS?: Record<string, string | null>
  /**
   * LDAP Require Group
   * Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported.
   */
  AUTH_LDAP_2_REQUIRE_GROUP?: string | null
  /**
   * LDAP Deny Group
   * Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported.
   */
  AUTH_LDAP_2_DENY_GROUP?: string | null
  /**
   * LDAP User Flags By Group
   * Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail.
   * @default {}
   */
  AUTH_LDAP_2_USER_FLAGS_BY_GROUP?: Record<string, string[]>
  /**
   * LDAP Organization Map
   * Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation.
   * @default {}
   */
  AUTH_LDAP_2_ORGANIZATION_MAP?: Record<string, Record<string, string>>
  /**
   * LDAP Team Map
   * Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation.
   * @default {}
   */
  AUTH_LDAP_2_TEAM_MAP?: Record<string, Record<string, string>>
  /**
   * LDAP Server URI
   * URI to connect to LDAP server, such as "ldap://ldap.example.com:389" (non-SSL) or "ldaps://ldap.example.com:636" (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty.
   * @default ""
   */
  AUTH_LDAP_3_SERVER_URI?: string
  /**
   * LDAP Bind DN
   * DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax.
   * @default ""
   */
  AUTH_LDAP_3_BIND_DN?: string
  /**
   * LDAP Bind Password
   * Password used to bind LDAP user account.
   * @default ""
   */
  AUTH_LDAP_3_BIND_PASSWORD?: string
  /**
   * LDAP Start TLS
   * Whether to enable TLS when the LDAP connection is not using SSL.
   * @default false
   */
  AUTH_LDAP_3_START_TLS?: boolean
  /**
   * LDAP Connection Options
   * Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. "OPT_REFERRALS"). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set.
   * @default {"OPT_REFERRALS":0,"OPT_NETWORK_TIMEOUT":30}
   */
  AUTH_LDAP_3_CONNECTION_OPTIONS?: Record<string, string | null>
  /**
   * LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of "LDAPUnion" is possible. See the documentation for details.
   * @default []
   */
  AUTH_LDAP_3_USER_SEARCH?: (string | null)[]
  /**
   * LDAP User DN Template
   * Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH.
   */
  AUTH_LDAP_3_USER_DN_TEMPLATE?: string | null
  /**
   * LDAP User Attribute Map
   * Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details.
   * @default {}
   */
  AUTH_LDAP_3_USER_ATTR_MAP?: Record<string, string>
  /**
   * Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion.
   * @default []
   */
  AUTH_LDAP_3_GROUP_SEARCH?: (string | null)[]
  /**
   * LDAP Group Type
   * The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups
   * @default "MemberDNGroupType"
   */
  AUTH_LDAP_3_GROUP_TYPE?:
    | 'PosixGroupType'
    | 'GroupOfNamesType'
    | 'GroupOfUniqueNamesType'
    | 'ActiveDirectoryGroupType'
    | 'OrganizationalRoleGroupType'
    | 'MemberDNGroupType'
    | 'NestedGroupOfNamesType'
    | 'NestedGroupOfUniqueNamesType'
    | 'NestedActiveDirectoryGroupType'
    | 'NestedOrganizationalRoleGroupType'
    | 'NestedMemberDNGroupType'
    | 'PosixUIDGroupType'
  /**
   * LDAP Group Type Parameters
   * Key value parameters to send the chosen group type init method.
   * @default {"member_attr":"member","name_attr":"cn"}
   */
  AUTH_LDAP_3_GROUP_TYPE_PARAMS?: Record<string, string | null>
  /**
   * LDAP Require Group
   * Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported.
   */
  AUTH_LDAP_3_REQUIRE_GROUP?: string | null
  /**
   * LDAP Deny Group
   * Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported.
   */
  AUTH_LDAP_3_DENY_GROUP?: string | null
  /**
   * LDAP User Flags By Group
   * Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail.
   * @default {}
   */
  AUTH_LDAP_3_USER_FLAGS_BY_GROUP?: Record<string, string[]>
  /**
   * LDAP Organization Map
   * Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation.
   * @default {}
   */
  AUTH_LDAP_3_ORGANIZATION_MAP?: Record<string, Record<string, string>>
  /**
   * LDAP Team Map
   * Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation.
   * @default {}
   */
  AUTH_LDAP_3_TEAM_MAP?: Record<string, Record<string, string>>
  /**
   * LDAP Server URI
   * URI to connect to LDAP server, such as "ldap://ldap.example.com:389" (non-SSL) or "ldaps://ldap.example.com:636" (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty.
   * @default ""
   */
  AUTH_LDAP_4_SERVER_URI?: string
  /**
   * LDAP Bind DN
   * DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax.
   * @default ""
   */
  AUTH_LDAP_4_BIND_DN?: string
  /**
   * LDAP Bind Password
   * Password used to bind LDAP user account.
   * @default ""
   */
  AUTH_LDAP_4_BIND_PASSWORD?: string
  /**
   * LDAP Start TLS
   * Whether to enable TLS when the LDAP connection is not using SSL.
   * @default false
   */
  AUTH_LDAP_4_START_TLS?: boolean
  /**
   * LDAP Connection Options
   * Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. "OPT_REFERRALS"). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set.
   * @default {"OPT_REFERRALS":0,"OPT_NETWORK_TIMEOUT":30}
   */
  AUTH_LDAP_4_CONNECTION_OPTIONS?: Record<string, string | null>
  /**
   * LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of "LDAPUnion" is possible. See the documentation for details.
   * @default []
   */
  AUTH_LDAP_4_USER_SEARCH?: (string | null)[]
  /**
   * LDAP User DN Template
   * Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH.
   */
  AUTH_LDAP_4_USER_DN_TEMPLATE?: string | null
  /**
   * LDAP User Attribute Map
   * Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details.
   * @default {}
   */
  AUTH_LDAP_4_USER_ATTR_MAP?: Record<string, string>
  /**
   * Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion.
   * @default []
   */
  AUTH_LDAP_4_GROUP_SEARCH?: (string | null)[]
  /**
   * LDAP Group Type
   * The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups
   * @default "MemberDNGroupType"
   */
  AUTH_LDAP_4_GROUP_TYPE?:
    | 'PosixGroupType'
    | 'GroupOfNamesType'
    | 'GroupOfUniqueNamesType'
    | 'ActiveDirectoryGroupType'
    | 'OrganizationalRoleGroupType'
    | 'MemberDNGroupType'
    | 'NestedGroupOfNamesType'
    | 'NestedGroupOfUniqueNamesType'
    | 'NestedActiveDirectoryGroupType'
    | 'NestedOrganizationalRoleGroupType'
    | 'NestedMemberDNGroupType'
    | 'PosixUIDGroupType'
  /**
   * LDAP Group Type Parameters
   * Key value parameters to send the chosen group type init method.
   * @default {"member_attr":"member","name_attr":"cn"}
   */
  AUTH_LDAP_4_GROUP_TYPE_PARAMS?: Record<string, string | null>
  /**
   * LDAP Require Group
   * Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported.
   */
  AUTH_LDAP_4_REQUIRE_GROUP?: string | null
  /**
   * LDAP Deny Group
   * Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported.
   */
  AUTH_LDAP_4_DENY_GROUP?: string | null
  /**
   * LDAP User Flags By Group
   * Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail.
   * @default {}
   */
  AUTH_LDAP_4_USER_FLAGS_BY_GROUP?: Record<string, string[]>
  /**
   * LDAP Organization Map
   * Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation.
   * @default {}
   */
  AUTH_LDAP_4_ORGANIZATION_MAP?: Record<string, Record<string, string>>
  /**
   * LDAP Team Map
   * Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation.
   * @default {}
   */
  AUTH_LDAP_4_TEAM_MAP?: Record<string, Record<string, string>>
  /**
   * LDAP Server URI
   * URI to connect to LDAP server, such as "ldap://ldap.example.com:389" (non-SSL) or "ldaps://ldap.example.com:636" (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty.
   * @default ""
   */
  AUTH_LDAP_5_SERVER_URI?: string
  /**
   * LDAP Bind DN
   * DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax.
   * @default ""
   */
  AUTH_LDAP_5_BIND_DN?: string
  /**
   * LDAP Bind Password
   * Password used to bind LDAP user account.
   * @default ""
   */
  AUTH_LDAP_5_BIND_PASSWORD?: string
  /**
   * LDAP Start TLS
   * Whether to enable TLS when the LDAP connection is not using SSL.
   * @default false
   */
  AUTH_LDAP_5_START_TLS?: boolean
  /**
   * LDAP Connection Options
   * Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. "OPT_REFERRALS"). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set.
   * @default {"OPT_REFERRALS":0,"OPT_NETWORK_TIMEOUT":30}
   */
  AUTH_LDAP_5_CONNECTION_OPTIONS?: Record<string, string | null>
  /**
   * LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of "LDAPUnion" is possible. See the documentation for details.
   * @default []
   */
  AUTH_LDAP_5_USER_SEARCH?: (string | null)[]
  /**
   * LDAP User DN Template
   * Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH.
   */
  AUTH_LDAP_5_USER_DN_TEMPLATE?: string | null
  /**
   * LDAP User Attribute Map
   * Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details.
   * @default {}
   */
  AUTH_LDAP_5_USER_ATTR_MAP?: Record<string, string>
  /**
   * Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion.
   * @default []
   */
  AUTH_LDAP_5_GROUP_SEARCH?: (string | null)[]
  /**
   * LDAP Group Type
   * The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups
   * @default "MemberDNGroupType"
   */
  AUTH_LDAP_5_GROUP_TYPE?:
    | 'PosixGroupType'
    | 'GroupOfNamesType'
    | 'GroupOfUniqueNamesType'
    | 'ActiveDirectoryGroupType'
    | 'OrganizationalRoleGroupType'
    | 'MemberDNGroupType'
    | 'NestedGroupOfNamesType'
    | 'NestedGroupOfUniqueNamesType'
    | 'NestedActiveDirectoryGroupType'
    | 'NestedOrganizationalRoleGroupType'
    | 'NestedMemberDNGroupType'
    | 'PosixUIDGroupType'
  /**
   * LDAP Group Type Parameters
   * Key value parameters to send the chosen group type init method.
   * @default {"member_attr":"member","name_attr":"cn"}
   */
  AUTH_LDAP_5_GROUP_TYPE_PARAMS?: Record<string, string | null>
  /**
   * LDAP Require Group
   * Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported.
   */
  AUTH_LDAP_5_REQUIRE_GROUP?: string | null
  /**
   * LDAP Deny Group
   * Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported.
   */
  AUTH_LDAP_5_DENY_GROUP?: string | null
  /**
   * LDAP User Flags By Group
   * Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail.
   * @default {}
   */
  AUTH_LDAP_5_USER_FLAGS_BY_GROUP?: Record<string, string[]>
  /**
   * LDAP Organization Map
   * Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation.
   * @default {}
   */
  AUTH_LDAP_5_ORGANIZATION_MAP?: Record<string, Record<string, string>>
  /**
   * LDAP Team Map
   * Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation.
   * @default {}
   */
  AUTH_LDAP_5_TEAM_MAP?: Record<string, Record<string, string>>
  /**
   * RADIUS Server
   * Hostname/IP of RADIUS server. RADIUS authentication is disabled if this setting is empty.
   * @default ""
   */
  RADIUS_SERVER?: string
  /**
   * RADIUS Port
   * Port of RADIUS server.
   * @min 1
   * @max 65535
   * @default 1812
   */
  RADIUS_PORT?: number
  /**
   * RADIUS Secret
   * Shared secret for authenticating to RADIUS server.
   * @default ""
   */
  RADIUS_SECRET?: string
  /**
   * TACACS+ Server
   * Hostname of TACACS+ server.
   * @default ""
   */
  TACACSPLUS_HOST?: string
  /**
   * TACACS+ Port
   * Port number of TACACS+ server.
   * @min 1
   * @max 65535
   * @default 49
   */
  TACACSPLUS_PORT?: number
  /**
   * TACACS+ Secret
   * Shared secret for authenticating to TACACS+ server.
   * @default ""
   */
  TACACSPLUS_SECRET?: string
  /**
   * TACACS+ Auth Session Timeout
   * TACACS+ session timeout value in seconds, 0 disables timeout.
   * @min 0
   * @default 5
   */
  TACACSPLUS_SESSION_TIMEOUT?: number
  /**
   * TACACS+ Authentication Protocol
   * Choose the authentication protocol used by TACACS+ client.
   * @default "ascii"
   */
  TACACSPLUS_AUTH_PROTOCOL?: 'ascii' | 'pap'
  /**
   * Google OAuth2 Callback URL
   * Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail.
   * @minLength 1
   * @default "https://towerhost/sso/complete/google-oauth2/"
   */
  SOCIAL_AUTH_GOOGLE_OAUTH2_CALLBACK_URL?: string
  /**
   * Google OAuth2 Key
   * The OAuth2 key from your web application.
   * @default ""
   */
  SOCIAL_AUTH_GOOGLE_OAUTH2_KEY?: string
  /**
   * Google OAuth2 Secret
   * The OAuth2 secret from your web application.
   * @default ""
   */
  SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET?: string
  /**
   * Update this setting to restrict the domains who are allowed to login using Google OAuth2.
   * @default []
   */
  SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS?: string[]
  /**
   * Google OAuth2 Extra Arguments
   * Extra arguments for Google OAuth2 login. You can restrict it to only allow a single domain to authenticate, even if the user is logged in with multple Google accounts. Refer to the documentation for more detail.
   * @default {}
   */
  SOCIAL_AUTH_GOOGLE_OAUTH2_AUTH_EXTRA_ARGUMENTS?: Record<string, string | null>
  /**
   * Google OAuth2 Organization Map
   * Mapping to organization admins/users from social auth accounts. This setting
   * controls which users are placed into which organizations based on their
   * username and email address. Configuration details are available in the
   * documentation.
   */
  SOCIAL_AUTH_GOOGLE_OAUTH2_ORGANIZATION_MAP?: Record<string, Record<string, string>>
  /**
   * Google OAuth2 Team Map
   * Mapping of team members (users) from social auth accounts. Configuration
   * details are available in the documentation.
   */
  SOCIAL_AUTH_GOOGLE_OAUTH2_TEAM_MAP?: Record<string, Record<string, string>>
  /**
   * GitHub OAuth2 Callback URL
   * Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail.
   * @minLength 1
   * @default "https://towerhost/sso/complete/github/"
   */
  SOCIAL_AUTH_GITHUB_CALLBACK_URL?: string
  /**
   * GitHub OAuth2 Key
   * The OAuth2 key (Client ID) from your GitHub developer application.
   * @default ""
   */
  SOCIAL_AUTH_GITHUB_KEY?: string
  /**
   * GitHub OAuth2 Secret
   * The OAuth2 secret (Client Secret) from your GitHub developer application.
   * @default ""
   */
  SOCIAL_AUTH_GITHUB_SECRET?: string
  /**
   * GitHub OAuth2 Organization Map
   * Mapping to organization admins/users from social auth accounts. This setting
   * controls which users are placed into which organizations based on their
   * username and email address. Configuration details are available in the
   * documentation.
   */
  SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP?: Record<string, Record<string, string>>
  /**
   * GitHub OAuth2 Team Map
   * Mapping of team members (users) from social auth accounts. Configuration
   * details are available in the documentation.
   */
  SOCIAL_AUTH_GITHUB_TEAM_MAP?: Record<string, Record<string, string>>
  /**
   * GitHub Organization OAuth2 Callback URL
   * Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail.
   * @minLength 1
   * @default "https://towerhost/sso/complete/github-org/"
   */
  SOCIAL_AUTH_GITHUB_ORG_CALLBACK_URL?: string
  /**
   * GitHub Organization OAuth2 Key
   * The OAuth2 key (Client ID) from your GitHub organization application.
   * @default ""
   */
  SOCIAL_AUTH_GITHUB_ORG_KEY?: string
  /**
   * GitHub Organization OAuth2 Secret
   * The OAuth2 secret (Client Secret) from your GitHub organization application.
   * @default ""
   */
  SOCIAL_AUTH_GITHUB_ORG_SECRET?: string
  /**
   * GitHub Organization Name
   * The name of your GitHub organization, as used in your organization's URL: https://github.com/<yourorg>/.
   * @default ""
   */
  SOCIAL_AUTH_GITHUB_ORG_NAME?: string
  /**
   * GitHub Organization OAuth2 Organization Map
   * Mapping to organization admins/users from social auth accounts. This setting
   * controls which users are placed into which organizations based on their
   * username and email address. Configuration details are available in the
   * documentation.
   */
  SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP?: Record<string, Record<string, string>>
  /**
   * GitHub Organization OAuth2 Team Map
   * Mapping of team members (users) from social auth accounts. Configuration
   * details are available in the documentation.
   */
  SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP?: Record<string, Record<string, string>>
  /**
   * GitHub Team OAuth2 Callback URL
   * Create an organization-owned application at https://github.com/organizations/<yourorg>/settings/applications and obtain an OAuth2 key (Client ID) and secret (Client Secret). Provide this URL as the callback URL for your application.
   * @minLength 1
   * @default "https://towerhost/sso/complete/github-team/"
   */
  SOCIAL_AUTH_GITHUB_TEAM_CALLBACK_URL?: string
  /**
   * GitHub Team OAuth2 Key
   * The OAuth2 key (Client ID) from your GitHub organization application.
   * @default ""
   */
  SOCIAL_AUTH_GITHUB_TEAM_KEY?: string
  /**
   * GitHub Team OAuth2 Secret
   * The OAuth2 secret (Client Secret) from your GitHub organization application.
   * @default ""
   */
  SOCIAL_AUTH_GITHUB_TEAM_SECRET?: string
  /**
   * GitHub Team ID
   * Find the numeric team ID using the Github API: http://fabian-kostadinov.github.io/2015/01/16/how-to-find-a-github-team-id/.
   * @default ""
   */
  SOCIAL_AUTH_GITHUB_TEAM_ID?: string
  /**
   * GitHub Team OAuth2 Organization Map
   * Mapping to organization admins/users from social auth accounts. This setting
   * controls which users are placed into which organizations based on their
   * username and email address. Configuration details are available in the
   * documentation.
   */
  SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP?: Record<string, Record<string, string>>
  /**
   * GitHub Team OAuth2 Team Map
   * Mapping of team members (users) from social auth accounts. Configuration
   * details are available in the documentation.
   */
  SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP?: Record<string, Record<string, string>>
  /**
   * GitHub Enterprise OAuth2 Callback URL
   * Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail.
   * @minLength 1
   * @default "https://towerhost/sso/complete/github-enterprise/"
   */
  SOCIAL_AUTH_GITHUB_ENTERPRISE_CALLBACK_URL?: string
  /**
   * GitHub Enterprise URL
   * The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details.
   * @default ""
   */
  SOCIAL_AUTH_GITHUB_ENTERPRISE_URL?: string
  /**
   * GitHub Enterprise API URL
   * The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details.
   * @default ""
   */
  SOCIAL_AUTH_GITHUB_ENTERPRISE_API_URL?: string
  /**
   * GitHub Enterprise OAuth2 Key
   * The OAuth2 key (Client ID) from your GitHub Enterprise developer application.
   * @default ""
   */
  SOCIAL_AUTH_GITHUB_ENTERPRISE_KEY?: string
  /**
   * GitHub Enterprise OAuth2 Secret
   * The OAuth2 secret (Client Secret) from your GitHub Enterprise developer application.
   * @default ""
   */
  SOCIAL_AUTH_GITHUB_ENTERPRISE_SECRET?: string
  /**
   * GitHub Enterprise OAuth2 Organization Map
   * Mapping to organization admins/users from social auth accounts. This setting
   * controls which users are placed into which organizations based on their
   * username and email address. Configuration details are available in the
   * documentation.
   */
  SOCIAL_AUTH_GITHUB_ENTERPRISE_ORGANIZATION_MAP?: Record<string, Record<string, string>>
  /**
   * GitHub Enterprise OAuth2 Team Map
   * Mapping of team members (users) from social auth accounts. Configuration
   * details are available in the documentation.
   */
  SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_MAP?: Record<string, Record<string, string>>
  /**
   * GitHub Enterprise Organization OAuth2 Callback URL
   * Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail.
   * @minLength 1
   * @default "https://towerhost/sso/complete/github-enterprise-org/"
   */
  SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_CALLBACK_URL?: string
  /**
   * GitHub Enterprise Organization URL
   * The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details.
   * @default ""
   */
  SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_URL?: string
  /**
   * GitHub Enterprise Organization API URL
   * The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details.
   * @default ""
   */
  SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_API_URL?: string
  /**
   * GitHub Enterprise Organization OAuth2 Key
   * The OAuth2 key (Client ID) from your GitHub Enterprise organization application.
   * @default ""
   */
  SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_KEY?: string
  /**
   * GitHub Enterprise Organization OAuth2 Secret
   * The OAuth2 secret (Client Secret) from your GitHub Enterprise organization application.
   * @default ""
   */
  SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_SECRET?: string
  /**
   * GitHub Enterprise Organization Name
   * The name of your GitHub Enterprise organization, as used in your organization's URL: https://github.com/<yourorg>/.
   * @default ""
   */
  SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_NAME?: string
  /**
   * GitHub Enterprise Organization OAuth2 Organization Map
   * Mapping to organization admins/users from social auth accounts. This setting
   * controls which users are placed into which organizations based on their
   * username and email address. Configuration details are available in the
   * documentation.
   */
  SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_ORGANIZATION_MAP?: Record<string, Record<string, string>>
  /**
   * GitHub Enterprise Organization OAuth2 Team Map
   * Mapping of team members (users) from social auth accounts. Configuration
   * details are available in the documentation.
   */
  SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_TEAM_MAP?: Record<string, Record<string, string>>
  /**
   * GitHub Enterprise Team OAuth2 Callback URL
   * Create an organization-owned application at https://github.com/organizations/<yourorg>/settings/applications and obtain an OAuth2 key (Client ID) and secret (Client Secret). Provide this URL as the callback URL for your application.
   * @minLength 1
   * @default "https://towerhost/sso/complete/github-enterprise-team/"
   */
  SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_CALLBACK_URL?: string
  /**
   * GitHub Enterprise Team URL
   * The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details.
   * @default ""
   */
  SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_URL?: string
  /**
   * GitHub Enterprise Team API URL
   * The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details.
   * @default ""
   */
  SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_API_URL?: string
  /**
   * GitHub Enterprise Team OAuth2 Key
   * The OAuth2 key (Client ID) from your GitHub Enterprise organization application.
   * @default ""
   */
  SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_KEY?: string
  /**
   * GitHub Enterprise Team OAuth2 Secret
   * The OAuth2 secret (Client Secret) from your GitHub Enterprise organization application.
   * @default ""
   */
  SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_SECRET?: string
  /**
   * GitHub Enterprise Team ID
   * Find the numeric team ID using the Github Enterprise API: http://fabian-kostadinov.github.io/2015/01/16/how-to-find-a-github-team-id/.
   * @default ""
   */
  SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ID?: string
  /**
   * GitHub Enterprise Team OAuth2 Organization Map
   * Mapping to organization admins/users from social auth accounts. This setting
   * controls which users are placed into which organizations based on their
   * username and email address. Configuration details are available in the
   * documentation.
   */
  SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ORGANIZATION_MAP?: Record<string, Record<string, string>>
  /**
   * GitHub Enterprise Team OAuth2 Team Map
   * Mapping of team members (users) from social auth accounts. Configuration
   * details are available in the documentation.
   */
  SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_TEAM_MAP?: Record<string, Record<string, string>>
  /**
   * Azure AD OAuth2 Callback URL
   * Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail.
   * @minLength 1
   * @default "https://towerhost/sso/complete/azuread-oauth2/"
   */
  SOCIAL_AUTH_AZUREAD_OAUTH2_CALLBACK_URL?: string
  /**
   * Azure AD OAuth2 Key
   * The OAuth2 key (Client ID) from your Azure AD application.
   * @default ""
   */
  SOCIAL_AUTH_AZUREAD_OAUTH2_KEY?: string
  /**
   * Azure AD OAuth2 Secret
   * The OAuth2 secret (Client Secret) from your Azure AD application.
   * @default ""
   */
  SOCIAL_AUTH_AZUREAD_OAUTH2_SECRET?: string
  /**
   * Azure AD OAuth2 Organization Map
   * Mapping to organization admins/users from social auth accounts. This setting
   * controls which users are placed into which organizations based on their
   * username and email address. Configuration details are available in the
   * documentation.
   */
  SOCIAL_AUTH_AZUREAD_OAUTH2_ORGANIZATION_MAP?: Record<string, Record<string, string>>
  /**
   * Azure AD OAuth2 Team Map
   * Mapping of team members (users) from social auth accounts. Configuration
   * details are available in the documentation.
   */
  SOCIAL_AUTH_AZUREAD_OAUTH2_TEAM_MAP?: Record<string, Record<string, string>>
  /**
   * OIDC Key
   * The OIDC key (Client ID) from your IDP.
   * @minLength 1
   */
  SOCIAL_AUTH_OIDC_KEY?: string
  /**
   * OIDC Secret
   * The OIDC secret (Client Secret) from your IDP.
   * @default ""
   */
  SOCIAL_AUTH_OIDC_SECRET?: string
  /**
   * OIDC Provider URL
   * The URL for your OIDC provider including the path up to /.well-known/openid-configuration
   * @default ""
   */
  SOCIAL_AUTH_OIDC_OIDC_ENDPOINT?: string
  /**
   * Verify OIDC Provider Certificate
   * Verify the OIDV provider ssl certificate.
   * @default true
   */
  SOCIAL_AUTH_OIDC_VERIFY_SSL?: boolean
  /**
   * Automatically Create Organizations and Teams on SAML Login
   * When enabled (the default), mapped Organizations and Teams will be created automatically on successful SAML login.
   * @default true
   */
  SAML_AUTO_CREATE_OBJECTS?: boolean
  /**
   * SAML Assertion Consumer Service (ACS) URL
   * Register the service as a service provider (SP) with each identity provider (IdP) you have configured. Provide your SP Entity ID and this ACS URL for your application.
   * @minLength 1
   * @default "https://towerhost/sso/complete/saml/"
   */
  SOCIAL_AUTH_SAML_CALLBACK_URL?: string
  /**
   * SAML Service Provider Metadata URL
   * If your identity provider (IdP) allows uploading an XML metadata file, you can download one from this URL.
   * @minLength 1
   * @default "https://towerhost/sso/metadata/saml/"
   */
  SOCIAL_AUTH_SAML_METADATA_URL?: string
  /**
   * SAML Service Provider Entity ID
   * The application-defined unique identifier used as the audience of the SAML service provider (SP) configuration. This is usually the URL for the service.
   * @default ""
   */
  SOCIAL_AUTH_SAML_SP_ENTITY_ID?: string
  /**
   * SAML Service Provider Public Certificate
   * Create a keypair to use as a service provider (SP) and include the certificate content here.
   * @default ""
   */
  SOCIAL_AUTH_SAML_SP_PUBLIC_CERT: string
  /**
   * SAML Service Provider Private Key
   * Create a keypair to use as a service provider (SP) and include the private key content here.
   * @default ""
   */
  SOCIAL_AUTH_SAML_SP_PRIVATE_KEY: string
  /**
   * SAML Service Provider Organization Info
   * Provide the URL, display name, and the name of your app. Refer to the documentation for example syntax.
   * @default {}
   */
  SOCIAL_AUTH_SAML_ORG_INFO: Record<string, Record<string, string | null>>
  /**
   * SAML Service Provider Technical Contact
   * Provide the name and email address of the technical contact for your service provider. Refer to the documentation for example syntax.
   * @default {}
   */
  SOCIAL_AUTH_SAML_TECHNICAL_CONTACT: Record<string, string | null>
  /**
   * SAML Service Provider Support Contact
   * Provide the name and email address of the support contact for your service provider. Refer to the documentation for example syntax.
   * @default {}
   */
  SOCIAL_AUTH_SAML_SUPPORT_CONTACT: Record<string, string | null>
  /**
   * SAML Enabled Identity Providers
   * Configure the Entity ID, SSO URL and certificate for each identity provider (IdP) in use. Multiple SAML IdPs are supported. Some IdPs may provide user data using attribute names that differ from the default OIDs. Attribute names may be overridden for each IdP. Refer to the Ansible documentation for additional details and syntax.
   * @default {}
   */
  SOCIAL_AUTH_SAML_ENABLED_IDPS?: Record<string, Record<string, string | null>>
  /**
   * SAML Security Config
   * A dict of key value pairs that are passed to the underlying python-saml security setting https://github.com/onelogin/python-saml#settings
   * @default {"requestedAuthnContext":false}
   */
  SOCIAL_AUTH_SAML_SECURITY_CONFIG?: Record<string, string | null>
  /**
   * SAML Service Provider extra configuration data
   * A dict of key value pairs to be passed to the underlying python-saml Service Provider configuration setting.
   */
  SOCIAL_AUTH_SAML_SP_EXTRA?: Record<string, string | null>
  /** A list of tuples that maps IDP attributes to extra_attributes. Each attribute will be a list of values, even if only 1 value. */
  SOCIAL_AUTH_SAML_EXTRA_DATA?: (string | null)[]
  /**
   * SAML Organization Map
   * Mapping to organization admins/users from social auth accounts. This setting
   * controls which users are placed into which organizations based on their
   * username and email address. Configuration details are available in the
   * documentation.
   */
  SOCIAL_AUTH_SAML_ORGANIZATION_MAP?: Record<string, Record<string, string>>
  /**
   * SAML Team Map
   * Mapping of team members (users) from social auth accounts. Configuration
   * details are available in the documentation.
   */
  SOCIAL_AUTH_SAML_TEAM_MAP?: Record<string, Record<string, string>>
  /**
   * SAML Organization Attribute Mapping
   * Used to translate user organization membership.
   * @default {}
   */
  SOCIAL_AUTH_SAML_ORGANIZATION_ATTR?: Record<string, string>
  /**
   * SAML Team Attribute Mapping
   * Used to translate user team membership.
   * @default {}
   */
  SOCIAL_AUTH_SAML_TEAM_ATTR?: Record<string, string>
  /**
   * SAML User Flags Attribute Mapping
   * Used to map super users and system auditors from SAML.
   * @default {}
   */
  SOCIAL_AUTH_SAML_USER_FLAGS_BY_ATTR?: Record<string, string>
  /**
   * Formats of all available named urls
   * Read-only list of key-value pairs that shows the standard format of all available named URLs.
   * @default {"execution_environments":"<name>","organizations":"<name>","teams":"<name>++<organization.name>","credential_types":"<name>+<kind>","credentials":"<name>++<credential_type.name>+<credential_type.kind>++<organization.name>","notification_templates":"<name>++<organization.name>","job_templates":"<name>++<organization.name>","projects":"<name>++<organization.name>","inventories":"<name>++<organization.name>","hosts":"<name>++<inventory.name>++<organization.name>","groups":"<name>++<inventory.name>++<organization.name>","inventory_sources":"<name>++<inventory.name>++<organization.name>","instance_groups":"<name>","workflow_job_templates":"<name>++<organization.name>","workflow_job_template_nodes":"<identifier>++<workflow_job_template.name>++<organization.name>","labels":"<name>++<organization.name>","applications":"<name>++<organization.name>","users":"<username>","instances":"<hostname>"}
   */
  NAMED_URL_FORMATS?: Record<string, string | null>
  /**
   * List of all named url graph nodes.
   * Read-only list of key-value pairs that exposes named URL graph topology. Use this list to programmatically generate named URLs for resources
   * @default {"execution_environments":{"fields":["name"],"adj_list":[]},"organizations":{"fields":["name"],"adj_list":[]},"teams":{"fields":["name"],"adj_list":[["organization","organizations"]]},"credential_types":{"fields":["name","kind"],"adj_list":[]},"credentials":{"fields":["name"],"adj_list":[["credential_type","credential_types"],["organization","organizations"]]},"notification_templates":{"fields":["name"],"adj_list":[["organization","organizations"]]},"job_templates":{"fields":["name"],"adj_list":[["organization","organizations"]]},"projects":{"fields":["name"],"adj_list":[["organization","organizations"]]},"inventories":{"fields":["name"],"adj_list":[["organization","organizations"]]},"hosts":{"fields":["name"],"adj_list":[["inventory","inventories"]]},"groups":{"fields":["name"],"adj_list":[["inventory","inventories"]]},"inventory_sources":{"fields":["name"],"adj_list":[["inventory","inventories"]]},"instance_groups":{"fields":["name"],"adj_list":[]},"workflow_job_templates":{"fields":["name"],"adj_list":[["organization","organizations"]]},"workflow_job_template_nodes":{"fields":["identifier"],"adj_list":[["workflow_job_template","workflow_job_templates"]]},"labels":{"fields":["name"],"adj_list":[["organization","organizations"]]},"applications":{"fields":["name"],"adj_list":[["organization","organizations"]]},"users":{"fields":["username"],"adj_list":[]},"instances":{"fields":["hostname"],"adj_list":[]}}
   */
  NAMED_URL_GRAPH_NODES?: Record<string, string | null>
}

export interface SystemJobTemplate {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /**
   * Last job run
   * @format date-time
   */
  last_job_run?: string
  /** Last job failed */
  last_job_failed?: boolean
  /**
   * Next job run
   * @format date-time
   */
  next_job_run?: string
  /** Status */
  status?:
    | 'new'
    | 'pending'
    | 'waiting'
    | 'running'
    | 'successful'
    | 'failed'
    | 'error'
    | 'canceled'
    | 'never updated'
    | 'ok'
    | 'missing'
    | 'none'
    | 'updating'
  /**
   * Execution environment
   * The container image to be used for execution.
   */
  execution_environment?: number | null
  /**
   * Job type
   * @default ""
   */
  job_type?:
    | 'cleanup_jobs'
    | 'cleanup_activitystream'
    | 'cleanup_sessions'
    | 'cleanup_tokens'
    | null
}

export interface SystemJobList {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /** unified job template */
  unified_job_template?: string
  /** Launch type */
  launch_type?:
    | 'manual'
    | 'relaunch'
    | 'callback'
    | 'scheduled'
    | 'dependency'
    | 'workflow'
    | 'webhook'
    | 'sync'
    | 'scm'
  /** Status */
  status?:
    | 'new'
    | 'pending'
    | 'waiting'
    | 'running'
    | 'successful'
    | 'failed'
    | 'error'
    | 'canceled'
  /**
   * Execution environment
   * The container image to be used for execution.
   */
  execution_environment?: number | null
  /** Failed */
  failed?: boolean
  /**
   * Started
   * The date and time the job was queued for starting.
   * @format date-time
   */
  started?: string
  /**
   * Finished
   * The date and time the job finished execution.
   * @format date-time
   */
  finished?: string
  /**
   * Canceled on
   * The date and time when the cancel request was sent.
   * @format date-time
   */
  canceled_on?: string
  /**
   * Elapsed
   * Elapsed time in seconds that the job ran.
   * @format decimal
   */
  elapsed?: string
  /**
   * Job explanation
   * A status field to indicate the state of the job if it wasn't able to run and capture stdout
   * @minLength 1
   */
  job_explanation?: string
  /**
   * Execution node
   * The node the job executed on.
   * @minLength 1
   */
  execution_node?: string
  /** Launched by */
  launched_by?: string
  /**
   * Work unit id
   * The Receptor work unit ID associated with this job.
   * @minLength 1
   */
  work_unit_id?: string
  /** System job template */
  system_job_template?: string | null
  /**
   * Job type
   * @default ""
   */
  job_type?:
    | 'cleanup_jobs'
    | 'cleanup_activitystream'
    | 'cleanup_sessions'
    | 'cleanup_tokens'
    | null
  /**
   * Extra vars
   * @default ""
   */
  extra_vars?: string | null
  /** Result stdout */
  result_stdout?: string
}

export interface SystemJob {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /** unified job template */
  unified_job_template?: string
  /** Launch type */
  launch_type?:
    | 'manual'
    | 'relaunch'
    | 'callback'
    | 'scheduled'
    | 'dependency'
    | 'workflow'
    | 'webhook'
    | 'sync'
    | 'scm'
  /** Status */
  status?:
    | 'new'
    | 'pending'
    | 'waiting'
    | 'running'
    | 'successful'
    | 'failed'
    | 'error'
    | 'canceled'
  /**
   * Execution environment
   * The container image to be used for execution.
   */
  execution_environment?: number | null
  /** Failed */
  failed?: boolean
  /**
   * Started
   * The date and time the job was queued for starting.
   * @format date-time
   */
  started?: string
  /**
   * Finished
   * The date and time the job finished execution.
   * @format date-time
   */
  finished?: string
  /**
   * Canceled on
   * The date and time when the cancel request was sent.
   * @format date-time
   */
  canceled_on?: string
  /**
   * Elapsed
   * Elapsed time in seconds that the job ran.
   * @format decimal
   */
  elapsed?: string
  /**
   * Job args
   * @minLength 1
   */
  job_args?: string
  /**
   * Job cwd
   * @minLength 1
   */
  job_cwd?: string
  /** job_env */
  job_env?: object
  /**
   * Job explanation
   * A status field to indicate the state of the job if it wasn't able to run and capture stdout
   * @minLength 1
   */
  job_explanation?: string
  /**
   * Execution node
   * The node the job executed on.
   * @minLength 1
   */
  execution_node?: string
  /**
   * Result traceback
   * @minLength 1
   */
  result_traceback?: string
  /**
   * Event processing finished
   * Indicates whether all of the events generated by this unified job have been saved to the database.
   */
  event_processing_finished?: boolean
  /** Launched by */
  launched_by?: string
  /**
   * Work unit id
   * The Receptor work unit ID associated with this job.
   * @minLength 1
   */
  work_unit_id?: string
  /** System job template */
  system_job_template?: string | null
  /**
   * Job type
   * @default ""
   */
  job_type?:
    | 'cleanup_jobs'
    | 'cleanup_activitystream'
    | 'cleanup_sessions'
    | 'cleanup_tokens'
    | null
  /**
   * Extra vars
   * @default ""
   */
  extra_vars?: string | null
  /** Result stdout */
  result_stdout?: string
}

export interface SystemJobCancel {
  /** Can cancel */
  can_cancel?: boolean
}

export interface SystemJobEvent {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /** Event */
  event?: string
  /**
   * Counter
   * @min 0
   */
  counter?: number
  /**
   * Event display
   * @minLength 1
   */
  event_display?: string
  /**
   * Event data
   * @default {}
   */
  event_data?: object
  /** Failed */
  failed?: string
  /** Changed */
  changed?: string
  /**
   * Uuid
   * @minLength 1
   */
  uuid?: string
  /**
   * Stdout
   * @minLength 1
   */
  stdout?: string
  /**
   * Start line
   * @min 0
   */
  start_line?: number
  /**
   * End line
   * @min 0
   */
  end_line?: number
  /**
   * Verbosity
   * @min 0
   */
  verbosity?: number
  /** System job */
  system_job?: string
}

export interface TeamCredentialSerializerCreate {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /**
   * Credential Type
   * Specify the type of credential you want to create. Refer to the documentation for details on each type.
   */
  credential_type: number
  /** Managed */
  managed?: string
  /**
   * Inputs
   * Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax.
   * @default {}
   */
  inputs?: object
  /** Kind */
  kind?: string
  /** Cloud */
  cloud?: string
  /** Kubernetes */
  kubernetes?: string
  /**
   * Team
   * Write-only field used to add team to owner role. If provided, do not give either user or organization. Only valid for creation.
   */
  team?: number | null
}

export interface RoleSerializerWithParentAccess {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Name */
  name?: string
  /** Description */
  description?: string
}

export interface OAuth2TokenDetail {
  /** Id */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /**
   * User
   * The user representing the token owner
   */
  user?: number
  /** Token */
  token?: string
  /** Refresh token */
  refresh_token?: string
  /** Application */
  application?: number | null
  /**
   * Expires
   * @format date-time
   */
  expires?: string
  /**
   * Scope
   * Allowed scopes, further restricts user's permissions. Must be a simple space-separated string with allowed scopes ['read', 'write'].
   * @default "write"
   */
  scope?: string | null
}

export interface UserAuthorizedToken {
  /** Id */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /**
   * User
   * The user representing the token owner
   */
  user?: number
  /** Token */
  token?: string
  /** Refresh token */
  refresh_token?: string
  /** Application */
  application: number
  /**
   * Expires
   * @format date-time
   */
  expires?: string
  /**
   * Scope
   * Allowed scopes, further restricts user's permissions. Must be a simple space-separated string with allowed scopes ['read', 'write'].
   * @default "write"
   */
  scope?: string | null
}

export interface UserCredentialSerializerCreate {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /**
   * Credential Type
   * Specify the type of credential you want to create. Refer to the documentation for details on each type.
   */
  credential_type: number
  /** Managed */
  managed?: string
  /**
   * Inputs
   * Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax.
   * @default {}
   */
  inputs?: object
  /** Kind */
  kind?: string
  /** Cloud */
  cloud?: string
  /** Kubernetes */
  kubernetes?: string
  /**
   * User
   * Write-only field used to add user to owner role. If provided, do not give either team or organization. Only valid for creation.
   */
  user?: number | null
}

export interface UserPersonalToken {
  /** Id */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /**
   * User
   * The user representing the token owner
   */
  user?: number
  /** Token */
  token?: string
  /** Refresh token */
  refresh_token?: string
  /** Application */
  application?: number | null
  /**
   * Expires
   * @format date-time
   */
  expires?: string
  /**
   * Scope
   * Allowed scopes, further restricts user's permissions. Must be a simple space-separated string with allowed scopes ['read', 'write'].
   * @default "write"
   */
  scope?: string | null
}

export interface WorkflowApprovalTemplate {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /**
   * Last job run
   * @format date-time
   */
  last_job_run?: string
  /** Last job failed */
  last_job_failed?: boolean
  /**
   * Next job run
   * @format date-time
   */
  next_job_run?: string
  /** Status */
  status?:
    | 'new'
    | 'pending'
    | 'waiting'
    | 'running'
    | 'successful'
    | 'failed'
    | 'error'
    | 'canceled'
    | 'never updated'
    | 'ok'
    | 'missing'
    | 'none'
    | 'updating'
  /**
   * Execution environment
   * The container image to be used for execution.
   */
  execution_environment?: number | null
  /**
   * Timeout
   * The amount of time (in seconds) before the approval node expires and fails.
   * @min -2147483648
   * @max 2147483647
   * @default 0
   */
  timeout?: number
}

export interface WorkflowApprovalList {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /** unified job template */
  unified_job_template?: string
  /** Launch type */
  launch_type?:
    | 'manual'
    | 'relaunch'
    | 'callback'
    | 'scheduled'
    | 'dependency'
    | 'workflow'
    | 'webhook'
    | 'sync'
    | 'scm'
  /** Status */
  status?:
    | 'new'
    | 'pending'
    | 'waiting'
    | 'running'
    | 'successful'
    | 'failed'
    | 'error'
    | 'canceled'
  /**
   * Execution environment
   * The container image to be used for execution.
   */
  execution_environment?: number | null
  /** Failed */
  failed?: boolean
  /**
   * Started
   * The date and time the job was queued for starting.
   * @format date-time
   */
  started?: string
  /**
   * Finished
   * The date and time the job finished execution.
   * @format date-time
   */
  finished?: string
  /**
   * Canceled on
   * The date and time when the cancel request was sent.
   * @format date-time
   */
  canceled_on?: string
  /**
   * Elapsed
   * Elapsed time in seconds that the job ran.
   * @format decimal
   */
  elapsed?: string
  /**
   * Job explanation
   * A status field to indicate the state of the job if it wasn't able to run and capture stdout
   * @minLength 1
   */
  job_explanation?: string
  /** Launched by */
  launched_by?: string
  /**
   * Work unit id
   * The Receptor work unit ID associated with this job.
   * @minLength 1
   */
  work_unit_id?: string
  /** Can approve or deny */
  can_approve_or_deny?: string
  /** Approval expiration */
  approval_expiration?: string
  /** Timed out */
  timed_out?: string
}

export interface WorkflowApproval {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /** unified job template */
  unified_job_template?: string
  /** Launch type */
  launch_type?:
    | 'manual'
    | 'relaunch'
    | 'callback'
    | 'scheduled'
    | 'dependency'
    | 'workflow'
    | 'webhook'
    | 'sync'
    | 'scm'
  /** Status */
  status?:
    | 'new'
    | 'pending'
    | 'waiting'
    | 'running'
    | 'successful'
    | 'failed'
    | 'error'
    | 'canceled'
  /**
   * Execution environment
   * The container image to be used for execution.
   */
  execution_environment?: number | null
  /** Failed */
  failed?: boolean
  /**
   * Started
   * The date and time the job was queued for starting.
   * @format date-time
   */
  started?: string
  /**
   * Finished
   * The date and time the job finished execution.
   * @format date-time
   */
  finished?: string
  /**
   * Canceled on
   * The date and time when the cancel request was sent.
   * @format date-time
   */
  canceled_on?: string
  /**
   * Elapsed
   * Elapsed time in seconds that the job ran.
   * @format decimal
   */
  elapsed?: string
  /**
   * Job args
   * @minLength 1
   */
  job_args?: string
  /**
   * Job cwd
   * @minLength 1
   */
  job_cwd?: string
  /** job_env */
  job_env?: object
  /**
   * Job explanation
   * A status field to indicate the state of the job if it wasn't able to run and capture stdout
   * @minLength 1
   */
  job_explanation?: string
  /**
   * Result traceback
   * @minLength 1
   */
  result_traceback?: string
  /**
   * Event processing finished
   * Indicates whether all of the events generated by this unified job have been saved to the database.
   */
  event_processing_finished?: boolean
  /** Launched by */
  launched_by?: string
  /**
   * Work unit id
   * The Receptor work unit ID associated with this job.
   * @minLength 1
   */
  work_unit_id?: string
  /** Can approve or deny */
  can_approve_or_deny?: string
  /** Approval expiration */
  approval_expiration?: string
  /** Timed out */
  timed_out?: string
}

export type WorkflowApprovalView = object

export interface WorkflowJobNodeList {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Extra data
   * @default {}
   */
  extra_data?: object
  /**
   * Inventory
   * Inventory applied as a prompt, assuming job template prompts for inventory
   */
  inventory?: number | null
  /** Scm branch */
  scm_branch?: string | null
  /** Job type */
  job_type?: 'run' | 'check' | null
  /** Job tags */
  job_tags?: string | null
  /** Skip tags */
  skip_tags?: string | null
  /** Limit */
  limit?: string | null
  /** Diff mode */
  diff_mode?: boolean | null
  /** Verbosity */
  verbosity?: '0' | '1' | '2' | '3' | '4' | '5' | null
  /**
   * Execution environment
   * The container image to be used for execution.
   */
  execution_environment?: number | null
  /**
   * Forks
   * @min 0
   */
  forks?: number | null
  /**
   * Job slice count
   * @min 0
   */
  job_slice_count?: number | null
  /** Timeout */
  timeout?: number | null
  /** Job */
  job?: number | null
  /** Workflow job */
  workflow_job?: string | null
  /** Unified job template */
  unified_job_template?: number | null
  /** @uniqueItems true */
  success_nodes?: number[]
  /** @uniqueItems true */
  failure_nodes?: number[]
  /** @uniqueItems true */
  always_nodes?: number[]
  /**
   * All parents must converge
   * If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node
   * @default false
   */
  all_parents_must_converge?: boolean | null
  /**
   * Do not run
   * Indicates that a job will not be created when True. Workflow runtime semantics will mark this True if the node is in a path that will decidedly not be ran. A value of False means the node may not run.
   * @default false
   */
  do_not_run?: boolean | null
  /**
   * Identifier
   * An identifier coresponding to the workflow job template node that this node was created from.
   * @maxLength 512
   */
  identifier?: string | null
}

export interface WorkflowJobNodeDetail {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Extra data
   * @default {}
   */
  extra_data?: object
  /**
   * Inventory
   * Inventory applied as a prompt, assuming job template prompts for inventory
   */
  inventory?: number | null
  /** Scm branch */
  scm_branch?: string | null
  /** Job type */
  job_type?: 'run' | 'check' | null
  /** Job tags */
  job_tags?: string | null
  /** Skip tags */
  skip_tags?: string | null
  /** Limit */
  limit?: string | null
  /** Diff mode */
  diff_mode?: boolean | null
  /** Verbosity */
  verbosity?: '0' | '1' | '2' | '3' | '4' | '5' | null
  /**
   * Execution environment
   * The container image to be used for execution.
   */
  execution_environment?: number | null
  /**
   * Forks
   * @min 0
   */
  forks?: number | null
  /**
   * Job slice count
   * @min 0
   */
  job_slice_count?: number | null
  /** Timeout */
  timeout?: number | null
  /** Job */
  job?: number | null
  /** Workflow job */
  workflow_job?: string | null
  /** Unified job template */
  unified_job_template?: number | null
  /** @uniqueItems true */
  success_nodes?: number[]
  /** @uniqueItems true */
  failure_nodes?: number[]
  /** @uniqueItems true */
  always_nodes?: number[]
  /**
   * All parents must converge
   * If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node
   * @default false
   */
  all_parents_must_converge?: boolean | null
  /**
   * Do not run
   * Indicates that a job will not be created when True. Workflow runtime semantics will mark this True if the node is in a path that will decidedly not be ran. A value of False means the node may not run.
   * @default false
   */
  do_not_run?: boolean | null
  /**
   * Identifier
   * An identifier coresponding to the workflow job template node that this node was created from.
   * @maxLength 512
   */
  identifier?: string | null
}

export interface WorkflowJobTemplateNode {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Extra data
   * @default {}
   */
  extra_data?: object
  /**
   * Inventory
   * Inventory applied as a prompt, assuming job template prompts for inventory
   */
  inventory?: number | null
  /** Scm branch */
  scm_branch?: string | null
  /** Job type */
  job_type?: 'run' | 'check' | null
  /** Job tags */
  job_tags?: string | null
  /** Skip tags */
  skip_tags?: string | null
  /** Limit */
  limit?: string | null
  /** Diff mode */
  diff_mode?: boolean | null
  /** Verbosity */
  verbosity?: '0' | '1' | '2' | '3' | '4' | '5' | null
  /**
   * Execution environment
   * The container image to be used for execution.
   */
  execution_environment?: number | null
  /**
   * Forks
   * @min 0
   */
  forks?: number | null
  /**
   * Job slice count
   * @min 0
   */
  job_slice_count?: number | null
  /** Timeout */
  timeout?: number | null
  /** Workflow job template */
  workflow_job_template: string
  /** Unified job template */
  unified_job_template?: number | null
  /** @uniqueItems true */
  success_nodes?: number[]
  /** @uniqueItems true */
  failure_nodes?: number[]
  /** @uniqueItems true */
  always_nodes?: number[]
  /**
   * All parents must converge
   * If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node
   * @default false
   */
  all_parents_must_converge?: boolean | null
  /**
   * Identifier
   * An identifier for this node that is unique within its workflow. It is copied to workflow job nodes corresponding to this node.
   * @minLength 1
   * @maxLength 512
   * @default "8dbb4a30-dc8d-418d-8fe5-ab680298abcd"
   */
  identifier?: string | null
}

export interface WorkflowJobTemplateNodeDetail {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Extra data
   * @default {}
   */
  extra_data?: object
  /**
   * Inventory
   * Inventory applied as a prompt, assuming job template prompts for inventory
   */
  inventory?: number | null
  /** Scm branch */
  scm_branch?: string | null
  /** Job type */
  job_type?: 'run' | 'check' | null
  /** Job tags */
  job_tags?: string | null
  /** Skip tags */
  skip_tags?: string | null
  /** Limit */
  limit?: string | null
  /** Diff mode */
  diff_mode?: boolean | null
  /** Verbosity */
  verbosity?: '0' | '1' | '2' | '3' | '4' | '5' | null
  /**
   * Execution environment
   * The container image to be used for execution.
   */
  execution_environment?: number | null
  /**
   * Forks
   * @min 0
   */
  forks?: number | null
  /**
   * Job slice count
   * @min 0
   */
  job_slice_count?: number | null
  /** Timeout */
  timeout?: number | null
  /** Workflow job template */
  workflow_job_template: string
  /** Unified job template */
  unified_job_template?: number | null
  /** @uniqueItems true */
  success_nodes?: number[]
  /** @uniqueItems true */
  failure_nodes?: number[]
  /** @uniqueItems true */
  always_nodes?: number[]
  /**
   * All parents must converge
   * If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node
   * @default false
   */
  all_parents_must_converge?: boolean | null
  /**
   * Identifier
   * An identifier for this node that is unique within its workflow. It is copied to workflow job nodes corresponding to this node.
   * @minLength 1
   * @maxLength 512
   * @default "e9d5e643-b54e-4af3-a270-6c8ce1ecf898"
   */
  identifier?: string | null
}

export interface WorkflowJobTemplateNodeCreateApproval {
  /**
   * Timeout
   * The amount of time (in seconds) before the approval node expires and fails.
   * @min -2147483648
   * @max 2147483647
   * @default 0
   */
  timeout?: number
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
}

export interface WorkflowJobLaunch {
  /** Ask inventory on launch */
  ask_inventory_on_launch?: boolean | null
  /** Ask limit on launch */
  ask_limit_on_launch?: boolean | null
  /** Ask scm branch on launch */
  ask_scm_branch_on_launch?: boolean | null
  /** Can start without user input */
  can_start_without_user_input?: boolean
  /** Defaults */
  defaults?: string
  /** Extra vars */
  extra_vars?: string
  /** Inventory */
  inventory?: number
  /** Limit */
  limit?: string
  /** Scm branch */
  scm_branch?: string
  /** Survey enabled */
  survey_enabled?: string
  /** Variables needed to start */
  variables_needed_to_start?: string
  /** Node templates missing */
  node_templates_missing?: string
  /** Node prompts rejected */
  node_prompts_rejected?: string
  /** Workflow job template data */
  workflow_job_template_data?: string
  /** Ask variables on launch */
  ask_variables_on_launch?: boolean | null
  /** Ask labels on launch */
  ask_labels_on_launch?: boolean | null
  /** @uniqueItems true */
  labels?: number[]
  /** Ask skip tags on launch */
  ask_skip_tags_on_launch?: boolean | null
  /** Ask tags on launch */
  ask_tags_on_launch?: boolean | null
  /** Skip tags */
  skip_tags?: string
  /** Job tags */
  job_tags?: string
}

export interface WorkflowJob {
  /** ID */
  id?: number
  /** Type */
  type?: string
  /** Url */
  url?: string
  /** Related */
  related?: string
  /** Summary fields */
  summary_fields?: string
  /** Created */
  created?: string
  /** Modified */
  modified?: string
  /**
   * Name
   * @minLength 1
   * @maxLength 512
   */
  name?: string | null
  /**
   * Description
   * @default ""
   */
  description?: string | null
  /** unified job template */
  unified_job_template?: string
  /** Launch type */
  launch_type?:
    | 'manual'
    | 'relaunch'
    | 'callback'
    | 'scheduled'
    | 'dependency'
    | 'workflow'
    | 'webhook'
    | 'sync'
    | 'scm'
  /** Status */
  status?:
    | 'new'
    | 'pending'
    | 'waiting'
    | 'running'
    | 'successful'
    | 'failed'
    | 'error'
    | 'canceled'
  /** Failed */
  failed?: boolean
  /**
   * Started
   * The date and time the job was queued for starting.
   * @format date-time
   */
  started?: string
  /**
   * Finished
   * The date and time the job finished execution.
   * @format date-time
   */
  finished?: string
  /**
   * Canceled on
   * The date and time when the cancel request was sent.
   * @format date-time
   */
  canceled_on?: string
  /**
   * Elapsed
   * Elapsed time in seconds that the job ran.
   * @format decimal
   */
  elapsed?: string
  /**
   * Job args
   * @minLength 1
   */
  job_args?: string
  /**
   * Job cwd
   * @minLength 1
   */
  job_cwd?: string
  /** job_env */
  job_env?: object
  /**
   * Job explanation
   * A status field to indicate the state of the job if it wasn't able to run and capture stdout
   * @minLength 1
   */
  job_explanation?: string
  /**
   * Result traceback
   * @minLength 1
   */
  result_traceback?: string
  /** Launched by */
  launched_by?: string
  /**
   * Work unit id
   * The Receptor work unit ID associated with this job.
   * @minLength 1
   */
  work_unit_id?: string
  /** Workflow job template */
  workflow_job_template?: string | null
  /**
   * Extra vars
   * @default ""
   */
  extra_vars?: string | null
  /**
   * Allow simultaneous
   * @default false
   */
  allow_simultaneous?: boolean | null
  /**
   * Job template
   * If automatically created for a sliced job run, the job template the workflow job was created from.
   */
  job_template?: string | null
  /**
   * Is sliced job
   * @default false
   */
  is_sliced_job?: boolean | null
  /**
   * Inventory
   * Inventory applied as a prompt, assuming job template prompts for inventory
   */
  inventory?: number | null
  /** Limit */
  limit?: string | null
  /** Scm branch */
  scm_branch?: string | null
  /**
   * Webhook service
   * Service that webhook requests will be accepted from
   */
  webhook_service?: 'github' | 'gitlab' | null
  /**
   * Webhook credential
   * Personal Access Token for posting back the status to the service API
   */
  webhook_credential?: number | null
  /**
   * Webhook guid
   * Unique identifier of the event that triggered this webhook
   * @maxLength 128
   */
  webhook_guid?: string | null
  /** Skip tags */
  skip_tags?: string | null
  /** Job tags */
  job_tags?: string | null
}

export interface WorkflowJobCancel {
  /** Can cancel */
  can_cancel?: boolean
}

export type QueryParamsType = Record<string | number, any>
export type ResponseFormat = keyof Omit<Body, 'body' | 'bodyUsed'>

export interface FullRequestParams extends Omit<RequestInit, 'body'> {
  /** set parameter to `true` for call `securityWorker` for this request */
  secure?: boolean
  /** request path */
  path: string
  /** content type of request body */
  type?: ContentType
  /** query params */
  query?: QueryParamsType
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat
  /** request body */
  body?: unknown
  /** base url */
  baseUrl?: string
  /** request cancellation token */
  cancelToken?: CancelToken
}

export type RequestParams = Omit<FullRequestParams, 'body' | 'method' | 'query' | 'path'>

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string
  baseApiParams?: Omit<RequestParams, 'baseUrl' | 'cancelToken' | 'signal'>
  securityWorker?: (
    securityData: SecurityDataType | null
  ) => Promise<RequestParams | void> | RequestParams | void
  customFetch?: typeof fetch
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D
  error: E
}

type CancelToken = Symbol | string | number

export enum ContentType {
  Json = 'application/json',
  FormData = 'multipart/form-data',
  UrlEncoded = 'application/x-www-form-urlencoded',
  Text = 'text/plain',
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = 'https://localhost:8043'
  private securityData: SecurityDataType | null = null
  private securityWorker?: ApiConfig<SecurityDataType>['securityWorker']
  private abortControllers = new Map<CancelToken, AbortController>()
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams)

  private baseApiParams: RequestParams = {
    credentials: 'same-origin',
    headers: {},
    redirect: 'follow',
    referrerPolicy: 'no-referrer',
  }

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig)
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data
  }

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key)
    return `${encodedKey}=${encodeURIComponent(typeof value === 'number' ? value : `${value}`)}`
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key])
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key]
    return value.map((v: any) => this.encodeQueryParam(key, v)).join('&')
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {}
    const keys = Object.keys(query).filter((key) => 'undefined' !== typeof query[key])
    return keys
      .map((key) =>
        Array.isArray(query[key])
          ? this.addArrayQueryParam(query, key)
          : this.addQueryParam(query, key)
      )
      .join('&')
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery)
    return queryString ? `?${queryString}` : ''
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === 'object' || typeof input === 'string')
        ? JSON.stringify(input)
        : input,
    [ContentType.Text]: (input: any) =>
      input !== null && typeof input !== 'string' ? JSON.stringify(input) : input,
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key]
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === 'object' && property !== null
            ? JSON.stringify(property)
            : `${property}`
        )
        return formData
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  }

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    }
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken)
      if (abortController) {
        return abortController.signal
      }
      return void 0
    }

    const abortController = new AbortController()
    this.abortControllers.set(cancelToken, abortController)
    return abortController.signal
  }

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken)

    if (abortController) {
      abortController.abort()
      this.abortControllers.delete(cancelToken)
    }
  }

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === 'boolean' ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {}
    const requestParams = this.mergeRequestParams(params, secureParams)
    const queryString = query && this.toQueryString(query)
    const payloadFormatter = this.contentFormatters[type || ContentType.Json]
    const responseFormat = format || requestParams.format

    return this.customFetch(
      `${baseUrl || this.baseUrl || ''}${path}${queryString ? `?${queryString}` : ''}`,
      {
        ...requestParams,
        headers: {
          ...(requestParams.headers || {}),
          ...(type && type !== ContentType.FormData ? { 'Content-Type': type } : {}),
        },
        signal: cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal,
        body: typeof body === 'undefined' || body === null ? null : payloadFormatter(body),
      }
    ).then(async (response) => {
      const r = response as HttpResponse<T, E>
      r.data = null as unknown as T
      r.error = null as unknown as E

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data
              } else {
                r.error = data
              }
              return r
            })
            .catch((e) => {
              r.error = e
              return r
            })

      if (cancelToken) {
        this.abortControllers.delete(cancelToken)
      }

      if (!response.ok) throw data
      return data
    })
  }
}

/**
 * @title Snippets API
 * @version v1
 * @license BSD License
 * @termsOfService https://www.google.com/policies/terms/
 * @baseUrl https://localhost:8043
 * @contact <contact@snippets.local>
 *
 * Test description
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  api = {
    /**
     * @description List supported API versions
     *
     * @tags api
     * @name ApiList
     * @request GET:/api/
     * @secure
     */
    apiList: (params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/`,
        method: 'GET',
        secure: true,
        ...params,
      }),

    /**
     * @description List of available debug urls
     *
     * @tags api
     * @name ApiDebugList
     * @request GET:/api/debug/
     * @secure
     */
    apiDebugList: (params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/debug/`,
        method: 'GET',
        secure: true,
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiDebugDependencyManagerList
     * @request GET:/api/debug/dependency_manager/
     * @secure
     */
    apiDebugDependencyManagerList: (params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/debug/dependency_manager/`,
        method: 'GET',
        secure: true,
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiDebugTaskManagerList
     * @request GET:/api/debug/task_manager/
     * @secure
     */
    apiDebugTaskManagerList: (params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/debug/task_manager/`,
        method: 'GET',
        secure: true,
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiDebugWorkflowManagerList
     * @request GET:/api/debug/workflow_manager/
     * @secure
     */
    apiDebugWorkflowManagerList: (params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/debug/workflow_manager/`,
        method: 'GET',
        secure: true,
        ...params,
      }),

    /**
     * @description This page lists OAuth 2 utility endpoints used for authorization, token refresh and revoke. Note endpoints other than `/api/o/authorize/` are not meant to be used in browsers and do not support HTTP GET. The endpoints here strictly follow [RFC specs for OAuth2](https://tools.ietf.org/html/rfc6749), so please use that for detailed reference. Note AWX net location default to `http://localhost:8013` in examples: ## Create Token for an Application using Authorization code grant type Given an application "AuthCodeApp" of grant type `authorization-code`, from the client app, the user makes a GET to the Authorize endpoint with * `response_type` * `client_id` * `redirect_uris` * `scope` AWX will respond with the authorization `code` and `state` to the redirect_uri specified in the application. The client application will then make a POST to the `api/o/token/` endpoint on AWX with * `code` * `client_id` * `client_secret` * `grant_type` * `redirect_uri` AWX will respond with the `access_token`, `token_type`, `refresh_token`, and `expires_in`. For more information on testing this flow, refer to [django-oauth-toolkit](http://django-oauth-toolkit.readthedocs.io/en/latest/tutorial/tutorial_01.html#test-your-authorization-server). ## Create Token for an Application using Password grant type Log in is not required for `password` grant type, so a simple `curl` can be used to acquire a personal access token via `/api/o/token/` with * `grant_type`: Required to be "password" * `username` * `password` * `client_id`: Associated application must have grant_type "password" * `client_secret` For example: ```bash curl -X POST \ -H "Content-Type: application/x-www-form-urlencoded" \ -d "grant_type=password&username=<username>&password=<password>&scope=read" \ -u "gwSPoasWSdNkMDtBN3Hu2WYQpPWCO9SwUEsKK22l:fI6ZpfocHYBGfm1tP92r0yIgCyfRdDQt0Tos9L8a4fNsJjQQMwp9569e IaUBsaVDgt2eiwOGe0bg5m5vCSstClZmtdy359RVx2rQK5YlIWyPlrolpt2LEpVeKXWaiybo" \ http://localhost:8013/api/o/token/ -i ``` In the above post request, parameters `username` and `password` are username and password of the related AWX user of the underlying application, and the authentication information is of format `<client_id>:<client_secret>`, where `client_id` and `client_secret` are the corresponding fields of underlying application. Upon success, access token, refresh token and other information are given in the response body in JSON
     *
     * @tags api
     * @name ApiOList
     * @summary # Token Handling using OAuth2
     * @request GET:/api/o/
     * @secure
     */
    apiOList: (params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/o/`,
        method: 'GET',
        secure: true,
        ...params,
      }),

    /**
     * @description List top level resources
     *
     * @tags api
     * @name ApiRead
     * @request GET:/api/{version}/
     * @secure
     */
    apiRead: (version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/`,
        method: 'GET',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of activity streams. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of activity streams found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more activity stream records. ## Results Each activity stream data structure includes the following fields: * `id`: Database ID for this activity stream. (integer) * `type`: Data type for this activity stream. (choice) * `url`: URL for this activity stream. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `timestamp`:  (datetime) * `operation`: The action taken with respect to the given object(s). (choice) - `create`: Entity Created - `update`: Entity Updated - `delete`: Entity Deleted - `associate`: Entity Associated with another Entity - `disassociate`: Entity was Disassociated with another Entity * `changes`: A summary of the new and changed values when an object is created, updated, or deleted (json) * `object1`: For create, update, and delete events this is the object type that was affected. For associate and disassociate events this is the object type associated or disassociated with object2. (string) * `object2`: Unpopulated for create, update, and delete events. For associate and disassociate events this is the object type that object1 is being associated with. (string) * `object_association`: When present, shows the field name of the role or relationship that changed. (field) * `action_node`: The cluster node the activity took place on. (string) * `object_type`: When present, shows the model on which the role or relationship was defined. (field) ## Sorting To specify that activity streams are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by= Prefix the field name with a dash `-` to sort in reverse: ?order_by=- Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiActivityStreamList
     * @summary # List Activity Streams:
     * @request GET:/api/{version}/activity_stream/
     * @secure
     */
    apiActivityStreamList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ActivityStream[]
        },
        any
      >({
        path: `/api/${version}/activity_stream/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single activity stream record containing the following fields: * `id`: Database ID for this activity stream. (integer) * `type`: Data type for this activity stream. (choice) * `url`: URL for this activity stream. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `timestamp`:  (datetime) * `operation`: The action taken with respect to the given object(s). (choice) - `create`: Entity Created - `update`: Entity Updated - `delete`: Entity Deleted - `associate`: Entity Associated with another Entity - `disassociate`: Entity was Disassociated with another Entity * `changes`: A summary of the new and changed values when an object is created, updated, or deleted (json) * `object1`: For create, update, and delete events this is the object type that was affected. For associate and disassociate events this is the object type associated or disassociated with object2. (string) * `object2`: Unpopulated for create, update, and delete events. For associate and disassociate events this is the object type that object1 is being associated with. (string) * `object_association`: When present, shows the field name of the role or relationship that changed. (field) * `action_node`: The cluster node the activity took place on. (string) * `object_type`: When present, shows the model on which the role or relationship was defined. (field)
     *
     * @tags api
     * @name ApiActivityStreamRead
     * @summary # Retrieve an Activity Stream:
     * @request GET:/api/{version}/activity_stream/{id}/
     * @secure
     */
    apiActivityStreamRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<ActivityStream, any>({
        path: `/api/${version}/activity_stream/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single ad hoc command event record containing the following fields: * `id`: Database ID for this ad hoc command event. (integer) * `type`: Data type for this ad hoc command event. (choice) * `url`: URL for this ad hoc command event. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this ad hoc command event was created. (datetime) * `modified`: Timestamp when this ad hoc command event was last modified. (datetime) * `ad_hoc_command`:  (id) * `event`:  (choice) - `runner_on_failed`: Host Failed - `runner_on_ok`: Host OK - `runner_on_unreachable`: Host Unreachable - `runner_on_skipped`: Host Skipped - `debug`: Debug - `verbose`: Verbose - `deprecated`: Deprecated - `warning`: Warning - `system_warning`: System Warning - `error`: Error * `counter`:  (integer) * `event_display`:  (string) * `event_data`:  (json) * `failed`:  (boolean) * `changed`:  (boolean) * `uuid`:  (string) * `host`:  (id) * `host_name`:  (string) * `stdout`:  (string) * `start_line`:  (integer) * `end_line`:  (integer) * `verbosity`:  (integer)
     *
     * @tags api
     * @name ApiAdHocCommandEventsRead
     * @summary # Retrieve an Ad Hoc Command Event:
     * @request GET:/api/{version}/ad_hoc_command_events/{id}/
     * @secure
     */
    apiAdHocCommandEventsRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<AdHocCommandEvent, any>({
        path: `/api/${version}/ad_hoc_command_events/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of ad hoc commands. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of ad hoc commands found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more ad hoc command records. ## Results Each ad hoc command data structure includes the following fields: * `id`: Database ID for this ad hoc command. (integer) * `type`: Data type for this ad hoc command. (choice) * `url`: URL for this ad hoc command. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this ad hoc command was created. (datetime) * `modified`: Timestamp when this ad hoc command was last modified. (datetime) * `name`: Name of this ad hoc command. (string) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `execution_node`: The node the job executed on. (string) * `controller_node`: The instance that managed the execution environment. (string) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `job_type`:  (choice) - `run`: Run - `check`: Check * `inventory`:  (id) * `limit`:  (string) * `credential`:  (id) * `module_name`:  (choice) - `command` - `shell` - `yum` - `apt` - `apt_key` - `apt_repository` - `apt_rpm` - `service` - `group` - `user` - `mount` - `ping` - `selinux` - `setup` - `win_ping` - `win_service` - `win_updates` - `win_group` - `win_user` * `module_args`:  (string) * `forks`:  (integer) * `verbosity`:  (choice) - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `extra_vars`:  (string) * `become_enabled`:  (boolean) * `diff_mode`:  (boolean) ## Sorting To specify that ad hoc commands are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiAdHocCommandsList
     * @summary # List Ad Hoc Commands:
     * @request GET:/api/{version}/ad_hoc_commands/
     * @secure
     */
    apiAdHocCommandsList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: AdHocCommandList[]
        },
        any
      >({
        path: `/api/${version}/ad_hoc_commands/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of ad hoc commands. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of ad hoc commands found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more ad hoc command records. ## Results Each ad hoc command data structure includes the following fields: * `id`: Database ID for this ad hoc command. (integer) * `type`: Data type for this ad hoc command. (choice) * `url`: URL for this ad hoc command. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this ad hoc command was created. (datetime) * `modified`: Timestamp when this ad hoc command was last modified. (datetime) * `name`: Name of this ad hoc command. (string) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `execution_node`: The node the job executed on. (string) * `controller_node`: The instance that managed the execution environment. (string) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `job_type`:  (choice) - `run`: Run - `check`: Check * `inventory`:  (id) * `limit`:  (string) * `credential`:  (id) * `module_name`:  (choice) - `command` - `shell` - `yum` - `apt` - `apt_key` - `apt_repository` - `apt_rpm` - `service` - `group` - `user` - `mount` - `ping` - `selinux` - `setup` - `win_ping` - `win_service` - `win_updates` - `win_group` - `win_user` * `module_args`:  (string) * `forks`:  (integer) * `verbosity`:  (choice) - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `extra_vars`:  (string) * `become_enabled`:  (boolean) * `diff_mode`:  (boolean) ## Sorting To specify that ad hoc commands are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiAdHocCommandsCreate
     * @summary # List Ad Hoc Commands:
     * @request POST:/api/{version}/ad_hoc_commands/
     * @secure
     */
    apiAdHocCommandsCreate: (version: string, data: AdHocCommandList, params: RequestParams = {}) =>
      this.request<AdHocCommandList, any>({
        path: `/api/${version}/ad_hoc_commands/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single ad hoc command record containing the following fields: * `id`: Database ID for this ad hoc command. (integer) * `type`: Data type for this ad hoc command. (choice) * `url`: URL for this ad hoc command. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this ad hoc command was created. (datetime) * `modified`: Timestamp when this ad hoc command was last modified. (datetime) * `name`: Name of this ad hoc command. (string) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_args`:  (string) * `job_cwd`:  (string) * `job_env`:  (json) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `execution_node`: The node the job executed on. (string) * `controller_node`: The instance that managed the execution environment. (string) * `result_traceback`:  (string) * `event_processing_finished`: Indicates whether all of the events generated by this unified job have been saved to the database. (boolean) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `job_type`:  (choice) - `run`: Run - `check`: Check * `inventory`:  (id) * `limit`:  (string) * `credential`:  (id) * `module_name`:  (choice) - `command` - `shell` - `yum` - `apt` - `apt_key` - `apt_repository` - `apt_rpm` - `service` - `group` - `user` - `mount` - `ping` - `selinux` - `setup` - `win_ping` - `win_service` - `win_updates` - `win_group` - `win_user` * `module_args`:  (string) * `forks`:  (integer) * `verbosity`:  (choice) - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `extra_vars`:  (string) * `become_enabled`:  (boolean) * `diff_mode`:  (boolean) * `host_status_counts`: Playbook stats from the Ansible playbook_on_stats event. (json) # Delete an Ad Hoc Command: Make a DELETE request to this resource to delete this ad hoc command.
     *
     * @tags api
     * @name ApiAdHocCommandsRead
     * @summary # Retrieve an Ad Hoc Command:
     * @request GET:/api/{version}/ad_hoc_commands/{id}/
     * @secure
     */
    apiAdHocCommandsRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<AdHocCommandDetail, any>({
        path: `/api/${version}/ad_hoc_commands/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single ad hoc command record containing the following fields: * `id`: Database ID for this ad hoc command. (integer) * `type`: Data type for this ad hoc command. (choice) * `url`: URL for this ad hoc command. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this ad hoc command was created. (datetime) * `modified`: Timestamp when this ad hoc command was last modified. (datetime) * `name`: Name of this ad hoc command. (string) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_args`:  (string) * `job_cwd`:  (string) * `job_env`:  (json) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `execution_node`: The node the job executed on. (string) * `controller_node`: The instance that managed the execution environment. (string) * `result_traceback`:  (string) * `event_processing_finished`: Indicates whether all of the events generated by this unified job have been saved to the database. (boolean) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `job_type`:  (choice) - `run`: Run - `check`: Check * `inventory`:  (id) * `limit`:  (string) * `credential`:  (id) * `module_name`:  (choice) - `command` - `shell` - `yum` - `apt` - `apt_key` - `apt_repository` - `apt_rpm` - `service` - `group` - `user` - `mount` - `ping` - `selinux` - `setup` - `win_ping` - `win_service` - `win_updates` - `win_group` - `win_user` * `module_args`:  (string) * `forks`:  (integer) * `verbosity`:  (choice) - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `extra_vars`:  (string) * `become_enabled`:  (boolean) * `diff_mode`:  (boolean) * `host_status_counts`: Playbook stats from the Ansible playbook_on_stats event. (json) # Delete an Ad Hoc Command: Make a DELETE request to this resource to delete this ad hoc command.
     *
     * @tags api
     * @name ApiAdHocCommandsDelete
     * @summary # Retrieve an Ad Hoc Command:
     * @request DELETE:/api/{version}/ad_hoc_commands/{id}/
     * @secure
     */
    apiAdHocCommandsDelete: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/ad_hoc_commands/${id}/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of activity streams associated with the selected ad hoc command. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of activity streams found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more activity stream records. ## Results Each activity stream data structure includes the following fields: * `id`: Database ID for this activity stream. (integer) * `type`: Data type for this activity stream. (choice) * `url`: URL for this activity stream. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `timestamp`:  (datetime) * `operation`: The action taken with respect to the given object(s). (choice) - `create`: Entity Created - `update`: Entity Updated - `delete`: Entity Deleted - `associate`: Entity Associated with another Entity - `disassociate`: Entity was Disassociated with another Entity * `changes`: A summary of the new and changed values when an object is created, updated, or deleted (json) * `object1`: For create, update, and delete events this is the object type that was affected. For associate and disassociate events this is the object type associated or disassociated with object2. (string) * `object2`: Unpopulated for create, update, and delete events. For associate and disassociate events this is the object type that object1 is being associated with. (string) * `object_association`: When present, shows the field name of the role or relationship that changed. (field) * `action_node`: The cluster node the activity took place on. (string) * `object_type`: When present, shows the model on which the role or relationship was defined. (field) ## Sorting To specify that activity streams are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiAdHocCommandsActivityStreamList
     * @summary # List Activity Streams for an Ad Hoc Command:
     * @request GET:/api/{version}/ad_hoc_commands/{id}/activity_stream/
     * @secure
     */
    apiAdHocCommandsActivityStreamList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ActivityStream[]
        },
        any
      >({
        path: `/api/${version}/ad_hoc_commands/${id}/activity_stream/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single ad hoc command record containing the following fields: * `can_cancel`:  (boolean)
     *
     * @tags api
     * @name ApiAdHocCommandsCancelRead
     * @summary # Retrieve an Ad Hoc Command:
     * @request GET:/api/{version}/ad_hoc_commands/{id}/cancel/
     * @secure
     */
    apiAdHocCommandsCancelRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<AdHocCommandCancel, any>({
        path: `/api/${version}/ad_hoc_commands/${id}/cancel/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single ad hoc command record containing the following fields: * `can_cancel`:  (boolean)
     *
     * @tags api
     * @name ApiAdHocCommandsCancelCreate
     * @summary # Retrieve an Ad Hoc Command:
     * @request POST:/api/{version}/ad_hoc_commands/{id}/cancel/
     * @secure
     */
    apiAdHocCommandsCancelCreate: (
      id: string,
      version: string,
      data: AdHocCommandCancel,
      params: RequestParams = {}
    ) =>
      this.request<AdHocCommandCancel, any>({
        path: `/api/${version}/ad_hoc_commands/${id}/cancel/`,
        method: 'POST',
        body: data,
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of ad hoc command events associated with the selected ad hoc command. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of ad hoc command events found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more ad hoc command event records. ## Results Each ad hoc command event data structure includes the following fields: * `id`: Database ID for this ad hoc command event. (integer) * `type`: Data type for this ad hoc command event. (choice) * `url`: URL for this ad hoc command event. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this ad hoc command event was created. (datetime) * `modified`: Timestamp when this ad hoc command event was last modified. (datetime) * `ad_hoc_command`:  (id) * `event`:  (choice) - `runner_on_failed`: Host Failed - `runner_on_ok`: Host OK - `runner_on_unreachable`: Host Unreachable - `runner_on_skipped`: Host Skipped - `debug`: Debug - `verbose`: Verbose - `deprecated`: Deprecated - `warning`: Warning - `system_warning`: System Warning - `error`: Error * `counter`:  (integer) * `event_display`:  (string) * `event_data`:  (json) * `failed`:  (boolean) * `changed`:  (boolean) * `uuid`:  (string) * `host`:  (id) * `host_name`:  (string) * `stdout`:  (string) * `start_line`:  (integer) * `end_line`:  (integer) * `verbosity`:  (integer) ## Sorting To specify that ad hoc command events are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiAdHocCommandsEventsList
     * @summary # List Ad Hoc Command Events for an Ad Hoc Command:
     * @request GET:/api/{version}/ad_hoc_commands/{id}/events/
     * @secure
     */
    apiAdHocCommandsEventsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: AdHocCommandEvent[]
        },
        any
      >({
        path: `/api/${version}/ad_hoc_commands/${id}/events/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notifications associated with the selected ad hoc command. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notifications found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification records. ## Results Each notification data structure includes the following fields: * `id`: Database ID for this notification. (integer) * `type`: Data type for this notification. (choice) * `url`: URL for this notification. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification was created. (datetime) * `modified`: Timestamp when this notification was last modified. (datetime) * `notification_template`:  (id) * `error`:  (string) * `status`:  (choice) - `pending`: Pending - `successful`: Successful - `failed`: Failed * `notifications_sent`:  (integer) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `recipients`:  (string) * `subject`:  (string) * `body`: Notification body (json) ## Sorting To specify that notifications are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiAdHocCommandsNotificationsList
     * @summary # List Notifications for an Ad Hoc Command:
     * @request GET:/api/{version}/ad_hoc_commands/{id}/notifications/
     * @secure
     */
    apiAdHocCommandsNotificationsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Notification[]
        },
        any
      >({
        path: `/api/${version}/ad_hoc_commands/${id}/notifications/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a POST request to this resource to launch a job. If any passwords or variables are required then they should be passed in via POST data.   In order to determine what values are required in order to launch a job based on this job template you may make a GET request to this endpoint.
     *
     * @tags api
     * @name ApiAdHocCommandsRelaunchList
     * @summary Relaunch an Ad Hoc Command:
     * @request GET:/api/{version}/ad_hoc_commands/{id}/relaunch/
     * @secure
     */
    apiAdHocCommandsRelaunchList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: AdHocCommandRelaunch[]
        },
        any
      >({
        path: `/api/${version}/ad_hoc_commands/${id}/relaunch/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a POST request to this resource to launch a job. If any passwords or variables are required then they should be passed in via POST data.   In order to determine what values are required in order to launch a job based on this job template you may make a GET request to this endpoint.
     *
     * @tags api
     * @name ApiAdHocCommandsRelaunchCreate
     * @summary Relaunch an Ad Hoc Command:
     * @request POST:/api/{version}/ad_hoc_commands/{id}/relaunch/
     * @secure
     */
    apiAdHocCommandsRelaunchCreate: (
      id: string,
      version: string,
      data: AdHocCommandRelaunch,
      params: RequestParams = {}
    ) =>
      this.request<AdHocCommandRelaunch, any>({
        path: `/api/${version}/ad_hoc_commands/${id}/relaunch/`,
        method: 'POST',
        body: data,
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve the stdout from running this ad hoc command. ## Format Use the `format` query string parameter to specify the output format. * Browsable API: `?format=api` * HTML: `?format=html` * Plain Text: `?format=txt` * Plain Text with ANSI color codes: `?format=ansi` * JSON structure: `?format=json` * Downloaded Plain Text: `?format=txt_download` * Downloaded Plain Text with ANSI color codes: `?format=ansi_download` (_New in Ansible Tower 2.0.0_) When using the Browsable API, HTML and JSON formats, the `start_line` and `end_line` query string parameters can be used to specify a range of line numbers to retrieve. Use `dark=1` or `dark=0` as a query string parameter to force or disable a dark background. Files over 1.0 MB (configurable) will not display in the browser. Use the `txt_download` or `ansi_download` formats to download the file directly to view it.
     *
     * @tags api
     * @name ApiAdHocCommandsStdoutRead
     * @summary # Retrieve Ad Hoc Command Stdout:
     * @request GET:/api/{version}/ad_hoc_commands/{id}/stdout/
     * @secure
     */
    apiAdHocCommandsStdoutRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<UnifiedJobStdout, any>({
        path: `/api/${version}/ad_hoc_commands/${id}/stdout/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of applications. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of applications found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more application records. ## Results Each application data structure includes the following fields: * `id`: Database ID for this application. (integer) * `type`: Data type for this application. (choice) * `url`: URL for this application. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this application was created. (datetime) * `modified`: Timestamp when this application was last modified. (datetime) * `name`: Name of this application. (string) * `description`: Optional description of this application. (string) * `client_id`:  (string) * `client_secret`: Used for more stringent verification of access to an application when creating a token. (string) * `client_type`: Set to Public or Confidential depending on how secure the client device is. (choice) - `confidential`: Confidential - `public`: Public * `redirect_uris`: Allowed URIs list, space separated (string) * `authorization_grant_type`: The Grant type the user must use for acquire tokens for this application. (choice) - `authorization-code`: Authorization code - `password`: Resource owner password-based * `skip_authorization`: Set True to skip authorization step for completely trusted applications. (boolean) * `organization`: Organization containing this application. (id) ## Sorting To specify that applications are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiApplicationsList
     * @summary # List Applications:
     * @request GET:/api/{version}/applications/
     * @secure
     */
    apiApplicationsList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: OAuth2Application[]
        },
        any
      >({
        path: `/api/${version}/applications/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of applications. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of applications found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more application records. ## Results Each application data structure includes the following fields: * `id`: Database ID for this application. (integer) * `type`: Data type for this application. (choice) * `url`: URL for this application. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this application was created. (datetime) * `modified`: Timestamp when this application was last modified. (datetime) * `name`: Name of this application. (string) * `description`: Optional description of this application. (string) * `client_id`:  (string) * `client_secret`: Used for more stringent verification of access to an application when creating a token. (string) * `client_type`: Set to Public or Confidential depending on how secure the client device is. (choice) - `confidential`: Confidential - `public`: Public * `redirect_uris`: Allowed URIs list, space separated (string) * `authorization_grant_type`: The Grant type the user must use for acquire tokens for this application. (choice) - `authorization-code`: Authorization code - `password`: Resource owner password-based * `skip_authorization`: Set True to skip authorization step for completely trusted applications. (boolean) * `organization`: Organization containing this application. (id) ## Sorting To specify that applications are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiApplicationsCreate
     * @summary # List Applications:
     * @request POST:/api/{version}/applications/
     * @secure
     */
    apiApplicationsCreate: (version: string, data: OAuth2Application, params: RequestParams = {}) =>
      this.request<OAuth2Application, any>({
        path: `/api/${version}/applications/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single application record containing the following fields: * `id`: Database ID for this application. (integer) * `type`: Data type for this application. (choice) * `url`: URL for this application. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this application was created. (datetime) * `modified`: Timestamp when this application was last modified. (datetime) * `name`: Name of this application. (string) * `description`: Optional description of this application. (string) * `client_id`:  (string) * `client_secret`: Used for more stringent verification of access to an application when creating a token. (string) * `client_type`: Set to Public or Confidential depending on how secure the client device is. (choice) - `confidential`: Confidential - `public`: Public * `redirect_uris`: Allowed URIs list, space separated (string) * `authorization_grant_type`: The Grant type the user must use for acquire tokens for this application. (choice) - `authorization-code`: Authorization code - `password`: Resource owner password-based * `skip_authorization`: Set True to skip authorization step for completely trusted applications. (boolean) * `organization`: Organization containing this application. (id) # Update an Application: Make a PUT or PATCH request to this resource to update this application.  The following fields may be modified: * `name`: Name of this application. (string, required) * `description`: Optional description of this application. (string, default=`""`) * `client_type`: Set to Public or Confidential depending on how secure the client device is. (choice, required) - `confidential`: Confidential - `public`: Public * `redirect_uris`: Allowed URIs list, space separated (string, default=`""`) * `authorization_grant_type`: The Grant type the user must use for acquire tokens for this application. (choice, required) - `authorization-code`: Authorization code - `password`: Resource owner password-based * `skip_authorization`: Set True to skip authorization step for completely trusted applications. (boolean, default=`False`) * `organization`: Organization containing this application. (id, required) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete an Application: Make a DELETE request to this resource to delete this application.
     *
     * @tags api
     * @name ApiApplicationsRead
     * @summary # Retrieve an Application:
     * @request GET:/api/{version}/applications/{id}/
     * @secure
     */
    apiApplicationsRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<OAuth2Application, any>({
        path: `/api/${version}/applications/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single application record containing the following fields: * `id`: Database ID for this application. (integer) * `type`: Data type for this application. (choice) * `url`: URL for this application. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this application was created. (datetime) * `modified`: Timestamp when this application was last modified. (datetime) * `name`: Name of this application. (string) * `description`: Optional description of this application. (string) * `client_id`:  (string) * `client_secret`: Used for more stringent verification of access to an application when creating a token. (string) * `client_type`: Set to Public or Confidential depending on how secure the client device is. (choice) - `confidential`: Confidential - `public`: Public * `redirect_uris`: Allowed URIs list, space separated (string) * `authorization_grant_type`: The Grant type the user must use for acquire tokens for this application. (choice) - `authorization-code`: Authorization code - `password`: Resource owner password-based * `skip_authorization`: Set True to skip authorization step for completely trusted applications. (boolean) * `organization`: Organization containing this application. (id) # Update an Application: Make a PUT or PATCH request to this resource to update this application.  The following fields may be modified: * `name`: Name of this application. (string, required) * `description`: Optional description of this application. (string, default=`""`) * `client_type`: Set to Public or Confidential depending on how secure the client device is. (choice, required) - `confidential`: Confidential - `public`: Public * `redirect_uris`: Allowed URIs list, space separated (string, default=`""`) * `authorization_grant_type`: The Grant type the user must use for acquire tokens for this application. (choice, required) - `authorization-code`: Authorization code - `password`: Resource owner password-based * `skip_authorization`: Set True to skip authorization step for completely trusted applications. (boolean, default=`False`) * `organization`: Organization containing this application. (id, required) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete an Application: Make a DELETE request to this resource to delete this application.
     *
     * @tags api
     * @name ApiApplicationsUpdate
     * @summary # Retrieve an Application:
     * @request PUT:/api/{version}/applications/{id}/
     * @secure
     */
    apiApplicationsUpdate: (
      id: string,
      version: string,
      data: OAuth2Application,
      params: RequestParams = {}
    ) =>
      this.request<OAuth2Application, any>({
        path: `/api/${version}/applications/${id}/`,
        method: 'PUT',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single application record containing the following fields: * `id`: Database ID for this application. (integer) * `type`: Data type for this application. (choice) * `url`: URL for this application. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this application was created. (datetime) * `modified`: Timestamp when this application was last modified. (datetime) * `name`: Name of this application. (string) * `description`: Optional description of this application. (string) * `client_id`:  (string) * `client_secret`: Used for more stringent verification of access to an application when creating a token. (string) * `client_type`: Set to Public or Confidential depending on how secure the client device is. (choice) - `confidential`: Confidential - `public`: Public * `redirect_uris`: Allowed URIs list, space separated (string) * `authorization_grant_type`: The Grant type the user must use for acquire tokens for this application. (choice) - `authorization-code`: Authorization code - `password`: Resource owner password-based * `skip_authorization`: Set True to skip authorization step for completely trusted applications. (boolean) * `organization`: Organization containing this application. (id) # Update an Application: Make a PUT or PATCH request to this resource to update this application.  The following fields may be modified: * `name`: Name of this application. (string, required) * `description`: Optional description of this application. (string, default=`""`) * `client_type`: Set to Public or Confidential depending on how secure the client device is. (choice, required) - `confidential`: Confidential - `public`: Public * `redirect_uris`: Allowed URIs list, space separated (string, default=`""`) * `authorization_grant_type`: The Grant type the user must use for acquire tokens for this application. (choice, required) - `authorization-code`: Authorization code - `password`: Resource owner password-based * `skip_authorization`: Set True to skip authorization step for completely trusted applications. (boolean, default=`False`) * `organization`: Organization containing this application. (id, required) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete an Application: Make a DELETE request to this resource to delete this application.
     *
     * @tags api
     * @name ApiApplicationsPartialUpdate
     * @summary # Retrieve an Application:
     * @request PATCH:/api/{version}/applications/{id}/
     * @secure
     */
    apiApplicationsPartialUpdate: (
      id: string,
      version: string,
      data: OAuth2Application,
      params: RequestParams = {}
    ) =>
      this.request<OAuth2Application, any>({
        path: `/api/${version}/applications/${id}/`,
        method: 'PATCH',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single application record containing the following fields: * `id`: Database ID for this application. (integer) * `type`: Data type for this application. (choice) * `url`: URL for this application. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this application was created. (datetime) * `modified`: Timestamp when this application was last modified. (datetime) * `name`: Name of this application. (string) * `description`: Optional description of this application. (string) * `client_id`:  (string) * `client_secret`: Used for more stringent verification of access to an application when creating a token. (string) * `client_type`: Set to Public or Confidential depending on how secure the client device is. (choice) - `confidential`: Confidential - `public`: Public * `redirect_uris`: Allowed URIs list, space separated (string) * `authorization_grant_type`: The Grant type the user must use for acquire tokens for this application. (choice) - `authorization-code`: Authorization code - `password`: Resource owner password-based * `skip_authorization`: Set True to skip authorization step for completely trusted applications. (boolean) * `organization`: Organization containing this application. (id) # Update an Application: Make a PUT or PATCH request to this resource to update this application.  The following fields may be modified: * `name`: Name of this application. (string, required) * `description`: Optional description of this application. (string, default=`""`) * `client_type`: Set to Public or Confidential depending on how secure the client device is. (choice, required) - `confidential`: Confidential - `public`: Public * `redirect_uris`: Allowed URIs list, space separated (string, default=`""`) * `authorization_grant_type`: The Grant type the user must use for acquire tokens for this application. (choice, required) - `authorization-code`: Authorization code - `password`: Resource owner password-based * `skip_authorization`: Set True to skip authorization step for completely trusted applications. (boolean, default=`False`) * `organization`: Organization containing this application. (id, required) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete an Application: Make a DELETE request to this resource to delete this application.
     *
     * @tags api
     * @name ApiApplicationsDelete
     * @summary # Retrieve an Application:
     * @request DELETE:/api/{version}/applications/{id}/
     * @secure
     */
    apiApplicationsDelete: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/applications/${id}/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of activity streams associated with the selected application. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of activity streams found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more activity stream records. ## Results Each activity stream data structure includes the following fields: * `id`: Database ID for this activity stream. (integer) * `type`: Data type for this activity stream. (choice) * `url`: URL for this activity stream. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `timestamp`:  (datetime) * `operation`: The action taken with respect to the given object(s). (choice) - `create`: Entity Created - `update`: Entity Updated - `delete`: Entity Deleted - `associate`: Entity Associated with another Entity - `disassociate`: Entity was Disassociated with another Entity * `changes`: A summary of the new and changed values when an object is created, updated, or deleted (json) * `object1`: For create, update, and delete events this is the object type that was affected. For associate and disassociate events this is the object type associated or disassociated with object2. (string) * `object2`: Unpopulated for create, update, and delete events. For associate and disassociate events this is the object type that object1 is being associated with. (string) * `object_association`: When present, shows the field name of the role or relationship that changed. (field) * `action_node`: The cluster node the activity took place on. (string) * `object_type`: When present, shows the model on which the role or relationship was defined. (field) ## Sorting To specify that activity streams are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiApplicationsActivityStreamList
     * @summary # List Activity Streams for an Application:
     * @request GET:/api/{version}/applications/{id}/activity_stream/
     * @secure
     */
    apiApplicationsActivityStreamList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ActivityStream[]
        },
        any
      >({
        path: `/api/${version}/applications/${id}/activity_stream/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of access tokens associated with the selected application. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of access tokens found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more access token records. ## Results Each access token data structure includes the following fields: * `id`: Database ID for this access token. (integer) * `type`: Data type for this access token. (choice) * `url`: URL for this access token. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this access token was created. (datetime) * `modified`: Timestamp when this access token was last modified. (datetime) * `description`: Optional description of this access token. (string) * `user`: The user representing the token owner (id) * `token`:  (string) * `refresh_token`:  (field) * `application`:  (id) * `expires`:  (datetime) * `scope`: Allowed scopes, further restricts user&#x27;s permissions. Must be a simple space-separated string with allowed scopes [&#x27;read&#x27;, &#x27;write&#x27;]. (string) ## Sorting To specify that access tokens are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiApplicationsTokensList
     * @summary # List Access Tokens for an Application:
     * @request GET:/api/{version}/applications/{id}/tokens/
     * @secure
     */
    apiApplicationsTokensList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: OAuth2Token[]
        },
        any
      >({
        path: `/api/${version}/applications/${id}/tokens/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of access tokens associated with the selected application. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of access tokens found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more access token records. ## Results Each access token data structure includes the following fields: * `id`: Database ID for this access token. (integer) * `type`: Data type for this access token. (choice) * `url`: URL for this access token. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this access token was created. (datetime) * `modified`: Timestamp when this access token was last modified. (datetime) * `description`: Optional description of this access token. (string) * `user`: The user representing the token owner (id) * `token`:  (string) * `refresh_token`:  (field) * `application`:  (id) * `expires`:  (datetime) * `scope`: Allowed scopes, further restricts user&#x27;s permissions. Must be a simple space-separated string with allowed scopes [&#x27;read&#x27;, &#x27;write&#x27;]. (string) ## Sorting To specify that access tokens are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiApplicationsTokensCreate
     * @summary # List Access Tokens for an Application:
     * @request POST:/api/{version}/applications/{id}/tokens/
     * @secure
     */
    apiApplicationsTokensCreate: (
      id: string,
      version: string,
      data: OAuth2Token,
      params: RequestParams = {}
    ) =>
      this.request<OAuth2Token, any>({
        path: `/api/${version}/applications/${id}/tokens/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description List enabled single-sign-on endpoints
     *
     * @tags api
     * @name ApiAuthList
     * @request GET:/api/{version}/auth/
     * @secure
     */
    apiAuthList: (version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/auth/`,
        method: 'GET',
        secure: true,
        ...params,
      }),

    /**
     * @description Return various sitewide configuration settings
     *
     * @tags api
     * @name ApiConfigList
     * @request GET:/api/{version}/config/
     * @secure
     */
    apiConfigList: (version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/config/`,
        method: 'GET',
        secure: true,
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiConfigCreate
     * @request POST:/api/{version}/config/
     * @secure
     */
    apiConfigCreate: (version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/config/`,
        method: 'POST',
        secure: true,
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiConfigDelete
     * @request DELETE:/api/{version}/config/
     * @secure
     */
    apiConfigDelete: (version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/config/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiConfigAttachCreate
     * @request POST:/api/{version}/config/attach/
     * @secure
     */
    apiConfigAttachCreate: (version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/config/attach/`,
        method: 'POST',
        secure: true,
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiConfigSubscriptionsCreate
     * @request POST:/api/{version}/config/subscriptions/
     * @secure
     */
    apiConfigSubscriptionsCreate: (version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/config/subscriptions/`,
        method: 'POST',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of credential input sources. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of credential input sources found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more credential input source records. ## Results Each credential input source data structure includes the following fields: * `id`: Database ID for this credential input source. (integer) * `type`: Data type for this credential input source. (choice) * `url`: URL for this credential input source. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential input source was created. (datetime) * `modified`: Timestamp when this credential input source was last modified. (datetime) * `description`: Optional description of this credential input source. (string) * `input_field_name`:  (string) * `metadata`:  (json) * `target_credential`:  (id) * `source_credential`:  (id) ## Sorting To specify that credential input sources are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiCredentialInputSourcesList
     * @summary # List Credential Input Sources:
     * @request GET:/api/{version}/credential_input_sources/
     * @secure
     */
    apiCredentialInputSourcesList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: CredentialInputSource[]
        },
        any
      >({
        path: `/api/${version}/credential_input_sources/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of credential input sources. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of credential input sources found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more credential input source records. ## Results Each credential input source data structure includes the following fields: * `id`: Database ID for this credential input source. (integer) * `type`: Data type for this credential input source. (choice) * `url`: URL for this credential input source. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential input source was created. (datetime) * `modified`: Timestamp when this credential input source was last modified. (datetime) * `description`: Optional description of this credential input source. (string) * `input_field_name`:  (string) * `metadata`:  (json) * `target_credential`:  (id) * `source_credential`:  (id) ## Sorting To specify that credential input sources are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiCredentialInputSourcesCreate
     * @summary # List Credential Input Sources:
     * @request POST:/api/{version}/credential_input_sources/
     * @secure
     */
    apiCredentialInputSourcesCreate: (
      version: string,
      data: CredentialInputSource,
      params: RequestParams = {}
    ) =>
      this.request<CredentialInputSource, any>({
        path: `/api/${version}/credential_input_sources/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single credential input source record containing the following fields: * `id`: Database ID for this credential input source. (integer) * `type`: Data type for this credential input source. (choice) * `url`: URL for this credential input source. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential input source was created. (datetime) * `modified`: Timestamp when this credential input source was last modified. (datetime) * `description`: Optional description of this credential input source. (string) * `input_field_name`:  (string) * `metadata`:  (json) * `target_credential`:  (id) * `source_credential`:  (id) # Update a Credential Input Source: Make a PUT or PATCH request to this resource to update this credential input source.  The following fields may be modified: * `description`: Optional description of this credential input source. (string, default=`""`) * `input_field_name`:  (string, required) * `metadata`:  (json, default=`{}`) * `target_credential`:  (id, required) * `source_credential`:  (id, required) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Credential Input Source: Make a DELETE request to this resource to delete this credential input source.
     *
     * @tags api
     * @name ApiCredentialInputSourcesRead
     * @summary # Retrieve a Credential Input Source:
     * @request GET:/api/{version}/credential_input_sources/{id}/
     * @secure
     */
    apiCredentialInputSourcesRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<CredentialInputSource, any>({
        path: `/api/${version}/credential_input_sources/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single credential input source record containing the following fields: * `id`: Database ID for this credential input source. (integer) * `type`: Data type for this credential input source. (choice) * `url`: URL for this credential input source. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential input source was created. (datetime) * `modified`: Timestamp when this credential input source was last modified. (datetime) * `description`: Optional description of this credential input source. (string) * `input_field_name`:  (string) * `metadata`:  (json) * `target_credential`:  (id) * `source_credential`:  (id) # Update a Credential Input Source: Make a PUT or PATCH request to this resource to update this credential input source.  The following fields may be modified: * `description`: Optional description of this credential input source. (string, default=`""`) * `input_field_name`:  (string, required) * `metadata`:  (json, default=`{}`) * `target_credential`:  (id, required) * `source_credential`:  (id, required) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Credential Input Source: Make a DELETE request to this resource to delete this credential input source.
     *
     * @tags api
     * @name ApiCredentialInputSourcesUpdate
     * @summary # Retrieve a Credential Input Source:
     * @request PUT:/api/{version}/credential_input_sources/{id}/
     * @secure
     */
    apiCredentialInputSourcesUpdate: (
      id: string,
      version: string,
      data: CredentialInputSource,
      params: RequestParams = {}
    ) =>
      this.request<CredentialInputSource, any>({
        path: `/api/${version}/credential_input_sources/${id}/`,
        method: 'PUT',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single credential input source record containing the following fields: * `id`: Database ID for this credential input source. (integer) * `type`: Data type for this credential input source. (choice) * `url`: URL for this credential input source. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential input source was created. (datetime) * `modified`: Timestamp when this credential input source was last modified. (datetime) * `description`: Optional description of this credential input source. (string) * `input_field_name`:  (string) * `metadata`:  (json) * `target_credential`:  (id) * `source_credential`:  (id) # Update a Credential Input Source: Make a PUT or PATCH request to this resource to update this credential input source.  The following fields may be modified: * `description`: Optional description of this credential input source. (string, default=`""`) * `input_field_name`:  (string, required) * `metadata`:  (json, default=`{}`) * `target_credential`:  (id, required) * `source_credential`:  (id, required) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Credential Input Source: Make a DELETE request to this resource to delete this credential input source.
     *
     * @tags api
     * @name ApiCredentialInputSourcesPartialUpdate
     * @summary # Retrieve a Credential Input Source:
     * @request PATCH:/api/{version}/credential_input_sources/{id}/
     * @secure
     */
    apiCredentialInputSourcesPartialUpdate: (
      id: string,
      version: string,
      data: CredentialInputSource,
      params: RequestParams = {}
    ) =>
      this.request<CredentialInputSource, any>({
        path: `/api/${version}/credential_input_sources/${id}/`,
        method: 'PATCH',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single credential input source record containing the following fields: * `id`: Database ID for this credential input source. (integer) * `type`: Data type for this credential input source. (choice) * `url`: URL for this credential input source. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential input source was created. (datetime) * `modified`: Timestamp when this credential input source was last modified. (datetime) * `description`: Optional description of this credential input source. (string) * `input_field_name`:  (string) * `metadata`:  (json) * `target_credential`:  (id) * `source_credential`:  (id) # Update a Credential Input Source: Make a PUT or PATCH request to this resource to update this credential input source.  The following fields may be modified: * `description`: Optional description of this credential input source. (string, default=`""`) * `input_field_name`:  (string, required) * `metadata`:  (json, default=`{}`) * `target_credential`:  (id, required) * `source_credential`:  (id, required) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Credential Input Source: Make a DELETE request to this resource to delete this credential input source.
     *
     * @tags api
     * @name ApiCredentialInputSourcesDelete
     * @summary # Retrieve a Credential Input Source:
     * @request DELETE:/api/{version}/credential_input_sources/{id}/
     * @secure
     */
    apiCredentialInputSourcesDelete: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/credential_input_sources/${id}/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of credential types. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of credential types found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more credential type records. ## Results Each credential type data structure includes the following fields: * `id`: Database ID for this credential type. (integer) * `type`: Data type for this credential type. (choice) * `url`: URL for this credential type. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential type was created. (datetime) * `modified`: Timestamp when this credential type was last modified. (datetime) * `name`: Name of this credential type. (string) * `description`: Optional description of this credential type. (string) * `kind`:  (choice) - `ssh`: Machine - `vault`: Vault - `net`: Network - `scm`: Source Control - `cloud`: Cloud - `registry`: Container Registry - `token`: Personal Access Token - `insights`: Insights - `external`: External - `kubernetes`: Kubernetes - `galaxy`: Galaxy/Automation Hub - `cryptography`: Cryptography * `namespace`:  (string) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `injectors`: Enter injectors using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) ## Sorting To specify that credential types are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiCredentialTypesList
     * @summary # List Credential Types:
     * @request GET:/api/{version}/credential_types/
     * @secure
     */
    apiCredentialTypesList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: CredentialType[]
        },
        any
      >({
        path: `/api/${version}/credential_types/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of credential types. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of credential types found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more credential type records. ## Results Each credential type data structure includes the following fields: * `id`: Database ID for this credential type. (integer) * `type`: Data type for this credential type. (choice) * `url`: URL for this credential type. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential type was created. (datetime) * `modified`: Timestamp when this credential type was last modified. (datetime) * `name`: Name of this credential type. (string) * `description`: Optional description of this credential type. (string) * `kind`:  (choice) - `ssh`: Machine - `vault`: Vault - `net`: Network - `scm`: Source Control - `cloud`: Cloud - `registry`: Container Registry - `token`: Personal Access Token - `insights`: Insights - `external`: External - `kubernetes`: Kubernetes - `galaxy`: Galaxy/Automation Hub - `cryptography`: Cryptography * `namespace`:  (string) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `injectors`: Enter injectors using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) ## Sorting To specify that credential types are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiCredentialTypesCreate
     * @summary # List Credential Types:
     * @request POST:/api/{version}/credential_types/
     * @secure
     */
    apiCredentialTypesCreate: (version: string, data: CredentialType, params: RequestParams = {}) =>
      this.request<CredentialType, any>({
        path: `/api/${version}/credential_types/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single credential type record containing the following fields: * `id`: Database ID for this credential type. (integer) * `type`: Data type for this credential type. (choice) * `url`: URL for this credential type. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential type was created. (datetime) * `modified`: Timestamp when this credential type was last modified. (datetime) * `name`: Name of this credential type. (string) * `description`: Optional description of this credential type. (string) * `kind`:  (choice) - `ssh`: Machine - `vault`: Vault - `net`: Network - `scm`: Source Control - `cloud`: Cloud - `registry`: Container Registry - `token`: Personal Access Token - `insights`: Insights - `external`: External - `kubernetes`: Kubernetes - `galaxy`: Galaxy/Automation Hub - `cryptography`: Cryptography * `namespace`:  (string) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `injectors`: Enter injectors using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) # Update a Credential Type: Make a PUT or PATCH request to this resource to update this credential type.  The following fields may be modified: * `name`: Name of this credential type. (string, required) * `description`: Optional description of this credential type. (string, default=`""`) * `kind`:  (choice, required) - `net`: Network - `cloud`: Cloud * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json, default=`{}`) * `injectors`: Enter injectors using either JSON or YAML syntax. Refer to the documentation for example syntax. (json, default=`{}`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Credential Type: Make a DELETE request to this resource to delete this credential type.
     *
     * @tags api
     * @name ApiCredentialTypesRead
     * @summary # Retrieve a Credential Type:
     * @request GET:/api/{version}/credential_types/{id}/
     * @secure
     */
    apiCredentialTypesRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<CredentialType, any>({
        path: `/api/${version}/credential_types/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single credential type record containing the following fields: * `id`: Database ID for this credential type. (integer) * `type`: Data type for this credential type. (choice) * `url`: URL for this credential type. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential type was created. (datetime) * `modified`: Timestamp when this credential type was last modified. (datetime) * `name`: Name of this credential type. (string) * `description`: Optional description of this credential type. (string) * `kind`:  (choice) - `ssh`: Machine - `vault`: Vault - `net`: Network - `scm`: Source Control - `cloud`: Cloud - `registry`: Container Registry - `token`: Personal Access Token - `insights`: Insights - `external`: External - `kubernetes`: Kubernetes - `galaxy`: Galaxy/Automation Hub - `cryptography`: Cryptography * `namespace`:  (string) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `injectors`: Enter injectors using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) # Update a Credential Type: Make a PUT or PATCH request to this resource to update this credential type.  The following fields may be modified: * `name`: Name of this credential type. (string, required) * `description`: Optional description of this credential type. (string, default=`""`) * `kind`:  (choice, required) - `net`: Network - `cloud`: Cloud * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json, default=`{}`) * `injectors`: Enter injectors using either JSON or YAML syntax. Refer to the documentation for example syntax. (json, default=`{}`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Credential Type: Make a DELETE request to this resource to delete this credential type.
     *
     * @tags api
     * @name ApiCredentialTypesUpdate
     * @summary # Retrieve a Credential Type:
     * @request PUT:/api/{version}/credential_types/{id}/
     * @secure
     */
    apiCredentialTypesUpdate: (
      id: string,
      version: string,
      data: CredentialType,
      params: RequestParams = {}
    ) =>
      this.request<CredentialType, any>({
        path: `/api/${version}/credential_types/${id}/`,
        method: 'PUT',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single credential type record containing the following fields: * `id`: Database ID for this credential type. (integer) * `type`: Data type for this credential type. (choice) * `url`: URL for this credential type. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential type was created. (datetime) * `modified`: Timestamp when this credential type was last modified. (datetime) * `name`: Name of this credential type. (string) * `description`: Optional description of this credential type. (string) * `kind`:  (choice) - `ssh`: Machine - `vault`: Vault - `net`: Network - `scm`: Source Control - `cloud`: Cloud - `registry`: Container Registry - `token`: Personal Access Token - `insights`: Insights - `external`: External - `kubernetes`: Kubernetes - `galaxy`: Galaxy/Automation Hub - `cryptography`: Cryptography * `namespace`:  (string) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `injectors`: Enter injectors using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) # Update a Credential Type: Make a PUT or PATCH request to this resource to update this credential type.  The following fields may be modified: * `name`: Name of this credential type. (string, required) * `description`: Optional description of this credential type. (string, default=`""`) * `kind`:  (choice, required) - `net`: Network - `cloud`: Cloud * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json, default=`{}`) * `injectors`: Enter injectors using either JSON or YAML syntax. Refer to the documentation for example syntax. (json, default=`{}`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Credential Type: Make a DELETE request to this resource to delete this credential type.
     *
     * @tags api
     * @name ApiCredentialTypesPartialUpdate
     * @summary # Retrieve a Credential Type:
     * @request PATCH:/api/{version}/credential_types/{id}/
     * @secure
     */
    apiCredentialTypesPartialUpdate: (
      id: string,
      version: string,
      data: CredentialType,
      params: RequestParams = {}
    ) =>
      this.request<CredentialType, any>({
        path: `/api/${version}/credential_types/${id}/`,
        method: 'PATCH',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single credential type record containing the following fields: * `id`: Database ID for this credential type. (integer) * `type`: Data type for this credential type. (choice) * `url`: URL for this credential type. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential type was created. (datetime) * `modified`: Timestamp when this credential type was last modified. (datetime) * `name`: Name of this credential type. (string) * `description`: Optional description of this credential type. (string) * `kind`:  (choice) - `ssh`: Machine - `vault`: Vault - `net`: Network - `scm`: Source Control - `cloud`: Cloud - `registry`: Container Registry - `token`: Personal Access Token - `insights`: Insights - `external`: External - `kubernetes`: Kubernetes - `galaxy`: Galaxy/Automation Hub - `cryptography`: Cryptography * `namespace`:  (string) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `injectors`: Enter injectors using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) # Update a Credential Type: Make a PUT or PATCH request to this resource to update this credential type.  The following fields may be modified: * `name`: Name of this credential type. (string, required) * `description`: Optional description of this credential type. (string, default=`""`) * `kind`:  (choice, required) - `net`: Network - `cloud`: Cloud * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json, default=`{}`) * `injectors`: Enter injectors using either JSON or YAML syntax. Refer to the documentation for example syntax. (json, default=`{}`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Credential Type: Make a DELETE request to this resource to delete this credential type.
     *
     * @tags api
     * @name ApiCredentialTypesDelete
     * @summary # Retrieve a Credential Type:
     * @request DELETE:/api/{version}/credential_types/{id}/
     * @secure
     */
    apiCredentialTypesDelete: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/credential_types/${id}/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of activity streams associated with the selected credential type. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of activity streams found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more activity stream records. ## Results Each activity stream data structure includes the following fields: * `id`: Database ID for this activity stream. (integer) * `type`: Data type for this activity stream. (choice) * `url`: URL for this activity stream. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `timestamp`:  (datetime) * `operation`: The action taken with respect to the given object(s). (choice) - `create`: Entity Created - `update`: Entity Updated - `delete`: Entity Deleted - `associate`: Entity Associated with another Entity - `disassociate`: Entity was Disassociated with another Entity * `changes`: A summary of the new and changed values when an object is created, updated, or deleted (json) * `object1`: For create, update, and delete events this is the object type that was affected. For associate and disassociate events this is the object type associated or disassociated with object2. (string) * `object2`: Unpopulated for create, update, and delete events. For associate and disassociate events this is the object type that object1 is being associated with. (string) * `object_association`: When present, shows the field name of the role or relationship that changed. (field) * `action_node`: The cluster node the activity took place on. (string) * `object_type`: When present, shows the model on which the role or relationship was defined. (field) ## Sorting To specify that activity streams are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiCredentialTypesActivityStreamList
     * @summary # List Activity Streams for a Credential Type:
     * @request GET:/api/{version}/credential_types/{id}/activity_stream/
     * @secure
     */
    apiCredentialTypesActivityStreamList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ActivityStream[]
        },
        any
      >({
        path: `/api/${version}/credential_types/${id}/activity_stream/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of credentials associated with the selected credential type. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of credentials found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more credential records. ## Results Each credential data structure includes the following fields: * `id`: Database ID for this credential. (integer) * `type`: Data type for this credential. (choice) * `url`: URL for this credential. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential was created. (datetime) * `modified`: Timestamp when this credential was last modified. (datetime) * `name`: Name of this credential. (string) * `description`: Optional description of this credential. (string) * `organization`:  (id) * `credential_type`: Specify the type of credential you want to create. Refer to the documentation for details on each type. (id) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `kind`:  (field) * `cloud`:  (field) * `kubernetes`:  (field) ## Sorting To specify that credentials are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiCredentialTypesCredentialsList
     * @summary # List Credentials for a Credential Type:
     * @request GET:/api/{version}/credential_types/{id}/credentials/
     * @secure
     */
    apiCredentialTypesCredentialsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Credential[]
        },
        any
      >({
        path: `/api/${version}/credential_types/${id}/credentials/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of credentials associated with the selected credential type. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of credentials found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more credential records. ## Results Each credential data structure includes the following fields: * `id`: Database ID for this credential. (integer) * `type`: Data type for this credential. (choice) * `url`: URL for this credential. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential was created. (datetime) * `modified`: Timestamp when this credential was last modified. (datetime) * `name`: Name of this credential. (string) * `description`: Optional description of this credential. (string) * `organization`:  (id) * `credential_type`: Specify the type of credential you want to create. Refer to the documentation for details on each type. (id) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `kind`:  (field) * `cloud`:  (field) * `kubernetes`:  (field) ## Sorting To specify that credentials are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiCredentialTypesCredentialsCreate
     * @summary # List Credentials for a Credential Type:
     * @request POST:/api/{version}/credential_types/{id}/credentials/
     * @secure
     */
    apiCredentialTypesCredentialsCreate: (
      id: string,
      version: string,
      data: Credential,
      params: RequestParams = {}
    ) =>
      this.request<Credential, any>({
        path: `/api/${version}/credential_types/${id}/credentials/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single credential type record containing the following fields:
     *
     * @tags api
     * @name ApiCredentialTypesTestRead
     * @summary # Retrieve a Credential Type:
     * @request GET:/api/{version}/credential_types/{id}/test/
     * @secure
     */
    apiCredentialTypesTestRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<Empty, any>({
        path: `/api/${version}/credential_types/${id}/test/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single credential type record containing the following fields:
     *
     * @tags api
     * @name ApiCredentialTypesTestCreate
     * @summary # Retrieve a Credential Type:
     * @request POST:/api/{version}/credential_types/{id}/test/
     * @secure
     */
    apiCredentialTypesTestCreate: (
      id: string,
      version: string,
      data: Empty,
      params: RequestParams = {}
    ) =>
      this.request<Empty, any>({
        path: `/api/${version}/credential_types/${id}/test/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of credentials. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of credentials found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more credential records. ## Results Each credential data structure includes the following fields: * `id`: Database ID for this credential. (integer) * `type`: Data type for this credential. (choice) * `url`: URL for this credential. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential was created. (datetime) * `modified`: Timestamp when this credential was last modified. (datetime) * `name`: Name of this credential. (string) * `description`: Optional description of this credential. (string) * `organization`: Inherit permissions from organization roles. If provided on creation, do not give either user or team. (id) * `credential_type`: Specify the type of credential you want to create. Refer to the documentation for details on each type. (id) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `kind`:  (field) * `cloud`:  (field) * `kubernetes`:  (field) ## Sorting To specify that credentials are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiCredentialsList
     * @summary # List Credentials:
     * @request GET:/api/{version}/credentials/
     * @secure
     */
    apiCredentialsList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: CredentialSerializerCreate[]
        },
        any
      >({
        path: `/api/${version}/credentials/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of credentials. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of credentials found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more credential records. ## Results Each credential data structure includes the following fields: * `id`: Database ID for this credential. (integer) * `type`: Data type for this credential. (choice) * `url`: URL for this credential. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential was created. (datetime) * `modified`: Timestamp when this credential was last modified. (datetime) * `name`: Name of this credential. (string) * `description`: Optional description of this credential. (string) * `organization`: Inherit permissions from organization roles. If provided on creation, do not give either user or team. (id) * `credential_type`: Specify the type of credential you want to create. Refer to the documentation for details on each type. (id) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `kind`:  (field) * `cloud`:  (field) * `kubernetes`:  (field) ## Sorting To specify that credentials are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiCredentialsCreate
     * @summary # List Credentials:
     * @request POST:/api/{version}/credentials/
     * @secure
     */
    apiCredentialsCreate: (
      version: string,
      data: CredentialSerializerCreate,
      params: RequestParams = {}
    ) =>
      this.request<CredentialSerializerCreate, any>({
        path: `/api/${version}/credentials/`,
        method: 'POST',
        body: data,
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single credential record containing the following fields: * `id`: Database ID for this credential. (integer) * `type`: Data type for this credential. (choice) * `url`: URL for this credential. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential was created. (datetime) * `modified`: Timestamp when this credential was last modified. (datetime) * `name`: Name of this credential. (string) * `description`: Optional description of this credential. (string) * `organization`:  (id) * `credential_type`: Specify the type of credential you want to create. Refer to the documentation for details on each type. (id) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `kind`:  (field) * `cloud`:  (field) * `kubernetes`:  (field) # Update a Credential: Make a PUT or PATCH request to this resource to update this credential.  The following fields may be modified: * `name`: Name of this credential. (string, required) * `description`: Optional description of this credential. (string, default=`""`) * `organization`:  (id, default=`None`) * `credential_type`: Specify the type of credential you want to create. Refer to the documentation for details on each type. (id, required) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json, default=`{}`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Credential: Make a DELETE request to this resource to delete this credential.
     *
     * @tags api
     * @name ApiCredentialsRead
     * @summary # Retrieve a Credential:
     * @request GET:/api/{version}/credentials/{id}/
     * @secure
     */
    apiCredentialsRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<Credential, any>({
        path: `/api/${version}/credentials/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single credential record containing the following fields: * `id`: Database ID for this credential. (integer) * `type`: Data type for this credential. (choice) * `url`: URL for this credential. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential was created. (datetime) * `modified`: Timestamp when this credential was last modified. (datetime) * `name`: Name of this credential. (string) * `description`: Optional description of this credential. (string) * `organization`:  (id) * `credential_type`: Specify the type of credential you want to create. Refer to the documentation for details on each type. (id) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `kind`:  (field) * `cloud`:  (field) * `kubernetes`:  (field) # Update a Credential: Make a PUT or PATCH request to this resource to update this credential.  The following fields may be modified: * `name`: Name of this credential. (string, required) * `description`: Optional description of this credential. (string, default=`""`) * `organization`:  (id, default=`None`) * `credential_type`: Specify the type of credential you want to create. Refer to the documentation for details on each type. (id, required) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json, default=`{}`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Credential: Make a DELETE request to this resource to delete this credential.
     *
     * @tags api
     * @name ApiCredentialsUpdate
     * @summary # Retrieve a Credential:
     * @request PUT:/api/{version}/credentials/{id}/
     * @secure
     */
    apiCredentialsUpdate: (
      id: string,
      version: string,
      data: Credential,
      params: RequestParams = {}
    ) =>
      this.request<Credential, any>({
        path: `/api/${version}/credentials/${id}/`,
        method: 'PUT',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single credential record containing the following fields: * `id`: Database ID for this credential. (integer) * `type`: Data type for this credential. (choice) * `url`: URL for this credential. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential was created. (datetime) * `modified`: Timestamp when this credential was last modified. (datetime) * `name`: Name of this credential. (string) * `description`: Optional description of this credential. (string) * `organization`:  (id) * `credential_type`: Specify the type of credential you want to create. Refer to the documentation for details on each type. (id) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `kind`:  (field) * `cloud`:  (field) * `kubernetes`:  (field) # Update a Credential: Make a PUT or PATCH request to this resource to update this credential.  The following fields may be modified: * `name`: Name of this credential. (string, required) * `description`: Optional description of this credential. (string, default=`""`) * `organization`:  (id, default=`None`) * `credential_type`: Specify the type of credential you want to create. Refer to the documentation for details on each type. (id, required) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json, default=`{}`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Credential: Make a DELETE request to this resource to delete this credential.
     *
     * @tags api
     * @name ApiCredentialsPartialUpdate
     * @summary # Retrieve a Credential:
     * @request PATCH:/api/{version}/credentials/{id}/
     * @secure
     */
    apiCredentialsPartialUpdate: (
      id: string,
      version: string,
      data: Credential,
      params: RequestParams = {}
    ) =>
      this.request<Credential, any>({
        path: `/api/${version}/credentials/${id}/`,
        method: 'PATCH',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single credential record containing the following fields: * `id`: Database ID for this credential. (integer) * `type`: Data type for this credential. (choice) * `url`: URL for this credential. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential was created. (datetime) * `modified`: Timestamp when this credential was last modified. (datetime) * `name`: Name of this credential. (string) * `description`: Optional description of this credential. (string) * `organization`:  (id) * `credential_type`: Specify the type of credential you want to create. Refer to the documentation for details on each type. (id) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `kind`:  (field) * `cloud`:  (field) * `kubernetes`:  (field) # Update a Credential: Make a PUT or PATCH request to this resource to update this credential.  The following fields may be modified: * `name`: Name of this credential. (string, required) * `description`: Optional description of this credential. (string, default=`""`) * `organization`:  (id, default=`None`) * `credential_type`: Specify the type of credential you want to create. Refer to the documentation for details on each type. (id, required) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json, default=`{}`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Credential: Make a DELETE request to this resource to delete this credential.
     *
     * @tags api
     * @name ApiCredentialsDelete
     * @summary # Retrieve a Credential:
     * @request DELETE:/api/{version}/credentials/{id}/
     * @secure
     */
    apiCredentialsDelete: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/credentials/${id}/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of users. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of users found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more user records. ## Results Each user data structure includes the following fields: * `id`: Database ID for this user. (integer) * `type`: Data type for this user. (choice) * `url`: URL for this user. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this user was created. (datetime) * `modified`: Timestamp when this user was last modified. (datetime) * `username`: Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (string) * `first_name`:  (string) * `last_name`:  (string) * `email`:  (string) * `is_superuser`: Designates that this user has all permissions without explicitly assigning them. (boolean) * `is_system_auditor`:  (boolean) * `ldap_dn`:  (string) * `last_login`:  (datetime) * `external_account`: Set if the account is managed by an external service (field) ## Sorting To specify that users are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=username Prefix the field name with a dash `-` to sort in reverse: ?order_by=-username Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=username,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiCredentialsAccessListList
     * @summary # List Users:
     * @request GET:/api/{version}/credentials/{id}/access_list/
     * @secure
     */
    apiCredentialsAccessListList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ResourceAccessListElement[]
        },
        any
      >({
        path: `/api/${version}/credentials/${id}/access_list/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of activity streams associated with the selected credential. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of activity streams found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more activity stream records. ## Results Each activity stream data structure includes the following fields: * `id`: Database ID for this activity stream. (integer) * `type`: Data type for this activity stream. (choice) * `url`: URL for this activity stream. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `timestamp`:  (datetime) * `operation`: The action taken with respect to the given object(s). (choice) - `create`: Entity Created - `update`: Entity Updated - `delete`: Entity Deleted - `associate`: Entity Associated with another Entity - `disassociate`: Entity was Disassociated with another Entity * `changes`: A summary of the new and changed values when an object is created, updated, or deleted (json) * `object1`: For create, update, and delete events this is the object type that was affected. For associate and disassociate events this is the object type associated or disassociated with object2. (string) * `object2`: Unpopulated for create, update, and delete events. For associate and disassociate events this is the object type that object1 is being associated with. (string) * `object_association`: When present, shows the field name of the role or relationship that changed. (field) * `action_node`: The cluster node the activity took place on. (string) * `object_type`: When present, shows the model on which the role or relationship was defined. (field) ## Sorting To specify that activity streams are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiCredentialsActivityStreamList
     * @summary # List Activity Streams for a Credential:
     * @request GET:/api/{version}/credentials/{id}/activity_stream/
     * @secure
     */
    apiCredentialsActivityStreamList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ActivityStream[]
        },
        any
      >({
        path: `/api/${version}/credentials/${id}/activity_stream/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiCredentialsCopyList
     * @request GET:/api/{version}/credentials/{id}/copy/
     * @secure
     */
    apiCredentialsCopyList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Copy[]
        },
        any
      >({
        path: `/api/${version}/credentials/${id}/copy/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiCredentialsCopyCreate
     * @request POST:/api/{version}/credentials/{id}/copy/
     * @secure
     */
    apiCredentialsCopyCreate: (
      id: string,
      version: string,
      data: Copy,
      params: RequestParams = {}
    ) =>
      this.request<Copy, any>({
        path: `/api/${version}/credentials/${id}/copy/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of credential input sources associated with the selected credential. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of credential input sources found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more credential input source records. ## Results Each credential input source data structure includes the following fields: * `id`: Database ID for this credential input source. (integer) * `type`: Data type for this credential input source. (choice) * `url`: URL for this credential input source. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential input source was created. (datetime) * `modified`: Timestamp when this credential input source was last modified. (datetime) * `description`: Optional description of this credential input source. (string) * `input_field_name`:  (string) * `metadata`:  (json) * `target_credential`:  (id) * `source_credential`:  (id) ## Sorting To specify that credential input sources are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiCredentialsInputSourcesList
     * @summary # List Credential Input Sources for a Credential:
     * @request GET:/api/{version}/credentials/{id}/input_sources/
     * @secure
     */
    apiCredentialsInputSourcesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: CredentialInputSource[]
        },
        any
      >({
        path: `/api/${version}/credentials/${id}/input_sources/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of credential input sources associated with the selected credential. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of credential input sources found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more credential input source records. ## Results Each credential input source data structure includes the following fields: * `id`: Database ID for this credential input source. (integer) * `type`: Data type for this credential input source. (choice) * `url`: URL for this credential input source. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential input source was created. (datetime) * `modified`: Timestamp when this credential input source was last modified. (datetime) * `description`: Optional description of this credential input source. (string) * `input_field_name`:  (string) * `metadata`:  (json) * `target_credential`:  (id) * `source_credential`:  (id) ## Sorting To specify that credential input sources are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiCredentialsInputSourcesCreate
     * @summary # List Credential Input Sources for a Credential:
     * @request POST:/api/{version}/credentials/{id}/input_sources/
     * @secure
     */
    apiCredentialsInputSourcesCreate: (
      id: string,
      version: string,
      data: CredentialInputSource,
      params: RequestParams = {}
    ) =>
      this.request<CredentialInputSource, any>({
        path: `/api/${version}/credentials/${id}/input_sources/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of roles associated with the selected credential. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of roles found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more role records. ## Results Each role data structure includes the following fields: * `id`: Database ID for this role. (integer) * `type`: Data type for this role. (choice) * `url`: URL for this role. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `name`: Name of this role. (field) * `description`: Optional description of this role. (field) ## Sorting To specify that roles are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiCredentialsObjectRolesList
     * @summary # List Roles for a Credential:
     * @request GET:/api/{version}/credentials/{id}/object_roles/
     * @secure
     */
    apiCredentialsObjectRolesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Role[]
        },
        any
      >({
        path: `/api/${version}/credentials/${id}/object_roles/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of teams associated with the selected credential. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of teams found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more team records. ## Results Each team data structure includes the following fields: * `id`: Database ID for this team. (integer) * `type`: Data type for this team. (choice) * `url`: URL for this team. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this team was created. (datetime) * `modified`: Timestamp when this team was last modified. (datetime) * `name`: Name of this team. (string) * `description`: Optional description of this team. (string) * `organization`:  (id) ## Sorting To specify that teams are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiCredentialsOwnerTeamsList
     * @summary # List Teams for a Credential:
     * @request GET:/api/{version}/credentials/{id}/owner_teams/
     * @secure
     */
    apiCredentialsOwnerTeamsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Team[]
        },
        any
      >({
        path: `/api/${version}/credentials/${id}/owner_teams/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of users associated with the selected credential. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of users found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more user records. ## Results Each user data structure includes the following fields: * `id`: Database ID for this user. (integer) * `type`: Data type for this user. (choice) * `url`: URL for this user. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this user was created. (datetime) * `modified`: Timestamp when this user was last modified. (datetime) * `username`: Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (string) * `first_name`:  (string) * `last_name`:  (string) * `email`:  (string) * `is_superuser`: Designates that this user has all permissions without explicitly assigning them. (boolean) * `is_system_auditor`:  (boolean) * `ldap_dn`:  (string) * `last_login`:  (datetime) * `external_account`: Set if the account is managed by an external service (field) ## Sorting To specify that users are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=username Prefix the field name with a dash `-` to sort in reverse: ?order_by=-username Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=username,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiCredentialsOwnerUsersList
     * @summary # List Users for a Credential:
     * @request GET:/api/{version}/credentials/{id}/owner_users/
     * @secure
     */
    apiCredentialsOwnerUsersList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: User[]
        },
        any
      >({
        path: `/api/${version}/credentials/${id}/owner_users/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single credential record containing the following fields:
     *
     * @tags api
     * @name ApiCredentialsTestRead
     * @summary # Retrieve a Credential:
     * @request GET:/api/{version}/credentials/{id}/test/
     * @secure
     */
    apiCredentialsTestRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<Empty, any>({
        path: `/api/${version}/credentials/${id}/test/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single credential record containing the following fields:
     *
     * @tags api
     * @name ApiCredentialsTestCreate
     * @summary # Retrieve a Credential:
     * @request POST:/api/{version}/credentials/{id}/test/
     * @secure
     */
    apiCredentialsTestCreate: (
      id: string,
      version: string,
      data: Empty,
      params: RequestParams = {}
    ) =>
      this.request<Empty, any>({
        path: `/api/${version}/credentials/${id}/test/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Show Dashboard Details
     *
     * @tags api
     * @name ApiDashboardList
     * @request GET:/api/{version}/dashboard/
     * @secure
     */
    apiDashboardList: (version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/dashboard/`,
        method: 'GET',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve aggregate statistics about job runs suitable for graphing. ## Parmeters and Filtering The `period` of the data can be adjusted with: ?period=month Where `month` can be replaced with `week`, `two_weeks`, or `day`.  `month` is the default. The type of job can be filtered with: ?job_type=all Where `all` can be replaced with `inv_sync`, `playbook_run` or `scm_update`.  `all` is the default. ## Results Data will be returned in the following format: "jobs": { "successful": [ [ 1402808400.0, 9 ], ... ], "failed": [ [ 1402808400.0, 3 ], ... ] } Each element contains an epoch timestamp represented in seconds and a numerical value indicating the number of events during that time period
     *
     * @tags api
     * @name ApiDashboardGraphsJobsList
     * @summary # View Statistics for Job Runs
     * @request GET:/api/{version}/dashboard/graphs/jobs/
     * @secure
     */
    apiDashboardGraphsJobsList: (version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/dashboard/graphs/jobs/`,
        method: 'GET',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of execution environments. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of execution environments found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more execution environment records. ## Results Each execution environment data structure includes the following fields: * `id`: Database ID for this execution environment. (integer) * `type`: Data type for this execution environment. (choice) * `url`: URL for this execution environment. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this execution environment was created. (datetime) * `modified`: Timestamp when this execution environment was last modified. (datetime) * `name`: Name of this execution environment. (string) * `description`: Optional description of this execution environment. (string) * `organization`: The organization used to determine access to this execution environment. (id) * `image`: The full image location, including the container registry, image name, and version tag. (string) * `managed`:  (boolean) * `credential`:  (id) * `pull`: Pull image before running? (choice) - `""`: --------- - `always`: Always pull container before running. - `missing`: Only pull the image if not present before running. - `never`: Never pull container before running. ## Sorting To specify that execution environments are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiExecutionEnvironmentsList
     * @summary # List Execution Environments:
     * @request GET:/api/{version}/execution_environments/
     * @secure
     */
    apiExecutionEnvironmentsList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ExecutionEnvironment[]
        },
        any
      >({
        path: `/api/${version}/execution_environments/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of execution environments. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of execution environments found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more execution environment records. ## Results Each execution environment data structure includes the following fields: * `id`: Database ID for this execution environment. (integer) * `type`: Data type for this execution environment. (choice) * `url`: URL for this execution environment. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this execution environment was created. (datetime) * `modified`: Timestamp when this execution environment was last modified. (datetime) * `name`: Name of this execution environment. (string) * `description`: Optional description of this execution environment. (string) * `organization`: The organization used to determine access to this execution environment. (id) * `image`: The full image location, including the container registry, image name, and version tag. (string) * `managed`:  (boolean) * `credential`:  (id) * `pull`: Pull image before running? (choice) - `""`: --------- - `always`: Always pull container before running. - `missing`: Only pull the image if not present before running. - `never`: Never pull container before running. ## Sorting To specify that execution environments are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiExecutionEnvironmentsCreate
     * @summary # List Execution Environments:
     * @request POST:/api/{version}/execution_environments/
     * @secure
     */
    apiExecutionEnvironmentsCreate: (
      version: string,
      data: ExecutionEnvironment,
      params: RequestParams = {}
    ) =>
      this.request<ExecutionEnvironment, any>({
        path: `/api/${version}/execution_environments/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single execution environment record containing the following fields: * `id`: Database ID for this execution environment. (integer) * `type`: Data type for this execution environment. (choice) * `url`: URL for this execution environment. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this execution environment was created. (datetime) * `modified`: Timestamp when this execution environment was last modified. (datetime) * `name`: Name of this execution environment. (string) * `description`: Optional description of this execution environment. (string) * `organization`: The organization used to determine access to this execution environment. (id) * `image`: The full image location, including the container registry, image name, and version tag. (string) * `managed`:  (boolean) * `credential`:  (id) * `pull`: Pull image before running? (choice) - `""`: --------- - `always`: Always pull container before running. - `missing`: Only pull the image if not present before running. - `never`: Never pull container before running. # Update an Execution Environment: Make a PUT or PATCH request to this resource to update this execution environment.  The following fields may be modified: * `name`: Name of this execution environment. (string, required) * `description`: Optional description of this execution environment. (string, default=`""`) * `organization`: The organization used to determine access to this execution environment. (id, default=``) * `image`: The full image location, including the container registry, image name, and version tag. (string, required) * `credential`:  (id, default=``) * `pull`: Pull image before running? (choice) - `""`: --------- (default) - `always`: Always pull container before running. - `missing`: Only pull the image if not present before running. - `never`: Never pull container before running. For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete an Execution Environment: Make a DELETE request to this resource to delete this execution environment.
     *
     * @tags api
     * @name ApiExecutionEnvironmentsRead
     * @summary # Retrieve an Execution Environment:
     * @request GET:/api/{version}/execution_environments/{id}/
     * @secure
     */
    apiExecutionEnvironmentsRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<ExecutionEnvironment, any>({
        path: `/api/${version}/execution_environments/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single execution environment record containing the following fields: * `id`: Database ID for this execution environment. (integer) * `type`: Data type for this execution environment. (choice) * `url`: URL for this execution environment. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this execution environment was created. (datetime) * `modified`: Timestamp when this execution environment was last modified. (datetime) * `name`: Name of this execution environment. (string) * `description`: Optional description of this execution environment. (string) * `organization`: The organization used to determine access to this execution environment. (id) * `image`: The full image location, including the container registry, image name, and version tag. (string) * `managed`:  (boolean) * `credential`:  (id) * `pull`: Pull image before running? (choice) - `""`: --------- - `always`: Always pull container before running. - `missing`: Only pull the image if not present before running. - `never`: Never pull container before running. # Update an Execution Environment: Make a PUT or PATCH request to this resource to update this execution environment.  The following fields may be modified: * `name`: Name of this execution environment. (string, required) * `description`: Optional description of this execution environment. (string, default=`""`) * `organization`: The organization used to determine access to this execution environment. (id, default=``) * `image`: The full image location, including the container registry, image name, and version tag. (string, required) * `credential`:  (id, default=``) * `pull`: Pull image before running? (choice) - `""`: --------- (default) - `always`: Always pull container before running. - `missing`: Only pull the image if not present before running. - `never`: Never pull container before running. For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete an Execution Environment: Make a DELETE request to this resource to delete this execution environment.
     *
     * @tags api
     * @name ApiExecutionEnvironmentsUpdate
     * @summary # Retrieve an Execution Environment:
     * @request PUT:/api/{version}/execution_environments/{id}/
     * @secure
     */
    apiExecutionEnvironmentsUpdate: (
      id: string,
      version: string,
      data: ExecutionEnvironment,
      params: RequestParams = {}
    ) =>
      this.request<ExecutionEnvironment, any>({
        path: `/api/${version}/execution_environments/${id}/`,
        method: 'PUT',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single execution environment record containing the following fields: * `id`: Database ID for this execution environment. (integer) * `type`: Data type for this execution environment. (choice) * `url`: URL for this execution environment. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this execution environment was created. (datetime) * `modified`: Timestamp when this execution environment was last modified. (datetime) * `name`: Name of this execution environment. (string) * `description`: Optional description of this execution environment. (string) * `organization`: The organization used to determine access to this execution environment. (id) * `image`: The full image location, including the container registry, image name, and version tag. (string) * `managed`:  (boolean) * `credential`:  (id) * `pull`: Pull image before running? (choice) - `""`: --------- - `always`: Always pull container before running. - `missing`: Only pull the image if not present before running. - `never`: Never pull container before running. # Update an Execution Environment: Make a PUT or PATCH request to this resource to update this execution environment.  The following fields may be modified: * `name`: Name of this execution environment. (string, required) * `description`: Optional description of this execution environment. (string, default=`""`) * `organization`: The organization used to determine access to this execution environment. (id, default=``) * `image`: The full image location, including the container registry, image name, and version tag. (string, required) * `credential`:  (id, default=``) * `pull`: Pull image before running? (choice) - `""`: --------- (default) - `always`: Always pull container before running. - `missing`: Only pull the image if not present before running. - `never`: Never pull container before running. For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete an Execution Environment: Make a DELETE request to this resource to delete this execution environment.
     *
     * @tags api
     * @name ApiExecutionEnvironmentsPartialUpdate
     * @summary # Retrieve an Execution Environment:
     * @request PATCH:/api/{version}/execution_environments/{id}/
     * @secure
     */
    apiExecutionEnvironmentsPartialUpdate: (
      id: string,
      version: string,
      data: ExecutionEnvironment,
      params: RequestParams = {}
    ) =>
      this.request<ExecutionEnvironment, any>({
        path: `/api/${version}/execution_environments/${id}/`,
        method: 'PATCH',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single execution environment record containing the following fields: * `id`: Database ID for this execution environment. (integer) * `type`: Data type for this execution environment. (choice) * `url`: URL for this execution environment. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this execution environment was created. (datetime) * `modified`: Timestamp when this execution environment was last modified. (datetime) * `name`: Name of this execution environment. (string) * `description`: Optional description of this execution environment. (string) * `organization`: The organization used to determine access to this execution environment. (id) * `image`: The full image location, including the container registry, image name, and version tag. (string) * `managed`:  (boolean) * `credential`:  (id) * `pull`: Pull image before running? (choice) - `""`: --------- - `always`: Always pull container before running. - `missing`: Only pull the image if not present before running. - `never`: Never pull container before running. # Update an Execution Environment: Make a PUT or PATCH request to this resource to update this execution environment.  The following fields may be modified: * `name`: Name of this execution environment. (string, required) * `description`: Optional description of this execution environment. (string, default=`""`) * `organization`: The organization used to determine access to this execution environment. (id, default=``) * `image`: The full image location, including the container registry, image name, and version tag. (string, required) * `credential`:  (id, default=``) * `pull`: Pull image before running? (choice) - `""`: --------- (default) - `always`: Always pull container before running. - `missing`: Only pull the image if not present before running. - `never`: Never pull container before running. For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete an Execution Environment: Make a DELETE request to this resource to delete this execution environment.
     *
     * @tags api
     * @name ApiExecutionEnvironmentsDelete
     * @summary # Retrieve an Execution Environment:
     * @request DELETE:/api/{version}/execution_environments/{id}/
     * @secure
     */
    apiExecutionEnvironmentsDelete: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/execution_environments/${id}/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of activity streams associated with the selected execution environment. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of activity streams found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more activity stream records. ## Results Each activity stream data structure includes the following fields: * `id`: Database ID for this activity stream. (integer) * `type`: Data type for this activity stream. (choice) * `url`: URL for this activity stream. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `timestamp`:  (datetime) * `operation`: The action taken with respect to the given object(s). (choice) - `create`: Entity Created - `update`: Entity Updated - `delete`: Entity Deleted - `associate`: Entity Associated with another Entity - `disassociate`: Entity was Disassociated with another Entity * `changes`: A summary of the new and changed values when an object is created, updated, or deleted (json) * `object1`: For create, update, and delete events this is the object type that was affected. For associate and disassociate events this is the object type associated or disassociated with object2. (string) * `object2`: Unpopulated for create, update, and delete events. For associate and disassociate events this is the object type that object1 is being associated with. (string) * `object_association`: When present, shows the field name of the role or relationship that changed. (field) * `action_node`: The cluster node the activity took place on. (string) * `object_type`: When present, shows the model on which the role or relationship was defined. (field) ## Sorting To specify that activity streams are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiExecutionEnvironmentsActivityStreamList
     * @summary # List Activity Streams for an Execution Environment:
     * @request GET:/api/{version}/execution_environments/{id}/activity_stream/
     * @secure
     */
    apiExecutionEnvironmentsActivityStreamList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ActivityStream[]
        },
        any
      >({
        path: `/api/${version}/execution_environments/${id}/activity_stream/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiExecutionEnvironmentsCopyList
     * @request GET:/api/{version}/execution_environments/{id}/copy/
     * @secure
     */
    apiExecutionEnvironmentsCopyList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Copy[]
        },
        any
      >({
        path: `/api/${version}/execution_environments/${id}/copy/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiExecutionEnvironmentsCopyCreate
     * @request POST:/api/{version}/execution_environments/{id}/copy/
     * @secure
     */
    apiExecutionEnvironmentsCopyCreate: (
      id: string,
      version: string,
      data: Copy,
      params: RequestParams = {}
    ) =>
      this.request<Copy, any>({
        path: `/api/${version}/execution_environments/${id}/copy/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of unified job templates associated with the selected execution environment. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of unified job templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more unified job template records. ## Results Each unified job template data structure includes the following fields: * `id`: Database ID for this unified job template. (integer) * `type`: Data type for this unified job template. (choice) * `url`: URL for this unified job template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this unified job template was created. (datetime) * `modified`: Timestamp when this unified job template was last modified. (datetime) * `name`: Name of this unified job template. (string) * `description`: Optional description of this unified job template. (string) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `ok`: OK - `missing`: Missing - `none`: No External Source - `updating`: Updating * `execution_environment`: The container image to be used for execution. (id) ## Sorting To specify that unified job templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiExecutionEnvironmentsUnifiedJobTemplatesList
     * @summary # List Unified Job Templates for an Execution Environment:
     * @request GET:/api/{version}/execution_environments/{id}/unified_job_templates/
     * @secure
     */
    apiExecutionEnvironmentsUnifiedJobTemplatesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: UnifiedJobTemplate[]
        },
        any
      >({
        path: `/api/${version}/execution_environments/${id}/unified_job_templates/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of groups. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of groups found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more group records. ## Results Each group data structure includes the following fields: * `id`: Database ID for this group. (integer) * `type`: Data type for this group. (choice) * `url`: URL for this group. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this group was created. (datetime) * `modified`: Timestamp when this group was last modified. (datetime) * `name`: Name of this group. (string) * `description`: Optional description of this group. (string) * `inventory`:  (id) * `variables`: Group variables in JSON or YAML format. (json) ## Sorting To specify that groups are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiGroupsList
     * @summary # List Groups:
     * @request GET:/api/{version}/groups/
     * @secure
     */
    apiGroupsList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Group[]
        },
        any
      >({
        path: `/api/${version}/groups/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of groups. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of groups found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more group records. ## Results Each group data structure includes the following fields: * `id`: Database ID for this group. (integer) * `type`: Data type for this group. (choice) * `url`: URL for this group. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this group was created. (datetime) * `modified`: Timestamp when this group was last modified. (datetime) * `name`: Name of this group. (string) * `description`: Optional description of this group. (string) * `inventory`:  (id) * `variables`: Group variables in JSON or YAML format. (json) ## Sorting To specify that groups are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiGroupsCreate
     * @summary # List Groups:
     * @request POST:/api/{version}/groups/
     * @secure
     */
    apiGroupsCreate: (version: string, data: Group, params: RequestParams = {}) =>
      this.request<Group, any>({
        path: `/api/${version}/groups/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single group record containing the following fields: * `id`: Database ID for this group. (integer) * `type`: Data type for this group. (choice) * `url`: URL for this group. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this group was created. (datetime) * `modified`: Timestamp when this group was last modified. (datetime) * `name`: Name of this group. (string) * `description`: Optional description of this group. (string) * `inventory`:  (id) * `variables`: Group variables in JSON or YAML format. (json) # Update a Group: Make a PUT or PATCH request to this resource to update this group.  The following fields may be modified: * `name`: Name of this group. (string, required) * `description`: Optional description of this group. (string, default=`""`) * `inventory`:  (id, required) * `variables`: Group variables in JSON or YAML format. (json, default=``) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Group: Make a DELETE request to this resource to delete this group.
     *
     * @tags api
     * @name ApiGroupsRead
     * @summary # Retrieve a Group:
     * @request GET:/api/{version}/groups/{id}/
     * @secure
     */
    apiGroupsRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<Group, any>({
        path: `/api/${version}/groups/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single group record containing the following fields: * `id`: Database ID for this group. (integer) * `type`: Data type for this group. (choice) * `url`: URL for this group. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this group was created. (datetime) * `modified`: Timestamp when this group was last modified. (datetime) * `name`: Name of this group. (string) * `description`: Optional description of this group. (string) * `inventory`:  (id) * `variables`: Group variables in JSON or YAML format. (json) # Update a Group: Make a PUT or PATCH request to this resource to update this group.  The following fields may be modified: * `name`: Name of this group. (string, required) * `description`: Optional description of this group. (string, default=`""`) * `inventory`:  (id, required) * `variables`: Group variables in JSON or YAML format. (json, default=``) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Group: Make a DELETE request to this resource to delete this group.
     *
     * @tags api
     * @name ApiGroupsUpdate
     * @summary # Retrieve a Group:
     * @request PUT:/api/{version}/groups/{id}/
     * @secure
     */
    apiGroupsUpdate: (id: string, version: string, data: Group, params: RequestParams = {}) =>
      this.request<Group, any>({
        path: `/api/${version}/groups/${id}/`,
        method: 'PUT',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single group record containing the following fields: * `id`: Database ID for this group. (integer) * `type`: Data type for this group. (choice) * `url`: URL for this group. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this group was created. (datetime) * `modified`: Timestamp when this group was last modified. (datetime) * `name`: Name of this group. (string) * `description`: Optional description of this group. (string) * `inventory`:  (id) * `variables`: Group variables in JSON or YAML format. (json) # Update a Group: Make a PUT or PATCH request to this resource to update this group.  The following fields may be modified: * `name`: Name of this group. (string, required) * `description`: Optional description of this group. (string, default=`""`) * `inventory`:  (id, required) * `variables`: Group variables in JSON or YAML format. (json, default=``) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Group: Make a DELETE request to this resource to delete this group.
     *
     * @tags api
     * @name ApiGroupsPartialUpdate
     * @summary # Retrieve a Group:
     * @request PATCH:/api/{version}/groups/{id}/
     * @secure
     */
    apiGroupsPartialUpdate: (
      id: string,
      version: string,
      data: Group,
      params: RequestParams = {}
    ) =>
      this.request<Group, any>({
        path: `/api/${version}/groups/${id}/`,
        method: 'PATCH',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single group record containing the following fields: * `id`: Database ID for this group. (integer) * `type`: Data type for this group. (choice) * `url`: URL for this group. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this group was created. (datetime) * `modified`: Timestamp when this group was last modified. (datetime) * `name`: Name of this group. (string) * `description`: Optional description of this group. (string) * `inventory`:  (id) * `variables`: Group variables in JSON or YAML format. (json) # Update a Group: Make a PUT or PATCH request to this resource to update this group.  The following fields may be modified: * `name`: Name of this group. (string, required) * `description`: Optional description of this group. (string, default=`""`) * `inventory`:  (id, required) * `variables`: Group variables in JSON or YAML format. (json, default=``) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Group: Make a DELETE request to this resource to delete this group.
     *
     * @tags api
     * @name ApiGroupsDelete
     * @summary # Retrieve a Group:
     * @request DELETE:/api/{version}/groups/{id}/
     * @secure
     */
    apiGroupsDelete: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/groups/${id}/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of activity streams associated with the selected group. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of activity streams found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more activity stream records. ## Results Each activity stream data structure includes the following fields: * `id`: Database ID for this activity stream. (integer) * `type`: Data type for this activity stream. (choice) * `url`: URL for this activity stream. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `timestamp`:  (datetime) * `operation`: The action taken with respect to the given object(s). (choice) - `create`: Entity Created - `update`: Entity Updated - `delete`: Entity Deleted - `associate`: Entity Associated with another Entity - `disassociate`: Entity was Disassociated with another Entity * `changes`: A summary of the new and changed values when an object is created, updated, or deleted (json) * `object1`: For create, update, and delete events this is the object type that was affected. For associate and disassociate events this is the object type associated or disassociated with object2. (string) * `object2`: Unpopulated for create, update, and delete events. For associate and disassociate events this is the object type that object1 is being associated with. (string) * `object_association`: When present, shows the field name of the role or relationship that changed. (field) * `action_node`: The cluster node the activity took place on. (string) * `object_type`: When present, shows the model on which the role or relationship was defined. (field) ## Sorting To specify that activity streams are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiGroupsActivityStreamList
     * @summary # List Activity Streams for a Group:
     * @request GET:/api/{version}/groups/{id}/activity_stream/
     * @secure
     */
    apiGroupsActivityStreamList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ActivityStream[]
        },
        any
      >({
        path: `/api/${version}/groups/${id}/activity_stream/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of ad hoc commands associated with the selected group. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of ad hoc commands found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more ad hoc command records. ## Results Each ad hoc command data structure includes the following fields: * `id`: Database ID for this ad hoc command. (integer) * `type`: Data type for this ad hoc command. (choice) * `url`: URL for this ad hoc command. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this ad hoc command was created. (datetime) * `modified`: Timestamp when this ad hoc command was last modified. (datetime) * `name`: Name of this ad hoc command. (string) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `execution_node`: The node the job executed on. (string) * `controller_node`: The instance that managed the execution environment. (string) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `job_type`:  (choice) - `run`: Run - `check`: Check * `inventory`:  (id) * `limit`:  (string) * `credential`:  (id) * `module_name`:  (choice) - `command` - `shell` - `yum` - `apt` - `apt_key` - `apt_repository` - `apt_rpm` - `service` - `group` - `user` - `mount` - `ping` - `selinux` - `setup` - `win_ping` - `win_service` - `win_updates` - `win_group` - `win_user` * `module_args`:  (string) * `forks`:  (integer) * `verbosity`:  (choice) - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `extra_vars`:  (string) * `become_enabled`:  (boolean) * `diff_mode`:  (boolean) ## Sorting To specify that ad hoc commands are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiGroupsAdHocCommandsList
     * @summary # List Ad Hoc Commands for a Group:
     * @request GET:/api/{version}/groups/{id}/ad_hoc_commands/
     * @secure
     */
    apiGroupsAdHocCommandsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: AdHocCommandList[]
        },
        any
      >({
        path: `/api/${version}/groups/${id}/ad_hoc_commands/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of ad hoc commands associated with the selected group. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of ad hoc commands found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more ad hoc command records. ## Results Each ad hoc command data structure includes the following fields: * `id`: Database ID for this ad hoc command. (integer) * `type`: Data type for this ad hoc command. (choice) * `url`: URL for this ad hoc command. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this ad hoc command was created. (datetime) * `modified`: Timestamp when this ad hoc command was last modified. (datetime) * `name`: Name of this ad hoc command. (string) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `execution_node`: The node the job executed on. (string) * `controller_node`: The instance that managed the execution environment. (string) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `job_type`:  (choice) - `run`: Run - `check`: Check * `inventory`:  (id) * `limit`:  (string) * `credential`:  (id) * `module_name`:  (choice) - `command` - `shell` - `yum` - `apt` - `apt_key` - `apt_repository` - `apt_rpm` - `service` - `group` - `user` - `mount` - `ping` - `selinux` - `setup` - `win_ping` - `win_service` - `win_updates` - `win_group` - `win_user` * `module_args`:  (string) * `forks`:  (integer) * `verbosity`:  (choice) - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `extra_vars`:  (string) * `become_enabled`:  (boolean) * `diff_mode`:  (boolean) ## Sorting To specify that ad hoc commands are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiGroupsAdHocCommandsCreate
     * @summary # List Ad Hoc Commands for a Group:
     * @request POST:/api/{version}/groups/{id}/ad_hoc_commands/
     * @secure
     */
    apiGroupsAdHocCommandsCreate: (
      id: string,
      version: string,
      data: AdHocCommandList,
      params: RequestParams = {}
    ) =>
      this.request<AdHocCommandList, any>({
        path: `/api/${version}/groups/${id}/ad_hoc_commands/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of all hosts directly or indirectly belonging to this group. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of hosts found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more host records. ## Results Each host data structure includes the following fields: * `id`: Database ID for this host. (integer) * `type`: Data type for this host. (choice) * `url`: URL for this host. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this host was created. (datetime) * `modified`: Timestamp when this host was last modified. (datetime) * `name`: Name of this host. (string) * `description`: Optional description of this host. (string) * `inventory`:  (id) * `enabled`: Is this host online and available for running jobs? (boolean) * `instance_id`: The value used by the remote inventory source to uniquely identify the host (string) * `variables`: Host variables in JSON or YAML format. (json) * `has_active_failures`:  (field) * `has_inventory_sources`:  (field) * `last_job`:  (id) * `last_job_host_summary`:  (id) * `ansible_facts_modified`: The date and time ansible_facts was last modified. (datetime) ## Sorting To specify that hosts are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiGroupsAllHostsList
     * @summary # List All Hosts for a Group:
     * @request GET:/api/{version}/groups/{id}/all_hosts/
     * @secure
     */
    apiGroupsAllHostsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Host[]
        },
        any
      >({
        path: `/api/${version}/groups/${id}/all_hosts/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of groups associated with the selected group. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of groups found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more group records. ## Results Each group data structure includes the following fields: * `id`: Database ID for this group. (integer) * `type`: Data type for this group. (choice) * `url`: URL for this group. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this group was created. (datetime) * `modified`: Timestamp when this group was last modified. (datetime) * `name`: Name of this group. (string) * `description`: Optional description of this group. (string) * `inventory`:  (id) * `variables`: Group variables in JSON or YAML format. (json) ## Sorting To specify that groups are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiGroupsChildrenList
     * @summary # List Groups for a Group:
     * @request GET:/api/{version}/groups/{id}/children/
     * @secure
     */
    apiGroupsChildrenList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Group[]
        },
        any
      >({
        path: `/api/${version}/groups/${id}/children/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of groups associated with the selected group. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of groups found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more group records. ## Results Each group data structure includes the following fields: * `id`: Database ID for this group. (integer) * `type`: Data type for this group. (choice) * `url`: URL for this group. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this group was created. (datetime) * `modified`: Timestamp when this group was last modified. (datetime) * `name`: Name of this group. (string) * `description`: Optional description of this group. (string) * `inventory`:  (id) * `variables`: Group variables in JSON or YAML format. (json) ## Sorting To specify that groups are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiGroupsChildrenCreate
     * @summary # List Groups for a Group:
     * @request POST:/api/{version}/groups/{id}/children/
     * @secure
     */
    apiGroupsChildrenCreate: (
      id: string,
      version: string,
      data: Group,
      params: RequestParams = {}
    ) =>
      this.request<Group, any>({
        path: `/api/${version}/groups/${id}/children/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of hosts associated with the selected group. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of hosts found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more host records. ## Results Each host data structure includes the following fields: * `id`: Database ID for this host. (integer) * `type`: Data type for this host. (choice) * `url`: URL for this host. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this host was created. (datetime) * `modified`: Timestamp when this host was last modified. (datetime) * `name`: Name of this host. (string) * `description`: Optional description of this host. (string) * `inventory`:  (id) * `enabled`: Is this host online and available for running jobs? (boolean) * `instance_id`: The value used by the remote inventory source to uniquely identify the host (string) * `variables`: Host variables in JSON or YAML format. (json) * `has_active_failures`:  (field) * `has_inventory_sources`:  (field) * `last_job`:  (id) * `last_job_host_summary`:  (id) * `ansible_facts_modified`: The date and time ansible_facts was last modified. (datetime) ## Sorting To specify that hosts are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiGroupsHostsList
     * @summary # List Hosts for a Group:
     * @request GET:/api/{version}/groups/{id}/hosts/
     * @secure
     */
    apiGroupsHostsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Host[]
        },
        any
      >({
        path: `/api/${version}/groups/${id}/hosts/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of hosts associated with the selected group. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of hosts found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more host records. ## Results Each host data structure includes the following fields: * `id`: Database ID for this host. (integer) * `type`: Data type for this host. (choice) * `url`: URL for this host. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this host was created. (datetime) * `modified`: Timestamp when this host was last modified. (datetime) * `name`: Name of this host. (string) * `description`: Optional description of this host. (string) * `inventory`:  (id) * `enabled`: Is this host online and available for running jobs? (boolean) * `instance_id`: The value used by the remote inventory source to uniquely identify the host (string) * `variables`: Host variables in JSON or YAML format. (json) * `has_active_failures`:  (field) * `has_inventory_sources`:  (field) * `last_job`:  (id) * `last_job_host_summary`:  (id) * `ansible_facts_modified`: The date and time ansible_facts was last modified. (datetime) ## Sorting To specify that hosts are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiGroupsHostsCreate
     * @summary # List Hosts for a Group:
     * @request POST:/api/{version}/groups/{id}/hosts/
     * @secure
     */
    apiGroupsHostsCreate: (id: string, version: string, data: Host, params: RequestParams = {}) =>
      this.request<Host, any>({
        path: `/api/${version}/groups/${id}/hosts/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of inventory sources associated with the selected group. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of inventory sources found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more inventory source records. ## Results Each inventory source data structure includes the following fields: * `id`: Database ID for this inventory source. (integer) * `type`: Data type for this inventory source. (choice) * `url`: URL for this inventory source. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this inventory source was created. (datetime) * `modified`: Timestamp when this inventory source was last modified. (datetime) * `name`: Name of this inventory source. (string) * `description`: Optional description of this inventory source. (string) * `source`:  (choice) - `file`: File, Directory or Script - `scm`: Sourced from a Project - `ec2`: Amazon EC2 - `gce`: Google Compute Engine - `azure_rm`: Microsoft Azure Resource Manager - `vmware`: VMware vCenter - `satellite6`: Red Hat Satellite 6 - `openstack`: OpenStack - `rhv`: Red Hat Virtualization - `controller`: Red Hat Ansible Automation Platform - `insights`: Red Hat Insights * `source_path`:  (string) * `source_vars`: Inventory source variables in YAML or JSON format. (string) * `credential`: Cloud credential to use for inventory updates. (integer) * `enabled_var`: Retrieve the enabled state from the given dict of host variables. The enabled variable may be specified as &quot;foo.bar&quot;, in which case the lookup will traverse into nested dicts, equivalent to: from_dict.get(&quot;foo&quot;, {}).get(&quot;bar&quot;, default) (string) * `enabled_value`: Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var=&quot;status.power_state&quot;and enabled_value=&quot;powered_on&quot; with host variables:{   &quot;status&quot;: {     &quot;power_state&quot;: &quot;powered_on&quot;,     &quot;created&quot;: &quot;2020-08-04T18:13:04+00:00&quot;,     &quot;healthy&quot;: true    },    &quot;name&quot;: &quot;foobar&quot;,    &quot;ip_address&quot;: &quot;192.168.2.1&quot;}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled (string) * `host_filter`: Regex where only matching hosts will be imported. (string) * `overwrite`: Overwrite local groups and hosts from remote inventory source. (boolean) * `overwrite_vars`: Overwrite local variables from remote inventory source. (boolean) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `verbosity`:  (choice) - `0`: 0 (WARNING) - `1`: 1 (INFO) - `2`: 2 (DEBUG) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `none`: No External Source * `execution_environment`: The container image to be used for execution. (id) * `inventory`:  (id) * `update_on_launch`:  (boolean) * `update_cache_timeout`:  (integer) * `source_project`: Project containing inventory file used as source. (id) * `last_update_failed`:  (boolean) * `last_updated`:  (datetime) ## Sorting To specify that inventory sources are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiGroupsInventorySourcesList
     * @summary # List Inventory Sources for a Group:
     * @request GET:/api/{version}/groups/{id}/inventory_sources/
     * @secure
     */
    apiGroupsInventorySourcesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: InventorySource[]
        },
        any
      >({
        path: `/api/${version}/groups/${id}/inventory_sources/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of job events associated with the selected group. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of job events found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more job event records. ## Results Each job event data structure includes the following fields: * `id`: Database ID for this job event. (integer) * `type`: Data type for this job event. (choice) * `url`: URL for this job event. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this job event was created. (datetime) * `modified`: Timestamp when this job event was last modified. (datetime) * `job`:  (id) * `event`:  (choice) - `runner_on_failed`: Host Failed - `runner_on_start`: Host Started - `runner_on_ok`: Host OK - `runner_on_error`: Host Failure - `runner_on_skipped`: Host Skipped - `runner_on_unreachable`: Host Unreachable - `runner_on_no_hosts`: No Hosts Remaining - `runner_on_async_poll`: Host Polling - `runner_on_async_ok`: Host Async OK - `runner_on_async_failed`: Host Async Failure - `runner_item_on_ok`: Item OK - `runner_item_on_failed`: Item Failed - `runner_item_on_skipped`: Item Skipped - `runner_retry`: Host Retry - `runner_on_file_diff`: File Difference - `playbook_on_start`: Playbook Started - `playbook_on_notify`: Running Handlers - `playbook_on_include`: Including File - `playbook_on_no_hosts_matched`: No Hosts Matched - `playbook_on_no_hosts_remaining`: No Hosts Remaining - `playbook_on_task_start`: Task Started - `playbook_on_vars_prompt`: Variables Prompted - `playbook_on_setup`: Gathering Facts - `playbook_on_import_for_host`: internal: on Import for Host - `playbook_on_not_import_for_host`: internal: on Not Import for Host - `playbook_on_play_start`: Play Started - `playbook_on_stats`: Playbook Complete - `debug`: Debug - `verbose`: Verbose - `deprecated`: Deprecated - `warning`: Warning - `system_warning`: System Warning - `error`: Error * `counter`:  (integer) * `event_display`:  (string) * `event_data`:  (json) * `event_level`:  (integer) * `failed`:  (boolean) * `changed`:  (boolean) * `uuid`:  (string) * `parent_uuid`:  (string) * `host`:  (id) * `host_name`:  (string) * `playbook`:  (string) * `play`:  (string) * `task`:  (string) * `role`:  (string) * `stdout`:  (string) * `start_line`:  (integer) * `end_line`:  (integer) * `verbosity`:  (integer) ## Sorting To specify that job events are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiGroupsJobEventsList
     * @summary # List Job Events for a Group:
     * @request GET:/api/{version}/groups/{id}/job_events/
     * @secure
     */
    apiGroupsJobEventsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: JobEvent[]
        },
        any
      >({
        path: `/api/${version}/groups/${id}/job_events/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of job host summaries associated with the selected group. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of job host summaries found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more job host summary records. ## Results Each job host summary data structure includes the following fields: * `id`: Database ID for this job host summary. (integer) * `type`: Data type for this job host summary. (choice) * `url`: URL for this job host summary. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this job host summary was created. (datetime) * `modified`: Timestamp when this job host summary was last modified. (datetime) * `job`:  (id) * `host`:  (id) * `host_name`:  (string) * `changed`:  (integer) * `dark`:  (integer) * `failures`:  (integer) * `ok`:  (integer) * `processed`:  (integer) * `skipped`:  (integer) * `failed`:  (boolean) * `ignored`:  (integer) * `rescued`:  (integer) ## Sorting To specify that job host summaries are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiGroupsJobHostSummariesList
     * @summary # List Job Host Summaries for a Group:
     * @request GET:/api/{version}/groups/{id}/job_host_summaries/
     * @secure
     */
    apiGroupsJobHostSummariesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: JobHostSummary[]
        },
        any
      >({
        path: `/api/${version}/groups/${id}/job_host_summaries/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of groups available to be added as children of the current group. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of groups found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more group records. ## Results Each group data structure includes the following fields: * `id`: Database ID for this group. (integer) * `type`: Data type for this group. (choice) * `url`: URL for this group. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this group was created. (datetime) * `modified`: Timestamp when this group was last modified. (datetime) * `name`: Name of this group. (string) * `description`: Optional description of this group. (string) * `inventory`:  (id) * `variables`: Group variables in JSON or YAML format. (json) ## Sorting To specify that groups are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiGroupsPotentialChildrenList
     * @summary # List Potential Child Groups for a Group:
     * @request GET:/api/{version}/groups/{id}/potential_children/
     * @secure
     */
    apiGroupsPotentialChildrenList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Group[]
        },
        any
      >({
        path: `/api/${version}/groups/${id}/potential_children/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve all variables defined for a group. # Update Group Variable Data: Make a PUT or PATCH request to this resource to update variables defined for a group.
     *
     * @tags api
     * @name ApiGroupsVariableDataRead
     * @summary # Retrieve Group Variable Data:
     * @request GET:/api/{version}/groups/{id}/variable_data/
     * @secure
     */
    apiGroupsVariableDataRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<GroupVariableData, any>({
        path: `/api/${version}/groups/${id}/variable_data/`,
        method: 'GET',
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve all variables defined for a group. # Update Group Variable Data: Make a PUT or PATCH request to this resource to update variables defined for a group.
     *
     * @tags api
     * @name ApiGroupsVariableDataUpdate
     * @summary # Retrieve Group Variable Data:
     * @request PUT:/api/{version}/groups/{id}/variable_data/
     * @secure
     */
    apiGroupsVariableDataUpdate: (
      id: string,
      version: string,
      data: GroupVariableData,
      params: RequestParams = {}
    ) =>
      this.request<GroupVariableData, any>({
        path: `/api/${version}/groups/${id}/variable_data/`,
        method: 'PUT',
        body: data,
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve all variables defined for a group. # Update Group Variable Data: Make a PUT or PATCH request to this resource to update variables defined for a group.
     *
     * @tags api
     * @name ApiGroupsVariableDataPartialUpdate
     * @summary # Retrieve Group Variable Data:
     * @request PATCH:/api/{version}/groups/{id}/variable_data/
     * @secure
     */
    apiGroupsVariableDataPartialUpdate: (
      id: string,
      version: string,
      data: GroupVariableData,
      params: RequestParams = {}
    ) =>
      this.request<GroupVariableData, any>({
        path: `/api/${version}/groups/${id}/variable_data/`,
        method: 'PATCH',
        body: data,
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of hosts. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of hosts found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more host records. ## Results Each host data structure includes the following fields: * `id`: Database ID for this host. (integer) * `type`: Data type for this host. (choice) * `url`: URL for this host. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this host was created. (datetime) * `modified`: Timestamp when this host was last modified. (datetime) * `name`: Name of this host. (string) * `description`: Optional description of this host. (string) * `inventory`:  (id) * `enabled`: Is this host online and available for running jobs? (boolean) * `instance_id`: The value used by the remote inventory source to uniquely identify the host (string) * `variables`: Host variables in JSON or YAML format. (json) * `has_active_failures`:  (field) * `has_inventory_sources`:  (field) * `last_job`:  (id) * `last_job_host_summary`:  (id) * `ansible_facts_modified`: The date and time ansible_facts was last modified. (datetime) ## Sorting To specify that hosts are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiHostsList
     * @summary # List Hosts:
     * @request GET:/api/{version}/hosts/
     * @secure
     */
    apiHostsList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Host[]
        },
        any
      >({
        path: `/api/${version}/hosts/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of hosts. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of hosts found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more host records. ## Results Each host data structure includes the following fields: * `id`: Database ID for this host. (integer) * `type`: Data type for this host. (choice) * `url`: URL for this host. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this host was created. (datetime) * `modified`: Timestamp when this host was last modified. (datetime) * `name`: Name of this host. (string) * `description`: Optional description of this host. (string) * `inventory`:  (id) * `enabled`: Is this host online and available for running jobs? (boolean) * `instance_id`: The value used by the remote inventory source to uniquely identify the host (string) * `variables`: Host variables in JSON or YAML format. (json) * `has_active_failures`:  (field) * `has_inventory_sources`:  (field) * `last_job`:  (id) * `last_job_host_summary`:  (id) * `ansible_facts_modified`: The date and time ansible_facts was last modified. (datetime) ## Sorting To specify that hosts are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiHostsCreate
     * @summary # List Hosts:
     * @request POST:/api/{version}/hosts/
     * @secure
     */
    apiHostsCreate: (version: string, data: Host, params: RequestParams = {}) =>
      this.request<Host, any>({
        path: `/api/${version}/hosts/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single host record containing the following fields: * `id`: Database ID for this host. (integer) * `type`: Data type for this host. (choice) * `url`: URL for this host. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this host was created. (datetime) * `modified`: Timestamp when this host was last modified. (datetime) * `name`: Name of this host. (string) * `description`: Optional description of this host. (string) * `inventory`:  (id) * `enabled`: Is this host online and available for running jobs? (boolean) * `instance_id`: The value used by the remote inventory source to uniquely identify the host (string) * `variables`: Host variables in JSON or YAML format. (json) * `has_active_failures`:  (field) * `has_inventory_sources`:  (field) * `last_job`:  (id) * `last_job_host_summary`:  (id) * `ansible_facts_modified`: The date and time ansible_facts was last modified. (datetime) # Update a Host: Make a PUT or PATCH request to this resource to update this host.  The following fields may be modified: * `name`: Name of this host. (string, required) * `description`: Optional description of this host. (string, default=`""`) * `inventory`:  (id, required) * `enabled`: Is this host online and available for running jobs? (boolean, default=`True`) * `instance_id`: The value used by the remote inventory source to uniquely identify the host (string, default=`""`) * `variables`: Host variables in JSON or YAML format. (json, default=``) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Host: Make a DELETE request to this resource to delete this host.
     *
     * @tags api
     * @name ApiHostsRead
     * @summary # Retrieve a Host:
     * @request GET:/api/{version}/hosts/{id}/
     * @secure
     */
    apiHostsRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<Host, any>({
        path: `/api/${version}/hosts/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single host record containing the following fields: * `id`: Database ID for this host. (integer) * `type`: Data type for this host. (choice) * `url`: URL for this host. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this host was created. (datetime) * `modified`: Timestamp when this host was last modified. (datetime) * `name`: Name of this host. (string) * `description`: Optional description of this host. (string) * `inventory`:  (id) * `enabled`: Is this host online and available for running jobs? (boolean) * `instance_id`: The value used by the remote inventory source to uniquely identify the host (string) * `variables`: Host variables in JSON or YAML format. (json) * `has_active_failures`:  (field) * `has_inventory_sources`:  (field) * `last_job`:  (id) * `last_job_host_summary`:  (id) * `ansible_facts_modified`: The date and time ansible_facts was last modified. (datetime) # Update a Host: Make a PUT or PATCH request to this resource to update this host.  The following fields may be modified: * `name`: Name of this host. (string, required) * `description`: Optional description of this host. (string, default=`""`) * `inventory`:  (id, required) * `enabled`: Is this host online and available for running jobs? (boolean, default=`True`) * `instance_id`: The value used by the remote inventory source to uniquely identify the host (string, default=`""`) * `variables`: Host variables in JSON or YAML format. (json, default=``) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Host: Make a DELETE request to this resource to delete this host.
     *
     * @tags api
     * @name ApiHostsUpdate
     * @summary # Retrieve a Host:
     * @request PUT:/api/{version}/hosts/{id}/
     * @secure
     */
    apiHostsUpdate: (id: string, version: string, data: Host, params: RequestParams = {}) =>
      this.request<Host, any>({
        path: `/api/${version}/hosts/${id}/`,
        method: 'PUT',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single host record containing the following fields: * `id`: Database ID for this host. (integer) * `type`: Data type for this host. (choice) * `url`: URL for this host. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this host was created. (datetime) * `modified`: Timestamp when this host was last modified. (datetime) * `name`: Name of this host. (string) * `description`: Optional description of this host. (string) * `inventory`:  (id) * `enabled`: Is this host online and available for running jobs? (boolean) * `instance_id`: The value used by the remote inventory source to uniquely identify the host (string) * `variables`: Host variables in JSON or YAML format. (json) * `has_active_failures`:  (field) * `has_inventory_sources`:  (field) * `last_job`:  (id) * `last_job_host_summary`:  (id) * `ansible_facts_modified`: The date and time ansible_facts was last modified. (datetime) # Update a Host: Make a PUT or PATCH request to this resource to update this host.  The following fields may be modified: * `name`: Name of this host. (string, required) * `description`: Optional description of this host. (string, default=`""`) * `inventory`:  (id, required) * `enabled`: Is this host online and available for running jobs? (boolean, default=`True`) * `instance_id`: The value used by the remote inventory source to uniquely identify the host (string, default=`""`) * `variables`: Host variables in JSON or YAML format. (json, default=``) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Host: Make a DELETE request to this resource to delete this host.
     *
     * @tags api
     * @name ApiHostsPartialUpdate
     * @summary # Retrieve a Host:
     * @request PATCH:/api/{version}/hosts/{id}/
     * @secure
     */
    apiHostsPartialUpdate: (id: string, version: string, data: Host, params: RequestParams = {}) =>
      this.request<Host, any>({
        path: `/api/${version}/hosts/${id}/`,
        method: 'PATCH',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single host record containing the following fields: * `id`: Database ID for this host. (integer) * `type`: Data type for this host. (choice) * `url`: URL for this host. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this host was created. (datetime) * `modified`: Timestamp when this host was last modified. (datetime) * `name`: Name of this host. (string) * `description`: Optional description of this host. (string) * `inventory`:  (id) * `enabled`: Is this host online and available for running jobs? (boolean) * `instance_id`: The value used by the remote inventory source to uniquely identify the host (string) * `variables`: Host variables in JSON or YAML format. (json) * `has_active_failures`:  (field) * `has_inventory_sources`:  (field) * `last_job`:  (id) * `last_job_host_summary`:  (id) * `ansible_facts_modified`: The date and time ansible_facts was last modified. (datetime) # Update a Host: Make a PUT or PATCH request to this resource to update this host.  The following fields may be modified: * `name`: Name of this host. (string, required) * `description`: Optional description of this host. (string, default=`""`) * `inventory`:  (id, required) * `enabled`: Is this host online and available for running jobs? (boolean, default=`True`) * `instance_id`: The value used by the remote inventory source to uniquely identify the host (string, default=`""`) * `variables`: Host variables in JSON or YAML format. (json, default=``) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Host: Make a DELETE request to this resource to delete this host.
     *
     * @tags api
     * @name ApiHostsDelete
     * @summary # Retrieve a Host:
     * @request DELETE:/api/{version}/hosts/{id}/
     * @secure
     */
    apiHostsDelete: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/hosts/${id}/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of activity streams associated with the selected host. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of activity streams found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more activity stream records. ## Results Each activity stream data structure includes the following fields: * `id`: Database ID for this activity stream. (integer) * `type`: Data type for this activity stream. (choice) * `url`: URL for this activity stream. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `timestamp`:  (datetime) * `operation`: The action taken with respect to the given object(s). (choice) - `create`: Entity Created - `update`: Entity Updated - `delete`: Entity Deleted - `associate`: Entity Associated with another Entity - `disassociate`: Entity was Disassociated with another Entity * `changes`: A summary of the new and changed values when an object is created, updated, or deleted (json) * `object1`: For create, update, and delete events this is the object type that was affected. For associate and disassociate events this is the object type associated or disassociated with object2. (string) * `object2`: Unpopulated for create, update, and delete events. For associate and disassociate events this is the object type that object1 is being associated with. (string) * `object_association`: When present, shows the field name of the role or relationship that changed. (field) * `action_node`: The cluster node the activity took place on. (string) * `object_type`: When present, shows the model on which the role or relationship was defined. (field) ## Sorting To specify that activity streams are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiHostsActivityStreamList
     * @summary # List Activity Streams for a Host:
     * @request GET:/api/{version}/hosts/{id}/activity_stream/
     * @secure
     */
    apiHostsActivityStreamList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ActivityStream[]
        },
        any
      >({
        path: `/api/${version}/hosts/${id}/activity_stream/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of ad hoc command events associated with the selected host. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of ad hoc command events found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more ad hoc command event records. ## Results Each ad hoc command event data structure includes the following fields: * `id`: Database ID for this ad hoc command event. (integer) * `type`: Data type for this ad hoc command event. (choice) * `url`: URL for this ad hoc command event. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this ad hoc command event was created. (datetime) * `modified`: Timestamp when this ad hoc command event was last modified. (datetime) * `ad_hoc_command`:  (id) * `event`:  (choice) - `runner_on_failed`: Host Failed - `runner_on_ok`: Host OK - `runner_on_unreachable`: Host Unreachable - `runner_on_skipped`: Host Skipped - `debug`: Debug - `verbose`: Verbose - `deprecated`: Deprecated - `warning`: Warning - `system_warning`: System Warning - `error`: Error * `counter`:  (integer) * `event_display`:  (string) * `event_data`:  (json) * `failed`:  (boolean) * `changed`:  (boolean) * `uuid`:  (string) * `host`:  (id) * `host_name`:  (string) * `stdout`:  (string) * `start_line`:  (integer) * `end_line`:  (integer) * `verbosity`:  (integer) ## Sorting To specify that ad hoc command events are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiHostsAdHocCommandEventsList
     * @summary # List Ad Hoc Command Events for a Host:
     * @request GET:/api/{version}/hosts/{id}/ad_hoc_command_events/
     * @secure
     */
    apiHostsAdHocCommandEventsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: AdHocCommandEvent[]
        },
        any
      >({
        path: `/api/${version}/hosts/${id}/ad_hoc_command_events/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of ad hoc commands associated with the selected host. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of ad hoc commands found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more ad hoc command records. ## Results Each ad hoc command data structure includes the following fields: * `id`: Database ID for this ad hoc command. (integer) * `type`: Data type for this ad hoc command. (choice) * `url`: URL for this ad hoc command. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this ad hoc command was created. (datetime) * `modified`: Timestamp when this ad hoc command was last modified. (datetime) * `name`: Name of this ad hoc command. (string) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `execution_node`: The node the job executed on. (string) * `controller_node`: The instance that managed the execution environment. (string) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `job_type`:  (choice) - `run`: Run - `check`: Check * `inventory`:  (id) * `limit`:  (string) * `credential`:  (id) * `module_name`:  (choice) - `command` - `shell` - `yum` - `apt` - `apt_key` - `apt_repository` - `apt_rpm` - `service` - `group` - `user` - `mount` - `ping` - `selinux` - `setup` - `win_ping` - `win_service` - `win_updates` - `win_group` - `win_user` * `module_args`:  (string) * `forks`:  (integer) * `verbosity`:  (choice) - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `extra_vars`:  (string) * `become_enabled`:  (boolean) * `diff_mode`:  (boolean) ## Sorting To specify that ad hoc commands are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiHostsAdHocCommandsList
     * @summary # List Ad Hoc Commands for a Host:
     * @request GET:/api/{version}/hosts/{id}/ad_hoc_commands/
     * @secure
     */
    apiHostsAdHocCommandsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: AdHocCommandList[]
        },
        any
      >({
        path: `/api/${version}/hosts/${id}/ad_hoc_commands/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of ad hoc commands associated with the selected host. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of ad hoc commands found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more ad hoc command records. ## Results Each ad hoc command data structure includes the following fields: * `id`: Database ID for this ad hoc command. (integer) * `type`: Data type for this ad hoc command. (choice) * `url`: URL for this ad hoc command. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this ad hoc command was created. (datetime) * `modified`: Timestamp when this ad hoc command was last modified. (datetime) * `name`: Name of this ad hoc command. (string) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `execution_node`: The node the job executed on. (string) * `controller_node`: The instance that managed the execution environment. (string) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `job_type`:  (choice) - `run`: Run - `check`: Check * `inventory`:  (id) * `limit`:  (string) * `credential`:  (id) * `module_name`:  (choice) - `command` - `shell` - `yum` - `apt` - `apt_key` - `apt_repository` - `apt_rpm` - `service` - `group` - `user` - `mount` - `ping` - `selinux` - `setup` - `win_ping` - `win_service` - `win_updates` - `win_group` - `win_user` * `module_args`:  (string) * `forks`:  (integer) * `verbosity`:  (choice) - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `extra_vars`:  (string) * `become_enabled`:  (boolean) * `diff_mode`:  (boolean) ## Sorting To specify that ad hoc commands are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiHostsAdHocCommandsCreate
     * @summary # List Ad Hoc Commands for a Host:
     * @request POST:/api/{version}/hosts/{id}/ad_hoc_commands/
     * @secure
     */
    apiHostsAdHocCommandsCreate: (
      id: string,
      version: string,
      data: AdHocCommandList,
      params: RequestParams = {}
    ) =>
      this.request<AdHocCommandList, any>({
        path: `/api/${version}/hosts/${id}/ad_hoc_commands/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of all groups of which the selected host is directly or indirectly a member. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of groups found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more group records. ## Results Each group data structure includes the following fields: * `id`: Database ID for this group. (integer) * `type`: Data type for this group. (choice) * `url`: URL for this group. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this group was created. (datetime) * `modified`: Timestamp when this group was last modified. (datetime) * `name`: Name of this group. (string) * `description`: Optional description of this group. (string) * `inventory`:  (id) * `variables`: Group variables in JSON or YAML format. (json) ## Sorting To specify that groups are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiHostsAllGroupsList
     * @summary # List All Groups for a Host:
     * @request GET:/api/{version}/hosts/{id}/all_groups/
     * @secure
     */
    apiHostsAllGroupsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Group[]
        },
        any
      >({
        path: `/api/${version}/hosts/${id}/all_groups/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single host record containing the following fields: * `id`: Database ID for this host. (integer) * `type`: Data type for this host. (choice) * `url`: URL for this host. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this host was created. (datetime) * `modified`: Timestamp when this host was last modified. (datetime) * `name`: Name of this host. (string) * `description`: Optional description of this host. (string)
     *
     * @tags api
     * @name ApiHostsAnsibleFactsRead
     * @summary # Retrieve a Host:
     * @request GET:/api/{version}/hosts/{id}/ansible_facts/
     * @secure
     */
    apiHostsAnsibleFactsRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<AnsibleFacts, any>({
        path: `/api/${version}/hosts/${id}/ansible_facts/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of groups associated with the selected host. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of groups found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more group records. ## Results Each group data structure includes the following fields: * `id`: Database ID for this group. (integer) * `type`: Data type for this group. (choice) * `url`: URL for this group. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this group was created. (datetime) * `modified`: Timestamp when this group was last modified. (datetime) * `name`: Name of this group. (string) * `description`: Optional description of this group. (string) * `inventory`:  (id) * `variables`: Group variables in JSON or YAML format. (json) ## Sorting To specify that groups are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiHostsGroupsList
     * @summary # List Groups for a Host:
     * @request GET:/api/{version}/hosts/{id}/groups/
     * @secure
     */
    apiHostsGroupsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Group[]
        },
        any
      >({
        path: `/api/${version}/hosts/${id}/groups/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of groups associated with the selected host. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of groups found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more group records. ## Results Each group data structure includes the following fields: * `id`: Database ID for this group. (integer) * `type`: Data type for this group. (choice) * `url`: URL for this group. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this group was created. (datetime) * `modified`: Timestamp when this group was last modified. (datetime) * `name`: Name of this group. (string) * `description`: Optional description of this group. (string) * `inventory`:  (id) * `variables`: Group variables in JSON or YAML format. (json) ## Sorting To specify that groups are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiHostsGroupsCreate
     * @summary # List Groups for a Host:
     * @request POST:/api/{version}/hosts/{id}/groups/
     * @secure
     */
    apiHostsGroupsCreate: (id: string, version: string, data: Group, params: RequestParams = {}) =>
      this.request<Group, any>({
        path: `/api/${version}/hosts/${id}/groups/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of inventory sources associated with the selected host. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of inventory sources found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more inventory source records. ## Results Each inventory source data structure includes the following fields: * `id`: Database ID for this inventory source. (integer) * `type`: Data type for this inventory source. (choice) * `url`: URL for this inventory source. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this inventory source was created. (datetime) * `modified`: Timestamp when this inventory source was last modified. (datetime) * `name`: Name of this inventory source. (string) * `description`: Optional description of this inventory source. (string) * `source`:  (choice) - `file`: File, Directory or Script - `scm`: Sourced from a Project - `ec2`: Amazon EC2 - `gce`: Google Compute Engine - `azure_rm`: Microsoft Azure Resource Manager - `vmware`: VMware vCenter - `satellite6`: Red Hat Satellite 6 - `openstack`: OpenStack - `rhv`: Red Hat Virtualization - `controller`: Red Hat Ansible Automation Platform - `insights`: Red Hat Insights * `source_path`:  (string) * `source_vars`: Inventory source variables in YAML or JSON format. (string) * `credential`: Cloud credential to use for inventory updates. (integer) * `enabled_var`: Retrieve the enabled state from the given dict of host variables. The enabled variable may be specified as &quot;foo.bar&quot;, in which case the lookup will traverse into nested dicts, equivalent to: from_dict.get(&quot;foo&quot;, {}).get(&quot;bar&quot;, default) (string) * `enabled_value`: Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var=&quot;status.power_state&quot;and enabled_value=&quot;powered_on&quot; with host variables:{   &quot;status&quot;: {     &quot;power_state&quot;: &quot;powered_on&quot;,     &quot;created&quot;: &quot;2020-08-04T18:13:04+00:00&quot;,     &quot;healthy&quot;: true    },    &quot;name&quot;: &quot;foobar&quot;,    &quot;ip_address&quot;: &quot;192.168.2.1&quot;}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled (string) * `host_filter`: Regex where only matching hosts will be imported. (string) * `overwrite`: Overwrite local groups and hosts from remote inventory source. (boolean) * `overwrite_vars`: Overwrite local variables from remote inventory source. (boolean) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `verbosity`:  (choice) - `0`: 0 (WARNING) - `1`: 1 (INFO) - `2`: 2 (DEBUG) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `none`: No External Source * `execution_environment`: The container image to be used for execution. (id) * `inventory`:  (id) * `update_on_launch`:  (boolean) * `update_cache_timeout`:  (integer) * `source_project`: Project containing inventory file used as source. (id) * `last_update_failed`:  (boolean) * `last_updated`:  (datetime) ## Sorting To specify that inventory sources are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiHostsInventorySourcesList
     * @summary # List Inventory Sources for a Host:
     * @request GET:/api/{version}/hosts/{id}/inventory_sources/
     * @secure
     */
    apiHostsInventorySourcesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: InventorySource[]
        },
        any
      >({
        path: `/api/${version}/hosts/${id}/inventory_sources/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of job events associated with the selected host. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of job events found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more job event records. ## Results Each job event data structure includes the following fields: * `id`: Database ID for this job event. (integer) * `type`: Data type for this job event. (choice) * `url`: URL for this job event. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this job event was created. (datetime) * `modified`: Timestamp when this job event was last modified. (datetime) * `job`:  (id) * `event`:  (choice) - `runner_on_failed`: Host Failed - `runner_on_start`: Host Started - `runner_on_ok`: Host OK - `runner_on_error`: Host Failure - `runner_on_skipped`: Host Skipped - `runner_on_unreachable`: Host Unreachable - `runner_on_no_hosts`: No Hosts Remaining - `runner_on_async_poll`: Host Polling - `runner_on_async_ok`: Host Async OK - `runner_on_async_failed`: Host Async Failure - `runner_item_on_ok`: Item OK - `runner_item_on_failed`: Item Failed - `runner_item_on_skipped`: Item Skipped - `runner_retry`: Host Retry - `runner_on_file_diff`: File Difference - `playbook_on_start`: Playbook Started - `playbook_on_notify`: Running Handlers - `playbook_on_include`: Including File - `playbook_on_no_hosts_matched`: No Hosts Matched - `playbook_on_no_hosts_remaining`: No Hosts Remaining - `playbook_on_task_start`: Task Started - `playbook_on_vars_prompt`: Variables Prompted - `playbook_on_setup`: Gathering Facts - `playbook_on_import_for_host`: internal: on Import for Host - `playbook_on_not_import_for_host`: internal: on Not Import for Host - `playbook_on_play_start`: Play Started - `playbook_on_stats`: Playbook Complete - `debug`: Debug - `verbose`: Verbose - `deprecated`: Deprecated - `warning`: Warning - `system_warning`: System Warning - `error`: Error * `counter`:  (integer) * `event_display`:  (string) * `event_data`:  (json) * `event_level`:  (integer) * `failed`:  (boolean) * `changed`:  (boolean) * `uuid`:  (string) * `parent_uuid`:  (string) * `host`:  (id) * `host_name`:  (string) * `playbook`:  (string) * `play`:  (string) * `task`:  (string) * `role`:  (string) * `stdout`:  (string) * `start_line`:  (integer) * `end_line`:  (integer) * `verbosity`:  (integer) ## Sorting To specify that job events are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiHostsJobEventsList
     * @summary # List Job Events for a Host:
     * @request GET:/api/{version}/hosts/{id}/job_events/
     * @secure
     */
    apiHostsJobEventsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: JobEvent[]
        },
        any
      >({
        path: `/api/${version}/hosts/${id}/job_events/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of job host summaries associated with the selected host. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of job host summaries found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more job host summary records. ## Results Each job host summary data structure includes the following fields: * `id`: Database ID for this job host summary. (integer) * `type`: Data type for this job host summary. (choice) * `url`: URL for this job host summary. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this job host summary was created. (datetime) * `modified`: Timestamp when this job host summary was last modified. (datetime) * `job`:  (id) * `host`:  (id) * `host_name`:  (string) * `changed`:  (integer) * `dark`:  (integer) * `failures`:  (integer) * `ok`:  (integer) * `processed`:  (integer) * `skipped`:  (integer) * `failed`:  (boolean) * `ignored`:  (integer) * `rescued`:  (integer) ## Sorting To specify that job host summaries are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiHostsJobHostSummariesList
     * @summary # List Job Host Summaries for a Host:
     * @request GET:/api/{version}/hosts/{id}/job_host_summaries/
     * @secure
     */
    apiHostsJobHostSummariesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: JobHostSummary[]
        },
        any
      >({
        path: `/api/${version}/hosts/${id}/job_host_summaries/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of inventories associated with the selected host. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of inventories found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more inventory records. ## Results Each inventory data structure includes the following fields: * `id`: Database ID for this inventory. (integer) * `type`: Data type for this inventory. (choice) * `url`: URL for this inventory. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this inventory was created. (datetime) * `modified`: Timestamp when this inventory was last modified. (datetime) * `name`: Name of this inventory. (string) * `description`: Optional description of this inventory. (string) * `organization`: Organization containing this inventory. (id) * `kind`: Kind of inventory being represented. (choice) - `""`: Hosts have a direct link to this inventory. - `smart`: Hosts for inventory generated using the host_filter property. * `host_filter`: Filter that will be applied to the hosts of this inventory. (string) * `variables`: Inventory variables in JSON or YAML format. (json) * `has_active_failures`: This field is deprecated and will be removed in a future release. Flag indicating whether any hosts in this inventory have failed. (boolean) * `total_hosts`: This field is deprecated and will be removed in a future release. Total number of hosts in this inventory. (integer) * `hosts_with_active_failures`: This field is deprecated and will be removed in a future release. Number of hosts in this inventory with active failures. (integer) * `total_groups`: This field is deprecated and will be removed in a future release. Total number of groups in this inventory. (integer) * `has_inventory_sources`: This field is deprecated and will be removed in a future release. Flag indicating whether this inventory has any external inventory sources. (boolean) * `total_inventory_sources`: Total number of external inventory sources configured within this inventory. (integer) * `inventory_sources_with_failures`: Number of external inventory sources in this inventory with failures. (integer) * `pending_deletion`: Flag indicating the inventory is being deleted. (boolean) * `prevent_instance_group_fallback`: If enabled, the inventory will prevent adding any organization instance groups to the list of preferred instances groups to run associated job templates on.If this setting is enabled and you provided an empty list, the global instance groups will be applied. (boolean) ## Sorting To specify that inventories are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiHostsSmartInventoriesList
     * @summary # List Inventories for a Host:
     * @request GET:/api/{version}/hosts/{id}/smart_inventories/
     * @secure
     */
    apiHostsSmartInventoriesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Inventory[]
        },
        any
      >({
        path: `/api/${version}/hosts/${id}/smart_inventories/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve all variables defined for a host. # Update Host Variable Data: Make a PUT or PATCH request to this resource to update variables defined for a host.
     *
     * @tags api
     * @name ApiHostsVariableDataRead
     * @summary # Retrieve Host Variable Data:
     * @request GET:/api/{version}/hosts/{id}/variable_data/
     * @secure
     */
    apiHostsVariableDataRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<HostVariableData, any>({
        path: `/api/${version}/hosts/${id}/variable_data/`,
        method: 'GET',
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve all variables defined for a host. # Update Host Variable Data: Make a PUT or PATCH request to this resource to update variables defined for a host.
     *
     * @tags api
     * @name ApiHostsVariableDataUpdate
     * @summary # Retrieve Host Variable Data:
     * @request PUT:/api/{version}/hosts/{id}/variable_data/
     * @secure
     */
    apiHostsVariableDataUpdate: (
      id: string,
      version: string,
      data: HostVariableData,
      params: RequestParams = {}
    ) =>
      this.request<HostVariableData, any>({
        path: `/api/${version}/hosts/${id}/variable_data/`,
        method: 'PUT',
        body: data,
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve all variables defined for a host. # Update Host Variable Data: Make a PUT or PATCH request to this resource to update variables defined for a host.
     *
     * @tags api
     * @name ApiHostsVariableDataPartialUpdate
     * @summary # Retrieve Host Variable Data:
     * @request PATCH:/api/{version}/hosts/{id}/variable_data/
     * @secure
     */
    apiHostsVariableDataPartialUpdate: (
      id: string,
      version: string,
      data: HostVariableData,
      params: RequestParams = {}
    ) =>
      this.request<HostVariableData, any>({
        path: `/api/${version}/hosts/${id}/variable_data/`,
        method: 'PATCH',
        body: data,
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of instance groups. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of instance groups found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more instance group records. ## Results Each instance group data structure includes the following fields: * `id`: Database ID for this instance group. (integer) * `type`: Data type for this instance group. (choice) * `url`: URL for this instance group. (string) * `related`: Data structure with URLs of related resources. (object) * `name`: Name of this instance group. (string) * `created`: Timestamp when this instance group was created. (datetime) * `modified`: Timestamp when this instance group was last modified. (datetime) * `capacity`:  (field) * `consumed_capacity`:  (field) * `percent_capacity_remaining`:  (field) * `jobs_running`: Count of jobs in the running or waiting state that are targeted for this instance group (integer) * `jobs_total`: Count of all jobs that target this instance group (integer) * `instances`:  (field) * `is_container_group`: Indicates whether instances in this group are containerized.Containerized groups have a designated Openshift or Kubernetes cluster. (boolean) * `credential`:  (id) * `policy_instance_percentage`: Minimum percentage of all instances that will be automatically assigned to this group when new instances come online. (integer) * `policy_instance_minimum`: Static minimum number of Instances that will be automatically assign to this group when new instances come online. (integer) * `policy_instance_list`: List of exact-match Instances that will be assigned to this group (json) * `pod_spec_override`:  (string) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) ## Sorting To specify that instance groups are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInstanceGroupsList
     * @summary # List Instance Groups:
     * @request GET:/api/{version}/instance_groups/
     * @secure
     */
    apiInstanceGroupsList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: InstanceGroup[]
        },
        any
      >({
        path: `/api/${version}/instance_groups/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of instance groups. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of instance groups found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more instance group records. ## Results Each instance group data structure includes the following fields: * `id`: Database ID for this instance group. (integer) * `type`: Data type for this instance group. (choice) * `url`: URL for this instance group. (string) * `related`: Data structure with URLs of related resources. (object) * `name`: Name of this instance group. (string) * `created`: Timestamp when this instance group was created. (datetime) * `modified`: Timestamp when this instance group was last modified. (datetime) * `capacity`:  (field) * `consumed_capacity`:  (field) * `percent_capacity_remaining`:  (field) * `jobs_running`: Count of jobs in the running or waiting state that are targeted for this instance group (integer) * `jobs_total`: Count of all jobs that target this instance group (integer) * `instances`:  (field) * `is_container_group`: Indicates whether instances in this group are containerized.Containerized groups have a designated Openshift or Kubernetes cluster. (boolean) * `credential`:  (id) * `policy_instance_percentage`: Minimum percentage of all instances that will be automatically assigned to this group when new instances come online. (integer) * `policy_instance_minimum`: Static minimum number of Instances that will be automatically assign to this group when new instances come online. (integer) * `policy_instance_list`: List of exact-match Instances that will be assigned to this group (json) * `pod_spec_override`:  (string) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) ## Sorting To specify that instance groups are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInstanceGroupsCreate
     * @summary # List Instance Groups:
     * @request POST:/api/{version}/instance_groups/
     * @secure
     */
    apiInstanceGroupsCreate: (version: string, data: InstanceGroup, params: RequestParams = {}) =>
      this.request<InstanceGroup, any>({
        path: `/api/${version}/instance_groups/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single instance group record containing the following fields: * `id`: Database ID for this instance group. (integer) * `type`: Data type for this instance group. (choice) * `url`: URL for this instance group. (string) * `related`: Data structure with URLs of related resources. (object) * `name`: Name of this instance group. (string) * `created`: Timestamp when this instance group was created. (datetime) * `modified`: Timestamp when this instance group was last modified. (datetime) * `capacity`:  (field) * `consumed_capacity`:  (field) * `percent_capacity_remaining`:  (field) * `jobs_running`: Count of jobs in the running or waiting state that are targeted for this instance group (integer) * `jobs_total`: Count of all jobs that target this instance group (integer) * `instances`:  (field) * `is_container_group`: Indicates whether instances in this group are containerized.Containerized groups have a designated Openshift or Kubernetes cluster. (boolean) * `credential`:  (id) * `policy_instance_percentage`: Minimum percentage of all instances that will be automatically assigned to this group when new instances come online. (integer) * `policy_instance_minimum`: Static minimum number of Instances that will be automatically assign to this group when new instances come online. (integer) * `policy_instance_list`: List of exact-match Instances that will be assigned to this group (json) * `pod_spec_override`:  (string) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) # Update an Instance Group: Make a PUT or PATCH request to this resource to update this instance group.  The following fields may be modified: * `name`: Name of this instance group. (string, required) * `is_container_group`: Indicates whether instances in this group are containerized.Containerized groups have a designated Openshift or Kubernetes cluster. (boolean, default=``) * `credential`:  (id, default=``) * `policy_instance_percentage`: Minimum percentage of all instances that will be automatically assigned to this group when new instances come online. (integer, default=`0`) * `policy_instance_minimum`: Static minimum number of Instances that will be automatically assign to this group when new instances come online. (integer, default=`0`) * `policy_instance_list`: List of exact-match Instances that will be assigned to this group (json, default=``) * `pod_spec_override`:  (string, default=`""`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete an Instance Group: Make a DELETE request to this resource to delete this instance group.
     *
     * @tags api
     * @name ApiInstanceGroupsRead
     * @summary # Retrieve an Instance Group:
     * @request GET:/api/{version}/instance_groups/{id}/
     * @secure
     */
    apiInstanceGroupsRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<InstanceGroup, any>({
        path: `/api/${version}/instance_groups/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single instance group record containing the following fields: * `id`: Database ID for this instance group. (integer) * `type`: Data type for this instance group. (choice) * `url`: URL for this instance group. (string) * `related`: Data structure with URLs of related resources. (object) * `name`: Name of this instance group. (string) * `created`: Timestamp when this instance group was created. (datetime) * `modified`: Timestamp when this instance group was last modified. (datetime) * `capacity`:  (field) * `consumed_capacity`:  (field) * `percent_capacity_remaining`:  (field) * `jobs_running`: Count of jobs in the running or waiting state that are targeted for this instance group (integer) * `jobs_total`: Count of all jobs that target this instance group (integer) * `instances`:  (field) * `is_container_group`: Indicates whether instances in this group are containerized.Containerized groups have a designated Openshift or Kubernetes cluster. (boolean) * `credential`:  (id) * `policy_instance_percentage`: Minimum percentage of all instances that will be automatically assigned to this group when new instances come online. (integer) * `policy_instance_minimum`: Static minimum number of Instances that will be automatically assign to this group when new instances come online. (integer) * `policy_instance_list`: List of exact-match Instances that will be assigned to this group (json) * `pod_spec_override`:  (string) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) # Update an Instance Group: Make a PUT or PATCH request to this resource to update this instance group.  The following fields may be modified: * `name`: Name of this instance group. (string, required) * `is_container_group`: Indicates whether instances in this group are containerized.Containerized groups have a designated Openshift or Kubernetes cluster. (boolean, default=``) * `credential`:  (id, default=``) * `policy_instance_percentage`: Minimum percentage of all instances that will be automatically assigned to this group when new instances come online. (integer, default=`0`) * `policy_instance_minimum`: Static minimum number of Instances that will be automatically assign to this group when new instances come online. (integer, default=`0`) * `policy_instance_list`: List of exact-match Instances that will be assigned to this group (json, default=``) * `pod_spec_override`:  (string, default=`""`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete an Instance Group: Make a DELETE request to this resource to delete this instance group.
     *
     * @tags api
     * @name ApiInstanceGroupsUpdate
     * @summary # Retrieve an Instance Group:
     * @request PUT:/api/{version}/instance_groups/{id}/
     * @secure
     */
    apiInstanceGroupsUpdate: (
      id: string,
      version: string,
      data: InstanceGroup,
      params: RequestParams = {}
    ) =>
      this.request<InstanceGroup, any>({
        path: `/api/${version}/instance_groups/${id}/`,
        method: 'PUT',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single instance group record containing the following fields: * `id`: Database ID for this instance group. (integer) * `type`: Data type for this instance group. (choice) * `url`: URL for this instance group. (string) * `related`: Data structure with URLs of related resources. (object) * `name`: Name of this instance group. (string) * `created`: Timestamp when this instance group was created. (datetime) * `modified`: Timestamp when this instance group was last modified. (datetime) * `capacity`:  (field) * `consumed_capacity`:  (field) * `percent_capacity_remaining`:  (field) * `jobs_running`: Count of jobs in the running or waiting state that are targeted for this instance group (integer) * `jobs_total`: Count of all jobs that target this instance group (integer) * `instances`:  (field) * `is_container_group`: Indicates whether instances in this group are containerized.Containerized groups have a designated Openshift or Kubernetes cluster. (boolean) * `credential`:  (id) * `policy_instance_percentage`: Minimum percentage of all instances that will be automatically assigned to this group when new instances come online. (integer) * `policy_instance_minimum`: Static minimum number of Instances that will be automatically assign to this group when new instances come online. (integer) * `policy_instance_list`: List of exact-match Instances that will be assigned to this group (json) * `pod_spec_override`:  (string) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) # Update an Instance Group: Make a PUT or PATCH request to this resource to update this instance group.  The following fields may be modified: * `name`: Name of this instance group. (string, required) * `is_container_group`: Indicates whether instances in this group are containerized.Containerized groups have a designated Openshift or Kubernetes cluster. (boolean, default=``) * `credential`:  (id, default=``) * `policy_instance_percentage`: Minimum percentage of all instances that will be automatically assigned to this group when new instances come online. (integer, default=`0`) * `policy_instance_minimum`: Static minimum number of Instances that will be automatically assign to this group when new instances come online. (integer, default=`0`) * `policy_instance_list`: List of exact-match Instances that will be assigned to this group (json, default=``) * `pod_spec_override`:  (string, default=`""`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete an Instance Group: Make a DELETE request to this resource to delete this instance group.
     *
     * @tags api
     * @name ApiInstanceGroupsPartialUpdate
     * @summary # Retrieve an Instance Group:
     * @request PATCH:/api/{version}/instance_groups/{id}/
     * @secure
     */
    apiInstanceGroupsPartialUpdate: (
      id: string,
      version: string,
      data: InstanceGroup,
      params: RequestParams = {}
    ) =>
      this.request<InstanceGroup, any>({
        path: `/api/${version}/instance_groups/${id}/`,
        method: 'PATCH',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single instance group record containing the following fields: * `id`: Database ID for this instance group. (integer) * `type`: Data type for this instance group. (choice) * `url`: URL for this instance group. (string) * `related`: Data structure with URLs of related resources. (object) * `name`: Name of this instance group. (string) * `created`: Timestamp when this instance group was created. (datetime) * `modified`: Timestamp when this instance group was last modified. (datetime) * `capacity`:  (field) * `consumed_capacity`:  (field) * `percent_capacity_remaining`:  (field) * `jobs_running`: Count of jobs in the running or waiting state that are targeted for this instance group (integer) * `jobs_total`: Count of all jobs that target this instance group (integer) * `instances`:  (field) * `is_container_group`: Indicates whether instances in this group are containerized.Containerized groups have a designated Openshift or Kubernetes cluster. (boolean) * `credential`:  (id) * `policy_instance_percentage`: Minimum percentage of all instances that will be automatically assigned to this group when new instances come online. (integer) * `policy_instance_minimum`: Static minimum number of Instances that will be automatically assign to this group when new instances come online. (integer) * `policy_instance_list`: List of exact-match Instances that will be assigned to this group (json) * `pod_spec_override`:  (string) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) # Update an Instance Group: Make a PUT or PATCH request to this resource to update this instance group.  The following fields may be modified: * `name`: Name of this instance group. (string, required) * `is_container_group`: Indicates whether instances in this group are containerized.Containerized groups have a designated Openshift or Kubernetes cluster. (boolean, default=``) * `credential`:  (id, default=``) * `policy_instance_percentage`: Minimum percentage of all instances that will be automatically assigned to this group when new instances come online. (integer, default=`0`) * `policy_instance_minimum`: Static minimum number of Instances that will be automatically assign to this group when new instances come online. (integer, default=`0`) * `policy_instance_list`: List of exact-match Instances that will be assigned to this group (json, default=``) * `pod_spec_override`:  (string, default=`""`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete an Instance Group: Make a DELETE request to this resource to delete this instance group.
     *
     * @tags api
     * @name ApiInstanceGroupsDelete
     * @summary # Retrieve an Instance Group:
     * @request DELETE:/api/{version}/instance_groups/{id}/
     * @secure
     */
    apiInstanceGroupsDelete: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/instance_groups/${id}/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of instances associated with the selected instance group. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of instances found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more instance records. ## Results Each instance data structure includes the following fields: * `id`: Database ID for this instance. (integer) * `hostname`:  (string) * `type`: Data type for this instance. (choice) * `url`: URL for this instance. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `uuid`:  (string) * `created`: Timestamp when this instance was created. (datetime) * `modified`: Timestamp when this instance was last modified. (datetime) * `last_seen`: Last time instance ran its heartbeat task for main cluster nodes. Last known connection to receptor mesh for execution nodes. (datetime) * `health_check_started`: The last time a health check was initiated on this instance. (datetime) * `health_check_pending`:  (field) * `last_health_check`: Last time a health check was ran on this instance to refresh cpu, memory, and capacity. (datetime) * `errors`: Any error details from the last health check. (string) * `capacity_adjustment`:  (decimal) * `version`:  (string) * `capacity`:  (integer) * `consumed_capacity`:  (field) * `percent_capacity_remaining`:  (field) * `jobs_running`: Count of jobs in the running or waiting state that are targeted for this instance (integer) * `jobs_total`: Count of all jobs that target this instance (integer) * `cpu`:  (decimal) * `memory`: Total system memory of this instance in bytes. (integer) * `cpu_capacity`:  (integer) * `mem_capacity`:  (integer) * `enabled`:  (boolean) * `managed_by_policy`:  (boolean) * `node_type`: Role that this node plays in the mesh. (choice) - `control`: Control plane node - `execution`: Execution plane node - `hybrid`: Controller and execution - `hop`: Message-passing node, no execution capability * `node_state`: Indicates the current life cycle stage of this instance. (choice) - `provisioning`: Provisioning - `provision-fail`: Provisioning Failure - `installed`: Installed - `ready`: Ready - `unavailable`: Unavailable - `deprovisioning`: De-provisioning - `deprovision-fail`: De-provisioning Failure * `ip_address`:  (string) * `listener_port`: Port that Receptor will listen for incoming connections on. (integer) ## Sorting To specify that instances are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInstanceGroupsInstancesList
     * @summary # List Instances for an Instance Group:
     * @request GET:/api/{version}/instance_groups/{id}/instances/
     * @secure
     */
    apiInstanceGroupsInstancesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Instance[]
        },
        any
      >({
        path: `/api/${version}/instance_groups/${id}/instances/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of instances associated with the selected instance group. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of instances found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more instance records. ## Results Each instance data structure includes the following fields: * `id`: Database ID for this instance. (integer) * `hostname`:  (string) * `type`: Data type for this instance. (choice) * `url`: URL for this instance. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `uuid`:  (string) * `created`: Timestamp when this instance was created. (datetime) * `modified`: Timestamp when this instance was last modified. (datetime) * `last_seen`: Last time instance ran its heartbeat task for main cluster nodes. Last known connection to receptor mesh for execution nodes. (datetime) * `health_check_started`: The last time a health check was initiated on this instance. (datetime) * `health_check_pending`:  (field) * `last_health_check`: Last time a health check was ran on this instance to refresh cpu, memory, and capacity. (datetime) * `errors`: Any error details from the last health check. (string) * `capacity_adjustment`:  (decimal) * `version`:  (string) * `capacity`:  (integer) * `consumed_capacity`:  (field) * `percent_capacity_remaining`:  (field) * `jobs_running`: Count of jobs in the running or waiting state that are targeted for this instance (integer) * `jobs_total`: Count of all jobs that target this instance (integer) * `cpu`:  (decimal) * `memory`: Total system memory of this instance in bytes. (integer) * `cpu_capacity`:  (integer) * `mem_capacity`:  (integer) * `enabled`:  (boolean) * `managed_by_policy`:  (boolean) * `node_type`: Role that this node plays in the mesh. (choice) - `control`: Control plane node - `execution`: Execution plane node - `hybrid`: Controller and execution - `hop`: Message-passing node, no execution capability * `node_state`: Indicates the current life cycle stage of this instance. (choice) - `provisioning`: Provisioning - `provision-fail`: Provisioning Failure - `installed`: Installed - `ready`: Ready - `unavailable`: Unavailable - `deprovisioning`: De-provisioning - `deprovision-fail`: De-provisioning Failure * `ip_address`:  (string) * `listener_port`: Port that Receptor will listen for incoming connections on. (integer) ## Sorting To specify that instances are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInstanceGroupsInstancesCreate
     * @summary # List Instances for an Instance Group:
     * @request POST:/api/{version}/instance_groups/{id}/instances/
     * @secure
     */
    apiInstanceGroupsInstancesCreate: (
      id: string,
      version: string,
      data: Instance,
      params: RequestParams = {}
    ) =>
      this.request<Instance, any>({
        path: `/api/${version}/instance_groups/${id}/instances/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of unified jobs associated with the selected instance group. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of unified jobs found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more unified job records. ## Results Each unified job data structure includes the following fields: * `id`: Database ID for this unified job. (integer) * `type`: Data type for this unified job. (choice) * `url`: URL for this unified job. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this unified job was created. (datetime) * `modified`: Timestamp when this unified job was last modified. (datetime) * `name`: Name of this unified job. (string) * `description`: Optional description of this unified job. (string) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `execution_node`: The node the job executed on. (string) * `controller_node`: The instance that managed the execution environment. (string) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) ## Sorting To specify that unified jobs are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInstanceGroupsJobsList
     * @summary # List Unified Jobs for an Instance Group:
     * @request GET:/api/{version}/instance_groups/{id}/jobs/
     * @secure
     */
    apiInstanceGroupsJobsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: UnifiedJobList[]
        },
        any
      >({
        path: `/api/${version}/instance_groups/${id}/jobs/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of instances. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of instances found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more instance records. ## Results Each instance data structure includes the following fields: * `id`: Database ID for this instance. (integer) * `hostname`:  (string) * `type`: Data type for this instance. (choice) * `url`: URL for this instance. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `uuid`:  (string) * `created`: Timestamp when this instance was created. (datetime) * `modified`: Timestamp when this instance was last modified. (datetime) * `last_seen`: Last time instance ran its heartbeat task for main cluster nodes. Last known connection to receptor mesh for execution nodes. (datetime) * `health_check_started`: The last time a health check was initiated on this instance. (datetime) * `health_check_pending`:  (field) * `last_health_check`: Last time a health check was ran on this instance to refresh cpu, memory, and capacity. (datetime) * `errors`: Any error details from the last health check. (string) * `capacity_adjustment`:  (decimal) * `version`:  (string) * `capacity`:  (integer) * `consumed_capacity`:  (field) * `percent_capacity_remaining`:  (field) * `jobs_running`: Count of jobs in the running or waiting state that are targeted for this instance (integer) * `jobs_total`: Count of all jobs that target this instance (integer) * `cpu`:  (decimal) * `memory`: Total system memory of this instance in bytes. (integer) * `cpu_capacity`:  (integer) * `mem_capacity`:  (integer) * `enabled`:  (boolean) * `managed_by_policy`:  (boolean) * `node_type`: Role that this node plays in the mesh. (choice) - `control`: Control plane node - `execution`: Execution plane node - `hybrid`: Controller and execution - `hop`: Message-passing node, no execution capability * `node_state`: Indicates the current life cycle stage of this instance. (choice) - `provisioning`: Provisioning - `provision-fail`: Provisioning Failure - `installed`: Installed - `ready`: Ready - `unavailable`: Unavailable - `deprovisioning`: De-provisioning - `deprovision-fail`: De-provisioning Failure * `ip_address`:  (string) * `listener_port`: Port that Receptor will listen for incoming connections on. (integer) ## Sorting To specify that instances are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInstancesList
     * @summary # List Instances:
     * @request GET:/api/{version}/instances/
     * @secure
     */
    apiInstancesList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Instance[]
        },
        any
      >({
        path: `/api/${version}/instances/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of instances. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of instances found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more instance records. ## Results Each instance data structure includes the following fields: * `id`: Database ID for this instance. (integer) * `hostname`:  (string) * `type`: Data type for this instance. (choice) * `url`: URL for this instance. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `uuid`:  (string) * `created`: Timestamp when this instance was created. (datetime) * `modified`: Timestamp when this instance was last modified. (datetime) * `last_seen`: Last time instance ran its heartbeat task for main cluster nodes. Last known connection to receptor mesh for execution nodes. (datetime) * `health_check_started`: The last time a health check was initiated on this instance. (datetime) * `health_check_pending`:  (field) * `last_health_check`: Last time a health check was ran on this instance to refresh cpu, memory, and capacity. (datetime) * `errors`: Any error details from the last health check. (string) * `capacity_adjustment`:  (decimal) * `version`:  (string) * `capacity`:  (integer) * `consumed_capacity`:  (field) * `percent_capacity_remaining`:  (field) * `jobs_running`: Count of jobs in the running or waiting state that are targeted for this instance (integer) * `jobs_total`: Count of all jobs that target this instance (integer) * `cpu`:  (decimal) * `memory`: Total system memory of this instance in bytes. (integer) * `cpu_capacity`:  (integer) * `mem_capacity`:  (integer) * `enabled`:  (boolean) * `managed_by_policy`:  (boolean) * `node_type`: Role that this node plays in the mesh. (choice) - `control`: Control plane node - `execution`: Execution plane node - `hybrid`: Controller and execution - `hop`: Message-passing node, no execution capability * `node_state`: Indicates the current life cycle stage of this instance. (choice) - `provisioning`: Provisioning - `provision-fail`: Provisioning Failure - `installed`: Installed - `ready`: Ready - `unavailable`: Unavailable - `deprovisioning`: De-provisioning - `deprovision-fail`: De-provisioning Failure * `ip_address`:  (string) * `listener_port`: Port that Receptor will listen for incoming connections on. (integer) ## Sorting To specify that instances are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInstancesCreate
     * @summary # List Instances:
     * @request POST:/api/{version}/instances/
     * @secure
     */
    apiInstancesCreate: (version: string, data: Instance, params: RequestParams = {}) =>
      this.request<Instance, any>({
        path: `/api/${version}/instances/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single instance record containing the following fields: * `id`: Database ID for this instance. (integer) * `hostname`:  (string) * `type`: Data type for this instance. (choice) * `url`: URL for this instance. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `uuid`:  (string) * `created`: Timestamp when this instance was created. (datetime) * `modified`: Timestamp when this instance was last modified. (datetime) * `last_seen`: Last time instance ran its heartbeat task for main cluster nodes. Last known connection to receptor mesh for execution nodes. (datetime) * `health_check_started`: The last time a health check was initiated on this instance. (datetime) * `health_check_pending`:  (field) * `last_health_check`: Last time a health check was ran on this instance to refresh cpu, memory, and capacity. (datetime) * `errors`: Any error details from the last health check. (string) * `capacity_adjustment`:  (decimal) * `version`:  (string) * `capacity`:  (integer) * `consumed_capacity`:  (field) * `percent_capacity_remaining`:  (field) * `jobs_running`: Count of jobs in the running or waiting state that are targeted for this instance (integer) * `jobs_total`: Count of all jobs that target this instance (integer) * `cpu`:  (decimal) * `memory`: Total system memory of this instance in bytes. (integer) * `cpu_capacity`:  (integer) * `mem_capacity`:  (integer) * `enabled`:  (boolean) * `managed_by_policy`:  (boolean) * `node_type`: Role that this node plays in the mesh. (choice) - `control`: Control plane node - `execution`: Execution plane node - `hybrid`: Controller and execution - `hop`: Message-passing node, no execution capability * `node_state`: Indicates the current life cycle stage of this instance. (choice) - `provisioning`: Provisioning - `provision-fail`: Provisioning Failure - `installed`: Installed - `ready`: Ready - `unavailable`: Unavailable - `deprovisioning`: De-provisioning - `deprovision-fail`: De-provisioning Failure * `ip_address`:  (string) * `listener_port`: Port that Receptor will listen for incoming connections on. (integer) # Update an Instance: Make a PUT or PATCH request to this resource to update this instance.  The following fields may be modified: * `hostname`:  (string, required) * `capacity_adjustment`:  (decimal, default=`1`) * `enabled`:  (boolean, default=`True`) * `managed_by_policy`:  (boolean, default=`True`) * `node_type`: Role that this node plays in the mesh. (choice) - `control`: Control plane node - `execution`: Execution plane node (default) - `hybrid`: Controller and execution - `hop`: Message-passing node, no execution capability * `node_state`: Indicates the current life cycle stage of this instance. (choice) - `provisioning`: Provisioning - `provision-fail`: Provisioning Failure - `installed`: Installed (default) - `ready`: Ready - `unavailable`: Unavailable - `deprovisioning`: De-provisioning - `deprovision-fail`: De-provisioning Failure * `listener_port`: Port that Receptor will listen for incoming connections on. (integer, default=`27199`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified.
     *
     * @tags api
     * @name ApiInstancesRead
     * @summary # Retrieve an Instance:
     * @request GET:/api/{version}/instances/{id}/
     * @secure
     */
    apiInstancesRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<Instance, any>({
        path: `/api/${version}/instances/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single instance record containing the following fields: * `id`: Database ID for this instance. (integer) * `hostname`:  (string) * `type`: Data type for this instance. (choice) * `url`: URL for this instance. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `uuid`:  (string) * `created`: Timestamp when this instance was created. (datetime) * `modified`: Timestamp when this instance was last modified. (datetime) * `last_seen`: Last time instance ran its heartbeat task for main cluster nodes. Last known connection to receptor mesh for execution nodes. (datetime) * `health_check_started`: The last time a health check was initiated on this instance. (datetime) * `health_check_pending`:  (field) * `last_health_check`: Last time a health check was ran on this instance to refresh cpu, memory, and capacity. (datetime) * `errors`: Any error details from the last health check. (string) * `capacity_adjustment`:  (decimal) * `version`:  (string) * `capacity`:  (integer) * `consumed_capacity`:  (field) * `percent_capacity_remaining`:  (field) * `jobs_running`: Count of jobs in the running or waiting state that are targeted for this instance (integer) * `jobs_total`: Count of all jobs that target this instance (integer) * `cpu`:  (decimal) * `memory`: Total system memory of this instance in bytes. (integer) * `cpu_capacity`:  (integer) * `mem_capacity`:  (integer) * `enabled`:  (boolean) * `managed_by_policy`:  (boolean) * `node_type`: Role that this node plays in the mesh. (choice) - `control`: Control plane node - `execution`: Execution plane node - `hybrid`: Controller and execution - `hop`: Message-passing node, no execution capability * `node_state`: Indicates the current life cycle stage of this instance. (choice) - `provisioning`: Provisioning - `provision-fail`: Provisioning Failure - `installed`: Installed - `ready`: Ready - `unavailable`: Unavailable - `deprovisioning`: De-provisioning - `deprovision-fail`: De-provisioning Failure * `ip_address`:  (string) * `listener_port`: Port that Receptor will listen for incoming connections on. (integer) # Update an Instance: Make a PUT or PATCH request to this resource to update this instance.  The following fields may be modified: * `hostname`:  (string, required) * `capacity_adjustment`:  (decimal, default=`1`) * `enabled`:  (boolean, default=`True`) * `managed_by_policy`:  (boolean, default=`True`) * `node_type`: Role that this node plays in the mesh. (choice) - `control`: Control plane node - `execution`: Execution plane node (default) - `hybrid`: Controller and execution - `hop`: Message-passing node, no execution capability * `node_state`: Indicates the current life cycle stage of this instance. (choice) - `provisioning`: Provisioning - `provision-fail`: Provisioning Failure - `installed`: Installed (default) - `ready`: Ready - `unavailable`: Unavailable - `deprovisioning`: De-provisioning - `deprovision-fail`: De-provisioning Failure * `listener_port`: Port that Receptor will listen for incoming connections on. (integer, default=`27199`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified.
     *
     * @tags api
     * @name ApiInstancesUpdate
     * @summary # Retrieve an Instance:
     * @request PUT:/api/{version}/instances/{id}/
     * @secure
     */
    apiInstancesUpdate: (id: string, version: string, data: Instance, params: RequestParams = {}) =>
      this.request<Instance, any>({
        path: `/api/${version}/instances/${id}/`,
        method: 'PUT',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single instance record containing the following fields: * `id`: Database ID for this instance. (integer) * `hostname`:  (string) * `type`: Data type for this instance. (choice) * `url`: URL for this instance. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `uuid`:  (string) * `created`: Timestamp when this instance was created. (datetime) * `modified`: Timestamp when this instance was last modified. (datetime) * `last_seen`: Last time instance ran its heartbeat task for main cluster nodes. Last known connection to receptor mesh for execution nodes. (datetime) * `health_check_started`: The last time a health check was initiated on this instance. (datetime) * `health_check_pending`:  (field) * `last_health_check`: Last time a health check was ran on this instance to refresh cpu, memory, and capacity. (datetime) * `errors`: Any error details from the last health check. (string) * `capacity_adjustment`:  (decimal) * `version`:  (string) * `capacity`:  (integer) * `consumed_capacity`:  (field) * `percent_capacity_remaining`:  (field) * `jobs_running`: Count of jobs in the running or waiting state that are targeted for this instance (integer) * `jobs_total`: Count of all jobs that target this instance (integer) * `cpu`:  (decimal) * `memory`: Total system memory of this instance in bytes. (integer) * `cpu_capacity`:  (integer) * `mem_capacity`:  (integer) * `enabled`:  (boolean) * `managed_by_policy`:  (boolean) * `node_type`: Role that this node plays in the mesh. (choice) - `control`: Control plane node - `execution`: Execution plane node - `hybrid`: Controller and execution - `hop`: Message-passing node, no execution capability * `node_state`: Indicates the current life cycle stage of this instance. (choice) - `provisioning`: Provisioning - `provision-fail`: Provisioning Failure - `installed`: Installed - `ready`: Ready - `unavailable`: Unavailable - `deprovisioning`: De-provisioning - `deprovision-fail`: De-provisioning Failure * `ip_address`:  (string) * `listener_port`: Port that Receptor will listen for incoming connections on. (integer) # Update an Instance: Make a PUT or PATCH request to this resource to update this instance.  The following fields may be modified: * `hostname`:  (string, required) * `capacity_adjustment`:  (decimal, default=`1`) * `enabled`:  (boolean, default=`True`) * `managed_by_policy`:  (boolean, default=`True`) * `node_type`: Role that this node plays in the mesh. (choice) - `control`: Control plane node - `execution`: Execution plane node (default) - `hybrid`: Controller and execution - `hop`: Message-passing node, no execution capability * `node_state`: Indicates the current life cycle stage of this instance. (choice) - `provisioning`: Provisioning - `provision-fail`: Provisioning Failure - `installed`: Installed (default) - `ready`: Ready - `unavailable`: Unavailable - `deprovisioning`: De-provisioning - `deprovision-fail`: De-provisioning Failure * `listener_port`: Port that Receptor will listen for incoming connections on. (integer, default=`27199`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified.
     *
     * @tags api
     * @name ApiInstancesPartialUpdate
     * @summary # Retrieve an Instance:
     * @request PATCH:/api/{version}/instances/{id}/
     * @secure
     */
    apiInstancesPartialUpdate: (
      id: string,
      version: string,
      data: Instance,
      params: RequestParams = {}
    ) =>
      this.request<Instance, any>({
        path: `/api/${version}/instances/${id}/`,
        method: 'PATCH',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Health checks are used to obtain important data about an instance. Instance fields affected by the health check are shown in this view. Fundamentally, health checks require running code on the machine in question. - For instances with `node_type` of "control" or "hybrid", health checks are performed as part of a periodic task that runs in the background. - For instances with `node_type` of "execution", health checks are done by submitting a work unit through the receptor mesh. If ran through the receptor mesh, the invoked command is: ``` ansible-runner worker --worker-info ``` For execution nodes, these checks are _not_ performed on a regular basis. Health checks against functional nodes will be ran when the node is first discovered. Health checks against nodes with errors will be repeated at a reduced frequency. # Manually Initiate a Health Check For purposes of error remediation or debugging, a health check can be manually initiated by making a POST request to this endpoint. This will submit the work unit to the target node through the receptor mesh and wait for it to finish. The model will be updated with the result. Up-to-date values of the fields will be returned in the response data.
     *
     * @tags api
     * @name ApiInstancesHealthCheckList
     * @summary # Health Check Data
     * @request GET:/api/{version}/instances/{id}/health_check/
     * @secure
     */
    apiInstancesHealthCheckList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: InstanceHealthCheck[]
        },
        any
      >({
        path: `/api/${version}/instances/${id}/health_check/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Health checks are used to obtain important data about an instance. Instance fields affected by the health check are shown in this view. Fundamentally, health checks require running code on the machine in question. - For instances with `node_type` of "control" or "hybrid", health checks are performed as part of a periodic task that runs in the background. - For instances with `node_type` of "execution", health checks are done by submitting a work unit through the receptor mesh. If ran through the receptor mesh, the invoked command is: ``` ansible-runner worker --worker-info ``` For execution nodes, these checks are _not_ performed on a regular basis. Health checks against functional nodes will be ran when the node is first discovered. Health checks against nodes with errors will be repeated at a reduced frequency. # Manually Initiate a Health Check For purposes of error remediation or debugging, a health check can be manually initiated by making a POST request to this endpoint. This will submit the work unit to the target node through the receptor mesh and wait for it to finish. The model will be updated with the result. Up-to-date values of the fields will be returned in the response data.
     *
     * @tags api
     * @name ApiInstancesHealthCheckCreate
     * @summary # Health Check Data
     * @request POST:/api/{version}/instances/{id}/health_check/
     * @secure
     */
    apiInstancesHealthCheckCreate: (
      id: string,
      version: string,
      data: InstanceHealthCheck,
      params: RequestParams = {}
    ) =>
      this.request<InstanceHealthCheck, any>({
        path: `/api/${version}/instances/${id}/health_check/`,
        method: 'POST',
        body: data,
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiInstancesInstallBundleList
     * @request GET:/api/{version}/instances/{id}/install_bundle/
     * @secure
     */
    apiInstancesInstallBundleList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Instance[]
        },
        any
      >({
        path: `/api/${version}/instances/${id}/install_bundle/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of instance groups associated with the selected instance. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of instance groups found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more instance group records. ## Results Each instance group data structure includes the following fields: * `id`: Database ID for this instance group. (integer) * `type`: Data type for this instance group. (choice) * `url`: URL for this instance group. (string) * `related`: Data structure with URLs of related resources. (object) * `name`: Name of this instance group. (string) * `created`: Timestamp when this instance group was created. (datetime) * `modified`: Timestamp when this instance group was last modified. (datetime) * `capacity`:  (field) * `consumed_capacity`:  (field) * `percent_capacity_remaining`:  (field) * `jobs_running`: Count of jobs in the running or waiting state that are targeted for this instance group (integer) * `jobs_total`: Count of all jobs that target this instance group (integer) * `instances`:  (field) * `is_container_group`: Indicates whether instances in this group are containerized.Containerized groups have a designated Openshift or Kubernetes cluster. (boolean) * `credential`:  (id) * `policy_instance_percentage`: Minimum percentage of all instances that will be automatically assigned to this group when new instances come online. (integer) * `policy_instance_minimum`: Static minimum number of Instances that will be automatically assign to this group when new instances come online. (integer) * `policy_instance_list`: List of exact-match Instances that will be assigned to this group (json) * `pod_spec_override`:  (string) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) ## Sorting To specify that instance groups are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInstancesInstanceGroupsList
     * @summary # List Instance Groups for an Instance:
     * @request GET:/api/{version}/instances/{id}/instance_groups/
     * @secure
     */
    apiInstancesInstanceGroupsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: InstanceGroup[]
        },
        any
      >({
        path: `/api/${version}/instances/${id}/instance_groups/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of instance groups associated with the selected instance. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of instance groups found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more instance group records. ## Results Each instance group data structure includes the following fields: * `id`: Database ID for this instance group. (integer) * `type`: Data type for this instance group. (choice) * `url`: URL for this instance group. (string) * `related`: Data structure with URLs of related resources. (object) * `name`: Name of this instance group. (string) * `created`: Timestamp when this instance group was created. (datetime) * `modified`: Timestamp when this instance group was last modified. (datetime) * `capacity`:  (field) * `consumed_capacity`:  (field) * `percent_capacity_remaining`:  (field) * `jobs_running`: Count of jobs in the running or waiting state that are targeted for this instance group (integer) * `jobs_total`: Count of all jobs that target this instance group (integer) * `instances`:  (field) * `is_container_group`: Indicates whether instances in this group are containerized.Containerized groups have a designated Openshift or Kubernetes cluster. (boolean) * `credential`:  (id) * `policy_instance_percentage`: Minimum percentage of all instances that will be automatically assigned to this group when new instances come online. (integer) * `policy_instance_minimum`: Static minimum number of Instances that will be automatically assign to this group when new instances come online. (integer) * `policy_instance_list`: List of exact-match Instances that will be assigned to this group (json) * `pod_spec_override`:  (string) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) ## Sorting To specify that instance groups are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInstancesInstanceGroupsCreate
     * @summary # List Instance Groups for an Instance:
     * @request POST:/api/{version}/instances/{id}/instance_groups/
     * @secure
     */
    apiInstancesInstanceGroupsCreate: (
      id: string,
      version: string,
      data: InstanceGroup,
      params: RequestParams = {}
    ) =>
      this.request<InstanceGroup, any>({
        path: `/api/${version}/instances/${id}/instance_groups/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of unified jobs associated with the selected instance. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of unified jobs found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more unified job records. ## Results Each unified job data structure includes the following fields: * `id`: Database ID for this unified job. (integer) * `type`: Data type for this unified job. (choice) * `url`: URL for this unified job. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this unified job was created. (datetime) * `modified`: Timestamp when this unified job was last modified. (datetime) * `name`: Name of this unified job. (string) * `description`: Optional description of this unified job. (string) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `execution_node`: The node the job executed on. (string) * `controller_node`: The instance that managed the execution environment. (string) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) ## Sorting To specify that unified jobs are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInstancesJobsList
     * @summary # List Unified Jobs for an Instance:
     * @request GET:/api/{version}/instances/{id}/jobs/
     * @secure
     */
    apiInstancesJobsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: UnifiedJobList[]
        },
        any
      >({
        path: `/api/${version}/instances/${id}/jobs/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of instances associated with the selected instance. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of instances found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more instance records. ## Results Each instance data structure includes the following fields: * `id`: Database ID for this instance. (integer) * `hostname`:  (string) * `type`: Data type for this instance. (choice) * `url`: URL for this instance. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `uuid`:  (string) * `created`: Timestamp when this instance was created. (datetime) * `modified`: Timestamp when this instance was last modified. (datetime) * `last_seen`: Last time instance ran its heartbeat task for main cluster nodes. Last known connection to receptor mesh for execution nodes. (datetime) * `health_check_started`: The last time a health check was initiated on this instance. (datetime) * `health_check_pending`:  (field) * `last_health_check`: Last time a health check was ran on this instance to refresh cpu, memory, and capacity. (datetime) * `errors`: Any error details from the last health check. (string) * `capacity_adjustment`:  (decimal) * `version`:  (string) * `capacity`:  (integer) * `consumed_capacity`:  (field) * `percent_capacity_remaining`:  (field) * `jobs_running`: Count of jobs in the running or waiting state that are targeted for this instance (integer) * `jobs_total`: Count of all jobs that target this instance (integer) * `cpu`:  (decimal) * `memory`: Total system memory of this instance in bytes. (integer) * `cpu_capacity`:  (integer) * `mem_capacity`:  (integer) * `enabled`:  (boolean) * `managed_by_policy`:  (boolean) * `node_type`: Role that this node plays in the mesh. (choice) - `control`: Control plane node - `execution`: Execution plane node - `hybrid`: Controller and execution - `hop`: Message-passing node, no execution capability * `node_state`: Indicates the current life cycle stage of this instance. (choice) - `provisioning`: Provisioning - `provision-fail`: Provisioning Failure - `installed`: Installed - `ready`: Ready - `unavailable`: Unavailable - `deprovisioning`: De-provisioning - `deprovision-fail`: De-provisioning Failure * `ip_address`:  (string) * `listener_port`: Port that Receptor will listen for incoming connections on. (integer) ## Sorting To specify that instances are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInstancesPeersList
     * @summary # List Instances for an Instance:
     * @request GET:/api/{version}/instances/{id}/peers/
     * @secure
     */
    apiInstancesPeersList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Instance[]
        },
        any
      >({
        path: `/api/${version}/instances/${id}/peers/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of inventories. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of inventories found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more inventory records. ## Results Each inventory data structure includes the following fields: * `id`: Database ID for this inventory. (integer) * `type`: Data type for this inventory. (choice) * `url`: URL for this inventory. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this inventory was created. (datetime) * `modified`: Timestamp when this inventory was last modified. (datetime) * `name`: Name of this inventory. (string) * `description`: Optional description of this inventory. (string) * `organization`: Organization containing this inventory. (id) * `kind`: Kind of inventory being represented. (choice) - `""`: Hosts have a direct link to this inventory. - `smart`: Hosts for inventory generated using the host_filter property. * `host_filter`: Filter that will be applied to the hosts of this inventory. (string) * `variables`: Inventory variables in JSON or YAML format. (json) * `has_active_failures`: This field is deprecated and will be removed in a future release. Flag indicating whether any hosts in this inventory have failed. (boolean) * `total_hosts`: This field is deprecated and will be removed in a future release. Total number of hosts in this inventory. (integer) * `hosts_with_active_failures`: This field is deprecated and will be removed in a future release. Number of hosts in this inventory with active failures. (integer) * `total_groups`: This field is deprecated and will be removed in a future release. Total number of groups in this inventory. (integer) * `has_inventory_sources`: This field is deprecated and will be removed in a future release. Flag indicating whether this inventory has any external inventory sources. (boolean) * `total_inventory_sources`: Total number of external inventory sources configured within this inventory. (integer) * `inventory_sources_with_failures`: Number of external inventory sources in this inventory with failures. (integer) * `pending_deletion`: Flag indicating the inventory is being deleted. (boolean) * `prevent_instance_group_fallback`: If enabled, the inventory will prevent adding any organization instance groups to the list of preferred instances groups to run associated job templates on.If this setting is enabled and you provided an empty list, the global instance groups will be applied. (boolean) ## Sorting To specify that inventories are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventoriesList
     * @summary # List Inventories:
     * @request GET:/api/{version}/inventories/
     * @secure
     */
    apiInventoriesList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Inventory[]
        },
        any
      >({
        path: `/api/${version}/inventories/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of inventories. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of inventories found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more inventory records. ## Results Each inventory data structure includes the following fields: * `id`: Database ID for this inventory. (integer) * `type`: Data type for this inventory. (choice) * `url`: URL for this inventory. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this inventory was created. (datetime) * `modified`: Timestamp when this inventory was last modified. (datetime) * `name`: Name of this inventory. (string) * `description`: Optional description of this inventory. (string) * `organization`: Organization containing this inventory. (id) * `kind`: Kind of inventory being represented. (choice) - `""`: Hosts have a direct link to this inventory. - `smart`: Hosts for inventory generated using the host_filter property. * `host_filter`: Filter that will be applied to the hosts of this inventory. (string) * `variables`: Inventory variables in JSON or YAML format. (json) * `has_active_failures`: This field is deprecated and will be removed in a future release. Flag indicating whether any hosts in this inventory have failed. (boolean) * `total_hosts`: This field is deprecated and will be removed in a future release. Total number of hosts in this inventory. (integer) * `hosts_with_active_failures`: This field is deprecated and will be removed in a future release. Number of hosts in this inventory with active failures. (integer) * `total_groups`: This field is deprecated and will be removed in a future release. Total number of groups in this inventory. (integer) * `has_inventory_sources`: This field is deprecated and will be removed in a future release. Flag indicating whether this inventory has any external inventory sources. (boolean) * `total_inventory_sources`: Total number of external inventory sources configured within this inventory. (integer) * `inventory_sources_with_failures`: Number of external inventory sources in this inventory with failures. (integer) * `pending_deletion`: Flag indicating the inventory is being deleted. (boolean) * `prevent_instance_group_fallback`: If enabled, the inventory will prevent adding any organization instance groups to the list of preferred instances groups to run associated job templates on.If this setting is enabled and you provided an empty list, the global instance groups will be applied. (boolean) ## Sorting To specify that inventories are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventoriesCreate
     * @summary # List Inventories:
     * @request POST:/api/{version}/inventories/
     * @secure
     */
    apiInventoriesCreate: (version: string, data: Inventory, params: RequestParams = {}) =>
      this.request<Inventory, any>({
        path: `/api/${version}/inventories/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single inventory record containing the following fields: * `id`: Database ID for this inventory. (integer) * `type`: Data type for this inventory. (choice) * `url`: URL for this inventory. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this inventory was created. (datetime) * `modified`: Timestamp when this inventory was last modified. (datetime) * `name`: Name of this inventory. (string) * `description`: Optional description of this inventory. (string) * `organization`: Organization containing this inventory. (id) * `kind`: Kind of inventory being represented. (choice) - `""`: Hosts have a direct link to this inventory. - `smart`: Hosts for inventory generated using the host_filter property. * `host_filter`: Filter that will be applied to the hosts of this inventory. (string) * `variables`: Inventory variables in JSON or YAML format. (json) * `has_active_failures`: This field is deprecated and will be removed in a future release. Flag indicating whether any hosts in this inventory have failed. (boolean) * `total_hosts`: This field is deprecated and will be removed in a future release. Total number of hosts in this inventory. (integer) * `hosts_with_active_failures`: This field is deprecated and will be removed in a future release. Number of hosts in this inventory with active failures. (integer) * `total_groups`: This field is deprecated and will be removed in a future release. Total number of groups in this inventory. (integer) * `has_inventory_sources`: This field is deprecated and will be removed in a future release. Flag indicating whether this inventory has any external inventory sources. (boolean) * `total_inventory_sources`: Total number of external inventory sources configured within this inventory. (integer) * `inventory_sources_with_failures`: Number of external inventory sources in this inventory with failures. (integer) * `pending_deletion`: Flag indicating the inventory is being deleted. (boolean) * `prevent_instance_group_fallback`: If enabled, the inventory will prevent adding any organization instance groups to the list of preferred instances groups to run associated job templates on.If this setting is enabled and you provided an empty list, the global instance groups will be applied. (boolean) # Update an Inventory: Make a PUT or PATCH request to this resource to update this inventory.  The following fields may be modified: * `name`: Name of this inventory. (string, required) * `description`: Optional description of this inventory. (string, default=`""`) * `organization`: Organization containing this inventory. (id, required) * `kind`: Kind of inventory being represented. (choice) - `""`: Hosts have a direct link to this inventory. (default) - `smart`: Hosts for inventory generated using the host_filter property. * `host_filter`: Filter that will be applied to the hosts of this inventory. (string, default=`""`) * `variables`: Inventory variables in JSON or YAML format. (json, default=``) * `prevent_instance_group_fallback`: If enabled, the inventory will prevent adding any organization instance groups to the list of preferred instances groups to run associated job templates on.If this setting is enabled and you provided an empty list, the global instance groups will be applied. (boolean, default=`False`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete an Inventory: Make a DELETE request to this resource to delete this inventory.
     *
     * @tags api
     * @name ApiInventoriesRead
     * @summary # Retrieve an Inventory:
     * @request GET:/api/{version}/inventories/{id}/
     * @secure
     */
    apiInventoriesRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<Inventory, any>({
        path: `/api/${version}/inventories/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single inventory record containing the following fields: * `id`: Database ID for this inventory. (integer) * `type`: Data type for this inventory. (choice) * `url`: URL for this inventory. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this inventory was created. (datetime) * `modified`: Timestamp when this inventory was last modified. (datetime) * `name`: Name of this inventory. (string) * `description`: Optional description of this inventory. (string) * `organization`: Organization containing this inventory. (id) * `kind`: Kind of inventory being represented. (choice) - `""`: Hosts have a direct link to this inventory. - `smart`: Hosts for inventory generated using the host_filter property. * `host_filter`: Filter that will be applied to the hosts of this inventory. (string) * `variables`: Inventory variables in JSON or YAML format. (json) * `has_active_failures`: This field is deprecated and will be removed in a future release. Flag indicating whether any hosts in this inventory have failed. (boolean) * `total_hosts`: This field is deprecated and will be removed in a future release. Total number of hosts in this inventory. (integer) * `hosts_with_active_failures`: This field is deprecated and will be removed in a future release. Number of hosts in this inventory with active failures. (integer) * `total_groups`: This field is deprecated and will be removed in a future release. Total number of groups in this inventory. (integer) * `has_inventory_sources`: This field is deprecated and will be removed in a future release. Flag indicating whether this inventory has any external inventory sources. (boolean) * `total_inventory_sources`: Total number of external inventory sources configured within this inventory. (integer) * `inventory_sources_with_failures`: Number of external inventory sources in this inventory with failures. (integer) * `pending_deletion`: Flag indicating the inventory is being deleted. (boolean) * `prevent_instance_group_fallback`: If enabled, the inventory will prevent adding any organization instance groups to the list of preferred instances groups to run associated job templates on.If this setting is enabled and you provided an empty list, the global instance groups will be applied. (boolean) # Update an Inventory: Make a PUT or PATCH request to this resource to update this inventory.  The following fields may be modified: * `name`: Name of this inventory. (string, required) * `description`: Optional description of this inventory. (string, default=`""`) * `organization`: Organization containing this inventory. (id, required) * `kind`: Kind of inventory being represented. (choice) - `""`: Hosts have a direct link to this inventory. (default) - `smart`: Hosts for inventory generated using the host_filter property. * `host_filter`: Filter that will be applied to the hosts of this inventory. (string, default=`""`) * `variables`: Inventory variables in JSON or YAML format. (json, default=``) * `prevent_instance_group_fallback`: If enabled, the inventory will prevent adding any organization instance groups to the list of preferred instances groups to run associated job templates on.If this setting is enabled and you provided an empty list, the global instance groups will be applied. (boolean, default=`False`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete an Inventory: Make a DELETE request to this resource to delete this inventory.
     *
     * @tags api
     * @name ApiInventoriesUpdate
     * @summary # Retrieve an Inventory:
     * @request PUT:/api/{version}/inventories/{id}/
     * @secure
     */
    apiInventoriesUpdate: (
      id: string,
      version: string,
      data: Inventory,
      params: RequestParams = {}
    ) =>
      this.request<Inventory, any>({
        path: `/api/${version}/inventories/${id}/`,
        method: 'PUT',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single inventory record containing the following fields: * `id`: Database ID for this inventory. (integer) * `type`: Data type for this inventory. (choice) * `url`: URL for this inventory. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this inventory was created. (datetime) * `modified`: Timestamp when this inventory was last modified. (datetime) * `name`: Name of this inventory. (string) * `description`: Optional description of this inventory. (string) * `organization`: Organization containing this inventory. (id) * `kind`: Kind of inventory being represented. (choice) - `""`: Hosts have a direct link to this inventory. - `smart`: Hosts for inventory generated using the host_filter property. * `host_filter`: Filter that will be applied to the hosts of this inventory. (string) * `variables`: Inventory variables in JSON or YAML format. (json) * `has_active_failures`: This field is deprecated and will be removed in a future release. Flag indicating whether any hosts in this inventory have failed. (boolean) * `total_hosts`: This field is deprecated and will be removed in a future release. Total number of hosts in this inventory. (integer) * `hosts_with_active_failures`: This field is deprecated and will be removed in a future release. Number of hosts in this inventory with active failures. (integer) * `total_groups`: This field is deprecated and will be removed in a future release. Total number of groups in this inventory. (integer) * `has_inventory_sources`: This field is deprecated and will be removed in a future release. Flag indicating whether this inventory has any external inventory sources. (boolean) * `total_inventory_sources`: Total number of external inventory sources configured within this inventory. (integer) * `inventory_sources_with_failures`: Number of external inventory sources in this inventory with failures. (integer) * `pending_deletion`: Flag indicating the inventory is being deleted. (boolean) * `prevent_instance_group_fallback`: If enabled, the inventory will prevent adding any organization instance groups to the list of preferred instances groups to run associated job templates on.If this setting is enabled and you provided an empty list, the global instance groups will be applied. (boolean) # Update an Inventory: Make a PUT or PATCH request to this resource to update this inventory.  The following fields may be modified: * `name`: Name of this inventory. (string, required) * `description`: Optional description of this inventory. (string, default=`""`) * `organization`: Organization containing this inventory. (id, required) * `kind`: Kind of inventory being represented. (choice) - `""`: Hosts have a direct link to this inventory. (default) - `smart`: Hosts for inventory generated using the host_filter property. * `host_filter`: Filter that will be applied to the hosts of this inventory. (string, default=`""`) * `variables`: Inventory variables in JSON or YAML format. (json, default=``) * `prevent_instance_group_fallback`: If enabled, the inventory will prevent adding any organization instance groups to the list of preferred instances groups to run associated job templates on.If this setting is enabled and you provided an empty list, the global instance groups will be applied. (boolean, default=`False`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete an Inventory: Make a DELETE request to this resource to delete this inventory.
     *
     * @tags api
     * @name ApiInventoriesPartialUpdate
     * @summary # Retrieve an Inventory:
     * @request PATCH:/api/{version}/inventories/{id}/
     * @secure
     */
    apiInventoriesPartialUpdate: (
      id: string,
      version: string,
      data: Inventory,
      params: RequestParams = {}
    ) =>
      this.request<Inventory, any>({
        path: `/api/${version}/inventories/${id}/`,
        method: 'PATCH',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single inventory record containing the following fields: * `id`: Database ID for this inventory. (integer) * `type`: Data type for this inventory. (choice) * `url`: URL for this inventory. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this inventory was created. (datetime) * `modified`: Timestamp when this inventory was last modified. (datetime) * `name`: Name of this inventory. (string) * `description`: Optional description of this inventory. (string) * `organization`: Organization containing this inventory. (id) * `kind`: Kind of inventory being represented. (choice) - `""`: Hosts have a direct link to this inventory. - `smart`: Hosts for inventory generated using the host_filter property. * `host_filter`: Filter that will be applied to the hosts of this inventory. (string) * `variables`: Inventory variables in JSON or YAML format. (json) * `has_active_failures`: This field is deprecated and will be removed in a future release. Flag indicating whether any hosts in this inventory have failed. (boolean) * `total_hosts`: This field is deprecated and will be removed in a future release. Total number of hosts in this inventory. (integer) * `hosts_with_active_failures`: This field is deprecated and will be removed in a future release. Number of hosts in this inventory with active failures. (integer) * `total_groups`: This field is deprecated and will be removed in a future release. Total number of groups in this inventory. (integer) * `has_inventory_sources`: This field is deprecated and will be removed in a future release. Flag indicating whether this inventory has any external inventory sources. (boolean) * `total_inventory_sources`: Total number of external inventory sources configured within this inventory. (integer) * `inventory_sources_with_failures`: Number of external inventory sources in this inventory with failures. (integer) * `pending_deletion`: Flag indicating the inventory is being deleted. (boolean) * `prevent_instance_group_fallback`: If enabled, the inventory will prevent adding any organization instance groups to the list of preferred instances groups to run associated job templates on.If this setting is enabled and you provided an empty list, the global instance groups will be applied. (boolean) # Update an Inventory: Make a PUT or PATCH request to this resource to update this inventory.  The following fields may be modified: * `name`: Name of this inventory. (string, required) * `description`: Optional description of this inventory. (string, default=`""`) * `organization`: Organization containing this inventory. (id, required) * `kind`: Kind of inventory being represented. (choice) - `""`: Hosts have a direct link to this inventory. (default) - `smart`: Hosts for inventory generated using the host_filter property. * `host_filter`: Filter that will be applied to the hosts of this inventory. (string, default=`""`) * `variables`: Inventory variables in JSON or YAML format. (json, default=``) * `prevent_instance_group_fallback`: If enabled, the inventory will prevent adding any organization instance groups to the list of preferred instances groups to run associated job templates on.If this setting is enabled and you provided an empty list, the global instance groups will be applied. (boolean, default=`False`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete an Inventory: Make a DELETE request to this resource to delete this inventory.
     *
     * @tags api
     * @name ApiInventoriesDelete
     * @summary # Retrieve an Inventory:
     * @request DELETE:/api/{version}/inventories/{id}/
     * @secure
     */
    apiInventoriesDelete: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/inventories/${id}/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of users. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of users found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more user records. ## Results Each user data structure includes the following fields: * `id`: Database ID for this user. (integer) * `type`: Data type for this user. (choice) * `url`: URL for this user. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this user was created. (datetime) * `modified`: Timestamp when this user was last modified. (datetime) * `username`: Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (string) * `first_name`:  (string) * `last_name`:  (string) * `email`:  (string) * `is_superuser`: Designates that this user has all permissions without explicitly assigning them. (boolean) * `is_system_auditor`:  (boolean) * `ldap_dn`:  (string) * `last_login`:  (datetime) * `external_account`: Set if the account is managed by an external service (field) ## Sorting To specify that users are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=username Prefix the field name with a dash `-` to sort in reverse: ?order_by=-username Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=username,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventoriesAccessListList
     * @summary # List Users:
     * @request GET:/api/{version}/inventories/{id}/access_list/
     * @secure
     */
    apiInventoriesAccessListList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ResourceAccessListElement[]
        },
        any
      >({
        path: `/api/${version}/inventories/${id}/access_list/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of activity streams associated with the selected inventory. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of activity streams found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more activity stream records. ## Results Each activity stream data structure includes the following fields: * `id`: Database ID for this activity stream. (integer) * `type`: Data type for this activity stream. (choice) * `url`: URL for this activity stream. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `timestamp`:  (datetime) * `operation`: The action taken with respect to the given object(s). (choice) - `create`: Entity Created - `update`: Entity Updated - `delete`: Entity Deleted - `associate`: Entity Associated with another Entity - `disassociate`: Entity was Disassociated with another Entity * `changes`: A summary of the new and changed values when an object is created, updated, or deleted (json) * `object1`: For create, update, and delete events this is the object type that was affected. For associate and disassociate events this is the object type associated or disassociated with object2. (string) * `object2`: Unpopulated for create, update, and delete events. For associate and disassociate events this is the object type that object1 is being associated with. (string) * `object_association`: When present, shows the field name of the role or relationship that changed. (field) * `action_node`: The cluster node the activity took place on. (string) * `object_type`: When present, shows the model on which the role or relationship was defined. (field) ## Sorting To specify that activity streams are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventoriesActivityStreamList
     * @summary # List Activity Streams for an Inventory:
     * @request GET:/api/{version}/inventories/{id}/activity_stream/
     * @secure
     */
    apiInventoriesActivityStreamList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ActivityStream[]
        },
        any
      >({
        path: `/api/${version}/inventories/${id}/activity_stream/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of ad hoc commands associated with the selected inventory. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of ad hoc commands found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more ad hoc command records. ## Results Each ad hoc command data structure includes the following fields: * `id`: Database ID for this ad hoc command. (integer) * `type`: Data type for this ad hoc command. (choice) * `url`: URL for this ad hoc command. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this ad hoc command was created. (datetime) * `modified`: Timestamp when this ad hoc command was last modified. (datetime) * `name`: Name of this ad hoc command. (string) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `execution_node`: The node the job executed on. (string) * `controller_node`: The instance that managed the execution environment. (string) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `job_type`:  (choice) - `run`: Run - `check`: Check * `inventory`:  (id) * `limit`:  (string) * `credential`:  (id) * `module_name`:  (choice) - `command` - `shell` - `yum` - `apt` - `apt_key` - `apt_repository` - `apt_rpm` - `service` - `group` - `user` - `mount` - `ping` - `selinux` - `setup` - `win_ping` - `win_service` - `win_updates` - `win_group` - `win_user` * `module_args`:  (string) * `forks`:  (integer) * `verbosity`:  (choice) - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `extra_vars`:  (string) * `become_enabled`:  (boolean) * `diff_mode`:  (boolean) ## Sorting To specify that ad hoc commands are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventoriesAdHocCommandsList
     * @summary # List Ad Hoc Commands for an Inventory:
     * @request GET:/api/{version}/inventories/{id}/ad_hoc_commands/
     * @secure
     */
    apiInventoriesAdHocCommandsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: AdHocCommandList[]
        },
        any
      >({
        path: `/api/${version}/inventories/${id}/ad_hoc_commands/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of ad hoc commands associated with the selected inventory. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of ad hoc commands found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more ad hoc command records. ## Results Each ad hoc command data structure includes the following fields: * `id`: Database ID for this ad hoc command. (integer) * `type`: Data type for this ad hoc command. (choice) * `url`: URL for this ad hoc command. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this ad hoc command was created. (datetime) * `modified`: Timestamp when this ad hoc command was last modified. (datetime) * `name`: Name of this ad hoc command. (string) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `execution_node`: The node the job executed on. (string) * `controller_node`: The instance that managed the execution environment. (string) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `job_type`:  (choice) - `run`: Run - `check`: Check * `inventory`:  (id) * `limit`:  (string) * `credential`:  (id) * `module_name`:  (choice) - `command` - `shell` - `yum` - `apt` - `apt_key` - `apt_repository` - `apt_rpm` - `service` - `group` - `user` - `mount` - `ping` - `selinux` - `setup` - `win_ping` - `win_service` - `win_updates` - `win_group` - `win_user` * `module_args`:  (string) * `forks`:  (integer) * `verbosity`:  (choice) - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `extra_vars`:  (string) * `become_enabled`:  (boolean) * `diff_mode`:  (boolean) ## Sorting To specify that ad hoc commands are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventoriesAdHocCommandsCreate
     * @summary # List Ad Hoc Commands for an Inventory:
     * @request POST:/api/{version}/inventories/{id}/ad_hoc_commands/
     * @secure
     */
    apiInventoriesAdHocCommandsCreate: (
      id: string,
      version: string,
      data: AdHocCommandList,
      params: RequestParams = {}
    ) =>
      this.request<AdHocCommandList, any>({
        path: `/api/${version}/inventories/${id}/ad_hoc_commands/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiInventoriesCopyList
     * @request GET:/api/{version}/inventories/{id}/copy/
     * @secure
     */
    apiInventoriesCopyList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Copy[]
        },
        any
      >({
        path: `/api/${version}/inventories/${id}/copy/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiInventoriesCopyCreate
     * @request POST:/api/{version}/inventories/{id}/copy/
     * @secure
     */
    apiInventoriesCopyCreate: (
      id: string,
      version: string,
      data: Copy,
      params: RequestParams = {}
    ) =>
      this.request<Copy, any>({
        path: `/api/${version}/inventories/${id}/copy/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of groups associated with the selected inventory. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of groups found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more group records. ## Results Each group data structure includes the following fields: * `id`: Database ID for this group. (integer) * `type`: Data type for this group. (choice) * `url`: URL for this group. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this group was created. (datetime) * `modified`: Timestamp when this group was last modified. (datetime) * `name`: Name of this group. (string) * `description`: Optional description of this group. (string) * `inventory`:  (id) * `variables`: Group variables in JSON or YAML format. (json) ## Sorting To specify that groups are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventoriesGroupsList
     * @summary # List Groups for an Inventory:
     * @request GET:/api/{version}/inventories/{id}/groups/
     * @secure
     */
    apiInventoriesGroupsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Group[]
        },
        any
      >({
        path: `/api/${version}/inventories/${id}/groups/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of groups associated with the selected inventory. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of groups found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more group records. ## Results Each group data structure includes the following fields: * `id`: Database ID for this group. (integer) * `type`: Data type for this group. (choice) * `url`: URL for this group. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this group was created. (datetime) * `modified`: Timestamp when this group was last modified. (datetime) * `name`: Name of this group. (string) * `description`: Optional description of this group. (string) * `inventory`:  (id) * `variables`: Group variables in JSON or YAML format. (json) ## Sorting To specify that groups are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventoriesGroupsCreate
     * @summary # List Groups for an Inventory:
     * @request POST:/api/{version}/inventories/{id}/groups/
     * @secure
     */
    apiInventoriesGroupsCreate: (
      id: string,
      version: string,
      data: Group,
      params: RequestParams = {}
    ) =>
      this.request<Group, any>({
        path: `/api/${version}/inventories/${id}/groups/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of hosts associated with the selected inventory. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of hosts found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more host records. ## Results Each host data structure includes the following fields: * `id`: Database ID for this host. (integer) * `type`: Data type for this host. (choice) * `url`: URL for this host. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this host was created. (datetime) * `modified`: Timestamp when this host was last modified. (datetime) * `name`: Name of this host. (string) * `description`: Optional description of this host. (string) * `inventory`:  (id) * `enabled`: Is this host online and available for running jobs? (boolean) * `instance_id`: The value used by the remote inventory source to uniquely identify the host (string) * `variables`: Host variables in JSON or YAML format. (json) * `has_active_failures`:  (field) * `has_inventory_sources`:  (field) * `last_job`:  (id) * `last_job_host_summary`:  (id) * `ansible_facts_modified`: The date and time ansible_facts was last modified. (datetime) ## Sorting To specify that hosts are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventoriesHostsList
     * @summary # List Hosts for an Inventory:
     * @request GET:/api/{version}/inventories/{id}/hosts/
     * @secure
     */
    apiInventoriesHostsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Host[]
        },
        any
      >({
        path: `/api/${version}/inventories/${id}/hosts/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of hosts associated with the selected inventory. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of hosts found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more host records. ## Results Each host data structure includes the following fields: * `id`: Database ID for this host. (integer) * `type`: Data type for this host. (choice) * `url`: URL for this host. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this host was created. (datetime) * `modified`: Timestamp when this host was last modified. (datetime) * `name`: Name of this host. (string) * `description`: Optional description of this host. (string) * `inventory`:  (id) * `enabled`: Is this host online and available for running jobs? (boolean) * `instance_id`: The value used by the remote inventory source to uniquely identify the host (string) * `variables`: Host variables in JSON or YAML format. (json) * `has_active_failures`:  (field) * `has_inventory_sources`:  (field) * `last_job`:  (id) * `last_job_host_summary`:  (id) * `ansible_facts_modified`: The date and time ansible_facts was last modified. (datetime) ## Sorting To specify that hosts are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventoriesHostsCreate
     * @summary # List Hosts for an Inventory:
     * @request POST:/api/{version}/inventories/{id}/hosts/
     * @secure
     */
    apiInventoriesHostsCreate: (
      id: string,
      version: string,
      data: Host,
      params: RequestParams = {}
    ) =>
      this.request<Host, any>({
        path: `/api/${version}/inventories/${id}/hosts/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of instance groups associated with the selected inventory. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of instance groups found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more instance group records. ## Results Each instance group data structure includes the following fields: * `id`: Database ID for this instance group. (integer) * `type`: Data type for this instance group. (choice) * `url`: URL for this instance group. (string) * `related`: Data structure with URLs of related resources. (object) * `name`: Name of this instance group. (string) * `created`: Timestamp when this instance group was created. (datetime) * `modified`: Timestamp when this instance group was last modified. (datetime) * `capacity`:  (field) * `consumed_capacity`:  (field) * `percent_capacity_remaining`:  (field) * `jobs_running`: Count of jobs in the running or waiting state that are targeted for this instance group (integer) * `jobs_total`: Count of all jobs that target this instance group (integer) * `instances`:  (field) * `is_container_group`: Indicates whether instances in this group are containerized.Containerized groups have a designated Openshift or Kubernetes cluster. (boolean) * `credential`:  (id) * `policy_instance_percentage`: Minimum percentage of all instances that will be automatically assigned to this group when new instances come online. (integer) * `policy_instance_minimum`: Static minimum number of Instances that will be automatically assign to this group when new instances come online. (integer) * `policy_instance_list`: List of exact-match Instances that will be assigned to this group (json) * `pod_spec_override`:  (string) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) ## Sorting To specify that instance groups are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventoriesInstanceGroupsList
     * @summary # List Instance Groups for an Inventory:
     * @request GET:/api/{version}/inventories/{id}/instance_groups/
     * @secure
     */
    apiInventoriesInstanceGroupsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: InstanceGroup[]
        },
        any
      >({
        path: `/api/${version}/inventories/${id}/instance_groups/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of instance groups associated with the selected inventory. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of instance groups found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more instance group records. ## Results Each instance group data structure includes the following fields: * `id`: Database ID for this instance group. (integer) * `type`: Data type for this instance group. (choice) * `url`: URL for this instance group. (string) * `related`: Data structure with URLs of related resources. (object) * `name`: Name of this instance group. (string) * `created`: Timestamp when this instance group was created. (datetime) * `modified`: Timestamp when this instance group was last modified. (datetime) * `capacity`:  (field) * `consumed_capacity`:  (field) * `percent_capacity_remaining`:  (field) * `jobs_running`: Count of jobs in the running or waiting state that are targeted for this instance group (integer) * `jobs_total`: Count of all jobs that target this instance group (integer) * `instances`:  (field) * `is_container_group`: Indicates whether instances in this group are containerized.Containerized groups have a designated Openshift or Kubernetes cluster. (boolean) * `credential`:  (id) * `policy_instance_percentage`: Minimum percentage of all instances that will be automatically assigned to this group when new instances come online. (integer) * `policy_instance_minimum`: Static minimum number of Instances that will be automatically assign to this group when new instances come online. (integer) * `policy_instance_list`: List of exact-match Instances that will be assigned to this group (json) * `pod_spec_override`:  (string) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) ## Sorting To specify that instance groups are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventoriesInstanceGroupsCreate
     * @summary # List Instance Groups for an Inventory:
     * @request POST:/api/{version}/inventories/{id}/instance_groups/
     * @secure
     */
    apiInventoriesInstanceGroupsCreate: (
      id: string,
      version: string,
      data: InstanceGroup,
      params: RequestParams = {}
    ) =>
      this.request<InstanceGroup, any>({
        path: `/api/${version}/inventories/${id}/instance_groups/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of inventory sources associated with the selected inventory. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of inventory sources found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more inventory source records. ## Results Each inventory source data structure includes the following fields: * `id`: Database ID for this inventory source. (integer) * `type`: Data type for this inventory source. (choice) * `url`: URL for this inventory source. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this inventory source was created. (datetime) * `modified`: Timestamp when this inventory source was last modified. (datetime) * `name`: Name of this inventory source. (string) * `description`: Optional description of this inventory source. (string) * `source`:  (choice) - `file`: File, Directory or Script - `scm`: Sourced from a Project - `ec2`: Amazon EC2 - `gce`: Google Compute Engine - `azure_rm`: Microsoft Azure Resource Manager - `vmware`: VMware vCenter - `satellite6`: Red Hat Satellite 6 - `openstack`: OpenStack - `rhv`: Red Hat Virtualization - `controller`: Red Hat Ansible Automation Platform - `insights`: Red Hat Insights * `source_path`:  (string) * `source_vars`: Inventory source variables in YAML or JSON format. (string) * `credential`: Cloud credential to use for inventory updates. (integer) * `enabled_var`: Retrieve the enabled state from the given dict of host variables. The enabled variable may be specified as &quot;foo.bar&quot;, in which case the lookup will traverse into nested dicts, equivalent to: from_dict.get(&quot;foo&quot;, {}).get(&quot;bar&quot;, default) (string) * `enabled_value`: Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var=&quot;status.power_state&quot;and enabled_value=&quot;powered_on&quot; with host variables:{   &quot;status&quot;: {     &quot;power_state&quot;: &quot;powered_on&quot;,     &quot;created&quot;: &quot;2020-08-04T18:13:04+00:00&quot;,     &quot;healthy&quot;: true    },    &quot;name&quot;: &quot;foobar&quot;,    &quot;ip_address&quot;: &quot;192.168.2.1&quot;}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled (string) * `host_filter`: Regex where only matching hosts will be imported. (string) * `overwrite`: Overwrite local groups and hosts from remote inventory source. (boolean) * `overwrite_vars`: Overwrite local variables from remote inventory source. (boolean) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `verbosity`:  (choice) - `0`: 0 (WARNING) - `1`: 1 (INFO) - `2`: 2 (DEBUG) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `none`: No External Source * `execution_environment`: The container image to be used for execution. (id) * `inventory`:  (id) * `update_on_launch`:  (boolean) * `update_cache_timeout`:  (integer) * `source_project`: Project containing inventory file used as source. (id) * `last_update_failed`:  (boolean) * `last_updated`:  (datetime) ## Sorting To specify that inventory sources are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventoriesInventorySourcesList
     * @summary # List Inventory Sources for an Inventory:
     * @request GET:/api/{version}/inventories/{id}/inventory_sources/
     * @secure
     */
    apiInventoriesInventorySourcesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: InventorySource[]
        },
        any
      >({
        path: `/api/${version}/inventories/${id}/inventory_sources/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of inventory sources associated with the selected inventory. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of inventory sources found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more inventory source records. ## Results Each inventory source data structure includes the following fields: * `id`: Database ID for this inventory source. (integer) * `type`: Data type for this inventory source. (choice) * `url`: URL for this inventory source. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this inventory source was created. (datetime) * `modified`: Timestamp when this inventory source was last modified. (datetime) * `name`: Name of this inventory source. (string) * `description`: Optional description of this inventory source. (string) * `source`:  (choice) - `file`: File, Directory or Script - `scm`: Sourced from a Project - `ec2`: Amazon EC2 - `gce`: Google Compute Engine - `azure_rm`: Microsoft Azure Resource Manager - `vmware`: VMware vCenter - `satellite6`: Red Hat Satellite 6 - `openstack`: OpenStack - `rhv`: Red Hat Virtualization - `controller`: Red Hat Ansible Automation Platform - `insights`: Red Hat Insights * `source_path`:  (string) * `source_vars`: Inventory source variables in YAML or JSON format. (string) * `credential`: Cloud credential to use for inventory updates. (integer) * `enabled_var`: Retrieve the enabled state from the given dict of host variables. The enabled variable may be specified as &quot;foo.bar&quot;, in which case the lookup will traverse into nested dicts, equivalent to: from_dict.get(&quot;foo&quot;, {}).get(&quot;bar&quot;, default) (string) * `enabled_value`: Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var=&quot;status.power_state&quot;and enabled_value=&quot;powered_on&quot; with host variables:{   &quot;status&quot;: {     &quot;power_state&quot;: &quot;powered_on&quot;,     &quot;created&quot;: &quot;2020-08-04T18:13:04+00:00&quot;,     &quot;healthy&quot;: true    },    &quot;name&quot;: &quot;foobar&quot;,    &quot;ip_address&quot;: &quot;192.168.2.1&quot;}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled (string) * `host_filter`: Regex where only matching hosts will be imported. (string) * `overwrite`: Overwrite local groups and hosts from remote inventory source. (boolean) * `overwrite_vars`: Overwrite local variables from remote inventory source. (boolean) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `verbosity`:  (choice) - `0`: 0 (WARNING) - `1`: 1 (INFO) - `2`: 2 (DEBUG) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `none`: No External Source * `execution_environment`: The container image to be used for execution. (id) * `inventory`:  (id) * `update_on_launch`:  (boolean) * `update_cache_timeout`:  (integer) * `source_project`: Project containing inventory file used as source. (id) * `last_update_failed`:  (boolean) * `last_updated`:  (datetime) ## Sorting To specify that inventory sources are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventoriesInventorySourcesCreate
     * @summary # List Inventory Sources for an Inventory:
     * @request POST:/api/{version}/inventories/{id}/inventory_sources/
     * @secure
     */
    apiInventoriesInventorySourcesCreate: (
      id: string,
      version: string,
      data: InventorySource,
      params: RequestParams = {}
    ) =>
      this.request<InventorySource, any>({
        path: `/api/${version}/inventories/${id}/inventory_sources/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of job templates associated with the selected inventory. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of job templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more job template records. ## Results Each job template data structure includes the following fields: * `id`: Database ID for this job template. (integer) * `type`: Data type for this job template. (choice) * `url`: URL for this job template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this job template was created. (datetime) * `modified`: Timestamp when this job template was last modified. (datetime) * `name`: Name of this job template. (string) * `description`: Optional description of this job template. (string) * `job_type`:  (choice) - `run`: Run - `check`: Check * `inventory`:  (id) * `project`:  (id) * `playbook`:  (string) * `scm_branch`: Branch to use in job run. Project default used if blank. Only allowed if project allow_override field is set to true. (string) * `forks`:  (integer) * `limit`:  (string) * `verbosity`:  (choice) - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `extra_vars`:  (json) * `job_tags`:  (string) * `force_handlers`:  (boolean) * `skip_tags`:  (string) * `start_at_task`:  (string) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `use_fact_cache`: If enabled, the service will act as an Ansible Fact Cache Plugin; persisting facts at the end of a playbook run to the database and caching facts for use by Ansible. (boolean) * `organization`: The organization used to determine access to this template. (id) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated * `execution_environment`: The container image to be used for execution. (id) * `host_config_key`:  (string) * `ask_scm_branch_on_launch`:  (boolean) * `ask_diff_mode_on_launch`:  (boolean) * `ask_variables_on_launch`:  (boolean) * `ask_limit_on_launch`:  (boolean) * `ask_tags_on_launch`:  (boolean) * `ask_skip_tags_on_launch`:  (boolean) * `ask_job_type_on_launch`:  (boolean) * `ask_verbosity_on_launch`:  (boolean) * `ask_inventory_on_launch`:  (boolean) * `ask_credential_on_launch`:  (boolean) * `ask_execution_environment_on_launch`:  (boolean) * `ask_labels_on_launch`:  (boolean) * `ask_forks_on_launch`:  (boolean) * `ask_job_slice_count_on_launch`:  (boolean) * `ask_timeout_on_launch`:  (boolean) * `ask_instance_groups_on_launch`:  (boolean) * `survey_enabled`:  (boolean) * `become_enabled`:  (boolean) * `diff_mode`: If enabled, textual changes made to any templated files on the host are shown in the standard output (boolean) * `allow_simultaneous`:  (boolean) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `job_slice_count`: The number of jobs to slice into at runtime. Will cause the Job Template to launch a workflow if value is greater than 1. (integer) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id) * `prevent_instance_group_fallback`: If enabled, the job template will prevent adding any inventory or organization instance groups to the list of preferred instances groups to run on.If this setting is enabled and you provided an empty list, the global instance groups will be applied. (boolean) ## Sorting To specify that job templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventoriesJobTemplatesList
     * @summary # List Job Templates for an Inventory:
     * @request GET:/api/{version}/inventories/{id}/job_templates/
     * @secure
     */
    apiInventoriesJobTemplatesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: JobTemplate[]
        },
        any
      >({
        path: `/api/${version}/inventories/${id}/job_templates/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of labels associated with the selected inventory. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of labels found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more label records. ## Results Each label data structure includes the following fields: * `id`: Database ID for this label. (integer) * `type`: Data type for this label. (choice) * `url`: URL for this label. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this label was created. (datetime) * `modified`: Timestamp when this label was last modified. (datetime) * `name`: Name of this label. (string) * `organization`: Organization this label belongs to. (id) ## Sorting To specify that labels are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventoriesLabelsList
     * @summary # List Labels for an Inventory:
     * @request GET:/api/{version}/inventories/{id}/labels/
     * @secure
     */
    apiInventoriesLabelsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Label[]
        },
        any
      >({
        path: `/api/${version}/inventories/${id}/labels/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of labels associated with the selected inventory. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of labels found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more label records. ## Results Each label data structure includes the following fields: * `id`: Database ID for this label. (integer) * `type`: Data type for this label. (choice) * `url`: URL for this label. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this label was created. (datetime) * `modified`: Timestamp when this label was last modified. (datetime) * `name`: Name of this label. (string) * `organization`: Organization this label belongs to. (id) ## Sorting To specify that labels are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventoriesLabelsCreate
     * @summary # List Labels for an Inventory:
     * @request POST:/api/{version}/inventories/{id}/labels/
     * @secure
     */
    apiInventoriesLabelsCreate: (
      id: string,
      version: string,
      data: Label,
      params: RequestParams = {}
    ) =>
      this.request<Label, any>({
        path: `/api/${version}/inventories/${id}/labels/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of roles associated with the selected inventory. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of roles found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more role records. ## Results Each role data structure includes the following fields: * `id`: Database ID for this role. (integer) * `type`: Data type for this role. (choice) * `url`: URL for this role. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `name`: Name of this role. (field) * `description`: Optional description of this role. (field) ## Sorting To specify that roles are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventoriesObjectRolesList
     * @summary # List Roles for an Inventory:
     * @request GET:/api/{version}/inventories/{id}/object_roles/
     * @secure
     */
    apiInventoriesObjectRolesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Role[]
        },
        any
      >({
        path: `/api/${version}/inventories/${id}/object_roles/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of root (top-level) groups associated with this inventory. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of groups found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more group records. ## Results Each group data structure includes the following fields: * `id`: Database ID for this group. (integer) * `type`: Data type for this group. (choice) * `url`: URL for this group. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this group was created. (datetime) * `modified`: Timestamp when this group was last modified. (datetime) * `name`: Name of this group. (string) * `description`: Optional description of this group. (string) * `inventory`:  (id) * `variables`: Group variables in JSON or YAML format. (json) ## Sorting To specify that groups are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventoriesRootGroupsList
     * @summary # List Root Groups for an Inventory:
     * @request GET:/api/{version}/inventories/{id}/root_groups/
     * @secure
     */
    apiInventoriesRootGroupsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Group[]
        },
        any
      >({
        path: `/api/${version}/inventories/${id}/root_groups/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of root (top-level) groups associated with this inventory. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of groups found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more group records. ## Results Each group data structure includes the following fields: * `id`: Database ID for this group. (integer) * `type`: Data type for this group. (choice) * `url`: URL for this group. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this group was created. (datetime) * `modified`: Timestamp when this group was last modified. (datetime) * `name`: Name of this group. (string) * `description`: Optional description of this group. (string) * `inventory`:  (id) * `variables`: Group variables in JSON or YAML format. (json) ## Sorting To specify that groups are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventoriesRootGroupsCreate
     * @summary # List Root Groups for an Inventory:
     * @request POST:/api/{version}/inventories/{id}/root_groups/
     * @secure
     */
    apiInventoriesRootGroupsCreate: (
      id: string,
      version: string,
      data: Group,
      params: RequestParams = {}
    ) =>
      this.request<Group, any>({
        path: `/api/${version}/inventories/${id}/root_groups/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Refer to [Dynamic Inventory](http://docs.ansible.com/intro_dynamic_inventory.html) for more information on inventory scripts. ## List Response Make a GET request to this resource without query parameters to retrieve a JSON object containing groups, including the hosts, children and variables for each group.  The response data is equivalent to that returned by passing the `--list` argument to an inventory script. Specify a query string of `?hostvars=1` to retrieve the JSON object above including all host variables.  The `['_meta']['hostvars']` object in the response contains an entry for each host with its variables.  This response format can be used with Ansible 1.3 and later to avoid making a separate API request for each host.  Refer to [Tuning the External Inventory Script](http://docs.ansible.com/developing_inventory.html#tuning-the-external-inventory-script) for more information on this feature. By default, the inventory script will only return hosts that are enabled in the inventory.  This feature allows disabled hosts to be skipped when running jobs without removing them from the inventory.  Specify a query string of `?all=1` to return all hosts, including disabled ones. Specify a query string of `?towervars=1` to add variables to the hostvars of each host that specifies its enabled state and database ID. Specify a query string of `?subset=slice2of5` to produce an inventory that has a restricted number of hosts according to the rules of job slicing. To apply multiple query strings, join them with the `&` character, like `?hostvars=1&all=1`. ## Host Response Make a GET request to this resource with a query string similar to `?host=HOSTNAME` to retrieve a JSON object containing host variables for the specified host.  The response data is equivalent to that returned by passing the `--host HOSTNAME` argument to an inventory script.
     *
     * @tags api
     * @name ApiInventoriesScriptRead
     * @summary Generate inventory group and host data as needed for an inventory script.
     * @request GET:/api/{version}/inventories/{id}/script/
     * @secure
     */
    apiInventoriesScriptRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<InventoryScript, any>({
        path: `/api/${version}/inventories/${id}/script/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a hierarchical view of groups associated with the selected inventory. The resulting data structure contains a list of root groups, with each group also containing a list of its children. ## Results Each group data structure includes the following fields: * `id`: Database ID for this group. (integer) * `type`: Data type for this group. (choice) * `url`: URL for this group. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this group was created. (datetime) * `modified`: Timestamp when this group was last modified. (datetime) * `name`: Name of this group. (string) * `description`: Optional description of this group. (string) * `inventory`:  (id) * `variables`: Group variables in JSON or YAML format. (json) * `children`:  (field)
     *
     * @tags api
     * @name ApiInventoriesTreeRead
     * @summary # Group Tree for an Inventory:
     * @request GET:/api/{version}/inventories/{id}/tree/
     * @secure
     */
    apiInventoriesTreeRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<GroupTree, any>({
        path: `/api/${version}/inventories/${id}/tree/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to determine if any of the inventory sources for this inventory can be updated. The response will include the following fields for each inventory source: * `inventory_source`: ID of the inventory_source (integer, read-only) * `can_update`: Flag indicating if this inventory source can be updated (boolean, read-only) Make a POST request to this resource to update the inventory sources. The response status code will be a 202. The response will contain the follow fields for each of the individual inventory sources: * `status`: `started` or message why the update could not be started. (string, read-only) * `inventory_update`: ID of the inventory update job that was started. (integer, read-only) * `project_update`: ID of the project update job that was started if this inventory source is an SCM source. (interger, read-only, optional)
     *
     * @tags api
     * @name ApiInventoriesUpdateInventorySourcesRead
     * @summary # Update Inventory Sources
     * @request GET:/api/{version}/inventories/{id}/update_inventory_sources/
     * @secure
     */
    apiInventoriesUpdateInventorySourcesRead: (
      id: string,
      version: string,
      params: RequestParams = {}
    ) =>
      this.request<InventorySourceUpdate, any>({
        path: `/api/${version}/inventories/${id}/update_inventory_sources/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to determine if any of the inventory sources for this inventory can be updated. The response will include the following fields for each inventory source: * `inventory_source`: ID of the inventory_source (integer, read-only) * `can_update`: Flag indicating if this inventory source can be updated (boolean, read-only) Make a POST request to this resource to update the inventory sources. The response status code will be a 202. The response will contain the follow fields for each of the individual inventory sources: * `status`: `started` or message why the update could not be started. (string, read-only) * `inventory_update`: ID of the inventory update job that was started. (integer, read-only) * `project_update`: ID of the project update job that was started if this inventory source is an SCM source. (interger, read-only, optional)
     *
     * @tags api
     * @name ApiInventoriesUpdateInventorySourcesCreate
     * @summary # Update Inventory Sources
     * @request POST:/api/{version}/inventories/{id}/update_inventory_sources/
     * @secure
     */
    apiInventoriesUpdateInventorySourcesCreate: (
      id: string,
      version: string,
      data: InventorySourceUpdate,
      params: RequestParams = {}
    ) =>
      this.request<InventorySourceUpdate, any>({
        path: `/api/${version}/inventories/${id}/update_inventory_sources/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve all variables defined for a inventory. # Update Inventory Variable Data: Make a PUT or PATCH request to this resource to update variables defined for a inventory.
     *
     * @tags api
     * @name ApiInventoriesVariableDataRead
     * @summary # Retrieve Inventory Variable Data:
     * @request GET:/api/{version}/inventories/{id}/variable_data/
     * @secure
     */
    apiInventoriesVariableDataRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<InventoryVariableData, any>({
        path: `/api/${version}/inventories/${id}/variable_data/`,
        method: 'GET',
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve all variables defined for a inventory. # Update Inventory Variable Data: Make a PUT or PATCH request to this resource to update variables defined for a inventory.
     *
     * @tags api
     * @name ApiInventoriesVariableDataUpdate
     * @summary # Retrieve Inventory Variable Data:
     * @request PUT:/api/{version}/inventories/{id}/variable_data/
     * @secure
     */
    apiInventoriesVariableDataUpdate: (
      id: string,
      version: string,
      data: InventoryVariableData,
      params: RequestParams = {}
    ) =>
      this.request<InventoryVariableData, any>({
        path: `/api/${version}/inventories/${id}/variable_data/`,
        method: 'PUT',
        body: data,
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve all variables defined for a inventory. # Update Inventory Variable Data: Make a PUT or PATCH request to this resource to update variables defined for a inventory.
     *
     * @tags api
     * @name ApiInventoriesVariableDataPartialUpdate
     * @summary # Retrieve Inventory Variable Data:
     * @request PATCH:/api/{version}/inventories/{id}/variable_data/
     * @secure
     */
    apiInventoriesVariableDataPartialUpdate: (
      id: string,
      version: string,
      data: InventoryVariableData,
      params: RequestParams = {}
    ) =>
      this.request<InventoryVariableData, any>({
        path: `/api/${version}/inventories/${id}/variable_data/`,
        method: 'PATCH',
        body: data,
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of inventory sources. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of inventory sources found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more inventory source records. ## Results Each inventory source data structure includes the following fields: * `id`: Database ID for this inventory source. (integer) * `type`: Data type for this inventory source. (choice) * `url`: URL for this inventory source. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this inventory source was created. (datetime) * `modified`: Timestamp when this inventory source was last modified. (datetime) * `name`: Name of this inventory source. (string) * `description`: Optional description of this inventory source. (string) * `source`:  (choice) - `file`: File, Directory or Script - `scm`: Sourced from a Project - `ec2`: Amazon EC2 - `gce`: Google Compute Engine - `azure_rm`: Microsoft Azure Resource Manager - `vmware`: VMware vCenter - `satellite6`: Red Hat Satellite 6 - `openstack`: OpenStack - `rhv`: Red Hat Virtualization - `controller`: Red Hat Ansible Automation Platform - `insights`: Red Hat Insights * `source_path`:  (string) * `source_vars`: Inventory source variables in YAML or JSON format. (string) * `credential`: Cloud credential to use for inventory updates. (integer) * `enabled_var`: Retrieve the enabled state from the given dict of host variables. The enabled variable may be specified as &quot;foo.bar&quot;, in which case the lookup will traverse into nested dicts, equivalent to: from_dict.get(&quot;foo&quot;, {}).get(&quot;bar&quot;, default) (string) * `enabled_value`: Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var=&quot;status.power_state&quot;and enabled_value=&quot;powered_on&quot; with host variables:{   &quot;status&quot;: {     &quot;power_state&quot;: &quot;powered_on&quot;,     &quot;created&quot;: &quot;2020-08-04T18:13:04+00:00&quot;,     &quot;healthy&quot;: true    },    &quot;name&quot;: &quot;foobar&quot;,    &quot;ip_address&quot;: &quot;192.168.2.1&quot;}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled (string) * `host_filter`: Regex where only matching hosts will be imported. (string) * `overwrite`: Overwrite local groups and hosts from remote inventory source. (boolean) * `overwrite_vars`: Overwrite local variables from remote inventory source. (boolean) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `verbosity`:  (choice) - `0`: 0 (WARNING) - `1`: 1 (INFO) - `2`: 2 (DEBUG) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `none`: No External Source * `execution_environment`: The container image to be used for execution. (id) * `inventory`:  (id) * `update_on_launch`:  (boolean) * `update_cache_timeout`:  (integer) * `source_project`: Project containing inventory file used as source. (id) * `last_update_failed`:  (boolean) * `last_updated`:  (datetime) ## Sorting To specify that inventory sources are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventorySourcesList
     * @summary # List Inventory Sources:
     * @request GET:/api/{version}/inventory_sources/
     * @secure
     */
    apiInventorySourcesList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: InventorySource[]
        },
        any
      >({
        path: `/api/${version}/inventory_sources/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of inventory sources. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of inventory sources found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more inventory source records. ## Results Each inventory source data structure includes the following fields: * `id`: Database ID for this inventory source. (integer) * `type`: Data type for this inventory source. (choice) * `url`: URL for this inventory source. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this inventory source was created. (datetime) * `modified`: Timestamp when this inventory source was last modified. (datetime) * `name`: Name of this inventory source. (string) * `description`: Optional description of this inventory source. (string) * `source`:  (choice) - `file`: File, Directory or Script - `scm`: Sourced from a Project - `ec2`: Amazon EC2 - `gce`: Google Compute Engine - `azure_rm`: Microsoft Azure Resource Manager - `vmware`: VMware vCenter - `satellite6`: Red Hat Satellite 6 - `openstack`: OpenStack - `rhv`: Red Hat Virtualization - `controller`: Red Hat Ansible Automation Platform - `insights`: Red Hat Insights * `source_path`:  (string) * `source_vars`: Inventory source variables in YAML or JSON format. (string) * `credential`: Cloud credential to use for inventory updates. (integer) * `enabled_var`: Retrieve the enabled state from the given dict of host variables. The enabled variable may be specified as &quot;foo.bar&quot;, in which case the lookup will traverse into nested dicts, equivalent to: from_dict.get(&quot;foo&quot;, {}).get(&quot;bar&quot;, default) (string) * `enabled_value`: Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var=&quot;status.power_state&quot;and enabled_value=&quot;powered_on&quot; with host variables:{   &quot;status&quot;: {     &quot;power_state&quot;: &quot;powered_on&quot;,     &quot;created&quot;: &quot;2020-08-04T18:13:04+00:00&quot;,     &quot;healthy&quot;: true    },    &quot;name&quot;: &quot;foobar&quot;,    &quot;ip_address&quot;: &quot;192.168.2.1&quot;}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled (string) * `host_filter`: Regex where only matching hosts will be imported. (string) * `overwrite`: Overwrite local groups and hosts from remote inventory source. (boolean) * `overwrite_vars`: Overwrite local variables from remote inventory source. (boolean) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `verbosity`:  (choice) - `0`: 0 (WARNING) - `1`: 1 (INFO) - `2`: 2 (DEBUG) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `none`: No External Source * `execution_environment`: The container image to be used for execution. (id) * `inventory`:  (id) * `update_on_launch`:  (boolean) * `update_cache_timeout`:  (integer) * `source_project`: Project containing inventory file used as source. (id) * `last_update_failed`:  (boolean) * `last_updated`:  (datetime) ## Sorting To specify that inventory sources are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventorySourcesCreate
     * @summary # List Inventory Sources:
     * @request POST:/api/{version}/inventory_sources/
     * @secure
     */
    apiInventorySourcesCreate: (
      version: string,
      data: InventorySource,
      params: RequestParams = {}
    ) =>
      this.request<InventorySource, any>({
        path: `/api/${version}/inventory_sources/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single inventory source record containing the following fields: * `id`: Database ID for this inventory source. (integer) * `type`: Data type for this inventory source. (choice) * `url`: URL for this inventory source. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this inventory source was created. (datetime) * `modified`: Timestamp when this inventory source was last modified. (datetime) * `name`: Name of this inventory source. (string) * `description`: Optional description of this inventory source. (string) * `source`:  (choice) - `file`: File, Directory or Script - `scm`: Sourced from a Project - `ec2`: Amazon EC2 - `gce`: Google Compute Engine - `azure_rm`: Microsoft Azure Resource Manager - `vmware`: VMware vCenter - `satellite6`: Red Hat Satellite 6 - `openstack`: OpenStack - `rhv`: Red Hat Virtualization - `controller`: Red Hat Ansible Automation Platform - `insights`: Red Hat Insights * `source_path`:  (string) * `source_vars`: Inventory source variables in YAML or JSON format. (string) * `credential`: Cloud credential to use for inventory updates. (integer) * `enabled_var`: Retrieve the enabled state from the given dict of host variables. The enabled variable may be specified as &quot;foo.bar&quot;, in which case the lookup will traverse into nested dicts, equivalent to: from_dict.get(&quot;foo&quot;, {}).get(&quot;bar&quot;, default) (string) * `enabled_value`: Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var=&quot;status.power_state&quot;and enabled_value=&quot;powered_on&quot; with host variables:{   &quot;status&quot;: {     &quot;power_state&quot;: &quot;powered_on&quot;,     &quot;created&quot;: &quot;2020-08-04T18:13:04+00:00&quot;,     &quot;healthy&quot;: true    },    &quot;name&quot;: &quot;foobar&quot;,    &quot;ip_address&quot;: &quot;192.168.2.1&quot;}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled (string) * `host_filter`: Regex where only matching hosts will be imported. (string) * `overwrite`: Overwrite local groups and hosts from remote inventory source. (boolean) * `overwrite_vars`: Overwrite local variables from remote inventory source. (boolean) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `verbosity`:  (choice) - `0`: 0 (WARNING) - `1`: 1 (INFO) - `2`: 2 (DEBUG) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `none`: No External Source * `execution_environment`: The container image to be used for execution. (id) * `inventory`:  (id) * `update_on_launch`:  (boolean) * `update_cache_timeout`:  (integer) * `source_project`: Project containing inventory file used as source. (id) * `last_update_failed`:  (boolean) * `last_updated`:  (datetime) # Update an Inventory Source: Make a PUT or PATCH request to this resource to update this inventory source.  The following fields may be modified: * `name`: Name of this inventory source. (string, required) * `description`: Optional description of this inventory source. (string, default=`""`) * `source`:  (choice) - `file`: File, Directory or Script - `scm`: Sourced from a Project - `ec2`: Amazon EC2 - `gce`: Google Compute Engine - `azure_rm`: Microsoft Azure Resource Manager - `vmware`: VMware vCenter - `satellite6`: Red Hat Satellite 6 - `openstack`: OpenStack - `rhv`: Red Hat Virtualization - `controller`: Red Hat Ansible Automation Platform - `insights`: Red Hat Insights * `source_path`:  (string, default=`""`) * `source_vars`: Inventory source variables in YAML or JSON format. (string, default=`""`) * `credential`: Cloud credential to use for inventory updates. (integer, default=`None`) * `enabled_var`: Retrieve the enabled state from the given dict of host variables. The enabled variable may be specified as &quot;foo.bar&quot;, in which case the lookup will traverse into nested dicts, equivalent to: from_dict.get(&quot;foo&quot;, {}).get(&quot;bar&quot;, default) (string, default=`""`) * `enabled_value`: Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var=&quot;status.power_state&quot;and enabled_value=&quot;powered_on&quot; with host variables:{   &quot;status&quot;: {     &quot;power_state&quot;: &quot;powered_on&quot;,     &quot;created&quot;: &quot;2020-08-04T18:13:04+00:00&quot;,     &quot;healthy&quot;: true    },    &quot;name&quot;: &quot;foobar&quot;,    &quot;ip_address&quot;: &quot;192.168.2.1&quot;}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled (string, default=`""`) * `host_filter`: Regex where only matching hosts will be imported. (string, default=`""`) * `overwrite`: Overwrite local groups and hosts from remote inventory source. (boolean, default=`False`) * `overwrite_vars`: Overwrite local variables from remote inventory source. (boolean, default=`False`) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer, default=`0`) * `verbosity`:  (choice) - `0`: 0 (WARNING) - `1`: 1 (INFO) (default) - `2`: 2 (DEBUG) * `execution_environment`: The container image to be used for execution. (id, default=``) * `inventory`:  (id, required) * `update_on_launch`:  (boolean, default=`False`) * `update_cache_timeout`:  (integer, default=`0`) * `source_project`: Project containing inventory file used as source. (id, default=``) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete an Inventory Source: Make a DELETE request to this resource to delete this inventory source.
     *
     * @tags api
     * @name ApiInventorySourcesRead
     * @summary # Retrieve an Inventory Source:
     * @request GET:/api/{version}/inventory_sources/{id}/
     * @secure
     */
    apiInventorySourcesRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<InventorySource, any>({
        path: `/api/${version}/inventory_sources/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single inventory source record containing the following fields: * `id`: Database ID for this inventory source. (integer) * `type`: Data type for this inventory source. (choice) * `url`: URL for this inventory source. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this inventory source was created. (datetime) * `modified`: Timestamp when this inventory source was last modified. (datetime) * `name`: Name of this inventory source. (string) * `description`: Optional description of this inventory source. (string) * `source`:  (choice) - `file`: File, Directory or Script - `scm`: Sourced from a Project - `ec2`: Amazon EC2 - `gce`: Google Compute Engine - `azure_rm`: Microsoft Azure Resource Manager - `vmware`: VMware vCenter - `satellite6`: Red Hat Satellite 6 - `openstack`: OpenStack - `rhv`: Red Hat Virtualization - `controller`: Red Hat Ansible Automation Platform - `insights`: Red Hat Insights * `source_path`:  (string) * `source_vars`: Inventory source variables in YAML or JSON format. (string) * `credential`: Cloud credential to use for inventory updates. (integer) * `enabled_var`: Retrieve the enabled state from the given dict of host variables. The enabled variable may be specified as &quot;foo.bar&quot;, in which case the lookup will traverse into nested dicts, equivalent to: from_dict.get(&quot;foo&quot;, {}).get(&quot;bar&quot;, default) (string) * `enabled_value`: Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var=&quot;status.power_state&quot;and enabled_value=&quot;powered_on&quot; with host variables:{   &quot;status&quot;: {     &quot;power_state&quot;: &quot;powered_on&quot;,     &quot;created&quot;: &quot;2020-08-04T18:13:04+00:00&quot;,     &quot;healthy&quot;: true    },    &quot;name&quot;: &quot;foobar&quot;,    &quot;ip_address&quot;: &quot;192.168.2.1&quot;}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled (string) * `host_filter`: Regex where only matching hosts will be imported. (string) * `overwrite`: Overwrite local groups and hosts from remote inventory source. (boolean) * `overwrite_vars`: Overwrite local variables from remote inventory source. (boolean) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `verbosity`:  (choice) - `0`: 0 (WARNING) - `1`: 1 (INFO) - `2`: 2 (DEBUG) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `none`: No External Source * `execution_environment`: The container image to be used for execution. (id) * `inventory`:  (id) * `update_on_launch`:  (boolean) * `update_cache_timeout`:  (integer) * `source_project`: Project containing inventory file used as source. (id) * `last_update_failed`:  (boolean) * `last_updated`:  (datetime) # Update an Inventory Source: Make a PUT or PATCH request to this resource to update this inventory source.  The following fields may be modified: * `name`: Name of this inventory source. (string, required) * `description`: Optional description of this inventory source. (string, default=`""`) * `source`:  (choice) - `file`: File, Directory or Script - `scm`: Sourced from a Project - `ec2`: Amazon EC2 - `gce`: Google Compute Engine - `azure_rm`: Microsoft Azure Resource Manager - `vmware`: VMware vCenter - `satellite6`: Red Hat Satellite 6 - `openstack`: OpenStack - `rhv`: Red Hat Virtualization - `controller`: Red Hat Ansible Automation Platform - `insights`: Red Hat Insights * `source_path`:  (string, default=`""`) * `source_vars`: Inventory source variables in YAML or JSON format. (string, default=`""`) * `credential`: Cloud credential to use for inventory updates. (integer, default=`None`) * `enabled_var`: Retrieve the enabled state from the given dict of host variables. The enabled variable may be specified as &quot;foo.bar&quot;, in which case the lookup will traverse into nested dicts, equivalent to: from_dict.get(&quot;foo&quot;, {}).get(&quot;bar&quot;, default) (string, default=`""`) * `enabled_value`: Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var=&quot;status.power_state&quot;and enabled_value=&quot;powered_on&quot; with host variables:{   &quot;status&quot;: {     &quot;power_state&quot;: &quot;powered_on&quot;,     &quot;created&quot;: &quot;2020-08-04T18:13:04+00:00&quot;,     &quot;healthy&quot;: true    },    &quot;name&quot;: &quot;foobar&quot;,    &quot;ip_address&quot;: &quot;192.168.2.1&quot;}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled (string, default=`""`) * `host_filter`: Regex where only matching hosts will be imported. (string, default=`""`) * `overwrite`: Overwrite local groups and hosts from remote inventory source. (boolean, default=`False`) * `overwrite_vars`: Overwrite local variables from remote inventory source. (boolean, default=`False`) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer, default=`0`) * `verbosity`:  (choice) - `0`: 0 (WARNING) - `1`: 1 (INFO) (default) - `2`: 2 (DEBUG) * `execution_environment`: The container image to be used for execution. (id, default=``) * `inventory`:  (id, required) * `update_on_launch`:  (boolean, default=`False`) * `update_cache_timeout`:  (integer, default=`0`) * `source_project`: Project containing inventory file used as source. (id, default=``) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete an Inventory Source: Make a DELETE request to this resource to delete this inventory source.
     *
     * @tags api
     * @name ApiInventorySourcesUpdate
     * @summary # Retrieve an Inventory Source:
     * @request PUT:/api/{version}/inventory_sources/{id}/
     * @secure
     */
    apiInventorySourcesUpdate: (
      id: string,
      version: string,
      data: InventorySource,
      params: RequestParams = {}
    ) =>
      this.request<InventorySource, any>({
        path: `/api/${version}/inventory_sources/${id}/`,
        method: 'PUT',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single inventory source record containing the following fields: * `id`: Database ID for this inventory source. (integer) * `type`: Data type for this inventory source. (choice) * `url`: URL for this inventory source. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this inventory source was created. (datetime) * `modified`: Timestamp when this inventory source was last modified. (datetime) * `name`: Name of this inventory source. (string) * `description`: Optional description of this inventory source. (string) * `source`:  (choice) - `file`: File, Directory or Script - `scm`: Sourced from a Project - `ec2`: Amazon EC2 - `gce`: Google Compute Engine - `azure_rm`: Microsoft Azure Resource Manager - `vmware`: VMware vCenter - `satellite6`: Red Hat Satellite 6 - `openstack`: OpenStack - `rhv`: Red Hat Virtualization - `controller`: Red Hat Ansible Automation Platform - `insights`: Red Hat Insights * `source_path`:  (string) * `source_vars`: Inventory source variables in YAML or JSON format. (string) * `credential`: Cloud credential to use for inventory updates. (integer) * `enabled_var`: Retrieve the enabled state from the given dict of host variables. The enabled variable may be specified as &quot;foo.bar&quot;, in which case the lookup will traverse into nested dicts, equivalent to: from_dict.get(&quot;foo&quot;, {}).get(&quot;bar&quot;, default) (string) * `enabled_value`: Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var=&quot;status.power_state&quot;and enabled_value=&quot;powered_on&quot; with host variables:{   &quot;status&quot;: {     &quot;power_state&quot;: &quot;powered_on&quot;,     &quot;created&quot;: &quot;2020-08-04T18:13:04+00:00&quot;,     &quot;healthy&quot;: true    },    &quot;name&quot;: &quot;foobar&quot;,    &quot;ip_address&quot;: &quot;192.168.2.1&quot;}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled (string) * `host_filter`: Regex where only matching hosts will be imported. (string) * `overwrite`: Overwrite local groups and hosts from remote inventory source. (boolean) * `overwrite_vars`: Overwrite local variables from remote inventory source. (boolean) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `verbosity`:  (choice) - `0`: 0 (WARNING) - `1`: 1 (INFO) - `2`: 2 (DEBUG) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `none`: No External Source * `execution_environment`: The container image to be used for execution. (id) * `inventory`:  (id) * `update_on_launch`:  (boolean) * `update_cache_timeout`:  (integer) * `source_project`: Project containing inventory file used as source. (id) * `last_update_failed`:  (boolean) * `last_updated`:  (datetime) # Update an Inventory Source: Make a PUT or PATCH request to this resource to update this inventory source.  The following fields may be modified: * `name`: Name of this inventory source. (string, required) * `description`: Optional description of this inventory source. (string, default=`""`) * `source`:  (choice) - `file`: File, Directory or Script - `scm`: Sourced from a Project - `ec2`: Amazon EC2 - `gce`: Google Compute Engine - `azure_rm`: Microsoft Azure Resource Manager - `vmware`: VMware vCenter - `satellite6`: Red Hat Satellite 6 - `openstack`: OpenStack - `rhv`: Red Hat Virtualization - `controller`: Red Hat Ansible Automation Platform - `insights`: Red Hat Insights * `source_path`:  (string, default=`""`) * `source_vars`: Inventory source variables in YAML or JSON format. (string, default=`""`) * `credential`: Cloud credential to use for inventory updates. (integer, default=`None`) * `enabled_var`: Retrieve the enabled state from the given dict of host variables. The enabled variable may be specified as &quot;foo.bar&quot;, in which case the lookup will traverse into nested dicts, equivalent to: from_dict.get(&quot;foo&quot;, {}).get(&quot;bar&quot;, default) (string, default=`""`) * `enabled_value`: Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var=&quot;status.power_state&quot;and enabled_value=&quot;powered_on&quot; with host variables:{   &quot;status&quot;: {     &quot;power_state&quot;: &quot;powered_on&quot;,     &quot;created&quot;: &quot;2020-08-04T18:13:04+00:00&quot;,     &quot;healthy&quot;: true    },    &quot;name&quot;: &quot;foobar&quot;,    &quot;ip_address&quot;: &quot;192.168.2.1&quot;}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled (string, default=`""`) * `host_filter`: Regex where only matching hosts will be imported. (string, default=`""`) * `overwrite`: Overwrite local groups and hosts from remote inventory source. (boolean, default=`False`) * `overwrite_vars`: Overwrite local variables from remote inventory source. (boolean, default=`False`) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer, default=`0`) * `verbosity`:  (choice) - `0`: 0 (WARNING) - `1`: 1 (INFO) (default) - `2`: 2 (DEBUG) * `execution_environment`: The container image to be used for execution. (id, default=``) * `inventory`:  (id, required) * `update_on_launch`:  (boolean, default=`False`) * `update_cache_timeout`:  (integer, default=`0`) * `source_project`: Project containing inventory file used as source. (id, default=``) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete an Inventory Source: Make a DELETE request to this resource to delete this inventory source.
     *
     * @tags api
     * @name ApiInventorySourcesPartialUpdate
     * @summary # Retrieve an Inventory Source:
     * @request PATCH:/api/{version}/inventory_sources/{id}/
     * @secure
     */
    apiInventorySourcesPartialUpdate: (
      id: string,
      version: string,
      data: InventorySource,
      params: RequestParams = {}
    ) =>
      this.request<InventorySource, any>({
        path: `/api/${version}/inventory_sources/${id}/`,
        method: 'PATCH',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single inventory source record containing the following fields: * `id`: Database ID for this inventory source. (integer) * `type`: Data type for this inventory source. (choice) * `url`: URL for this inventory source. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this inventory source was created. (datetime) * `modified`: Timestamp when this inventory source was last modified. (datetime) * `name`: Name of this inventory source. (string) * `description`: Optional description of this inventory source. (string) * `source`:  (choice) - `file`: File, Directory or Script - `scm`: Sourced from a Project - `ec2`: Amazon EC2 - `gce`: Google Compute Engine - `azure_rm`: Microsoft Azure Resource Manager - `vmware`: VMware vCenter - `satellite6`: Red Hat Satellite 6 - `openstack`: OpenStack - `rhv`: Red Hat Virtualization - `controller`: Red Hat Ansible Automation Platform - `insights`: Red Hat Insights * `source_path`:  (string) * `source_vars`: Inventory source variables in YAML or JSON format. (string) * `credential`: Cloud credential to use for inventory updates. (integer) * `enabled_var`: Retrieve the enabled state from the given dict of host variables. The enabled variable may be specified as &quot;foo.bar&quot;, in which case the lookup will traverse into nested dicts, equivalent to: from_dict.get(&quot;foo&quot;, {}).get(&quot;bar&quot;, default) (string) * `enabled_value`: Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var=&quot;status.power_state&quot;and enabled_value=&quot;powered_on&quot; with host variables:{   &quot;status&quot;: {     &quot;power_state&quot;: &quot;powered_on&quot;,     &quot;created&quot;: &quot;2020-08-04T18:13:04+00:00&quot;,     &quot;healthy&quot;: true    },    &quot;name&quot;: &quot;foobar&quot;,    &quot;ip_address&quot;: &quot;192.168.2.1&quot;}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled (string) * `host_filter`: Regex where only matching hosts will be imported. (string) * `overwrite`: Overwrite local groups and hosts from remote inventory source. (boolean) * `overwrite_vars`: Overwrite local variables from remote inventory source. (boolean) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `verbosity`:  (choice) - `0`: 0 (WARNING) - `1`: 1 (INFO) - `2`: 2 (DEBUG) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `none`: No External Source * `execution_environment`: The container image to be used for execution. (id) * `inventory`:  (id) * `update_on_launch`:  (boolean) * `update_cache_timeout`:  (integer) * `source_project`: Project containing inventory file used as source. (id) * `last_update_failed`:  (boolean) * `last_updated`:  (datetime) # Update an Inventory Source: Make a PUT or PATCH request to this resource to update this inventory source.  The following fields may be modified: * `name`: Name of this inventory source. (string, required) * `description`: Optional description of this inventory source. (string, default=`""`) * `source`:  (choice) - `file`: File, Directory or Script - `scm`: Sourced from a Project - `ec2`: Amazon EC2 - `gce`: Google Compute Engine - `azure_rm`: Microsoft Azure Resource Manager - `vmware`: VMware vCenter - `satellite6`: Red Hat Satellite 6 - `openstack`: OpenStack - `rhv`: Red Hat Virtualization - `controller`: Red Hat Ansible Automation Platform - `insights`: Red Hat Insights * `source_path`:  (string, default=`""`) * `source_vars`: Inventory source variables in YAML or JSON format. (string, default=`""`) * `credential`: Cloud credential to use for inventory updates. (integer, default=`None`) * `enabled_var`: Retrieve the enabled state from the given dict of host variables. The enabled variable may be specified as &quot;foo.bar&quot;, in which case the lookup will traverse into nested dicts, equivalent to: from_dict.get(&quot;foo&quot;, {}).get(&quot;bar&quot;, default) (string, default=`""`) * `enabled_value`: Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var=&quot;status.power_state&quot;and enabled_value=&quot;powered_on&quot; with host variables:{   &quot;status&quot;: {     &quot;power_state&quot;: &quot;powered_on&quot;,     &quot;created&quot;: &quot;2020-08-04T18:13:04+00:00&quot;,     &quot;healthy&quot;: true    },    &quot;name&quot;: &quot;foobar&quot;,    &quot;ip_address&quot;: &quot;192.168.2.1&quot;}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled (string, default=`""`) * `host_filter`: Regex where only matching hosts will be imported. (string, default=`""`) * `overwrite`: Overwrite local groups and hosts from remote inventory source. (boolean, default=`False`) * `overwrite_vars`: Overwrite local variables from remote inventory source. (boolean, default=`False`) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer, default=`0`) * `verbosity`:  (choice) - `0`: 0 (WARNING) - `1`: 1 (INFO) (default) - `2`: 2 (DEBUG) * `execution_environment`: The container image to be used for execution. (id, default=``) * `inventory`:  (id, required) * `update_on_launch`:  (boolean, default=`False`) * `update_cache_timeout`:  (integer, default=`0`) * `source_project`: Project containing inventory file used as source. (id, default=``) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete an Inventory Source: Make a DELETE request to this resource to delete this inventory source.
     *
     * @tags api
     * @name ApiInventorySourcesDelete
     * @summary # Retrieve an Inventory Source:
     * @request DELETE:/api/{version}/inventory_sources/{id}/
     * @secure
     */
    apiInventorySourcesDelete: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/inventory_sources/${id}/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of activity streams associated with the selected inventory source. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of activity streams found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more activity stream records. ## Results Each activity stream data structure includes the following fields: * `id`: Database ID for this activity stream. (integer) * `type`: Data type for this activity stream. (choice) * `url`: URL for this activity stream. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `timestamp`:  (datetime) * `operation`: The action taken with respect to the given object(s). (choice) - `create`: Entity Created - `update`: Entity Updated - `delete`: Entity Deleted - `associate`: Entity Associated with another Entity - `disassociate`: Entity was Disassociated with another Entity * `changes`: A summary of the new and changed values when an object is created, updated, or deleted (json) * `object1`: For create, update, and delete events this is the object type that was affected. For associate and disassociate events this is the object type associated or disassociated with object2. (string) * `object2`: Unpopulated for create, update, and delete events. For associate and disassociate events this is the object type that object1 is being associated with. (string) * `object_association`: When present, shows the field name of the role or relationship that changed. (field) * `action_node`: The cluster node the activity took place on. (string) * `object_type`: When present, shows the model on which the role or relationship was defined. (field) ## Sorting To specify that activity streams are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventorySourcesActivityStreamList
     * @summary # List Activity Streams for an Inventory Source:
     * @request GET:/api/{version}/inventory_sources/{id}/activity_stream/
     * @secure
     */
    apiInventorySourcesActivityStreamList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ActivityStream[]
        },
        any
      >({
        path: `/api/${version}/inventory_sources/${id}/activity_stream/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of credentials associated with the selected inventory source. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of credentials found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more credential records. ## Results Each credential data structure includes the following fields: * `id`: Database ID for this credential. (integer) * `type`: Data type for this credential. (choice) * `url`: URL for this credential. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential was created. (datetime) * `modified`: Timestamp when this credential was last modified. (datetime) * `name`: Name of this credential. (string) * `description`: Optional description of this credential. (string) * `organization`:  (id) * `credential_type`: Specify the type of credential you want to create. Refer to the documentation for details on each type. (id) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `kind`:  (field) * `cloud`:  (field) * `kubernetes`:  (field) ## Sorting To specify that credentials are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventorySourcesCredentialsList
     * @summary # List Credentials for an Inventory Source:
     * @request GET:/api/{version}/inventory_sources/{id}/credentials/
     * @secure
     */
    apiInventorySourcesCredentialsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Credential[]
        },
        any
      >({
        path: `/api/${version}/inventory_sources/${id}/credentials/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of credentials associated with the selected inventory source. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of credentials found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more credential records. ## Results Each credential data structure includes the following fields: * `id`: Database ID for this credential. (integer) * `type`: Data type for this credential. (choice) * `url`: URL for this credential. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential was created. (datetime) * `modified`: Timestamp when this credential was last modified. (datetime) * `name`: Name of this credential. (string) * `description`: Optional description of this credential. (string) * `organization`:  (id) * `credential_type`: Specify the type of credential you want to create. Refer to the documentation for details on each type. (id) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `kind`:  (field) * `cloud`:  (field) * `kubernetes`:  (field) ## Sorting To specify that credentials are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventorySourcesCredentialsCreate
     * @summary # List Credentials for an Inventory Source:
     * @request POST:/api/{version}/inventory_sources/{id}/credentials/
     * @secure
     */
    apiInventorySourcesCredentialsCreate: (
      id: string,
      version: string,
      data: Credential,
      params: RequestParams = {}
    ) =>
      this.request<Credential, any>({
        path: `/api/${version}/inventory_sources/${id}/credentials/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of groups associated with the selected inventory source. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of groups found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more group records. ## Results Each group data structure includes the following fields: * `id`: Database ID for this group. (integer) * `type`: Data type for this group. (choice) * `url`: URL for this group. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this group was created. (datetime) * `modified`: Timestamp when this group was last modified. (datetime) * `name`: Name of this group. (string) * `description`: Optional description of this group. (string) * `inventory`:  (id) * `variables`: Group variables in JSON or YAML format. (json) ## Sorting To specify that groups are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventorySourcesGroupsList
     * @summary # List Groups for an Inventory Source:
     * @request GET:/api/{version}/inventory_sources/{id}/groups/
     * @secure
     */
    apiInventorySourcesGroupsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Group[]
        },
        any
      >({
        path: `/api/${version}/inventory_sources/${id}/groups/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of groups associated with the selected inventory source. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of groups found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more group records. ## Results Each group data structure includes the following fields: * `id`: Database ID for this group. (integer) * `type`: Data type for this group. (choice) * `url`: URL for this group. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this group was created. (datetime) * `modified`: Timestamp when this group was last modified. (datetime) * `name`: Name of this group. (string) * `description`: Optional description of this group. (string) * `inventory`:  (id) * `variables`: Group variables in JSON or YAML format. (json) ## Sorting To specify that groups are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventorySourcesGroupsDelete
     * @summary # List Groups for an Inventory Source:
     * @request DELETE:/api/{version}/inventory_sources/{id}/groups/
     * @secure
     */
    apiInventorySourcesGroupsDelete: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/inventory_sources/${id}/groups/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of hosts associated with the selected inventory source. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of hosts found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more host records. ## Results Each host data structure includes the following fields: * `id`: Database ID for this host. (integer) * `type`: Data type for this host. (choice) * `url`: URL for this host. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this host was created. (datetime) * `modified`: Timestamp when this host was last modified. (datetime) * `name`: Name of this host. (string) * `description`: Optional description of this host. (string) * `inventory`:  (id) * `enabled`: Is this host online and available for running jobs? (boolean) * `instance_id`: The value used by the remote inventory source to uniquely identify the host (string) * `variables`: Host variables in JSON or YAML format. (json) * `has_active_failures`:  (field) * `has_inventory_sources`:  (field) * `last_job`:  (id) * `last_job_host_summary`:  (id) * `ansible_facts_modified`: The date and time ansible_facts was last modified. (datetime) ## Sorting To specify that hosts are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventorySourcesHostsList
     * @summary # List Hosts for an Inventory Source:
     * @request GET:/api/{version}/inventory_sources/{id}/hosts/
     * @secure
     */
    apiInventorySourcesHostsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Host[]
        },
        any
      >({
        path: `/api/${version}/inventory_sources/${id}/hosts/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of hosts associated with the selected inventory source. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of hosts found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more host records. ## Results Each host data structure includes the following fields: * `id`: Database ID for this host. (integer) * `type`: Data type for this host. (choice) * `url`: URL for this host. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this host was created. (datetime) * `modified`: Timestamp when this host was last modified. (datetime) * `name`: Name of this host. (string) * `description`: Optional description of this host. (string) * `inventory`:  (id) * `enabled`: Is this host online and available for running jobs? (boolean) * `instance_id`: The value used by the remote inventory source to uniquely identify the host (string) * `variables`: Host variables in JSON or YAML format. (json) * `has_active_failures`:  (field) * `has_inventory_sources`:  (field) * `last_job`:  (id) * `last_job_host_summary`:  (id) * `ansible_facts_modified`: The date and time ansible_facts was last modified. (datetime) ## Sorting To specify that hosts are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventorySourcesHostsDelete
     * @summary # List Hosts for an Inventory Source:
     * @request DELETE:/api/{version}/inventory_sources/{id}/hosts/
     * @secure
     */
    apiInventorySourcesHostsDelete: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/inventory_sources/${id}/hosts/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of inventory updates associated with the selected inventory source. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of inventory updates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more inventory update records. ## Results Each inventory update data structure includes the following fields: * `id`: Database ID for this inventory update. (integer) * `type`: Data type for this inventory update. (choice) * `url`: URL for this inventory update. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this inventory update was created. (datetime) * `modified`: Timestamp when this inventory update was last modified. (datetime) * `name`: Name of this inventory update. (string) * `description`: Optional description of this inventory update. (string) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `execution_node`: The node the job executed on. (string) * `controller_node`: The instance that managed the execution environment. (string) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `source`:  (choice) - `file`: File, Directory or Script - `scm`: Sourced from a Project - `ec2`: Amazon EC2 - `gce`: Google Compute Engine - `azure_rm`: Microsoft Azure Resource Manager - `vmware`: VMware vCenter - `satellite6`: Red Hat Satellite 6 - `openstack`: OpenStack - `rhv`: Red Hat Virtualization - `controller`: Red Hat Ansible Automation Platform - `insights`: Red Hat Insights * `source_path`:  (string) * `source_vars`: Inventory source variables in YAML or JSON format. (string) * `credential`: Cloud credential to use for inventory updates. (integer) * `enabled_var`: Retrieve the enabled state from the given dict of host variables. The enabled variable may be specified as &quot;foo.bar&quot;, in which case the lookup will traverse into nested dicts, equivalent to: from_dict.get(&quot;foo&quot;, {}).get(&quot;bar&quot;, default) (string) * `enabled_value`: Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var=&quot;status.power_state&quot;and enabled_value=&quot;powered_on&quot; with host variables:{   &quot;status&quot;: {     &quot;power_state&quot;: &quot;powered_on&quot;,     &quot;created&quot;: &quot;2020-08-04T18:13:04+00:00&quot;,     &quot;healthy&quot;: true    },    &quot;name&quot;: &quot;foobar&quot;,    &quot;ip_address&quot;: &quot;192.168.2.1&quot;}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled (string) * `host_filter`: Regex where only matching hosts will be imported. (string) * `overwrite`: Overwrite local groups and hosts from remote inventory source. (boolean) * `overwrite_vars`: Overwrite local variables from remote inventory source. (boolean) * `custom_virtualenv`:  (string) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `verbosity`:  (choice) - `0`: 0 (WARNING) - `1`: 1 (INFO) - `2`: 2 (DEBUG) * `inventory`:  (id) * `inventory_source`:  (id) * `license_error`:  (boolean) * `org_host_limit_error`:  (boolean) * `source_project_update`: Inventory files from this Project Update were used for the inventory update. (id) * `instance_group`: The Instance group the job was run under (id) * `scm_revision`: The SCM Revision from the Project used for this inventory update.  Only applicable to inventories source from scm (string) ## Sorting To specify that inventory updates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventorySourcesInventoryUpdatesList
     * @summary # List Inventory Updates for an Inventory Source:
     * @request GET:/api/{version}/inventory_sources/{id}/inventory_updates/
     * @secure
     */
    apiInventorySourcesInventoryUpdatesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: InventoryUpdateList[]
        },
        any
      >({
        path: `/api/${version}/inventory_sources/${id}/inventory_updates/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected inventory source. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventorySourcesNotificationTemplatesErrorList
     * @summary # List Notification Templates for an Inventory Source:
     * @request GET:/api/{version}/inventory_sources/{id}/notification_templates_error/
     * @secure
     */
    apiInventorySourcesNotificationTemplatesErrorList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: NotificationTemplate[]
        },
        any
      >({
        path: `/api/${version}/inventory_sources/${id}/notification_templates_error/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected inventory source. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventorySourcesNotificationTemplatesErrorCreate
     * @summary # List Notification Templates for an Inventory Source:
     * @request POST:/api/{version}/inventory_sources/{id}/notification_templates_error/
     * @secure
     */
    apiInventorySourcesNotificationTemplatesErrorCreate: (
      id: string,
      version: string,
      data: NotificationTemplate,
      params: RequestParams = {}
    ) =>
      this.request<NotificationTemplate, any>({
        path: `/api/${version}/inventory_sources/${id}/notification_templates_error/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected inventory source. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventorySourcesNotificationTemplatesStartedList
     * @summary # List Notification Templates for an Inventory Source:
     * @request GET:/api/{version}/inventory_sources/{id}/notification_templates_started/
     * @secure
     */
    apiInventorySourcesNotificationTemplatesStartedList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: NotificationTemplate[]
        },
        any
      >({
        path: `/api/${version}/inventory_sources/${id}/notification_templates_started/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected inventory source. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventorySourcesNotificationTemplatesStartedCreate
     * @summary # List Notification Templates for an Inventory Source:
     * @request POST:/api/{version}/inventory_sources/{id}/notification_templates_started/
     * @secure
     */
    apiInventorySourcesNotificationTemplatesStartedCreate: (
      id: string,
      version: string,
      data: NotificationTemplate,
      params: RequestParams = {}
    ) =>
      this.request<NotificationTemplate, any>({
        path: `/api/${version}/inventory_sources/${id}/notification_templates_started/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected inventory source. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventorySourcesNotificationTemplatesSuccessList
     * @summary # List Notification Templates for an Inventory Source:
     * @request GET:/api/{version}/inventory_sources/{id}/notification_templates_success/
     * @secure
     */
    apiInventorySourcesNotificationTemplatesSuccessList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: NotificationTemplate[]
        },
        any
      >({
        path: `/api/${version}/inventory_sources/${id}/notification_templates_success/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected inventory source. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventorySourcesNotificationTemplatesSuccessCreate
     * @summary # List Notification Templates for an Inventory Source:
     * @request POST:/api/{version}/inventory_sources/{id}/notification_templates_success/
     * @secure
     */
    apiInventorySourcesNotificationTemplatesSuccessCreate: (
      id: string,
      version: string,
      data: NotificationTemplate,
      params: RequestParams = {}
    ) =>
      this.request<NotificationTemplate, any>({
        path: `/api/${version}/inventory_sources/${id}/notification_templates_success/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of schedules associated with the selected inventory source. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of schedules found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more schedule records. ## Results Each schedule data structure includes the following fields: * `rrule`: A value representing the schedules iCal recurrence rule. (string) * `id`: Database ID for this schedule. (integer) * `type`: Data type for this schedule. (choice) * `url`: URL for this schedule. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this schedule was created. (datetime) * `modified`: Timestamp when this schedule was last modified. (datetime) * `name`: Name of this schedule. (string) * `description`: Optional description of this schedule. (string) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `unified_job_template`:  (id) * `enabled`: Enables processing of this schedule. (boolean) * `dtstart`: The first occurrence of the schedule occurs on or after this time. (datetime) * `dtend`: The last occurrence of the schedule occurs before this time, aftewards the schedule expires. (datetime) * `next_run`: The next time that the scheduled action will run. (datetime) * `timezone`: The timezone this schedule runs in. This field is extracted from the RRULE. If the timezone in the RRULE is a link to another timezone, the link will be reflected in this field. (field) * `until`: The date this schedule will end. This field is computed from the RRULE. If the schedule does not end an emptry string will be returned (field) ## Sorting To specify that schedules are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventorySourcesSchedulesList
     * @summary # List Schedules for an Inventory Source:
     * @request GET:/api/{version}/inventory_sources/{id}/schedules/
     * @secure
     */
    apiInventorySourcesSchedulesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Schedule[]
        },
        any
      >({
        path: `/api/${version}/inventory_sources/${id}/schedules/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of schedules associated with the selected inventory source. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of schedules found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more schedule records. ## Results Each schedule data structure includes the following fields: * `rrule`: A value representing the schedules iCal recurrence rule. (string) * `id`: Database ID for this schedule. (integer) * `type`: Data type for this schedule. (choice) * `url`: URL for this schedule. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this schedule was created. (datetime) * `modified`: Timestamp when this schedule was last modified. (datetime) * `name`: Name of this schedule. (string) * `description`: Optional description of this schedule. (string) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `unified_job_template`:  (id) * `enabled`: Enables processing of this schedule. (boolean) * `dtstart`: The first occurrence of the schedule occurs on or after this time. (datetime) * `dtend`: The last occurrence of the schedule occurs before this time, aftewards the schedule expires. (datetime) * `next_run`: The next time that the scheduled action will run. (datetime) * `timezone`: The timezone this schedule runs in. This field is extracted from the RRULE. If the timezone in the RRULE is a link to another timezone, the link will be reflected in this field. (field) * `until`: The date this schedule will end. This field is computed from the RRULE. If the schedule does not end an emptry string will be returned (field) ## Sorting To specify that schedules are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventorySourcesSchedulesCreate
     * @summary # List Schedules for an Inventory Source:
     * @request POST:/api/{version}/inventory_sources/{id}/schedules/
     * @secure
     */
    apiInventorySourcesSchedulesCreate: (
      id: string,
      version: string,
      data: Schedule,
      params: RequestParams = {}
    ) =>
      this.request<Schedule, any>({
        path: `/api/${version}/inventory_sources/${id}/schedules/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to determine if the group can be updated from its inventory source.  The response will include the following field: * `can_update`: Flag indicating if this inventory source can be updated (boolean, read-only) Make a POST request to this resource to update the inventory source.  If successful, the response status code will be 202.  If the inventory source is not defined or cannot be updated, a 405 status code will be returned.
     *
     * @tags api
     * @name ApiInventorySourcesUpdateRead
     * @summary # Update Inventory Source
     * @request GET:/api/{version}/inventory_sources/{id}/update/
     * @secure
     */
    apiInventorySourcesUpdateRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<InventorySourceUpdate, any>({
        path: `/api/${version}/inventory_sources/${id}/update/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to determine if the group can be updated from its inventory source.  The response will include the following field: * `can_update`: Flag indicating if this inventory source can be updated (boolean, read-only) Make a POST request to this resource to update the inventory source.  If successful, the response status code will be 202.  If the inventory source is not defined or cannot be updated, a 405 status code will be returned.
     *
     * @tags api
     * @name ApiInventorySourcesUpdateCreate
     * @summary # Update Inventory Source
     * @request POST:/api/{version}/inventory_sources/{id}/update/
     * @secure
     */
    apiInventorySourcesUpdateCreate: (
      id: string,
      version: string,
      data: InventorySourceUpdate,
      params: RequestParams = {}
    ) =>
      this.request<InventorySourceUpdate, any>({
        path: `/api/${version}/inventory_sources/${id}/update/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of inventory updates. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of inventory updates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more inventory update records. ## Results Each inventory update data structure includes the following fields: * `id`: Database ID for this inventory update. (integer) * `type`: Data type for this inventory update. (choice) * `url`: URL for this inventory update. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this inventory update was created. (datetime) * `modified`: Timestamp when this inventory update was last modified. (datetime) * `name`: Name of this inventory update. (string) * `description`: Optional description of this inventory update. (string) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `execution_node`: The node the job executed on. (string) * `controller_node`: The instance that managed the execution environment. (string) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `source`:  (choice) - `file`: File, Directory or Script - `scm`: Sourced from a Project - `ec2`: Amazon EC2 - `gce`: Google Compute Engine - `azure_rm`: Microsoft Azure Resource Manager - `vmware`: VMware vCenter - `satellite6`: Red Hat Satellite 6 - `openstack`: OpenStack - `rhv`: Red Hat Virtualization - `controller`: Red Hat Ansible Automation Platform - `insights`: Red Hat Insights * `source_path`:  (string) * `source_vars`: Inventory source variables in YAML or JSON format. (string) * `credential`: Cloud credential to use for inventory updates. (integer) * `enabled_var`: Retrieve the enabled state from the given dict of host variables. The enabled variable may be specified as &quot;foo.bar&quot;, in which case the lookup will traverse into nested dicts, equivalent to: from_dict.get(&quot;foo&quot;, {}).get(&quot;bar&quot;, default) (string) * `enabled_value`: Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var=&quot;status.power_state&quot;and enabled_value=&quot;powered_on&quot; with host variables:{   &quot;status&quot;: {     &quot;power_state&quot;: &quot;powered_on&quot;,     &quot;created&quot;: &quot;2020-08-04T18:13:04+00:00&quot;,     &quot;healthy&quot;: true    },    &quot;name&quot;: &quot;foobar&quot;,    &quot;ip_address&quot;: &quot;192.168.2.1&quot;}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled (string) * `host_filter`: Regex where only matching hosts will be imported. (string) * `overwrite`: Overwrite local groups and hosts from remote inventory source. (boolean) * `overwrite_vars`: Overwrite local variables from remote inventory source. (boolean) * `custom_virtualenv`:  (string) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `verbosity`:  (choice) - `0`: 0 (WARNING) - `1`: 1 (INFO) - `2`: 2 (DEBUG) * `inventory`:  (id) * `inventory_source`:  (id) * `license_error`:  (boolean) * `org_host_limit_error`:  (boolean) * `source_project_update`: Inventory files from this Project Update were used for the inventory update. (id) * `instance_group`: The Instance group the job was run under (id) * `scm_revision`: The SCM Revision from the Project used for this inventory update.  Only applicable to inventories source from scm (string) ## Sorting To specify that inventory updates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventoryUpdatesList
     * @summary # List Inventory Updates:
     * @request GET:/api/{version}/inventory_updates/
     * @secure
     */
    apiInventoryUpdatesList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: InventoryUpdateList[]
        },
        any
      >({
        path: `/api/${version}/inventory_updates/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single inventory update record containing the following fields: * `id`: Database ID for this inventory update. (integer) * `type`: Data type for this inventory update. (choice) * `url`: URL for this inventory update. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this inventory update was created. (datetime) * `modified`: Timestamp when this inventory update was last modified. (datetime) * `name`: Name of this inventory update. (string) * `description`: Optional description of this inventory update. (string) * `source`:  (choice) - `file`: File, Directory or Script - `scm`: Sourced from a Project - `ec2`: Amazon EC2 - `gce`: Google Compute Engine - `azure_rm`: Microsoft Azure Resource Manager - `vmware`: VMware vCenter - `satellite6`: Red Hat Satellite 6 - `openstack`: OpenStack - `rhv`: Red Hat Virtualization - `controller`: Red Hat Ansible Automation Platform - `insights`: Red Hat Insights * `source_path`:  (string) * `source_vars`: Inventory source variables in YAML or JSON format. (string) * `credential`: Cloud credential to use for inventory updates. (integer) * `enabled_var`: Retrieve the enabled state from the given dict of host variables. The enabled variable may be specified as &quot;foo.bar&quot;, in which case the lookup will traverse into nested dicts, equivalent to: from_dict.get(&quot;foo&quot;, {}).get(&quot;bar&quot;, default) (string) * `enabled_value`: Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var=&quot;status.power_state&quot;and enabled_value=&quot;powered_on&quot; with host variables:{   &quot;status&quot;: {     &quot;power_state&quot;: &quot;powered_on&quot;,     &quot;created&quot;: &quot;2020-08-04T18:13:04+00:00&quot;,     &quot;healthy&quot;: true    },    &quot;name&quot;: &quot;foobar&quot;,    &quot;ip_address&quot;: &quot;192.168.2.1&quot;}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled (string) * `host_filter`: Regex where only matching hosts will be imported. (string) * `overwrite`: Overwrite local groups and hosts from remote inventory source. (boolean) * `overwrite_vars`: Overwrite local variables from remote inventory source. (boolean) * `custom_virtualenv`:  (string) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `verbosity`:  (choice) - `0`: 0 (WARNING) - `1`: 1 (INFO) - `2`: 2 (DEBUG) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_args`:  (string) * `job_cwd`:  (string) * `job_env`:  (json) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `execution_node`: The node the job executed on. (string) * `controller_node`: The instance that managed the execution environment. (string) * `result_traceback`:  (string) * `event_processing_finished`: Indicates whether all of the events generated by this unified job have been saved to the database. (boolean) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `inventory`:  (id) * `inventory_source`:  (id) * `license_error`:  (boolean) * `org_host_limit_error`:  (boolean) * `source_project_update`: Inventory files from this Project Update were used for the inventory update. (id) * `instance_group`: The Instance group the job was run under (id) * `scm_revision`: The SCM Revision from the Project used for this inventory update.  Only applicable to inventories source from scm (string) * `source_project`: The project used for this job. (field) # Delete an Inventory Update: Make a DELETE request to this resource to delete this inventory update.
     *
     * @tags api
     * @name ApiInventoryUpdatesRead
     * @summary # Retrieve an Inventory Update:
     * @request GET:/api/{version}/inventory_updates/{id}/
     * @secure
     */
    apiInventoryUpdatesRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<InventoryUpdateDetail, any>({
        path: `/api/${version}/inventory_updates/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single inventory update record containing the following fields: * `id`: Database ID for this inventory update. (integer) * `type`: Data type for this inventory update. (choice) * `url`: URL for this inventory update. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this inventory update was created. (datetime) * `modified`: Timestamp when this inventory update was last modified. (datetime) * `name`: Name of this inventory update. (string) * `description`: Optional description of this inventory update. (string) * `source`:  (choice) - `file`: File, Directory or Script - `scm`: Sourced from a Project - `ec2`: Amazon EC2 - `gce`: Google Compute Engine - `azure_rm`: Microsoft Azure Resource Manager - `vmware`: VMware vCenter - `satellite6`: Red Hat Satellite 6 - `openstack`: OpenStack - `rhv`: Red Hat Virtualization - `controller`: Red Hat Ansible Automation Platform - `insights`: Red Hat Insights * `source_path`:  (string) * `source_vars`: Inventory source variables in YAML or JSON format. (string) * `credential`: Cloud credential to use for inventory updates. (integer) * `enabled_var`: Retrieve the enabled state from the given dict of host variables. The enabled variable may be specified as &quot;foo.bar&quot;, in which case the lookup will traverse into nested dicts, equivalent to: from_dict.get(&quot;foo&quot;, {}).get(&quot;bar&quot;, default) (string) * `enabled_value`: Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var=&quot;status.power_state&quot;and enabled_value=&quot;powered_on&quot; with host variables:{   &quot;status&quot;: {     &quot;power_state&quot;: &quot;powered_on&quot;,     &quot;created&quot;: &quot;2020-08-04T18:13:04+00:00&quot;,     &quot;healthy&quot;: true    },    &quot;name&quot;: &quot;foobar&quot;,    &quot;ip_address&quot;: &quot;192.168.2.1&quot;}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled (string) * `host_filter`: Regex where only matching hosts will be imported. (string) * `overwrite`: Overwrite local groups and hosts from remote inventory source. (boolean) * `overwrite_vars`: Overwrite local variables from remote inventory source. (boolean) * `custom_virtualenv`:  (string) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `verbosity`:  (choice) - `0`: 0 (WARNING) - `1`: 1 (INFO) - `2`: 2 (DEBUG) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_args`:  (string) * `job_cwd`:  (string) * `job_env`:  (json) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `execution_node`: The node the job executed on. (string) * `controller_node`: The instance that managed the execution environment. (string) * `result_traceback`:  (string) * `event_processing_finished`: Indicates whether all of the events generated by this unified job have been saved to the database. (boolean) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `inventory`:  (id) * `inventory_source`:  (id) * `license_error`:  (boolean) * `org_host_limit_error`:  (boolean) * `source_project_update`: Inventory files from this Project Update were used for the inventory update. (id) * `instance_group`: The Instance group the job was run under (id) * `scm_revision`: The SCM Revision from the Project used for this inventory update.  Only applicable to inventories source from scm (string) * `source_project`: The project used for this job. (field) # Delete an Inventory Update: Make a DELETE request to this resource to delete this inventory update.
     *
     * @tags api
     * @name ApiInventoryUpdatesDelete
     * @summary # Retrieve an Inventory Update:
     * @request DELETE:/api/{version}/inventory_updates/{id}/
     * @secure
     */
    apiInventoryUpdatesDelete: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/inventory_updates/${id}/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single inventory update record containing the following fields: * `can_cancel`:  (boolean)
     *
     * @tags api
     * @name ApiInventoryUpdatesCancelRead
     * @summary # Retrieve an Inventory Update:
     * @request GET:/api/{version}/inventory_updates/{id}/cancel/
     * @secure
     */
    apiInventoryUpdatesCancelRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<InventoryUpdateCancel, any>({
        path: `/api/${version}/inventory_updates/${id}/cancel/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single inventory update record containing the following fields: * `can_cancel`:  (boolean)
     *
     * @tags api
     * @name ApiInventoryUpdatesCancelCreate
     * @summary # Retrieve an Inventory Update:
     * @request POST:/api/{version}/inventory_updates/{id}/cancel/
     * @secure
     */
    apiInventoryUpdatesCancelCreate: (
      id: string,
      version: string,
      data: InventoryUpdateCancel,
      params: RequestParams = {}
    ) =>
      this.request<InventoryUpdateCancel, any>({
        path: `/api/${version}/inventory_updates/${id}/cancel/`,
        method: 'POST',
        body: data,
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of credentials associated with the selected inventory update. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of credentials found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more credential records. ## Results Each credential data structure includes the following fields: * `id`: Database ID for this credential. (integer) * `type`: Data type for this credential. (choice) * `url`: URL for this credential. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential was created. (datetime) * `modified`: Timestamp when this credential was last modified. (datetime) * `name`: Name of this credential. (string) * `description`: Optional description of this credential. (string) * `organization`:  (id) * `credential_type`: Specify the type of credential you want to create. Refer to the documentation for details on each type. (id) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `kind`:  (field) * `cloud`:  (field) * `kubernetes`:  (field) ## Sorting To specify that credentials are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventoryUpdatesCredentialsList
     * @summary # List Credentials for an Inventory Update:
     * @request GET:/api/{version}/inventory_updates/{id}/credentials/
     * @secure
     */
    apiInventoryUpdatesCredentialsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Credential[]
        },
        any
      >({
        path: `/api/${version}/inventory_updates/${id}/credentials/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of inventory update events associated with the selected inventory update. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of inventory update events found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more inventory update event records. ## Results Each inventory update event data structure includes the following fields: * `id`: Database ID for this inventory update event. (integer) * `type`: Data type for this inventory update event. (choice) * `url`: URL for this inventory update event. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this inventory update event was created. (datetime) * `modified`: Timestamp when this inventory update event was last modified. (datetime) * `event`:  (field) * `counter`:  (integer) * `event_display`:  (string) * `event_data`:  (json) * `failed`:  (field) * `changed`:  (field) * `uuid`:  (string) * `stdout`:  (string) * `start_line`:  (integer) * `end_line`:  (integer) * `verbosity`:  (integer) * `inventory_update`:  (id) ## Sorting To specify that inventory update events are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventoryUpdatesEventsList
     * @summary # List Inventory Update Events for an Inventory Update:
     * @request GET:/api/{version}/inventory_updates/{id}/events/
     * @secure
     */
    apiInventoryUpdatesEventsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: InventoryUpdateEvent[]
        },
        any
      >({
        path: `/api/${version}/inventory_updates/${id}/events/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notifications associated with the selected inventory update. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notifications found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification records. ## Results Each notification data structure includes the following fields: * `id`: Database ID for this notification. (integer) * `type`: Data type for this notification. (choice) * `url`: URL for this notification. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification was created. (datetime) * `modified`: Timestamp when this notification was last modified. (datetime) * `notification_template`:  (id) * `error`:  (string) * `status`:  (choice) - `pending`: Pending - `successful`: Successful - `failed`: Failed * `notifications_sent`:  (integer) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `recipients`:  (string) * `subject`:  (string) * `body`: Notification body (json) ## Sorting To specify that notifications are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiInventoryUpdatesNotificationsList
     * @summary # List Notifications for an Inventory Update:
     * @request GET:/api/{version}/inventory_updates/{id}/notifications/
     * @secure
     */
    apiInventoryUpdatesNotificationsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Notification[]
        },
        any
      >({
        path: `/api/${version}/inventory_updates/${id}/notifications/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve the stdout from running this inventory update. ## Format Use the `format` query string parameter to specify the output format. * Browsable API: `?format=api` * HTML: `?format=html` * Plain Text: `?format=txt` * Plain Text with ANSI color codes: `?format=ansi` * JSON structure: `?format=json` * Downloaded Plain Text: `?format=txt_download` * Downloaded Plain Text with ANSI color codes: `?format=ansi_download` (_New in Ansible Tower 2.0.0_) When using the Browsable API, HTML and JSON formats, the `start_line` and `end_line` query string parameters can be used to specify a range of line numbers to retrieve. Use `dark=1` or `dark=0` as a query string parameter to force or disable a dark background. Files over 1.0 MB (configurable) will not display in the browser. Use the `txt_download` or `ansi_download` formats to download the file directly to view it.
     *
     * @tags api
     * @name ApiInventoryUpdatesStdoutRead
     * @summary # Retrieve Inventory Update Stdout:
     * @request GET:/api/{version}/inventory_updates/{id}/stdout/
     * @secure
     */
    apiInventoryUpdatesStdoutRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<UnifiedJobStdout, any>({
        path: `/api/${version}/inventory_updates/${id}/stdout/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single job event record containing the following fields: * `id`: Database ID for this job event. (integer) * `type`: Data type for this job event. (choice) * `url`: URL for this job event. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this job event was created. (datetime) * `modified`: Timestamp when this job event was last modified. (datetime) * `job`:  (id) * `event`:  (choice) - `runner_on_failed`: Host Failed - `runner_on_start`: Host Started - `runner_on_ok`: Host OK - `runner_on_error`: Host Failure - `runner_on_skipped`: Host Skipped - `runner_on_unreachable`: Host Unreachable - `runner_on_no_hosts`: No Hosts Remaining - `runner_on_async_poll`: Host Polling - `runner_on_async_ok`: Host Async OK - `runner_on_async_failed`: Host Async Failure - `runner_item_on_ok`: Item OK - `runner_item_on_failed`: Item Failed - `runner_item_on_skipped`: Item Skipped - `runner_retry`: Host Retry - `runner_on_file_diff`: File Difference - `playbook_on_start`: Playbook Started - `playbook_on_notify`: Running Handlers - `playbook_on_include`: Including File - `playbook_on_no_hosts_matched`: No Hosts Matched - `playbook_on_no_hosts_remaining`: No Hosts Remaining - `playbook_on_task_start`: Task Started - `playbook_on_vars_prompt`: Variables Prompted - `playbook_on_setup`: Gathering Facts - `playbook_on_import_for_host`: internal: on Import for Host - `playbook_on_not_import_for_host`: internal: on Not Import for Host - `playbook_on_play_start`: Play Started - `playbook_on_stats`: Playbook Complete - `debug`: Debug - `verbose`: Verbose - `deprecated`: Deprecated - `warning`: Warning - `system_warning`: System Warning - `error`: Error * `counter`:  (integer) * `event_display`:  (string) * `event_data`:  (json) * `event_level`:  (integer) * `failed`:  (boolean) * `changed`:  (boolean) * `uuid`:  (string) * `parent_uuid`:  (string) * `host`:  (id) * `host_name`:  (string) * `playbook`:  (string) * `play`:  (string) * `task`:  (string) * `role`:  (string) * `stdout`:  (string) * `start_line`:  (integer) * `end_line`:  (integer) * `verbosity`:  (integer)
     *
     * @tags api
     * @name ApiJobEventsRead
     * @summary # Retrieve a Job Event:
     * @request GET:/api/{version}/job_events/{id}/
     * @secure
     */
    apiJobEventsRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<JobEvent, any>({
        path: `/api/${version}/job_events/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of job events associated with the selected job event. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of job events found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more job event records. ## Results Each job event data structure includes the following fields: * `id`: Database ID for this job event. (integer) * `type`: Data type for this job event. (choice) * `url`: URL for this job event. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this job event was created. (datetime) * `modified`: Timestamp when this job event was last modified. (datetime) * `job`:  (id) * `event`:  (choice) - `runner_on_failed`: Host Failed - `runner_on_start`: Host Started - `runner_on_ok`: Host OK - `runner_on_error`: Host Failure - `runner_on_skipped`: Host Skipped - `runner_on_unreachable`: Host Unreachable - `runner_on_no_hosts`: No Hosts Remaining - `runner_on_async_poll`: Host Polling - `runner_on_async_ok`: Host Async OK - `runner_on_async_failed`: Host Async Failure - `runner_item_on_ok`: Item OK - `runner_item_on_failed`: Item Failed - `runner_item_on_skipped`: Item Skipped - `runner_retry`: Host Retry - `runner_on_file_diff`: File Difference - `playbook_on_start`: Playbook Started - `playbook_on_notify`: Running Handlers - `playbook_on_include`: Including File - `playbook_on_no_hosts_matched`: No Hosts Matched - `playbook_on_no_hosts_remaining`: No Hosts Remaining - `playbook_on_task_start`: Task Started - `playbook_on_vars_prompt`: Variables Prompted - `playbook_on_setup`: Gathering Facts - `playbook_on_import_for_host`: internal: on Import for Host - `playbook_on_not_import_for_host`: internal: on Not Import for Host - `playbook_on_play_start`: Play Started - `playbook_on_stats`: Playbook Complete - `debug`: Debug - `verbose`: Verbose - `deprecated`: Deprecated - `warning`: Warning - `system_warning`: System Warning - `error`: Error * `counter`:  (integer) * `event_display`:  (string) * `event_data`:  (json) * `event_level`:  (integer) * `failed`:  (boolean) * `changed`:  (boolean) * `uuid`:  (string) * `parent_uuid`:  (string) * `host`:  (id) * `host_name`:  (string) * `playbook`:  (string) * `play`:  (string) * `task`:  (string) * `role`:  (string) * `stdout`:  (string) * `start_line`:  (integer) * `end_line`:  (integer) * `verbosity`:  (integer) ## Sorting To specify that job events are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiJobEventsChildrenList
     * @summary # List Job Events for a Job Event:
     * @request GET:/api/{version}/job_events/{id}/children/
     * @secure
     */
    apiJobEventsChildrenList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: JobEvent[]
        },
        any
      >({
        path: `/api/${version}/job_events/${id}/children/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single job host summary record containing the following fields: * `id`: Database ID for this job host summary. (integer) * `type`: Data type for this job host summary. (choice) * `url`: URL for this job host summary. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this job host summary was created. (datetime) * `modified`: Timestamp when this job host summary was last modified. (datetime) * `job`:  (id) * `host`:  (id) * `host_name`:  (string) * `changed`:  (integer) * `dark`:  (integer) * `failures`:  (integer) * `ok`:  (integer) * `processed`:  (integer) * `skipped`:  (integer) * `failed`:  (boolean) * `ignored`:  (integer) * `rescued`:  (integer)
     *
     * @tags api
     * @name ApiJobHostSummariesRead
     * @summary # Retrieve a Job Host Summary:
     * @request GET:/api/{version}/job_host_summaries/{id}/
     * @secure
     */
    apiJobHostSummariesRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<JobHostSummary, any>({
        path: `/api/${version}/job_host_summaries/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of job templates. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of job templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more job template records. ## Results Each job template data structure includes the following fields: * `id`: Database ID for this job template. (integer) * `type`: Data type for this job template. (choice) * `url`: URL for this job template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this job template was created. (datetime) * `modified`: Timestamp when this job template was last modified. (datetime) * `name`: Name of this job template. (string) * `description`: Optional description of this job template. (string) * `job_type`:  (choice) - `run`: Run - `check`: Check * `inventory`:  (id) * `project`:  (id) * `playbook`:  (string) * `scm_branch`: Branch to use in job run. Project default used if blank. Only allowed if project allow_override field is set to true. (string) * `forks`:  (integer) * `limit`:  (string) * `verbosity`:  (choice) - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `extra_vars`:  (json) * `job_tags`:  (string) * `force_handlers`:  (boolean) * `skip_tags`:  (string) * `start_at_task`:  (string) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `use_fact_cache`: If enabled, the service will act as an Ansible Fact Cache Plugin; persisting facts at the end of a playbook run to the database and caching facts for use by Ansible. (boolean) * `organization`: The organization used to determine access to this template. (id) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated * `execution_environment`: The container image to be used for execution. (id) * `host_config_key`:  (string) * `ask_scm_branch_on_launch`:  (boolean) * `ask_diff_mode_on_launch`:  (boolean) * `ask_variables_on_launch`:  (boolean) * `ask_limit_on_launch`:  (boolean) * `ask_tags_on_launch`:  (boolean) * `ask_skip_tags_on_launch`:  (boolean) * `ask_job_type_on_launch`:  (boolean) * `ask_verbosity_on_launch`:  (boolean) * `ask_inventory_on_launch`:  (boolean) * `ask_credential_on_launch`:  (boolean) * `ask_execution_environment_on_launch`:  (boolean) * `ask_labels_on_launch`:  (boolean) * `ask_forks_on_launch`:  (boolean) * `ask_job_slice_count_on_launch`:  (boolean) * `ask_timeout_on_launch`:  (boolean) * `ask_instance_groups_on_launch`:  (boolean) * `survey_enabled`:  (boolean) * `become_enabled`:  (boolean) * `diff_mode`: If enabled, textual changes made to any templated files on the host are shown in the standard output (boolean) * `allow_simultaneous`:  (boolean) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `job_slice_count`: The number of jobs to slice into at runtime. Will cause the Job Template to launch a workflow if value is greater than 1. (integer) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id) * `prevent_instance_group_fallback`: If enabled, the job template will prevent adding any inventory or organization instance groups to the list of preferred instances groups to run on.If this setting is enabled and you provided an empty list, the global instance groups will be applied. (boolean) ## Sorting To specify that job templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiJobTemplatesList
     * @summary # List Job Templates:
     * @request GET:/api/{version}/job_templates/
     * @secure
     */
    apiJobTemplatesList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: JobTemplate[]
        },
        any
      >({
        path: `/api/${version}/job_templates/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of job templates. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of job templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more job template records. ## Results Each job template data structure includes the following fields: * `id`: Database ID for this job template. (integer) * `type`: Data type for this job template. (choice) * `url`: URL for this job template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this job template was created. (datetime) * `modified`: Timestamp when this job template was last modified. (datetime) * `name`: Name of this job template. (string) * `description`: Optional description of this job template. (string) * `job_type`:  (choice) - `run`: Run - `check`: Check * `inventory`:  (id) * `project`:  (id) * `playbook`:  (string) * `scm_branch`: Branch to use in job run. Project default used if blank. Only allowed if project allow_override field is set to true. (string) * `forks`:  (integer) * `limit`:  (string) * `verbosity`:  (choice) - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `extra_vars`:  (json) * `job_tags`:  (string) * `force_handlers`:  (boolean) * `skip_tags`:  (string) * `start_at_task`:  (string) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `use_fact_cache`: If enabled, the service will act as an Ansible Fact Cache Plugin; persisting facts at the end of a playbook run to the database and caching facts for use by Ansible. (boolean) * `organization`: The organization used to determine access to this template. (id) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated * `execution_environment`: The container image to be used for execution. (id) * `host_config_key`:  (string) * `ask_scm_branch_on_launch`:  (boolean) * `ask_diff_mode_on_launch`:  (boolean) * `ask_variables_on_launch`:  (boolean) * `ask_limit_on_launch`:  (boolean) * `ask_tags_on_launch`:  (boolean) * `ask_skip_tags_on_launch`:  (boolean) * `ask_job_type_on_launch`:  (boolean) * `ask_verbosity_on_launch`:  (boolean) * `ask_inventory_on_launch`:  (boolean) * `ask_credential_on_launch`:  (boolean) * `ask_execution_environment_on_launch`:  (boolean) * `ask_labels_on_launch`:  (boolean) * `ask_forks_on_launch`:  (boolean) * `ask_job_slice_count_on_launch`:  (boolean) * `ask_timeout_on_launch`:  (boolean) * `ask_instance_groups_on_launch`:  (boolean) * `survey_enabled`:  (boolean) * `become_enabled`:  (boolean) * `diff_mode`: If enabled, textual changes made to any templated files on the host are shown in the standard output (boolean) * `allow_simultaneous`:  (boolean) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `job_slice_count`: The number of jobs to slice into at runtime. Will cause the Job Template to launch a workflow if value is greater than 1. (integer) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id) * `prevent_instance_group_fallback`: If enabled, the job template will prevent adding any inventory or organization instance groups to the list of preferred instances groups to run on.If this setting is enabled and you provided an empty list, the global instance groups will be applied. (boolean) ## Sorting To specify that job templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiJobTemplatesCreate
     * @summary # List Job Templates:
     * @request POST:/api/{version}/job_templates/
     * @secure
     */
    apiJobTemplatesCreate: (version: string, data: JobTemplate, params: RequestParams = {}) =>
      this.request<JobTemplate, any>({
        path: `/api/${version}/job_templates/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single job template record containing the following fields: * `id`: Database ID for this job template. (integer) * `type`: Data type for this job template. (choice) * `url`: URL for this job template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this job template was created. (datetime) * `modified`: Timestamp when this job template was last modified. (datetime) * `name`: Name of this job template. (string) * `description`: Optional description of this job template. (string) * `job_type`:  (choice) - `run`: Run - `check`: Check * `inventory`:  (id) * `project`:  (id) * `playbook`:  (string) * `scm_branch`: Branch to use in job run. Project default used if blank. Only allowed if project allow_override field is set to true. (string) * `forks`:  (integer) * `limit`:  (string) * `verbosity`:  (choice) - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `extra_vars`:  (json) * `job_tags`:  (string) * `force_handlers`:  (boolean) * `skip_tags`:  (string) * `start_at_task`:  (string) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `use_fact_cache`: If enabled, the service will act as an Ansible Fact Cache Plugin; persisting facts at the end of a playbook run to the database and caching facts for use by Ansible. (boolean) * `organization`: The organization used to determine access to this template. (id) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated * `execution_environment`: The container image to be used for execution. (id) * `host_config_key`:  (string) * `ask_scm_branch_on_launch`:  (boolean) * `ask_diff_mode_on_launch`:  (boolean) * `ask_variables_on_launch`:  (boolean) * `ask_limit_on_launch`:  (boolean) * `ask_tags_on_launch`:  (boolean) * `ask_skip_tags_on_launch`:  (boolean) * `ask_job_type_on_launch`:  (boolean) * `ask_verbosity_on_launch`:  (boolean) * `ask_inventory_on_launch`:  (boolean) * `ask_credential_on_launch`:  (boolean) * `ask_execution_environment_on_launch`:  (boolean) * `ask_labels_on_launch`:  (boolean) * `ask_forks_on_launch`:  (boolean) * `ask_job_slice_count_on_launch`:  (boolean) * `ask_timeout_on_launch`:  (boolean) * `ask_instance_groups_on_launch`:  (boolean) * `survey_enabled`:  (boolean) * `become_enabled`:  (boolean) * `diff_mode`: If enabled, textual changes made to any templated files on the host are shown in the standard output (boolean) * `allow_simultaneous`:  (boolean) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `job_slice_count`: The number of jobs to slice into at runtime. Will cause the Job Template to launch a workflow if value is greater than 1. (integer) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id) * `prevent_instance_group_fallback`: If enabled, the job template will prevent adding any inventory or organization instance groups to the list of preferred instances groups to run on.If this setting is enabled and you provided an empty list, the global instance groups will be applied. (boolean) # Update a Job Template: Make a PUT or PATCH request to this resource to update this job template.  The following fields may be modified: * `name`: Name of this job template. (string, required) * `description`: Optional description of this job template. (string, default=`""`) * `job_type`:  (choice) - `run`: Run (default) - `check`: Check * `inventory`:  (id, default=``) * `project`:  (id, default=``) * `playbook`:  (string, default=`""`) * `scm_branch`: Branch to use in job run. Project default used if blank. Only allowed if project allow_override field is set to true. (string, default=`""`) * `forks`:  (integer, default=`0`) * `limit`:  (string, default=`""`) * `verbosity`:  (choice) - `0`: 0 (Normal) (default) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `extra_vars`:  (json, default=``) * `job_tags`:  (string, default=`""`) * `force_handlers`:  (boolean, default=`False`) * `skip_tags`:  (string, default=`""`) * `start_at_task`:  (string, default=`""`) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer, default=`0`) * `use_fact_cache`: If enabled, the service will act as an Ansible Fact Cache Plugin; persisting facts at the end of a playbook run to the database and caching facts for use by Ansible. (boolean, default=`False`) * `execution_environment`: The container image to be used for execution. (id, default=``) * `host_config_key`:  (string, default=`""`) * `ask_scm_branch_on_launch`:  (boolean, default=`False`) * `ask_diff_mode_on_launch`:  (boolean, default=`False`) * `ask_variables_on_launch`:  (boolean, default=`False`) * `ask_limit_on_launch`:  (boolean, default=`False`) * `ask_tags_on_launch`:  (boolean, default=`False`) * `ask_skip_tags_on_launch`:  (boolean, default=`False`) * `ask_job_type_on_launch`:  (boolean, default=`False`) * `ask_verbosity_on_launch`:  (boolean, default=`False`) * `ask_inventory_on_launch`:  (boolean, default=`False`) * `ask_credential_on_launch`:  (boolean, default=`False`) * `ask_execution_environment_on_launch`:  (boolean, default=`False`) * `ask_labels_on_launch`:  (boolean, default=`False`) * `ask_forks_on_launch`:  (boolean, default=`False`) * `ask_job_slice_count_on_launch`:  (boolean, default=`False`) * `ask_timeout_on_launch`:  (boolean, default=`False`) * `ask_instance_groups_on_launch`:  (boolean, default=`False`) * `survey_enabled`:  (boolean, default=`False`) * `become_enabled`:  (boolean, default=`False`) * `diff_mode`: If enabled, textual changes made to any templated files on the host are shown in the standard output (boolean, default=`False`) * `allow_simultaneous`:  (boolean, default=`False`) * `job_slice_count`: The number of jobs to slice into at runtime. Will cause the Job Template to launch a workflow if value is greater than 1. (integer, default=`1`) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id, default=``) * `prevent_instance_group_fallback`: If enabled, the job template will prevent adding any inventory or organization instance groups to the list of preferred instances groups to run on.If this setting is enabled and you provided an empty list, the global instance groups will be applied. (boolean, default=`False`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Job Template: Make a DELETE request to this resource to delete this job template.
     *
     * @tags api
     * @name ApiJobTemplatesRead
     * @summary # Retrieve a Job Template:
     * @request GET:/api/{version}/job_templates/{id}/
     * @secure
     */
    apiJobTemplatesRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<JobTemplate, any>({
        path: `/api/${version}/job_templates/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single job template record containing the following fields: * `id`: Database ID for this job template. (integer) * `type`: Data type for this job template. (choice) * `url`: URL for this job template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this job template was created. (datetime) * `modified`: Timestamp when this job template was last modified. (datetime) * `name`: Name of this job template. (string) * `description`: Optional description of this job template. (string) * `job_type`:  (choice) - `run`: Run - `check`: Check * `inventory`:  (id) * `project`:  (id) * `playbook`:  (string) * `scm_branch`: Branch to use in job run. Project default used if blank. Only allowed if project allow_override field is set to true. (string) * `forks`:  (integer) * `limit`:  (string) * `verbosity`:  (choice) - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `extra_vars`:  (json) * `job_tags`:  (string) * `force_handlers`:  (boolean) * `skip_tags`:  (string) * `start_at_task`:  (string) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `use_fact_cache`: If enabled, the service will act as an Ansible Fact Cache Plugin; persisting facts at the end of a playbook run to the database and caching facts for use by Ansible. (boolean) * `organization`: The organization used to determine access to this template. (id) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated * `execution_environment`: The container image to be used for execution. (id) * `host_config_key`:  (string) * `ask_scm_branch_on_launch`:  (boolean) * `ask_diff_mode_on_launch`:  (boolean) * `ask_variables_on_launch`:  (boolean) * `ask_limit_on_launch`:  (boolean) * `ask_tags_on_launch`:  (boolean) * `ask_skip_tags_on_launch`:  (boolean) * `ask_job_type_on_launch`:  (boolean) * `ask_verbosity_on_launch`:  (boolean) * `ask_inventory_on_launch`:  (boolean) * `ask_credential_on_launch`:  (boolean) * `ask_execution_environment_on_launch`:  (boolean) * `ask_labels_on_launch`:  (boolean) * `ask_forks_on_launch`:  (boolean) * `ask_job_slice_count_on_launch`:  (boolean) * `ask_timeout_on_launch`:  (boolean) * `ask_instance_groups_on_launch`:  (boolean) * `survey_enabled`:  (boolean) * `become_enabled`:  (boolean) * `diff_mode`: If enabled, textual changes made to any templated files on the host are shown in the standard output (boolean) * `allow_simultaneous`:  (boolean) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `job_slice_count`: The number of jobs to slice into at runtime. Will cause the Job Template to launch a workflow if value is greater than 1. (integer) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id) * `prevent_instance_group_fallback`: If enabled, the job template will prevent adding any inventory or organization instance groups to the list of preferred instances groups to run on.If this setting is enabled and you provided an empty list, the global instance groups will be applied. (boolean) # Update a Job Template: Make a PUT or PATCH request to this resource to update this job template.  The following fields may be modified: * `name`: Name of this job template. (string, required) * `description`: Optional description of this job template. (string, default=`""`) * `job_type`:  (choice) - `run`: Run (default) - `check`: Check * `inventory`:  (id, default=``) * `project`:  (id, default=``) * `playbook`:  (string, default=`""`) * `scm_branch`: Branch to use in job run. Project default used if blank. Only allowed if project allow_override field is set to true. (string, default=`""`) * `forks`:  (integer, default=`0`) * `limit`:  (string, default=`""`) * `verbosity`:  (choice) - `0`: 0 (Normal) (default) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `extra_vars`:  (json, default=``) * `job_tags`:  (string, default=`""`) * `force_handlers`:  (boolean, default=`False`) * `skip_tags`:  (string, default=`""`) * `start_at_task`:  (string, default=`""`) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer, default=`0`) * `use_fact_cache`: If enabled, the service will act as an Ansible Fact Cache Plugin; persisting facts at the end of a playbook run to the database and caching facts for use by Ansible. (boolean, default=`False`) * `execution_environment`: The container image to be used for execution. (id, default=``) * `host_config_key`:  (string, default=`""`) * `ask_scm_branch_on_launch`:  (boolean, default=`False`) * `ask_diff_mode_on_launch`:  (boolean, default=`False`) * `ask_variables_on_launch`:  (boolean, default=`False`) * `ask_limit_on_launch`:  (boolean, default=`False`) * `ask_tags_on_launch`:  (boolean, default=`False`) * `ask_skip_tags_on_launch`:  (boolean, default=`False`) * `ask_job_type_on_launch`:  (boolean, default=`False`) * `ask_verbosity_on_launch`:  (boolean, default=`False`) * `ask_inventory_on_launch`:  (boolean, default=`False`) * `ask_credential_on_launch`:  (boolean, default=`False`) * `ask_execution_environment_on_launch`:  (boolean, default=`False`) * `ask_labels_on_launch`:  (boolean, default=`False`) * `ask_forks_on_launch`:  (boolean, default=`False`) * `ask_job_slice_count_on_launch`:  (boolean, default=`False`) * `ask_timeout_on_launch`:  (boolean, default=`False`) * `ask_instance_groups_on_launch`:  (boolean, default=`False`) * `survey_enabled`:  (boolean, default=`False`) * `become_enabled`:  (boolean, default=`False`) * `diff_mode`: If enabled, textual changes made to any templated files on the host are shown in the standard output (boolean, default=`False`) * `allow_simultaneous`:  (boolean, default=`False`) * `job_slice_count`: The number of jobs to slice into at runtime. Will cause the Job Template to launch a workflow if value is greater than 1. (integer, default=`1`) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id, default=``) * `prevent_instance_group_fallback`: If enabled, the job template will prevent adding any inventory or organization instance groups to the list of preferred instances groups to run on.If this setting is enabled and you provided an empty list, the global instance groups will be applied. (boolean, default=`False`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Job Template: Make a DELETE request to this resource to delete this job template.
     *
     * @tags api
     * @name ApiJobTemplatesUpdate
     * @summary # Retrieve a Job Template:
     * @request PUT:/api/{version}/job_templates/{id}/
     * @secure
     */
    apiJobTemplatesUpdate: (
      id: string,
      version: string,
      data: JobTemplate,
      params: RequestParams = {}
    ) =>
      this.request<JobTemplate, any>({
        path: `/api/${version}/job_templates/${id}/`,
        method: 'PUT',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single job template record containing the following fields: * `id`: Database ID for this job template. (integer) * `type`: Data type for this job template. (choice) * `url`: URL for this job template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this job template was created. (datetime) * `modified`: Timestamp when this job template was last modified. (datetime) * `name`: Name of this job template. (string) * `description`: Optional description of this job template. (string) * `job_type`:  (choice) - `run`: Run - `check`: Check * `inventory`:  (id) * `project`:  (id) * `playbook`:  (string) * `scm_branch`: Branch to use in job run. Project default used if blank. Only allowed if project allow_override field is set to true. (string) * `forks`:  (integer) * `limit`:  (string) * `verbosity`:  (choice) - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `extra_vars`:  (json) * `job_tags`:  (string) * `force_handlers`:  (boolean) * `skip_tags`:  (string) * `start_at_task`:  (string) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `use_fact_cache`: If enabled, the service will act as an Ansible Fact Cache Plugin; persisting facts at the end of a playbook run to the database and caching facts for use by Ansible. (boolean) * `organization`: The organization used to determine access to this template. (id) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated * `execution_environment`: The container image to be used for execution. (id) * `host_config_key`:  (string) * `ask_scm_branch_on_launch`:  (boolean) * `ask_diff_mode_on_launch`:  (boolean) * `ask_variables_on_launch`:  (boolean) * `ask_limit_on_launch`:  (boolean) * `ask_tags_on_launch`:  (boolean) * `ask_skip_tags_on_launch`:  (boolean) * `ask_job_type_on_launch`:  (boolean) * `ask_verbosity_on_launch`:  (boolean) * `ask_inventory_on_launch`:  (boolean) * `ask_credential_on_launch`:  (boolean) * `ask_execution_environment_on_launch`:  (boolean) * `ask_labels_on_launch`:  (boolean) * `ask_forks_on_launch`:  (boolean) * `ask_job_slice_count_on_launch`:  (boolean) * `ask_timeout_on_launch`:  (boolean) * `ask_instance_groups_on_launch`:  (boolean) * `survey_enabled`:  (boolean) * `become_enabled`:  (boolean) * `diff_mode`: If enabled, textual changes made to any templated files on the host are shown in the standard output (boolean) * `allow_simultaneous`:  (boolean) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `job_slice_count`: The number of jobs to slice into at runtime. Will cause the Job Template to launch a workflow if value is greater than 1. (integer) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id) * `prevent_instance_group_fallback`: If enabled, the job template will prevent adding any inventory or organization instance groups to the list of preferred instances groups to run on.If this setting is enabled and you provided an empty list, the global instance groups will be applied. (boolean) # Update a Job Template: Make a PUT or PATCH request to this resource to update this job template.  The following fields may be modified: * `name`: Name of this job template. (string, required) * `description`: Optional description of this job template. (string, default=`""`) * `job_type`:  (choice) - `run`: Run (default) - `check`: Check * `inventory`:  (id, default=``) * `project`:  (id, default=``) * `playbook`:  (string, default=`""`) * `scm_branch`: Branch to use in job run. Project default used if blank. Only allowed if project allow_override field is set to true. (string, default=`""`) * `forks`:  (integer, default=`0`) * `limit`:  (string, default=`""`) * `verbosity`:  (choice) - `0`: 0 (Normal) (default) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `extra_vars`:  (json, default=``) * `job_tags`:  (string, default=`""`) * `force_handlers`:  (boolean, default=`False`) * `skip_tags`:  (string, default=`""`) * `start_at_task`:  (string, default=`""`) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer, default=`0`) * `use_fact_cache`: If enabled, the service will act as an Ansible Fact Cache Plugin; persisting facts at the end of a playbook run to the database and caching facts for use by Ansible. (boolean, default=`False`) * `execution_environment`: The container image to be used for execution. (id, default=``) * `host_config_key`:  (string, default=`""`) * `ask_scm_branch_on_launch`:  (boolean, default=`False`) * `ask_diff_mode_on_launch`:  (boolean, default=`False`) * `ask_variables_on_launch`:  (boolean, default=`False`) * `ask_limit_on_launch`:  (boolean, default=`False`) * `ask_tags_on_launch`:  (boolean, default=`False`) * `ask_skip_tags_on_launch`:  (boolean, default=`False`) * `ask_job_type_on_launch`:  (boolean, default=`False`) * `ask_verbosity_on_launch`:  (boolean, default=`False`) * `ask_inventory_on_launch`:  (boolean, default=`False`) * `ask_credential_on_launch`:  (boolean, default=`False`) * `ask_execution_environment_on_launch`:  (boolean, default=`False`) * `ask_labels_on_launch`:  (boolean, default=`False`) * `ask_forks_on_launch`:  (boolean, default=`False`) * `ask_job_slice_count_on_launch`:  (boolean, default=`False`) * `ask_timeout_on_launch`:  (boolean, default=`False`) * `ask_instance_groups_on_launch`:  (boolean, default=`False`) * `survey_enabled`:  (boolean, default=`False`) * `become_enabled`:  (boolean, default=`False`) * `diff_mode`: If enabled, textual changes made to any templated files on the host are shown in the standard output (boolean, default=`False`) * `allow_simultaneous`:  (boolean, default=`False`) * `job_slice_count`: The number of jobs to slice into at runtime. Will cause the Job Template to launch a workflow if value is greater than 1. (integer, default=`1`) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id, default=``) * `prevent_instance_group_fallback`: If enabled, the job template will prevent adding any inventory or organization instance groups to the list of preferred instances groups to run on.If this setting is enabled and you provided an empty list, the global instance groups will be applied. (boolean, default=`False`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Job Template: Make a DELETE request to this resource to delete this job template.
     *
     * @tags api
     * @name ApiJobTemplatesPartialUpdate
     * @summary # Retrieve a Job Template:
     * @request PATCH:/api/{version}/job_templates/{id}/
     * @secure
     */
    apiJobTemplatesPartialUpdate: (
      id: string,
      version: string,
      data: JobTemplate,
      params: RequestParams = {}
    ) =>
      this.request<JobTemplate, any>({
        path: `/api/${version}/job_templates/${id}/`,
        method: 'PATCH',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single job template record containing the following fields: * `id`: Database ID for this job template. (integer) * `type`: Data type for this job template. (choice) * `url`: URL for this job template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this job template was created. (datetime) * `modified`: Timestamp when this job template was last modified. (datetime) * `name`: Name of this job template. (string) * `description`: Optional description of this job template. (string) * `job_type`:  (choice) - `run`: Run - `check`: Check * `inventory`:  (id) * `project`:  (id) * `playbook`:  (string) * `scm_branch`: Branch to use in job run. Project default used if blank. Only allowed if project allow_override field is set to true. (string) * `forks`:  (integer) * `limit`:  (string) * `verbosity`:  (choice) - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `extra_vars`:  (json) * `job_tags`:  (string) * `force_handlers`:  (boolean) * `skip_tags`:  (string) * `start_at_task`:  (string) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `use_fact_cache`: If enabled, the service will act as an Ansible Fact Cache Plugin; persisting facts at the end of a playbook run to the database and caching facts for use by Ansible. (boolean) * `organization`: The organization used to determine access to this template. (id) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated * `execution_environment`: The container image to be used for execution. (id) * `host_config_key`:  (string) * `ask_scm_branch_on_launch`:  (boolean) * `ask_diff_mode_on_launch`:  (boolean) * `ask_variables_on_launch`:  (boolean) * `ask_limit_on_launch`:  (boolean) * `ask_tags_on_launch`:  (boolean) * `ask_skip_tags_on_launch`:  (boolean) * `ask_job_type_on_launch`:  (boolean) * `ask_verbosity_on_launch`:  (boolean) * `ask_inventory_on_launch`:  (boolean) * `ask_credential_on_launch`:  (boolean) * `ask_execution_environment_on_launch`:  (boolean) * `ask_labels_on_launch`:  (boolean) * `ask_forks_on_launch`:  (boolean) * `ask_job_slice_count_on_launch`:  (boolean) * `ask_timeout_on_launch`:  (boolean) * `ask_instance_groups_on_launch`:  (boolean) * `survey_enabled`:  (boolean) * `become_enabled`:  (boolean) * `diff_mode`: If enabled, textual changes made to any templated files on the host are shown in the standard output (boolean) * `allow_simultaneous`:  (boolean) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `job_slice_count`: The number of jobs to slice into at runtime. Will cause the Job Template to launch a workflow if value is greater than 1. (integer) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id) * `prevent_instance_group_fallback`: If enabled, the job template will prevent adding any inventory or organization instance groups to the list of preferred instances groups to run on.If this setting is enabled and you provided an empty list, the global instance groups will be applied. (boolean) # Update a Job Template: Make a PUT or PATCH request to this resource to update this job template.  The following fields may be modified: * `name`: Name of this job template. (string, required) * `description`: Optional description of this job template. (string, default=`""`) * `job_type`:  (choice) - `run`: Run (default) - `check`: Check * `inventory`:  (id, default=``) * `project`:  (id, default=``) * `playbook`:  (string, default=`""`) * `scm_branch`: Branch to use in job run. Project default used if blank. Only allowed if project allow_override field is set to true. (string, default=`""`) * `forks`:  (integer, default=`0`) * `limit`:  (string, default=`""`) * `verbosity`:  (choice) - `0`: 0 (Normal) (default) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `extra_vars`:  (json, default=``) * `job_tags`:  (string, default=`""`) * `force_handlers`:  (boolean, default=`False`) * `skip_tags`:  (string, default=`""`) * `start_at_task`:  (string, default=`""`) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer, default=`0`) * `use_fact_cache`: If enabled, the service will act as an Ansible Fact Cache Plugin; persisting facts at the end of a playbook run to the database and caching facts for use by Ansible. (boolean, default=`False`) * `execution_environment`: The container image to be used for execution. (id, default=``) * `host_config_key`:  (string, default=`""`) * `ask_scm_branch_on_launch`:  (boolean, default=`False`) * `ask_diff_mode_on_launch`:  (boolean, default=`False`) * `ask_variables_on_launch`:  (boolean, default=`False`) * `ask_limit_on_launch`:  (boolean, default=`False`) * `ask_tags_on_launch`:  (boolean, default=`False`) * `ask_skip_tags_on_launch`:  (boolean, default=`False`) * `ask_job_type_on_launch`:  (boolean, default=`False`) * `ask_verbosity_on_launch`:  (boolean, default=`False`) * `ask_inventory_on_launch`:  (boolean, default=`False`) * `ask_credential_on_launch`:  (boolean, default=`False`) * `ask_execution_environment_on_launch`:  (boolean, default=`False`) * `ask_labels_on_launch`:  (boolean, default=`False`) * `ask_forks_on_launch`:  (boolean, default=`False`) * `ask_job_slice_count_on_launch`:  (boolean, default=`False`) * `ask_timeout_on_launch`:  (boolean, default=`False`) * `ask_instance_groups_on_launch`:  (boolean, default=`False`) * `survey_enabled`:  (boolean, default=`False`) * `become_enabled`:  (boolean, default=`False`) * `diff_mode`: If enabled, textual changes made to any templated files on the host are shown in the standard output (boolean, default=`False`) * `allow_simultaneous`:  (boolean, default=`False`) * `job_slice_count`: The number of jobs to slice into at runtime. Will cause the Job Template to launch a workflow if value is greater than 1. (integer, default=`1`) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id, default=``) * `prevent_instance_group_fallback`: If enabled, the job template will prevent adding any inventory or organization instance groups to the list of preferred instances groups to run on.If this setting is enabled and you provided an empty list, the global instance groups will be applied. (boolean, default=`False`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Job Template: Make a DELETE request to this resource to delete this job template.
     *
     * @tags api
     * @name ApiJobTemplatesDelete
     * @summary # Retrieve a Job Template:
     * @request DELETE:/api/{version}/job_templates/{id}/
     * @secure
     */
    apiJobTemplatesDelete: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/job_templates/${id}/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of users. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of users found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more user records. ## Results Each user data structure includes the following fields: * `id`: Database ID for this user. (integer) * `type`: Data type for this user. (choice) * `url`: URL for this user. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this user was created. (datetime) * `modified`: Timestamp when this user was last modified. (datetime) * `username`: Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (string) * `first_name`:  (string) * `last_name`:  (string) * `email`:  (string) * `is_superuser`: Designates that this user has all permissions without explicitly assigning them. (boolean) * `is_system_auditor`:  (boolean) * `ldap_dn`:  (string) * `last_login`:  (datetime) * `external_account`: Set if the account is managed by an external service (field) ## Sorting To specify that users are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=username Prefix the field name with a dash `-` to sort in reverse: ?order_by=-username Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=username,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiJobTemplatesAccessListList
     * @summary # List Users:
     * @request GET:/api/{version}/job_templates/{id}/access_list/
     * @secure
     */
    apiJobTemplatesAccessListList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ResourceAccessListElement[]
        },
        any
      >({
        path: `/api/${version}/job_templates/${id}/access_list/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of activity streams associated with the selected job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of activity streams found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more activity stream records. ## Results Each activity stream data structure includes the following fields: * `id`: Database ID for this activity stream. (integer) * `type`: Data type for this activity stream. (choice) * `url`: URL for this activity stream. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `timestamp`:  (datetime) * `operation`: The action taken with respect to the given object(s). (choice) - `create`: Entity Created - `update`: Entity Updated - `delete`: Entity Deleted - `associate`: Entity Associated with another Entity - `disassociate`: Entity was Disassociated with another Entity * `changes`: A summary of the new and changed values when an object is created, updated, or deleted (json) * `object1`: For create, update, and delete events this is the object type that was affected. For associate and disassociate events this is the object type associated or disassociated with object2. (string) * `object2`: Unpopulated for create, update, and delete events. For associate and disassociate events this is the object type that object1 is being associated with. (string) * `object_association`: When present, shows the field name of the role or relationship that changed. (field) * `action_node`: The cluster node the activity took place on. (string) * `object_type`: When present, shows the model on which the role or relationship was defined. (field) ## Sorting To specify that activity streams are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiJobTemplatesActivityStreamList
     * @summary # List Activity Streams for a Job Template:
     * @request GET:/api/{version}/job_templates/{id}/activity_stream/
     * @secure
     */
    apiJobTemplatesActivityStreamList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ActivityStream[]
        },
        any
      >({
        path: `/api/${version}/job_templates/${id}/activity_stream/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Configure a host to POST to this resource, passing the `host_config_key` parameter, to start a new job limited to only the requesting host.  In the examples below, replace the `N` parameter with the `id` of the job template and the `HOST_CONFIG_KEY` with the `host_config_key` associated with the job template. For example, using curl: curl -H "Content-Type: application/json" -d '{"host_config_key": "HOST_CONFIG_KEY"}'  http://server/api/v2/job_templates/N/callback/ Or using wget: wget -O /dev/null --post-data='{"host_config_key": "HOST_CONFIG_KEY"}' --header=Content-Type:application/json http://server/api/v2/job_templates/N/callback/ You may also pass `extra_vars` to the callback: curl -H "Content-Type: application/json" -d '{"host_config_key": "HOST_CONFIG_KEY", "extra_vars": {"key": "value"}}'  http://server/api/v2/job_templates/N/callback/ The response will return status 202 if the request is valid, 403 for an invalid host config key, or 400 if the host cannot be determined from the address making the request. _(New in Ansible Tower 2.0.0)_  If the associated inventory has the `update_on_launch` flag set and if the `update_cache_timeout` has expired, the callback will perform an inventory sync to find a matching host. A GET request may be used to verify that the correct host will be selected. This request must authenticate as a valid user with permission to edit the job template.  For example: curl http://user:password@server/api/v2/job_templates/N/callback/ The response will include the host config key as well as the host name(s) that would match the request: { "host_config_key": "HOST_CONFIG_KEY", "matching_hosts": ["hostname"] }
     *
     * @tags api
     * @name ApiJobTemplatesCallbackList
     * @summary The job template callback allows for ephemeral hosts to launch a new job.
     * @request GET:/api/{version}/job_templates/{id}/callback/
     * @secure
     */
    apiJobTemplatesCallbackList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Empty[]
        },
        any
      >({
        path: `/api/${version}/job_templates/${id}/callback/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Configure a host to POST to this resource, passing the `host_config_key` parameter, to start a new job limited to only the requesting host.  In the examples below, replace the `N` parameter with the `id` of the job template and the `HOST_CONFIG_KEY` with the `host_config_key` associated with the job template. For example, using curl: curl -H "Content-Type: application/json" -d '{"host_config_key": "HOST_CONFIG_KEY"}'  http://server/api/v2/job_templates/N/callback/ Or using wget: wget -O /dev/null --post-data='{"host_config_key": "HOST_CONFIG_KEY"}' --header=Content-Type:application/json http://server/api/v2/job_templates/N/callback/ You may also pass `extra_vars` to the callback: curl -H "Content-Type: application/json" -d '{"host_config_key": "HOST_CONFIG_KEY", "extra_vars": {"key": "value"}}'  http://server/api/v2/job_templates/N/callback/ The response will return status 202 if the request is valid, 403 for an invalid host config key, or 400 if the host cannot be determined from the address making the request. _(New in Ansible Tower 2.0.0)_  If the associated inventory has the `update_on_launch` flag set and if the `update_cache_timeout` has expired, the callback will perform an inventory sync to find a matching host. A GET request may be used to verify that the correct host will be selected. This request must authenticate as a valid user with permission to edit the job template.  For example: curl http://user:password@server/api/v2/job_templates/N/callback/ The response will include the host config key as well as the host name(s) that would match the request: { "host_config_key": "HOST_CONFIG_KEY", "matching_hosts": ["hostname"] }
     *
     * @tags api
     * @name ApiJobTemplatesCallbackCreate
     * @summary The job template callback allows for ephemeral hosts to launch a new job.
     * @request POST:/api/{version}/job_templates/{id}/callback/
     * @secure
     */
    apiJobTemplatesCallbackCreate: (
      id: string,
      version: string,
      data: Empty,
      params: RequestParams = {}
    ) =>
      this.request<Empty, any>({
        path: `/api/${version}/job_templates/${id}/callback/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiJobTemplatesCopyList
     * @request GET:/api/{version}/job_templates/{id}/copy/
     * @secure
     */
    apiJobTemplatesCopyList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Copy[]
        },
        any
      >({
        path: `/api/${version}/job_templates/${id}/copy/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiJobTemplatesCopyCreate
     * @request POST:/api/{version}/job_templates/{id}/copy/
     * @secure
     */
    apiJobTemplatesCopyCreate: (
      id: string,
      version: string,
      data: Copy,
      params: RequestParams = {}
    ) =>
      this.request<Copy, any>({
        path: `/api/${version}/job_templates/${id}/copy/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of credentials associated with the selected job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of credentials found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more credential records. ## Results Each credential data structure includes the following fields: * `id`: Database ID for this credential. (integer) * `type`: Data type for this credential. (choice) * `url`: URL for this credential. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential was created. (datetime) * `modified`: Timestamp when this credential was last modified. (datetime) * `name`: Name of this credential. (string) * `description`: Optional description of this credential. (string) * `organization`:  (id) * `credential_type`: Specify the type of credential you want to create. Refer to the documentation for details on each type. (id) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `kind`:  (field) * `cloud`:  (field) * `kubernetes`:  (field) ## Sorting To specify that credentials are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiJobTemplatesCredentialsList
     * @summary # List Credentials for a Job Template:
     * @request GET:/api/{version}/job_templates/{id}/credentials/
     * @secure
     */
    apiJobTemplatesCredentialsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Credential[]
        },
        any
      >({
        path: `/api/${version}/job_templates/${id}/credentials/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of credentials associated with the selected job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of credentials found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more credential records. ## Results Each credential data structure includes the following fields: * `id`: Database ID for this credential. (integer) * `type`: Data type for this credential. (choice) * `url`: URL for this credential. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential was created. (datetime) * `modified`: Timestamp when this credential was last modified. (datetime) * `name`: Name of this credential. (string) * `description`: Optional description of this credential. (string) * `organization`:  (id) * `credential_type`: Specify the type of credential you want to create. Refer to the documentation for details on each type. (id) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `kind`:  (field) * `cloud`:  (field) * `kubernetes`:  (field) ## Sorting To specify that credentials are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiJobTemplatesCredentialsCreate
     * @summary # List Credentials for a Job Template:
     * @request POST:/api/{version}/job_templates/{id}/credentials/
     * @secure
     */
    apiJobTemplatesCredentialsCreate: (
      id: string,
      version: string,
      data: Credential,
      params: RequestParams = {}
    ) =>
      this.request<Credential, any>({
        path: `/api/${version}/job_templates/${id}/credentials/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiJobTemplatesGithubCreate
     * @request POST:/api/{version}/job_templates/{id}/github/
     * @secure
     */
    apiJobTemplatesGithubCreate: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/job_templates/${id}/github/`,
        method: 'POST',
        secure: true,
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiJobTemplatesGitlabCreate
     * @request POST:/api/{version}/job_templates/{id}/gitlab/
     * @secure
     */
    apiJobTemplatesGitlabCreate: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/job_templates/${id}/gitlab/`,
        method: 'POST',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of instance groups associated with the selected job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of instance groups found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more instance group records. ## Results Each instance group data structure includes the following fields: * `id`: Database ID for this instance group. (integer) * `type`: Data type for this instance group. (choice) * `url`: URL for this instance group. (string) * `related`: Data structure with URLs of related resources. (object) * `name`: Name of this instance group. (string) * `created`: Timestamp when this instance group was created. (datetime) * `modified`: Timestamp when this instance group was last modified. (datetime) * `capacity`:  (field) * `consumed_capacity`:  (field) * `percent_capacity_remaining`:  (field) * `jobs_running`: Count of jobs in the running or waiting state that are targeted for this instance group (integer) * `jobs_total`: Count of all jobs that target this instance group (integer) * `instances`:  (field) * `is_container_group`: Indicates whether instances in this group are containerized.Containerized groups have a designated Openshift or Kubernetes cluster. (boolean) * `credential`:  (id) * `policy_instance_percentage`: Minimum percentage of all instances that will be automatically assigned to this group when new instances come online. (integer) * `policy_instance_minimum`: Static minimum number of Instances that will be automatically assign to this group when new instances come online. (integer) * `policy_instance_list`: List of exact-match Instances that will be assigned to this group (json) * `pod_spec_override`:  (string) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) ## Sorting To specify that instance groups are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiJobTemplatesInstanceGroupsList
     * @summary # List Instance Groups for a Job Template:
     * @request GET:/api/{version}/job_templates/{id}/instance_groups/
     * @secure
     */
    apiJobTemplatesInstanceGroupsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: InstanceGroup[]
        },
        any
      >({
        path: `/api/${version}/job_templates/${id}/instance_groups/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of instance groups associated with the selected job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of instance groups found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more instance group records. ## Results Each instance group data structure includes the following fields: * `id`: Database ID for this instance group. (integer) * `type`: Data type for this instance group. (choice) * `url`: URL for this instance group. (string) * `related`: Data structure with URLs of related resources. (object) * `name`: Name of this instance group. (string) * `created`: Timestamp when this instance group was created. (datetime) * `modified`: Timestamp when this instance group was last modified. (datetime) * `capacity`:  (field) * `consumed_capacity`:  (field) * `percent_capacity_remaining`:  (field) * `jobs_running`: Count of jobs in the running or waiting state that are targeted for this instance group (integer) * `jobs_total`: Count of all jobs that target this instance group (integer) * `instances`:  (field) * `is_container_group`: Indicates whether instances in this group are containerized.Containerized groups have a designated Openshift or Kubernetes cluster. (boolean) * `credential`:  (id) * `policy_instance_percentage`: Minimum percentage of all instances that will be automatically assigned to this group when new instances come online. (integer) * `policy_instance_minimum`: Static minimum number of Instances that will be automatically assign to this group when new instances come online. (integer) * `policy_instance_list`: List of exact-match Instances that will be assigned to this group (json) * `pod_spec_override`:  (string) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) ## Sorting To specify that instance groups are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiJobTemplatesInstanceGroupsCreate
     * @summary # List Instance Groups for a Job Template:
     * @request POST:/api/{version}/job_templates/{id}/instance_groups/
     * @secure
     */
    apiJobTemplatesInstanceGroupsCreate: (
      id: string,
      version: string,
      data: InstanceGroup,
      params: RequestParams = {}
    ) =>
      this.request<InstanceGroup, any>({
        path: `/api/${version}/job_templates/${id}/instance_groups/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of jobs associated with the selected job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of jobs found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more job records. ## Results Each job data structure includes the following fields: * `id`: Database ID for this job. (integer) * `type`: Data type for this job. (choice) * `url`: URL for this job. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this job was created. (datetime) * `modified`: Timestamp when this job was last modified. (datetime) * `name`: Name of this job. (string) * `description`: Optional description of this job. (string) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `execution_node`: The node the job executed on. (string) * `controller_node`: The instance that managed the execution environment. (string) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `job_type`:  (choice) - `run`: Run - `check`: Check - `scan`: Scan * `inventory`:  (id) * `project`:  (id) * `playbook`:  (string) * `scm_branch`: Branch to use in job run. Project default used if blank. Only allowed if project allow_override field is set to true. (string) * `forks`:  (integer) * `limit`:  (string) * `verbosity`:  (choice) - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `extra_vars`:  (json) * `job_tags`:  (string) * `force_handlers`:  (boolean) * `skip_tags`:  (string) * `start_at_task`:  (string) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `use_fact_cache`: If enabled, the service will act as an Ansible Fact Cache Plugin; persisting facts at the end of a playbook run to the database and caching facts for use by Ansible. (boolean) * `organization`: The organization used to determine access to this unified job. (id) * `job_template`:  (id) * `passwords_needed_to_start`:  (field) * `allow_simultaneous`:  (boolean) * `artifacts`:  (json) * `scm_revision`: The SCM Revision from the Project used for this job, if available (string) * `instance_group`: The Instance group the job was run under (id) * `diff_mode`: If enabled, textual changes made to any templated files on the host are shown in the standard output (boolean) * `job_slice_number`: If part of a sliced job, the ID of the inventory slice operated on. If not part of sliced job, parameter is not used. (integer) * `job_slice_count`: If ran as part of sliced jobs, the total number of slices. If 1, job is not part of a sliced job. (integer) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id) * `webhook_guid`: Unique identifier of the event that triggered this webhook (string) ## Sorting To specify that jobs are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiJobTemplatesJobsList
     * @summary # List Jobs for a Job Template:
     * @request GET:/api/{version}/job_templates/{id}/jobs/
     * @secure
     */
    apiJobTemplatesJobsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: JobList[]
        },
        any
      >({
        path: `/api/${version}/job_templates/${id}/jobs/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of labels associated with the selected job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of labels found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more label records. ## Results Each label data structure includes the following fields: * `id`: Database ID for this label. (integer) * `type`: Data type for this label. (choice) * `url`: URL for this label. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this label was created. (datetime) * `modified`: Timestamp when this label was last modified. (datetime) * `name`: Name of this label. (string) * `organization`: Organization this label belongs to. (id) ## Sorting To specify that labels are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiJobTemplatesLabelsList
     * @summary # List Labels for a Job Template:
     * @request GET:/api/{version}/job_templates/{id}/labels/
     * @secure
     */
    apiJobTemplatesLabelsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Label[]
        },
        any
      >({
        path: `/api/${version}/job_templates/${id}/labels/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of labels associated with the selected job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of labels found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more label records. ## Results Each label data structure includes the following fields: * `id`: Database ID for this label. (integer) * `type`: Data type for this label. (choice) * `url`: URL for this label. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this label was created. (datetime) * `modified`: Timestamp when this label was last modified. (datetime) * `name`: Name of this label. (string) * `organization`: Organization this label belongs to. (id) ## Sorting To specify that labels are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiJobTemplatesLabelsCreate
     * @summary # List Labels for a Job Template:
     * @request POST:/api/{version}/job_templates/{id}/labels/
     * @secure
     */
    apiJobTemplatesLabelsCreate: (
      id: string,
      version: string,
      data: Label,
      params: RequestParams = {}
    ) =>
      this.request<Label, any>({
        path: `/api/${version}/job_templates/${id}/labels/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to determine if the job_template can be launched and whether any passwords are required to launch the job_template. The response will include the following fields: * `ask_variables_on_launch`: Flag indicating whether the job_template is configured to prompt for variables upon launch (boolean, read-only) * `ask_tags_on_launch`: Flag indicating whether the job_template is configured to prompt for tags upon launch (boolean, read-only) * `ask_skip_tags_on_launch`: Flag indicating whether the job_template is configured to prompt for skip_tags upon launch (boolean, read-only) * `ask_job_type_on_launch`: Flag indicating whether the job_template is configured to prompt for job_type upon launch (boolean, read-only) * `ask_limit_on_launch`: Flag indicating whether the job_template is configured to prompt for limit upon launch (boolean, read-only) * `ask_inventory_on_launch`: Flag indicating whether the job_template is configured to prompt for inventory upon launch (boolean, read-only) * `ask_credential_on_launch`: Flag indicating whether the job_template is configured to prompt for credential upon launch (boolean, read-only) * `can_start_without_user_input`: Flag indicating if the job_template can be launched without user-input (boolean, read-only) * `passwords_needed_to_start`: Password names required to launch the job_template (array, read-only) * `variables_needed_to_start`: Required variable names required to launch the job_template (array, read-only) * `survey_enabled`: Flag indicating whether the job_template has an enabled survey (boolean, read-only) * `inventory_needed_to_start`: Flag indicating the presence of an inventory associated with the job template.  If not then one should be supplied when launching the job (boolean, read-only) Make a POST request to this resource to launch the job_template. If any passwords, inventory, or extra variables (extra_vars) are required, they must be passed via POST data, with extra_vars given as a YAML or JSON string and escaped parentheses. If the `inventory_needed_to_start` is `True` then the `inventory` is required. If successful, the response status code will be 201.  If any required passwords are not provided, a 400 status code will be returned.  If the job cannot be launched, a 405 status code will be returned. If the provided credential or inventory are not allowed to be used by the user, then a 403 status code will be returned.
     *
     * @tags api
     * @name ApiJobTemplatesLaunchRead
     * @summary Launch a Job Template:
     * @request GET:/api/{version}/job_templates/{id}/launch/
     * @secure
     */
    apiJobTemplatesLaunchRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<JobLaunch, any>({
        path: `/api/${version}/job_templates/${id}/launch/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to determine if the job_template can be launched and whether any passwords are required to launch the job_template. The response will include the following fields: * `ask_variables_on_launch`: Flag indicating whether the job_template is configured to prompt for variables upon launch (boolean, read-only) * `ask_tags_on_launch`: Flag indicating whether the job_template is configured to prompt for tags upon launch (boolean, read-only) * `ask_skip_tags_on_launch`: Flag indicating whether the job_template is configured to prompt for skip_tags upon launch (boolean, read-only) * `ask_job_type_on_launch`: Flag indicating whether the job_template is configured to prompt for job_type upon launch (boolean, read-only) * `ask_limit_on_launch`: Flag indicating whether the job_template is configured to prompt for limit upon launch (boolean, read-only) * `ask_inventory_on_launch`: Flag indicating whether the job_template is configured to prompt for inventory upon launch (boolean, read-only) * `ask_credential_on_launch`: Flag indicating whether the job_template is configured to prompt for credential upon launch (boolean, read-only) * `can_start_without_user_input`: Flag indicating if the job_template can be launched without user-input (boolean, read-only) * `passwords_needed_to_start`: Password names required to launch the job_template (array, read-only) * `variables_needed_to_start`: Required variable names required to launch the job_template (array, read-only) * `survey_enabled`: Flag indicating whether the job_template has an enabled survey (boolean, read-only) * `inventory_needed_to_start`: Flag indicating the presence of an inventory associated with the job template.  If not then one should be supplied when launching the job (boolean, read-only) Make a POST request to this resource to launch the job_template. If any passwords, inventory, or extra variables (extra_vars) are required, they must be passed via POST data, with extra_vars given as a YAML or JSON string and escaped parentheses. If the `inventory_needed_to_start` is `True` then the `inventory` is required. If successful, the response status code will be 201.  If any required passwords are not provided, a 400 status code will be returned.  If the job cannot be launched, a 405 status code will be returned. If the provided credential or inventory are not allowed to be used by the user, then a 403 status code will be returned.
     *
     * @tags api
     * @name ApiJobTemplatesLaunchCreate
     * @summary Launch a Job Template:
     * @request POST:/api/{version}/job_templates/{id}/launch/
     * @secure
     */
    apiJobTemplatesLaunchCreate: (
      id: string,
      version: string,
      data: JobLaunch,
      params: RequestParams = {}
    ) =>
      this.request<JobLaunch, any>({
        path: `/api/${version}/job_templates/${id}/launch/`,
        method: 'POST',
        body: data,
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiJobTemplatesNotificationTemplatesErrorList
     * @summary # List Notification Templates for a Job Template:
     * @request GET:/api/{version}/job_templates/{id}/notification_templates_error/
     * @secure
     */
    apiJobTemplatesNotificationTemplatesErrorList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: NotificationTemplate[]
        },
        any
      >({
        path: `/api/${version}/job_templates/${id}/notification_templates_error/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiJobTemplatesNotificationTemplatesErrorCreate
     * @summary # List Notification Templates for a Job Template:
     * @request POST:/api/{version}/job_templates/{id}/notification_templates_error/
     * @secure
     */
    apiJobTemplatesNotificationTemplatesErrorCreate: (
      id: string,
      version: string,
      data: NotificationTemplate,
      params: RequestParams = {}
    ) =>
      this.request<NotificationTemplate, any>({
        path: `/api/${version}/job_templates/${id}/notification_templates_error/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiJobTemplatesNotificationTemplatesStartedList
     * @summary # List Notification Templates for a Job Template:
     * @request GET:/api/{version}/job_templates/{id}/notification_templates_started/
     * @secure
     */
    apiJobTemplatesNotificationTemplatesStartedList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: NotificationTemplate[]
        },
        any
      >({
        path: `/api/${version}/job_templates/${id}/notification_templates_started/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiJobTemplatesNotificationTemplatesStartedCreate
     * @summary # List Notification Templates for a Job Template:
     * @request POST:/api/{version}/job_templates/{id}/notification_templates_started/
     * @secure
     */
    apiJobTemplatesNotificationTemplatesStartedCreate: (
      id: string,
      version: string,
      data: NotificationTemplate,
      params: RequestParams = {}
    ) =>
      this.request<NotificationTemplate, any>({
        path: `/api/${version}/job_templates/${id}/notification_templates_started/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiJobTemplatesNotificationTemplatesSuccessList
     * @summary # List Notification Templates for a Job Template:
     * @request GET:/api/{version}/job_templates/{id}/notification_templates_success/
     * @secure
     */
    apiJobTemplatesNotificationTemplatesSuccessList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: NotificationTemplate[]
        },
        any
      >({
        path: `/api/${version}/job_templates/${id}/notification_templates_success/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiJobTemplatesNotificationTemplatesSuccessCreate
     * @summary # List Notification Templates for a Job Template:
     * @request POST:/api/{version}/job_templates/{id}/notification_templates_success/
     * @secure
     */
    apiJobTemplatesNotificationTemplatesSuccessCreate: (
      id: string,
      version: string,
      data: NotificationTemplate,
      params: RequestParams = {}
    ) =>
      this.request<NotificationTemplate, any>({
        path: `/api/${version}/job_templates/${id}/notification_templates_success/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of roles associated with the selected job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of roles found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more role records. ## Results Each role data structure includes the following fields: * `id`: Database ID for this role. (integer) * `type`: Data type for this role. (choice) * `url`: URL for this role. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `name`: Name of this role. (field) * `description`: Optional description of this role. (field) ## Sorting To specify that roles are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiJobTemplatesObjectRolesList
     * @summary # List Roles for a Job Template:
     * @request GET:/api/{version}/job_templates/{id}/object_roles/
     * @secure
     */
    apiJobTemplatesObjectRolesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Role[]
        },
        any
      >({
        path: `/api/${version}/job_templates/${id}/object_roles/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of schedules associated with the selected job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of schedules found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more schedule records. ## Results Each schedule data structure includes the following fields: * `rrule`: A value representing the schedules iCal recurrence rule. (string) * `id`: Database ID for this schedule. (integer) * `type`: Data type for this schedule. (choice) * `url`: URL for this schedule. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this schedule was created. (datetime) * `modified`: Timestamp when this schedule was last modified. (datetime) * `name`: Name of this schedule. (string) * `description`: Optional description of this schedule. (string) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `unified_job_template`:  (id) * `enabled`: Enables processing of this schedule. (boolean) * `dtstart`: The first occurrence of the schedule occurs on or after this time. (datetime) * `dtend`: The last occurrence of the schedule occurs before this time, aftewards the schedule expires. (datetime) * `next_run`: The next time that the scheduled action will run. (datetime) * `timezone`: The timezone this schedule runs in. This field is extracted from the RRULE. If the timezone in the RRULE is a link to another timezone, the link will be reflected in this field. (field) * `until`: The date this schedule will end. This field is computed from the RRULE. If the schedule does not end an emptry string will be returned (field) ## Sorting To specify that schedules are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiJobTemplatesSchedulesList
     * @summary # List Schedules for a Job Template:
     * @request GET:/api/{version}/job_templates/{id}/schedules/
     * @secure
     */
    apiJobTemplatesSchedulesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Schedule[]
        },
        any
      >({
        path: `/api/${version}/job_templates/${id}/schedules/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of schedules associated with the selected job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of schedules found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more schedule records. ## Results Each schedule data structure includes the following fields: * `rrule`: A value representing the schedules iCal recurrence rule. (string) * `id`: Database ID for this schedule. (integer) * `type`: Data type for this schedule. (choice) * `url`: URL for this schedule. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this schedule was created. (datetime) * `modified`: Timestamp when this schedule was last modified. (datetime) * `name`: Name of this schedule. (string) * `description`: Optional description of this schedule. (string) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `unified_job_template`:  (id) * `enabled`: Enables processing of this schedule. (boolean) * `dtstart`: The first occurrence of the schedule occurs on or after this time. (datetime) * `dtend`: The last occurrence of the schedule occurs before this time, aftewards the schedule expires. (datetime) * `next_run`: The next time that the scheduled action will run. (datetime) * `timezone`: The timezone this schedule runs in. This field is extracted from the RRULE. If the timezone in the RRULE is a link to another timezone, the link will be reflected in this field. (field) * `until`: The date this schedule will end. This field is computed from the RRULE. If the schedule does not end an emptry string will be returned (field) ## Sorting To specify that schedules are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiJobTemplatesSchedulesCreate
     * @summary # List Schedules for a Job Template:
     * @request POST:/api/{version}/job_templates/{id}/schedules/
     * @secure
     */
    apiJobTemplatesSchedulesCreate: (
      id: string,
      version: string,
      data: Schedule,
      params: RequestParams = {}
    ) =>
      this.request<Schedule, any>({
        path: `/api/${version}/job_templates/${id}/schedules/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of workflow jobs associated with the selected job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of workflow jobs found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more workflow job records. ## Results Each workflow job data structure includes the following fields: * `id`: Database ID for this workflow job. (integer) * `type`: Data type for this workflow job. (choice) * `url`: URL for this workflow job. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job was created. (datetime) * `modified`: Timestamp when this workflow job was last modified. (datetime) * `name`: Name of this workflow job. (string) * `description`: Optional description of this workflow job. (string) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `workflow_job_template`:  (id) * `extra_vars`:  (json) * `allow_simultaneous`:  (boolean) * `job_template`: If automatically created for a sliced job run, the job template the workflow job was created from. (id) * `is_sliced_job`:  (boolean) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `limit`:  (string) * `scm_branch`:  (string) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id) * `webhook_guid`: Unique identifier of the event that triggered this webhook (string) * `skip_tags`:  (string) * `job_tags`:  (string) ## Sorting To specify that workflow jobs are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiJobTemplatesSliceWorkflowJobsList
     * @summary # List Workflow Jobs for a Job Template:
     * @request GET:/api/{version}/job_templates/{id}/slice_workflow_jobs/
     * @secure
     */
    apiJobTemplatesSliceWorkflowJobsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: WorkflowJobList[]
        },
        any
      >({
        path: `/api/${version}/job_templates/${id}/slice_workflow_jobs/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of workflow jobs associated with the selected job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of workflow jobs found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more workflow job records. ## Results Each workflow job data structure includes the following fields: * `id`: Database ID for this workflow job. (integer) * `type`: Data type for this workflow job. (choice) * `url`: URL for this workflow job. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job was created. (datetime) * `modified`: Timestamp when this workflow job was last modified. (datetime) * `name`: Name of this workflow job. (string) * `description`: Optional description of this workflow job. (string) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `workflow_job_template`:  (id) * `extra_vars`:  (json) * `allow_simultaneous`:  (boolean) * `job_template`: If automatically created for a sliced job run, the job template the workflow job was created from. (id) * `is_sliced_job`:  (boolean) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `limit`:  (string) * `scm_branch`:  (string) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id) * `webhook_guid`: Unique identifier of the event that triggered this webhook (string) * `skip_tags`:  (string) * `job_tags`:  (string) ## Sorting To specify that workflow jobs are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiJobTemplatesSliceWorkflowJobsCreate
     * @summary # List Workflow Jobs for a Job Template:
     * @request POST:/api/{version}/job_templates/{id}/slice_workflow_jobs/
     * @secure
     */
    apiJobTemplatesSliceWorkflowJobsCreate: (
      id: string,
      version: string,
      data: WorkflowJobList,
      params: RequestParams = {}
    ) =>
      this.request<WorkflowJobList, any>({
        path: `/api/${version}/job_templates/${id}/slice_workflow_jobs/`,
        method: 'POST',
        body: data,
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * @description Here is an example survey specification: { "name": "Simple Survey", "description": "Description of the simple survey", "spec": [ { "type": "text", "question_name": "example question", "question_description": "What is your favorite color?", "variable": "favorite_color", "required": false, "default": "blue" } ] } `name` and `description` are required elements at the beginning of the survey specification. `spec` must be a list of survey items. Within each survey item `type` must be one of: * text: For survey questions expecting a textual answer * password: For survey questions expecting a password or other sensitive information * integer: For survey questions expecting a whole number answer * float: For survey questions expecting a decimal number * multiplechoice: For survey questions where one option from a list is required * multiselect: For survey questions where multiple items from a presented list can be selected Each item must contain a `question_name` and `question_description` field that describes the survey question itself. The `variable` elements of each survey items represents the key that will be given to the playbook when the job template is launched.  It will contain the value as a result of the survey. Here is a more comprehensive example showing the various question types and their acceptable parameters: { "name": "Simple", "description": "Description", "spec": [ { "type": "text", "question_name": "cantbeshort", "question_description": "What is a long answer", "variable": "long_answer", "choices": "", "min": 5, "max": "", "required": false, "default": "Leeloo Minai Lekarariba-Laminai-Tchai Ekbat De Sebat" }, { "type": "text", "question_name": "cantbelong", "question_description": "What is a short answer", "variable": "short_answer", "choices": "", "min": "", "max": 7, "required": false, "default": "leeloo" }, { "type": "text", "question_name": "reqd", "question_description": "I should be required", "variable": "reqd_answer", "choices": "", "min": "", "max": "", "required": true, "default": "NOT OPTIONAL" }, { "type": "multiplechoice", "question_name": "achoice", "question_description": "Need one of these", "variable": "single_choice", "choices": ["one", "two"], "min": "", "max": "", "required": false, "default": "one" }, { "type": "multiselect", "question_name": "mchoice", "question_description": "Can have multiples of these", "variable": "multi_choice", "choices": ["one", "two", "three"], "min": "", "max": "", "required": false, "default": "one\nthree" }, { "type": "integer", "question_name": "integerchoice", "question_description": "I need an int here", "variable": "int_answer", "choices": "", "min": 1, "max": 5, "required": false, "default": "" }, { "type": "float", "question_name": "float", "question_description": "I need a float here", "variable": "float_answer", "choices": "", "min": 2, "max": 5, "required": false, "default": "" } ] }
     *
     * @tags api
     * @name ApiJobTemplatesSurveySpecList
     * @summary POST requests to this resource should include the full specification for a Job Template's Survey
     * @request GET:/api/{version}/job_templates/{id}/survey_spec/
     * @secure
     */
    apiJobTemplatesSurveySpecList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Empty[]
        },
        any
      >({
        path: `/api/${version}/job_templates/${id}/survey_spec/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Here is an example survey specification: { "name": "Simple Survey", "description": "Description of the simple survey", "spec": [ { "type": "text", "question_name": "example question", "question_description": "What is your favorite color?", "variable": "favorite_color", "required": false, "default": "blue" } ] } `name` and `description` are required elements at the beginning of the survey specification. `spec` must be a list of survey items. Within each survey item `type` must be one of: * text: For survey questions expecting a textual answer * password: For survey questions expecting a password or other sensitive information * integer: For survey questions expecting a whole number answer * float: For survey questions expecting a decimal number * multiplechoice: For survey questions where one option from a list is required * multiselect: For survey questions where multiple items from a presented list can be selected Each item must contain a `question_name` and `question_description` field that describes the survey question itself. The `variable` elements of each survey items represents the key that will be given to the playbook when the job template is launched.  It will contain the value as a result of the survey. Here is a more comprehensive example showing the various question types and their acceptable parameters: { "name": "Simple", "description": "Description", "spec": [ { "type": "text", "question_name": "cantbeshort", "question_description": "What is a long answer", "variable": "long_answer", "choices": "", "min": 5, "max": "", "required": false, "default": "Leeloo Minai Lekarariba-Laminai-Tchai Ekbat De Sebat" }, { "type": "text", "question_name": "cantbelong", "question_description": "What is a short answer", "variable": "short_answer", "choices": "", "min": "", "max": 7, "required": false, "default": "leeloo" }, { "type": "text", "question_name": "reqd", "question_description": "I should be required", "variable": "reqd_answer", "choices": "", "min": "", "max": "", "required": true, "default": "NOT OPTIONAL" }, { "type": "multiplechoice", "question_name": "achoice", "question_description": "Need one of these", "variable": "single_choice", "choices": ["one", "two"], "min": "", "max": "", "required": false, "default": "one" }, { "type": "multiselect", "question_name": "mchoice", "question_description": "Can have multiples of these", "variable": "multi_choice", "choices": ["one", "two", "three"], "min": "", "max": "", "required": false, "default": "one\nthree" }, { "type": "integer", "question_name": "integerchoice", "question_description": "I need an int here", "variable": "int_answer", "choices": "", "min": 1, "max": 5, "required": false, "default": "" }, { "type": "float", "question_name": "float", "question_description": "I need a float here", "variable": "float_answer", "choices": "", "min": 2, "max": 5, "required": false, "default": "" } ] }
     *
     * @tags api
     * @name ApiJobTemplatesSurveySpecCreate
     * @summary POST requests to this resource should include the full specification for a Job Template's Survey
     * @request POST:/api/{version}/job_templates/{id}/survey_spec/
     * @secure
     */
    apiJobTemplatesSurveySpecCreate: (
      id: string,
      version: string,
      data: Empty,
      params: RequestParams = {}
    ) =>
      this.request<Empty, any>({
        path: `/api/${version}/job_templates/${id}/survey_spec/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Here is an example survey specification: { "name": "Simple Survey", "description": "Description of the simple survey", "spec": [ { "type": "text", "question_name": "example question", "question_description": "What is your favorite color?", "variable": "favorite_color", "required": false, "default": "blue" } ] } `name` and `description` are required elements at the beginning of the survey specification. `spec` must be a list of survey items. Within each survey item `type` must be one of: * text: For survey questions expecting a textual answer * password: For survey questions expecting a password or other sensitive information * integer: For survey questions expecting a whole number answer * float: For survey questions expecting a decimal number * multiplechoice: For survey questions where one option from a list is required * multiselect: For survey questions where multiple items from a presented list can be selected Each item must contain a `question_name` and `question_description` field that describes the survey question itself. The `variable` elements of each survey items represents the key that will be given to the playbook when the job template is launched.  It will contain the value as a result of the survey. Here is a more comprehensive example showing the various question types and their acceptable parameters: { "name": "Simple", "description": "Description", "spec": [ { "type": "text", "question_name": "cantbeshort", "question_description": "What is a long answer", "variable": "long_answer", "choices": "", "min": 5, "max": "", "required": false, "default": "Leeloo Minai Lekarariba-Laminai-Tchai Ekbat De Sebat" }, { "type": "text", "question_name": "cantbelong", "question_description": "What is a short answer", "variable": "short_answer", "choices": "", "min": "", "max": 7, "required": false, "default": "leeloo" }, { "type": "text", "question_name": "reqd", "question_description": "I should be required", "variable": "reqd_answer", "choices": "", "min": "", "max": "", "required": true, "default": "NOT OPTIONAL" }, { "type": "multiplechoice", "question_name": "achoice", "question_description": "Need one of these", "variable": "single_choice", "choices": ["one", "two"], "min": "", "max": "", "required": false, "default": "one" }, { "type": "multiselect", "question_name": "mchoice", "question_description": "Can have multiples of these", "variable": "multi_choice", "choices": ["one", "two", "three"], "min": "", "max": "", "required": false, "default": "one\nthree" }, { "type": "integer", "question_name": "integerchoice", "question_description": "I need an int here", "variable": "int_answer", "choices": "", "min": 1, "max": 5, "required": false, "default": "" }, { "type": "float", "question_name": "float", "question_description": "I need a float here", "variable": "float_answer", "choices": "", "min": 2, "max": 5, "required": false, "default": "" } ] }
     *
     * @tags api
     * @name ApiJobTemplatesSurveySpecDelete
     * @summary POST requests to this resource should include the full specification for a Job Template's Survey
     * @request DELETE:/api/{version}/job_templates/{id}/survey_spec/
     * @secure
     */
    apiJobTemplatesSurveySpecDelete: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/job_templates/${id}/survey_spec/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiJobTemplatesWebhookKeyList
     * @request GET:/api/{version}/job_templates/{id}/webhook_key/
     * @secure
     */
    apiJobTemplatesWebhookKeyList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Empty[]
        },
        any
      >({
        path: `/api/${version}/job_templates/${id}/webhook_key/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiJobTemplatesWebhookKeyCreate
     * @request POST:/api/{version}/job_templates/{id}/webhook_key/
     * @secure
     */
    apiJobTemplatesWebhookKeyCreate: (
      id: string,
      version: string,
      data: Empty,
      params: RequestParams = {}
    ) =>
      this.request<Empty, any>({
        path: `/api/${version}/job_templates/${id}/webhook_key/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of jobs. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of jobs found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more job records. ## Results Each job data structure includes the following fields: * `id`: Database ID for this job. (integer) * `type`: Data type for this job. (choice) * `url`: URL for this job. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this job was created. (datetime) * `modified`: Timestamp when this job was last modified. (datetime) * `name`: Name of this job. (string) * `description`: Optional description of this job. (string) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `execution_node`: The node the job executed on. (string) * `controller_node`: The instance that managed the execution environment. (string) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `job_type`:  (choice) - `run`: Run - `check`: Check - `scan`: Scan * `inventory`:  (id) * `project`:  (id) * `playbook`:  (string) * `scm_branch`: Branch to use in job run. Project default used if blank. Only allowed if project allow_override field is set to true. (string) * `forks`:  (integer) * `limit`:  (string) * `verbosity`:  (choice) - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `extra_vars`:  (json) * `job_tags`:  (string) * `force_handlers`:  (boolean) * `skip_tags`:  (string) * `start_at_task`:  (string) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `use_fact_cache`: If enabled, the service will act as an Ansible Fact Cache Plugin; persisting facts at the end of a playbook run to the database and caching facts for use by Ansible. (boolean) * `organization`: The organization used to determine access to this unified job. (id) * `job_template`:  (id) * `passwords_needed_to_start`:  (field) * `allow_simultaneous`:  (boolean) * `artifacts`:  (json) * `scm_revision`: The SCM Revision from the Project used for this job, if available (string) * `instance_group`: The Instance group the job was run under (id) * `diff_mode`: If enabled, textual changes made to any templated files on the host are shown in the standard output (boolean) * `job_slice_number`: If part of a sliced job, the ID of the inventory slice operated on. If not part of sliced job, parameter is not used. (integer) * `job_slice_count`: If ran as part of sliced jobs, the total number of slices. If 1, job is not part of a sliced job. (integer) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id) * `webhook_guid`: Unique identifier of the event that triggered this webhook (string) ## Sorting To specify that jobs are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiJobsList
     * @summary # List Jobs:
     * @request GET:/api/{version}/jobs/
     * @secure
     */
    apiJobsList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: JobList[]
        },
        any
      >({
        path: `/api/${version}/jobs/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single job record containing the following fields: * `id`: Database ID for this job. (integer) * `type`: Data type for this job. (choice) * `url`: URL for this job. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this job was created. (datetime) * `modified`: Timestamp when this job was last modified. (datetime) * `name`: Name of this job. (string) * `description`: Optional description of this job. (string) * `job_type`:  (choice) - `run`: Run - `check`: Check - `scan`: Scan * `inventory`:  (id) * `project`:  (id) * `playbook`:  (string) * `scm_branch`: Branch to use in job run. Project default used if blank. Only allowed if project allow_override field is set to true. (string) * `forks`:  (integer) * `limit`:  (string) * `verbosity`:  (choice) - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `extra_vars`:  (json) * `job_tags`:  (string) * `force_handlers`:  (boolean) * `skip_tags`:  (string) * `start_at_task`:  (string) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `use_fact_cache`: If enabled, the service will act as an Ansible Fact Cache Plugin; persisting facts at the end of a playbook run to the database and caching facts for use by Ansible. (boolean) * `organization`: The organization used to determine access to this unified job. (id) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_args`:  (string) * `job_cwd`:  (string) * `job_env`:  (json) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `execution_node`: The node the job executed on. (string) * `controller_node`: The instance that managed the execution environment. (string) * `result_traceback`:  (string) * `event_processing_finished`: Indicates whether all of the events generated by this unified job have been saved to the database. (boolean) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `job_template`:  (id) * `passwords_needed_to_start`:  (field) * `allow_simultaneous`:  (boolean) * `artifacts`:  (json) * `scm_revision`: The SCM Revision from the Project used for this job, if available (string) * `instance_group`: The Instance group the job was run under (id) * `diff_mode`: If enabled, textual changes made to any templated files on the host are shown in the standard output (boolean) * `job_slice_number`: If part of a sliced job, the ID of the inventory slice operated on. If not part of sliced job, parameter is not used. (integer) * `job_slice_count`: If ran as part of sliced jobs, the total number of slices. If 1, job is not part of a sliced job. (integer) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id) * `webhook_guid`: Unique identifier of the event that triggered this webhook (string) * `host_status_counts`: Playbook stats from the Ansible playbook_on_stats event. (json) * `playbook_counts`: A count of all plays and tasks for the job run. (field) * `custom_virtualenv`:  (string) # Delete a Job: Make a DELETE request to this resource to delete this job.
     *
     * @tags api
     * @name ApiJobsRead
     * @summary # Retrieve a Job:
     * @request GET:/api/{version}/jobs/{id}/
     * @secure
     */
    apiJobsRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<JobDetail, any>({
        path: `/api/${version}/jobs/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single job record containing the following fields: * `id`: Database ID for this job. (integer) * `type`: Data type for this job. (choice) * `url`: URL for this job. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this job was created. (datetime) * `modified`: Timestamp when this job was last modified. (datetime) * `name`: Name of this job. (string) * `description`: Optional description of this job. (string) * `job_type`:  (choice) - `run`: Run - `check`: Check - `scan`: Scan * `inventory`:  (id) * `project`:  (id) * `playbook`:  (string) * `scm_branch`: Branch to use in job run. Project default used if blank. Only allowed if project allow_override field is set to true. (string) * `forks`:  (integer) * `limit`:  (string) * `verbosity`:  (choice) - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `extra_vars`:  (json) * `job_tags`:  (string) * `force_handlers`:  (boolean) * `skip_tags`:  (string) * `start_at_task`:  (string) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `use_fact_cache`: If enabled, the service will act as an Ansible Fact Cache Plugin; persisting facts at the end of a playbook run to the database and caching facts for use by Ansible. (boolean) * `organization`: The organization used to determine access to this unified job. (id) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_args`:  (string) * `job_cwd`:  (string) * `job_env`:  (json) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `execution_node`: The node the job executed on. (string) * `controller_node`: The instance that managed the execution environment. (string) * `result_traceback`:  (string) * `event_processing_finished`: Indicates whether all of the events generated by this unified job have been saved to the database. (boolean) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `job_template`:  (id) * `passwords_needed_to_start`:  (field) * `allow_simultaneous`:  (boolean) * `artifacts`:  (json) * `scm_revision`: The SCM Revision from the Project used for this job, if available (string) * `instance_group`: The Instance group the job was run under (id) * `diff_mode`: If enabled, textual changes made to any templated files on the host are shown in the standard output (boolean) * `job_slice_number`: If part of a sliced job, the ID of the inventory slice operated on. If not part of sliced job, parameter is not used. (integer) * `job_slice_count`: If ran as part of sliced jobs, the total number of slices. If 1, job is not part of a sliced job. (integer) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id) * `webhook_guid`: Unique identifier of the event that triggered this webhook (string) * `host_status_counts`: Playbook stats from the Ansible playbook_on_stats event. (json) * `playbook_counts`: A count of all plays and tasks for the job run. (field) * `custom_virtualenv`:  (string) # Delete a Job: Make a DELETE request to this resource to delete this job.
     *
     * @tags api
     * @name ApiJobsDelete
     * @summary # Retrieve a Job:
     * @request DELETE:/api/{version}/jobs/{id}/
     * @secure
     */
    apiJobsDelete: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/jobs/${id}/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of activity streams associated with the selected job. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of activity streams found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more activity stream records. ## Results Each activity stream data structure includes the following fields: * `id`: Database ID for this activity stream. (integer) * `type`: Data type for this activity stream. (choice) * `url`: URL for this activity stream. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `timestamp`:  (datetime) * `operation`: The action taken with respect to the given object(s). (choice) - `create`: Entity Created - `update`: Entity Updated - `delete`: Entity Deleted - `associate`: Entity Associated with another Entity - `disassociate`: Entity was Disassociated with another Entity * `changes`: A summary of the new and changed values when an object is created, updated, or deleted (json) * `object1`: For create, update, and delete events this is the object type that was affected. For associate and disassociate events this is the object type associated or disassociated with object2. (string) * `object2`: Unpopulated for create, update, and delete events. For associate and disassociate events this is the object type that object1 is being associated with. (string) * `object_association`: When present, shows the field name of the role or relationship that changed. (field) * `action_node`: The cluster node the activity took place on. (string) * `object_type`: When present, shows the model on which the role or relationship was defined. (field) ## Sorting To specify that activity streams are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiJobsActivityStreamList
     * @summary # List Activity Streams for a Job:
     * @request GET:/api/{version}/jobs/{id}/activity_stream/
     * @secure
     */
    apiJobsActivityStreamList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ActivityStream[]
        },
        any
      >({
        path: `/api/${version}/jobs/${id}/activity_stream/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to determine if the job can be canceled. The response will include the following field: * `can_cancel`: Indicates whether this job can be canceled (boolean, read-only) # Cancel a Job Make a POST request to this resource to cancel a pending or running job.  The response status code will be 202 if successful, or 405 if the job cannot be canceled.
     *
     * @tags api
     * @name ApiJobsCancelRead
     * @summary # Determine if a Job can be canceled
     * @request GET:/api/{version}/jobs/{id}/cancel/
     * @secure
     */
    apiJobsCancelRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<JobCancel, any>({
        path: `/api/${version}/jobs/${id}/cancel/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to determine if the job can be canceled. The response will include the following field: * `can_cancel`: Indicates whether this job can be canceled (boolean, read-only) # Cancel a Job Make a POST request to this resource to cancel a pending or running job.  The response status code will be 202 if successful, or 405 if the job cannot be canceled.
     *
     * @tags api
     * @name ApiJobsCancelCreate
     * @summary # Determine if a Job can be canceled
     * @request POST:/api/{version}/jobs/{id}/cancel/
     * @secure
     */
    apiJobsCancelCreate: (
      id: string,
      version: string,
      data: JobCancel,
      params: RequestParams = {}
    ) =>
      this.request<JobCancel, any>({
        path: `/api/${version}/jobs/${id}/cancel/`,
        method: 'POST',
        body: data,
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a POST request to this endpoint to create a schedule that launches the job template that launched this job, and uses the same parameters that the job was launched with. These parameters include all "prompted" resources such as `extra_vars`, `inventory`, `limit`, etc. Jobs that were launched with user-provided passwords cannot have a schedule created from them. Make a GET request for information about what those prompts are and whether or not a schedule can be created.
     *
     * @tags api
     * @name ApiJobsCreateScheduleRead
     * @summary Create a schedule based on a job:
     * @request GET:/api/{version}/jobs/{id}/create_schedule/
     * @secure
     */
    apiJobsCreateScheduleRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<JobCreateSchedule, any>({
        path: `/api/${version}/jobs/${id}/create_schedule/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a POST request to this endpoint to create a schedule that launches the job template that launched this job, and uses the same parameters that the job was launched with. These parameters include all "prompted" resources such as `extra_vars`, `inventory`, `limit`, etc. Jobs that were launched with user-provided passwords cannot have a schedule created from them. Make a GET request for information about what those prompts are and whether or not a schedule can be created.
     *
     * @tags api
     * @name ApiJobsCreateScheduleCreate
     * @summary Create a schedule based on a job:
     * @request POST:/api/{version}/jobs/{id}/create_schedule/
     * @secure
     */
    apiJobsCreateScheduleCreate: (
      id: string,
      version: string,
      data: JobCreateSchedule,
      params: RequestParams = {}
    ) =>
      this.request<JobCreateSchedule, any>({
        path: `/api/${version}/jobs/${id}/create_schedule/`,
        method: 'POST',
        body: data,
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of credentials associated with the selected job. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of credentials found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more credential records. ## Results Each credential data structure includes the following fields: * `id`: Database ID for this credential. (integer) * `type`: Data type for this credential. (choice) * `url`: URL for this credential. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential was created. (datetime) * `modified`: Timestamp when this credential was last modified. (datetime) * `name`: Name of this credential. (string) * `description`: Optional description of this credential. (string) * `organization`:  (id) * `credential_type`: Specify the type of credential you want to create. Refer to the documentation for details on each type. (id) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `kind`:  (field) * `cloud`:  (field) * `kubernetes`:  (field) ## Sorting To specify that credentials are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiJobsCredentialsList
     * @summary # List Credentials for a Job:
     * @request GET:/api/{version}/jobs/{id}/credentials/
     * @secure
     */
    apiJobsCredentialsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Credential[]
        },
        any
      >({
        path: `/api/${version}/jobs/${id}/credentials/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of job events associated with the selected job. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of job events found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more job event records. ## Results Each job event data structure includes the following fields: * `id`: Database ID for this job event. (integer) * `type`: Data type for this job event. (choice) * `url`: URL for this job event. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this job event was created. (datetime) * `modified`: Timestamp when this job event was last modified. (datetime) * `job`:  (id) * `event`:  (choice) - `runner_on_failed`: Host Failed - `runner_on_start`: Host Started - `runner_on_ok`: Host OK - `runner_on_error`: Host Failure - `runner_on_skipped`: Host Skipped - `runner_on_unreachable`: Host Unreachable - `runner_on_no_hosts`: No Hosts Remaining - `runner_on_async_poll`: Host Polling - `runner_on_async_ok`: Host Async OK - `runner_on_async_failed`: Host Async Failure - `runner_item_on_ok`: Item OK - `runner_item_on_failed`: Item Failed - `runner_item_on_skipped`: Item Skipped - `runner_retry`: Host Retry - `runner_on_file_diff`: File Difference - `playbook_on_start`: Playbook Started - `playbook_on_notify`: Running Handlers - `playbook_on_include`: Including File - `playbook_on_no_hosts_matched`: No Hosts Matched - `playbook_on_no_hosts_remaining`: No Hosts Remaining - `playbook_on_task_start`: Task Started - `playbook_on_vars_prompt`: Variables Prompted - `playbook_on_setup`: Gathering Facts - `playbook_on_import_for_host`: internal: on Import for Host - `playbook_on_not_import_for_host`: internal: on Not Import for Host - `playbook_on_play_start`: Play Started - `playbook_on_stats`: Playbook Complete - `debug`: Debug - `verbose`: Verbose - `deprecated`: Deprecated - `warning`: Warning - `system_warning`: System Warning - `error`: Error * `counter`:  (integer) * `event_display`:  (string) * `event_data`:  (json) * `event_level`:  (integer) * `failed`:  (boolean) * `changed`:  (boolean) * `uuid`:  (string) * `parent_uuid`:  (string) * `host`:  (id) * `host_name`:  (string) * `playbook`:  (string) * `play`:  (string) * `task`:  (string) * `role`:  (string) * `stdout`:  (string) * `start_line`:  (integer) * `end_line`:  (integer) * `verbosity`:  (integer) ## Sorting To specify that job events are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiJobsJobEventsList
     * @summary # List Job Events for a Job:
     * @request GET:/api/{version}/jobs/{id}/job_events/
     * @secure
     */
    apiJobsJobEventsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: JobEvent[]
        },
        any
      >({
        path: `/api/${version}/jobs/${id}/job_events/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Special view to facilitate processing job output in the UI. In order to collapse events and their children, the UI needs to know how many children exist for a given event. The UI also needs to know the order of the event (0 based index), which usually matches the counter, but not always. This view returns a JSON object where the key is the event counter, and the value includes the number of children (and grandchildren) events. Only events with children are included in the output. ## Example e.g. Demo Job Template job tuple(event counter, uuid, parent_uuid) ``` (1, '4598d19e-93b4-4e33-a0ae-b387a7348964', '') (2, 'aae0d189-e3cb-102a-9f00-000000000006', '4598d19e-93b4-4e33-a0ae-b387a7348964') (3, 'aae0d189-e3cb-102a-9f00-00000000000c', 'aae0d189-e3cb-102a-9f00-000000000006') (4, 'f4194f14-e406-4124-8519-0fdb08b18f4b', 'aae0d189-e3cb-102a-9f00-00000000000c') (5, '39f7ad99-dbf3-41e0-93f8-9999db4004f2', 'aae0d189-e3cb-102a-9f00-00000000000c') (6, 'aae0d189-e3cb-102a-9f00-000000000008', 'aae0d189-e3cb-102a-9f00-000000000006') (7, '39a49992-5ca4-4b6c-b178-e56d0b0333da', 'aae0d189-e3cb-102a-9f00-000000000008') (8, '504f3b28-3ea8-4f6f-bd82-60cf8e807cc0', 'aae0d189-e3cb-102a-9f00-000000000008') (9, 'a242be54-ebe6-4021-afab-f2878bff2e9f', '4598d19e-93b4-4e33-a0ae-b387a7348964') ``` output ``` { "1": { "rowNumber": 0, "numChildren": 8 }, "2": { "rowNumber": 1, "numChildren": 6 }, "3": { "rowNumber": 2, "numChildren": 2 }, "6": { "rowNumber": 5, "numChildren": 2 } } "meta_event_nested_parent_uuid": {} } ``` counter 1 is event 0, and has 8 children counter 2 is event 1, and has 6 children etc. The UI also needs to be able to collapse over "meta" events -- events that show up due to verbosity or warnings from the system while the play is running. These events have a 0 level event, with no parent uuid. ``` playbook_on_start verbose playbook_on_play_start playbook_on_task_start runner_on_start        <- level 3 verbose                      <- jump to level 0 verbose runner_on_ok         <- jump back to level 3 playbook_on_task_start runner_on_start runner_on_ok verbose verbose playbook_on_stats ``` These verbose statements that fall in the middle of a series of children events are problematic for the UI. To help, this view will attempt to place the events into the hierarchy, without the event level jumps. ``` playbook_on_start verbose playbook_on_play_start playbook_on_task_start runner_on_start        <- A verbose              <- this maps to the uuid of A verbose runner_on_ok playbook_on_task_start <- B runner_on_start runner_on_ok verbose              <- this maps to the uuid of B verbose playbook_on_stats ``` The output will include a JSON object where the key is the event counter, and the value is the assigned nested uuid.
     *
     * @tags api
     * @name ApiJobsJobEventsChildrenSummaryList
     * @summary # View a summary of children events
     * @request GET:/api/{version}/jobs/{id}/job_events/children_summary/
     * @secure
     */
    apiJobsJobEventsChildrenSummaryList: (
      id: string,
      version: string,
      params: RequestParams = {}
    ) =>
      this.request<void, any>({
        path: `/api/${version}/jobs/${id}/job_events/children_summary/`,
        method: 'GET',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of job host summaries associated with the selected job. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of job host summaries found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more job host summary records. ## Results Each job host summary data structure includes the following fields: * `id`: Database ID for this job host summary. (integer) * `type`: Data type for this job host summary. (choice) * `url`: URL for this job host summary. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this job host summary was created. (datetime) * `modified`: Timestamp when this job host summary was last modified. (datetime) * `job`:  (id) * `host`:  (id) * `host_name`:  (string) * `changed`:  (integer) * `dark`:  (integer) * `failures`:  (integer) * `ok`:  (integer) * `processed`:  (integer) * `skipped`:  (integer) * `failed`:  (boolean) * `ignored`:  (integer) * `rescued`:  (integer) ## Sorting To specify that job host summaries are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiJobsJobHostSummariesList
     * @summary # List Job Host Summaries for a Job:
     * @request GET:/api/{version}/jobs/{id}/job_host_summaries/
     * @secure
     */
    apiJobsJobHostSummariesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: JobHostSummary[]
        },
        any
      >({
        path: `/api/${version}/jobs/${id}/job_host_summaries/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of labels associated with the selected job. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of labels found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more label records. ## Results Each label data structure includes the following fields: * `id`: Database ID for this label. (integer) * `type`: Data type for this label. (choice) * `url`: URL for this label. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this label was created. (datetime) * `modified`: Timestamp when this label was last modified. (datetime) * `name`: Name of this label. (string) * `organization`: Organization this label belongs to. (id) ## Sorting To specify that labels are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiJobsLabelsList
     * @summary # List Labels for a Job:
     * @request GET:/api/{version}/jobs/{id}/labels/
     * @secure
     */
    apiJobsLabelsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Label[]
        },
        any
      >({
        path: `/api/${version}/jobs/${id}/labels/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notifications associated with the selected job. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notifications found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification records. ## Results Each notification data structure includes the following fields: * `id`: Database ID for this notification. (integer) * `type`: Data type for this notification. (choice) * `url`: URL for this notification. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification was created. (datetime) * `modified`: Timestamp when this notification was last modified. (datetime) * `notification_template`:  (id) * `error`:  (string) * `status`:  (choice) - `pending`: Pending - `successful`: Successful - `failed`: Failed * `notifications_sent`:  (integer) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `recipients`:  (string) * `subject`:  (string) * `body`: Notification body (json) ## Sorting To specify that notifications are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiJobsNotificationsList
     * @summary # List Notifications for a Job:
     * @request GET:/api/{version}/jobs/{id}/notifications/
     * @secure
     */
    apiJobsNotificationsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Notification[]
        },
        any
      >({
        path: `/api/${version}/jobs/${id}/notifications/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a POST request to this resource to launch a job. If any passwords or variables are required then they should be passed in via POST data.   In order to determine what values are required in order to launch a job based on this job template you may make a GET request to this endpoint.
     *
     * @tags api
     * @name ApiJobsRelaunchRead
     * @summary Relaunch a Job:
     * @request GET:/api/{version}/jobs/{id}/relaunch/
     * @secure
     */
    apiJobsRelaunchRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<JobRelaunch, any>({
        path: `/api/${version}/jobs/${id}/relaunch/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a POST request to this resource to launch a job. If any passwords or variables are required then they should be passed in via POST data.   In order to determine what values are required in order to launch a job based on this job template you may make a GET request to this endpoint.
     *
     * @tags api
     * @name ApiJobsRelaunchCreate
     * @summary Relaunch a Job:
     * @request POST:/api/{version}/jobs/{id}/relaunch/
     * @secure
     */
    apiJobsRelaunchCreate: (
      id: string,
      version: string,
      data: JobRelaunch,
      params: RequestParams = {}
    ) =>
      this.request<JobRelaunch, any>({
        path: `/api/${version}/jobs/${id}/relaunch/`,
        method: 'POST',
        body: data,
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve the stdout from running this job. ## Format Use the `format` query string parameter to specify the output format. * Browsable API: `?format=api` * HTML: `?format=html` * Plain Text: `?format=txt` * Plain Text with ANSI color codes: `?format=ansi` * JSON structure: `?format=json` * Downloaded Plain Text: `?format=txt_download` * Downloaded Plain Text with ANSI color codes: `?format=ansi_download` (_New in Ansible Tower 2.0.0_) When using the Browsable API, HTML and JSON formats, the `start_line` and `end_line` query string parameters can be used to specify a range of line numbers to retrieve. Use `dark=1` or `dark=0` as a query string parameter to force or disable a dark background. Files over 1.0 MB (configurable) will not display in the browser. Use the `txt_download` or `ansi_download` formats to download the file directly to view it.
     *
     * @tags api
     * @name ApiJobsStdoutRead
     * @summary # Retrieve Job Stdout:
     * @request GET:/api/{version}/jobs/{id}/stdout/
     * @secure
     */
    apiJobsStdoutRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<UnifiedJobStdout, any>({
        path: `/api/${version}/jobs/${id}/stdout/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of labels. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of labels found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more label records. ## Results Each label data structure includes the following fields: * `id`: Database ID for this label. (integer) * `type`: Data type for this label. (choice) * `url`: URL for this label. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this label was created. (datetime) * `modified`: Timestamp when this label was last modified. (datetime) * `name`: Name of this label. (string) * `organization`: Organization this label belongs to. (id) ## Sorting To specify that labels are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiLabelsList
     * @summary # List Labels:
     * @request GET:/api/{version}/labels/
     * @secure
     */
    apiLabelsList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Label[]
        },
        any
      >({
        path: `/api/${version}/labels/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of labels. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of labels found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more label records. ## Results Each label data structure includes the following fields: * `id`: Database ID for this label. (integer) * `type`: Data type for this label. (choice) * `url`: URL for this label. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this label was created. (datetime) * `modified`: Timestamp when this label was last modified. (datetime) * `name`: Name of this label. (string) * `organization`: Organization this label belongs to. (id) ## Sorting To specify that labels are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiLabelsCreate
     * @summary # List Labels:
     * @request POST:/api/{version}/labels/
     * @secure
     */
    apiLabelsCreate: (version: string, data: Label, params: RequestParams = {}) =>
      this.request<Label, any>({
        path: `/api/${version}/labels/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single label record containing the following fields: * `id`: Database ID for this label. (integer) * `type`: Data type for this label. (choice) * `url`: URL for this label. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this label was created. (datetime) * `modified`: Timestamp when this label was last modified. (datetime) * `name`: Name of this label. (string) * `organization`: Organization this label belongs to. (id) # Update a Label: Make a PUT or PATCH request to this resource to update this label.  The following fields may be modified: * `name`: Name of this label. (string, required) * `organization`: Organization this label belongs to. (id, required) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified.
     *
     * @tags api
     * @name ApiLabelsRead
     * @summary # Retrieve a Label:
     * @request GET:/api/{version}/labels/{id}/
     * @secure
     */
    apiLabelsRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<Label, any>({
        path: `/api/${version}/labels/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single label record containing the following fields: * `id`: Database ID for this label. (integer) * `type`: Data type for this label. (choice) * `url`: URL for this label. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this label was created. (datetime) * `modified`: Timestamp when this label was last modified. (datetime) * `name`: Name of this label. (string) * `organization`: Organization this label belongs to. (id) # Update a Label: Make a PUT or PATCH request to this resource to update this label.  The following fields may be modified: * `name`: Name of this label. (string, required) * `organization`: Organization this label belongs to. (id, required) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified.
     *
     * @tags api
     * @name ApiLabelsUpdate
     * @summary # Retrieve a Label:
     * @request PUT:/api/{version}/labels/{id}/
     * @secure
     */
    apiLabelsUpdate: (id: string, version: string, data: Label, params: RequestParams = {}) =>
      this.request<Label, any>({
        path: `/api/${version}/labels/${id}/`,
        method: 'PUT',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single label record containing the following fields: * `id`: Database ID for this label. (integer) * `type`: Data type for this label. (choice) * `url`: URL for this label. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this label was created. (datetime) * `modified`: Timestamp when this label was last modified. (datetime) * `name`: Name of this label. (string) * `organization`: Organization this label belongs to. (id) # Update a Label: Make a PUT or PATCH request to this resource to update this label.  The following fields may be modified: * `name`: Name of this label. (string, required) * `organization`: Organization this label belongs to. (id, required) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified.
     *
     * @tags api
     * @name ApiLabelsPartialUpdate
     * @summary # Retrieve a Label:
     * @request PATCH:/api/{version}/labels/{id}/
     * @secure
     */
    apiLabelsPartialUpdate: (
      id: string,
      version: string,
      data: Label,
      params: RequestParams = {}
    ) =>
      this.request<Label, any>({
        path: `/api/${version}/labels/${id}/`,
        method: 'PATCH',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to retrieve user information about the current user. One result should be returned containing the following fields: * `id`: Database ID for this user. (integer) * `type`: Data type for this user. (choice) * `url`: URL for this user. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this user was created. (datetime) * `modified`: Timestamp when this user was last modified. (datetime) * `username`: Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (string) * `first_name`:  (string) * `last_name`:  (string) * `email`:  (string) * `is_superuser`: Designates that this user has all permissions without explicitly assigning them. (boolean) * `is_system_auditor`:  (boolean) * `ldap_dn`:  (string) * `last_login`:  (datetime) * `external_account`: Set if the account is managed by an external service (field) Use the primary URL for the user (/api/v2/users/N/) to modify the user.
     *
     * @tags api
     * @name ApiMeList
     * @summary # Retrieve Information about the current User
     * @request GET:/api/{version}/me/
     * @secure
     */
    apiMeList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: User[]
        },
        any
      >({
        path: `/api/${version}/me/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to obtain a list all Receptor Nodes and their links.
     *
     * @tags api
     * @name ApiMeshVisualizerList
     * @request GET:/api/{version}/mesh_visualizer/
     * @secure
     */
    apiMeshVisualizerList: (version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/mesh_visualizer/`,
        method: 'GET',
        secure: true,
        ...params,
      }),

    /**
     * @description Show Metrics Details
     *
     * @tags api
     * @name ApiMetricsList
     * @request GET:/api/{version}/metrics/
     * @secure
     */
    apiMetricsList: (version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/metrics/`,
        method: 'GET',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of notification templates. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiNotificationTemplatesList
     * @summary # List Notification Templates:
     * @request GET:/api/{version}/notification_templates/
     * @secure
     */
    apiNotificationTemplatesList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: NotificationTemplate[]
        },
        any
      >({
        path: `/api/${version}/notification_templates/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of notification templates. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiNotificationTemplatesCreate
     * @summary # List Notification Templates:
     * @request POST:/api/{version}/notification_templates/
     * @secure
     */
    apiNotificationTemplatesCreate: (
      version: string,
      data: NotificationTemplate,
      params: RequestParams = {}
    ) =>
      this.request<NotificationTemplate, any>({
        path: `/api/${version}/notification_templates/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single notification template record containing the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) # Update a Notification Template: Make a PUT or PATCH request to this resource to update this notification template.  The following fields may be modified: * `name`: Name of this notification template. (string, required) * `description`: Optional description of this notification template. (string, default=`""`) * `organization`:  (id, required) * `notification_type`:  (choice, required) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json, default=`{}`) * `messages`: Optional custom messages for notification template. (json, default=`{&#x27;started&#x27;: None, &#x27;success&#x27;: None, &#x27;error&#x27;: None, &#x27;workflow_approval&#x27;: None}`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Notification Template: Make a DELETE request to this resource to delete this notification template.
     *
     * @tags api
     * @name ApiNotificationTemplatesRead
     * @summary # Retrieve a Notification Template:
     * @request GET:/api/{version}/notification_templates/{id}/
     * @secure
     */
    apiNotificationTemplatesRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<NotificationTemplate, any>({
        path: `/api/${version}/notification_templates/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single notification template record containing the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) # Update a Notification Template: Make a PUT or PATCH request to this resource to update this notification template.  The following fields may be modified: * `name`: Name of this notification template. (string, required) * `description`: Optional description of this notification template. (string, default=`""`) * `organization`:  (id, required) * `notification_type`:  (choice, required) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json, default=`{}`) * `messages`: Optional custom messages for notification template. (json, default=`{&#x27;started&#x27;: None, &#x27;success&#x27;: None, &#x27;error&#x27;: None, &#x27;workflow_approval&#x27;: None}`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Notification Template: Make a DELETE request to this resource to delete this notification template.
     *
     * @tags api
     * @name ApiNotificationTemplatesUpdate
     * @summary # Retrieve a Notification Template:
     * @request PUT:/api/{version}/notification_templates/{id}/
     * @secure
     */
    apiNotificationTemplatesUpdate: (
      id: string,
      version: string,
      data: NotificationTemplate,
      params: RequestParams = {}
    ) =>
      this.request<NotificationTemplate, any>({
        path: `/api/${version}/notification_templates/${id}/`,
        method: 'PUT',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single notification template record containing the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) # Update a Notification Template: Make a PUT or PATCH request to this resource to update this notification template.  The following fields may be modified: * `name`: Name of this notification template. (string, required) * `description`: Optional description of this notification template. (string, default=`""`) * `organization`:  (id, required) * `notification_type`:  (choice, required) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json, default=`{}`) * `messages`: Optional custom messages for notification template. (json, default=`{&#x27;started&#x27;: None, &#x27;success&#x27;: None, &#x27;error&#x27;: None, &#x27;workflow_approval&#x27;: None}`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Notification Template: Make a DELETE request to this resource to delete this notification template.
     *
     * @tags api
     * @name ApiNotificationTemplatesPartialUpdate
     * @summary # Retrieve a Notification Template:
     * @request PATCH:/api/{version}/notification_templates/{id}/
     * @secure
     */
    apiNotificationTemplatesPartialUpdate: (
      id: string,
      version: string,
      data: NotificationTemplate,
      params: RequestParams = {}
    ) =>
      this.request<NotificationTemplate, any>({
        path: `/api/${version}/notification_templates/${id}/`,
        method: 'PATCH',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single notification template record containing the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) # Update a Notification Template: Make a PUT or PATCH request to this resource to update this notification template.  The following fields may be modified: * `name`: Name of this notification template. (string, required) * `description`: Optional description of this notification template. (string, default=`""`) * `organization`:  (id, required) * `notification_type`:  (choice, required) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json, default=`{}`) * `messages`: Optional custom messages for notification template. (json, default=`{&#x27;started&#x27;: None, &#x27;success&#x27;: None, &#x27;error&#x27;: None, &#x27;workflow_approval&#x27;: None}`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Notification Template: Make a DELETE request to this resource to delete this notification template.
     *
     * @tags api
     * @name ApiNotificationTemplatesDelete
     * @summary # Retrieve a Notification Template:
     * @request DELETE:/api/{version}/notification_templates/{id}/
     * @secure
     */
    apiNotificationTemplatesDelete: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/notification_templates/${id}/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiNotificationTemplatesCopyList
     * @request GET:/api/{version}/notification_templates/{id}/copy/
     * @secure
     */
    apiNotificationTemplatesCopyList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Copy[]
        },
        any
      >({
        path: `/api/${version}/notification_templates/${id}/copy/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiNotificationTemplatesCopyCreate
     * @request POST:/api/{version}/notification_templates/{id}/copy/
     * @secure
     */
    apiNotificationTemplatesCopyCreate: (
      id: string,
      version: string,
      data: Copy,
      params: RequestParams = {}
    ) =>
      this.request<Copy, any>({
        path: `/api/${version}/notification_templates/${id}/copy/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notifications associated with the selected notification template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notifications found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification records. ## Results Each notification data structure includes the following fields: * `id`: Database ID for this notification. (integer) * `type`: Data type for this notification. (choice) * `url`: URL for this notification. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification was created. (datetime) * `modified`: Timestamp when this notification was last modified. (datetime) * `notification_template`:  (id) * `error`:  (string) * `status`:  (choice) - `pending`: Pending - `successful`: Successful - `failed`: Failed * `notifications_sent`:  (integer) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `recipients`:  (string) * `subject`:  (string) * `body`: Notification body (json) ## Sorting To specify that notifications are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiNotificationTemplatesNotificationsList
     * @summary # List Notifications for a Notification Template:
     * @request GET:/api/{version}/notification_templates/{id}/notifications/
     * @secure
     */
    apiNotificationTemplatesNotificationsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Notification[]
        },
        any
      >({
        path: `/api/${version}/notification_templates/${id}/notifications/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Test a Notification Template
     *
     * @tags api
     * @name ApiNotificationTemplatesTestCreate
     * @request POST:/api/{version}/notification_templates/{id}/test/
     * @secure
     */
    apiNotificationTemplatesTestCreate: (
      id: string,
      version: string,
      data: Empty,
      params: RequestParams = {}
    ) =>
      this.request<Empty, any>({
        path: `/api/${version}/notification_templates/${id}/test/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of notifications. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notifications found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification records. ## Results Each notification data structure includes the following fields: * `id`: Database ID for this notification. (integer) * `type`: Data type for this notification. (choice) * `url`: URL for this notification. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification was created. (datetime) * `modified`: Timestamp when this notification was last modified. (datetime) * `notification_template`:  (id) * `error`:  (string) * `status`:  (choice) - `pending`: Pending - `successful`: Successful - `failed`: Failed * `notifications_sent`:  (integer) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `recipients`:  (string) * `subject`:  (string) * `body`: Notification body (json) ## Sorting To specify that notifications are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiNotificationsList
     * @summary # List Notifications:
     * @request GET:/api/{version}/notifications/
     * @secure
     */
    apiNotificationsList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Notification[]
        },
        any
      >({
        path: `/api/${version}/notifications/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single notification record containing the following fields: * `id`: Database ID for this notification. (integer) * `type`: Data type for this notification. (choice) * `url`: URL for this notification. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification was created. (datetime) * `modified`: Timestamp when this notification was last modified. (datetime) * `notification_template`:  (id) * `error`:  (string) * `status`:  (choice) - `pending`: Pending - `successful`: Successful - `failed`: Failed * `notifications_sent`:  (integer) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `recipients`:  (string) * `subject`:  (string) * `body`: Notification body (json)
     *
     * @tags api
     * @name ApiNotificationsRead
     * @summary # Retrieve a Notification:
     * @request GET:/api/{version}/notifications/{id}/
     * @secure
     */
    apiNotificationsRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<Notification, any>({
        path: `/api/${version}/notifications/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiOrganizationsList
     * @request GET:/api/{version}/organizations/
     * @secure
     */
    apiOrganizationsList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<void, any>({
        path: `/api/${version}/organizations/`,
        method: 'GET',
        query: query,
        secure: true,
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiOrganizationsCreate
     * @request POST:/api/{version}/organizations/
     * @secure
     */
    apiOrganizationsCreate: (version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/organizations/`,
        method: 'POST',
        secure: true,
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single organization record containing the following fields: * `id`: Database ID for this organization. (integer) * `type`: Data type for this organization. (choice) * `url`: URL for this organization. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this organization was created. (datetime) * `modified`: Timestamp when this organization was last modified. (datetime) * `name`: Name of this organization. (string) * `description`: Optional description of this organization. (string) * `max_hosts`: Maximum number of hosts allowed to be managed by this organization. (integer) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `default_environment`: The default execution environment for jobs run by this organization. (id) # Update an Organization: Make a PUT or PATCH request to this resource to update this organization.  The following fields may be modified: * `name`: Name of this organization. (string, required) * `description`: Optional description of this organization. (string, default=`""`) * `max_hosts`: Maximum number of hosts allowed to be managed by this organization. (integer, default=`0`) * `default_environment`: The default execution environment for jobs run by this organization. (id, default=``) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete an Organization: Make a DELETE request to this resource to delete this organization.
     *
     * @tags api
     * @name ApiOrganizationsRead
     * @summary # Retrieve an Organization:
     * @request GET:/api/{version}/organizations/{id}/
     * @secure
     */
    apiOrganizationsRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<Organization, any>({
        path: `/api/${version}/organizations/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single organization record containing the following fields: * `id`: Database ID for this organization. (integer) * `type`: Data type for this organization. (choice) * `url`: URL for this organization. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this organization was created. (datetime) * `modified`: Timestamp when this organization was last modified. (datetime) * `name`: Name of this organization. (string) * `description`: Optional description of this organization. (string) * `max_hosts`: Maximum number of hosts allowed to be managed by this organization. (integer) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `default_environment`: The default execution environment for jobs run by this organization. (id) # Update an Organization: Make a PUT or PATCH request to this resource to update this organization.  The following fields may be modified: * `name`: Name of this organization. (string, required) * `description`: Optional description of this organization. (string, default=`""`) * `max_hosts`: Maximum number of hosts allowed to be managed by this organization. (integer, default=`0`) * `default_environment`: The default execution environment for jobs run by this organization. (id, default=``) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete an Organization: Make a DELETE request to this resource to delete this organization.
     *
     * @tags api
     * @name ApiOrganizationsUpdate
     * @summary # Retrieve an Organization:
     * @request PUT:/api/{version}/organizations/{id}/
     * @secure
     */
    apiOrganizationsUpdate: (
      id: string,
      version: string,
      data: Organization,
      params: RequestParams = {}
    ) =>
      this.request<Organization, any>({
        path: `/api/${version}/organizations/${id}/`,
        method: 'PUT',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single organization record containing the following fields: * `id`: Database ID for this organization. (integer) * `type`: Data type for this organization. (choice) * `url`: URL for this organization. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this organization was created. (datetime) * `modified`: Timestamp when this organization was last modified. (datetime) * `name`: Name of this organization. (string) * `description`: Optional description of this organization. (string) * `max_hosts`: Maximum number of hosts allowed to be managed by this organization. (integer) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `default_environment`: The default execution environment for jobs run by this organization. (id) # Update an Organization: Make a PUT or PATCH request to this resource to update this organization.  The following fields may be modified: * `name`: Name of this organization. (string, required) * `description`: Optional description of this organization. (string, default=`""`) * `max_hosts`: Maximum number of hosts allowed to be managed by this organization. (integer, default=`0`) * `default_environment`: The default execution environment for jobs run by this organization. (id, default=``) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete an Organization: Make a DELETE request to this resource to delete this organization.
     *
     * @tags api
     * @name ApiOrganizationsPartialUpdate
     * @summary # Retrieve an Organization:
     * @request PATCH:/api/{version}/organizations/{id}/
     * @secure
     */
    apiOrganizationsPartialUpdate: (
      id: string,
      version: string,
      data: Organization,
      params: RequestParams = {}
    ) =>
      this.request<Organization, any>({
        path: `/api/${version}/organizations/${id}/`,
        method: 'PATCH',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single organization record containing the following fields: * `id`: Database ID for this organization. (integer) * `type`: Data type for this organization. (choice) * `url`: URL for this organization. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this organization was created. (datetime) * `modified`: Timestamp when this organization was last modified. (datetime) * `name`: Name of this organization. (string) * `description`: Optional description of this organization. (string) * `max_hosts`: Maximum number of hosts allowed to be managed by this organization. (integer) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `default_environment`: The default execution environment for jobs run by this organization. (id) # Update an Organization: Make a PUT or PATCH request to this resource to update this organization.  The following fields may be modified: * `name`: Name of this organization. (string, required) * `description`: Optional description of this organization. (string, default=`""`) * `max_hosts`: Maximum number of hosts allowed to be managed by this organization. (integer, default=`0`) * `default_environment`: The default execution environment for jobs run by this organization. (id, default=``) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete an Organization: Make a DELETE request to this resource to delete this organization.
     *
     * @tags api
     * @name ApiOrganizationsDelete
     * @summary # Retrieve an Organization:
     * @request DELETE:/api/{version}/organizations/{id}/
     * @secure
     */
    apiOrganizationsDelete: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/organizations/${id}/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of users. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of users found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more user records. ## Results Each user data structure includes the following fields: * `id`: Database ID for this user. (integer) * `type`: Data type for this user. (choice) * `url`: URL for this user. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this user was created. (datetime) * `modified`: Timestamp when this user was last modified. (datetime) * `username`: Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (string) * `first_name`:  (string) * `last_name`:  (string) * `email`:  (string) * `is_superuser`: Designates that this user has all permissions without explicitly assigning them. (boolean) * `is_system_auditor`:  (boolean) * `ldap_dn`:  (string) * `last_login`:  (datetime) * `external_account`: Set if the account is managed by an external service (field) ## Sorting To specify that users are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=username Prefix the field name with a dash `-` to sort in reverse: ?order_by=-username Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=username,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsAccessListList
     * @summary # List Users:
     * @request GET:/api/{version}/organizations/{id}/access_list/
     * @secure
     */
    apiOrganizationsAccessListList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ResourceAccessListElement[]
        },
        any
      >({
        path: `/api/${version}/organizations/${id}/access_list/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of activity streams associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of activity streams found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more activity stream records. ## Results Each activity stream data structure includes the following fields: * `id`: Database ID for this activity stream. (integer) * `type`: Data type for this activity stream. (choice) * `url`: URL for this activity stream. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `timestamp`:  (datetime) * `operation`: The action taken with respect to the given object(s). (choice) - `create`: Entity Created - `update`: Entity Updated - `delete`: Entity Deleted - `associate`: Entity Associated with another Entity - `disassociate`: Entity was Disassociated with another Entity * `changes`: A summary of the new and changed values when an object is created, updated, or deleted (json) * `object1`: For create, update, and delete events this is the object type that was affected. For associate and disassociate events this is the object type associated or disassociated with object2. (string) * `object2`: Unpopulated for create, update, and delete events. For associate and disassociate events this is the object type that object1 is being associated with. (string) * `object_association`: When present, shows the field name of the role or relationship that changed. (field) * `action_node`: The cluster node the activity took place on. (string) * `object_type`: When present, shows the model on which the role or relationship was defined. (field) ## Sorting To specify that activity streams are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsActivityStreamList
     * @summary # List Activity Streams for an Organization:
     * @request GET:/api/{version}/organizations/{id}/activity_stream/
     * @secure
     */
    apiOrganizationsActivityStreamList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ActivityStream[]
        },
        any
      >({
        path: `/api/${version}/organizations/${id}/activity_stream/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of admin users associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of admin users found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more admin user records. ## Results Each admin user data structure includes the following fields: * `id`: Database ID for this user. (integer) * `type`: Data type for this user. (choice) * `url`: URL for this user. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this user was created. (datetime) * `modified`: Timestamp when this user was last modified. (datetime) * `username`: Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (string) * `first_name`:  (string) * `last_name`:  (string) * `email`:  (string) * `is_superuser`: Designates that this user has all permissions without explicitly assigning them. (boolean) * `is_system_auditor`:  (boolean) * `ldap_dn`:  (string) * `last_login`:  (datetime) * `external_account`: Set if the account is managed by an external service (field) ## Sorting To specify that admin users are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=username Prefix the field name with a dash `-` to sort in reverse: ?order_by=-username Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=username,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsAdminsList
     * @summary # List Admin Users for an Organization:
     * @request GET:/api/{version}/organizations/{id}/admins/
     * @secure
     */
    apiOrganizationsAdminsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: User[]
        },
        any
      >({
        path: `/api/${version}/organizations/${id}/admins/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of admin users associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of admin users found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more admin user records. ## Results Each admin user data structure includes the following fields: * `id`: Database ID for this user. (integer) * `type`: Data type for this user. (choice) * `url`: URL for this user. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this user was created. (datetime) * `modified`: Timestamp when this user was last modified. (datetime) * `username`: Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (string) * `first_name`:  (string) * `last_name`:  (string) * `email`:  (string) * `is_superuser`: Designates that this user has all permissions without explicitly assigning them. (boolean) * `is_system_auditor`:  (boolean) * `ldap_dn`:  (string) * `last_login`:  (datetime) * `external_account`: Set if the account is managed by an external service (field) ## Sorting To specify that admin users are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=username Prefix the field name with a dash `-` to sort in reverse: ?order_by=-username Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=username,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsAdminsCreate
     * @summary # List Admin Users for an Organization:
     * @request POST:/api/{version}/organizations/{id}/admins/
     * @secure
     */
    apiOrganizationsAdminsCreate: (
      id: string,
      version: string,
      data: User,
      params: RequestParams = {}
    ) =>
      this.request<User, any>({
        path: `/api/${version}/organizations/${id}/admins/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of applications associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of applications found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more application records. ## Results Each application data structure includes the following fields: * `id`: Database ID for this application. (integer) * `type`: Data type for this application. (choice) * `url`: URL for this application. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this application was created. (datetime) * `modified`: Timestamp when this application was last modified. (datetime) * `name`: Name of this application. (string) * `description`: Optional description of this application. (string) * `client_id`:  (string) * `client_secret`: Used for more stringent verification of access to an application when creating a token. (string) * `client_type`: Set to Public or Confidential depending on how secure the client device is. (choice) - `confidential`: Confidential - `public`: Public * `redirect_uris`: Allowed URIs list, space separated (string) * `authorization_grant_type`: The Grant type the user must use for acquire tokens for this application. (choice) - `authorization-code`: Authorization code - `password`: Resource owner password-based * `skip_authorization`: Set True to skip authorization step for completely trusted applications. (boolean) * `organization`: Organization containing this application. (id) ## Sorting To specify that applications are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsApplicationsList
     * @summary # List Applications for an Organization:
     * @request GET:/api/{version}/organizations/{id}/applications/
     * @secure
     */
    apiOrganizationsApplicationsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: OAuth2Application[]
        },
        any
      >({
        path: `/api/${version}/organizations/${id}/applications/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of applications associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of applications found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more application records. ## Results Each application data structure includes the following fields: * `id`: Database ID for this application. (integer) * `type`: Data type for this application. (choice) * `url`: URL for this application. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this application was created. (datetime) * `modified`: Timestamp when this application was last modified. (datetime) * `name`: Name of this application. (string) * `description`: Optional description of this application. (string) * `client_id`:  (string) * `client_secret`: Used for more stringent verification of access to an application when creating a token. (string) * `client_type`: Set to Public or Confidential depending on how secure the client device is. (choice) - `confidential`: Confidential - `public`: Public * `redirect_uris`: Allowed URIs list, space separated (string) * `authorization_grant_type`: The Grant type the user must use for acquire tokens for this application. (choice) - `authorization-code`: Authorization code - `password`: Resource owner password-based * `skip_authorization`: Set True to skip authorization step for completely trusted applications. (boolean) * `organization`: Organization containing this application. (id) ## Sorting To specify that applications are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsApplicationsCreate
     * @summary # List Applications for an Organization:
     * @request POST:/api/{version}/organizations/{id}/applications/
     * @secure
     */
    apiOrganizationsApplicationsCreate: (
      id: string,
      version: string,
      data: OAuth2Application,
      params: RequestParams = {}
    ) =>
      this.request<OAuth2Application, any>({
        path: `/api/${version}/organizations/${id}/applications/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of credentials associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of credentials found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more credential records. ## Results Each credential data structure includes the following fields: * `id`: Database ID for this credential. (integer) * `type`: Data type for this credential. (choice) * `url`: URL for this credential. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential was created. (datetime) * `modified`: Timestamp when this credential was last modified. (datetime) * `name`: Name of this credential. (string) * `description`: Optional description of this credential. (string) * `organization`: Inherit permissions from organization roles. If provided on creation, do not give either user or team. (id) * `credential_type`: Specify the type of credential you want to create. Refer to the documentation for details on each type. (id) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `kind`:  (field) * `cloud`:  (field) * `kubernetes`:  (field) ## Sorting To specify that credentials are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsCredentialsList
     * @summary # List Credentials for an Organization:
     * @request GET:/api/{version}/organizations/{id}/credentials/
     * @secure
     */
    apiOrganizationsCredentialsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: OrganizationCredentialSerializerCreate[]
        },
        any
      >({
        path: `/api/${version}/organizations/${id}/credentials/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of credentials associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of credentials found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more credential records. ## Results Each credential data structure includes the following fields: * `id`: Database ID for this credential. (integer) * `type`: Data type for this credential. (choice) * `url`: URL for this credential. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential was created. (datetime) * `modified`: Timestamp when this credential was last modified. (datetime) * `name`: Name of this credential. (string) * `description`: Optional description of this credential. (string) * `organization`: Inherit permissions from organization roles. If provided on creation, do not give either user or team. (id) * `credential_type`: Specify the type of credential you want to create. Refer to the documentation for details on each type. (id) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `kind`:  (field) * `cloud`:  (field) * `kubernetes`:  (field) ## Sorting To specify that credentials are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsCredentialsCreate
     * @summary # List Credentials for an Organization:
     * @request POST:/api/{version}/organizations/{id}/credentials/
     * @secure
     */
    apiOrganizationsCredentialsCreate: (
      id: string,
      version: string,
      data: OrganizationCredentialSerializerCreate,
      params: RequestParams = {}
    ) =>
      this.request<OrganizationCredentialSerializerCreate, any>({
        path: `/api/${version}/organizations/${id}/credentials/`,
        method: 'POST',
        body: data,
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of execution environments associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of execution environments found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more execution environment records. ## Results Each execution environment data structure includes the following fields: * `id`: Database ID for this execution environment. (integer) * `type`: Data type for this execution environment. (choice) * `url`: URL for this execution environment. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this execution environment was created. (datetime) * `modified`: Timestamp when this execution environment was last modified. (datetime) * `name`: Name of this execution environment. (string) * `description`: Optional description of this execution environment. (string) * `organization`: The organization used to determine access to this execution environment. (id) * `image`: The full image location, including the container registry, image name, and version tag. (string) * `managed`:  (boolean) * `credential`:  (id) * `pull`: Pull image before running? (choice) - `""`: --------- - `always`: Always pull container before running. - `missing`: Only pull the image if not present before running. - `never`: Never pull container before running. ## Sorting To specify that execution environments are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsExecutionEnvironmentsList
     * @summary # List Execution Environments for an Organization:
     * @request GET:/api/{version}/organizations/{id}/execution_environments/
     * @secure
     */
    apiOrganizationsExecutionEnvironmentsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ExecutionEnvironment[]
        },
        any
      >({
        path: `/api/${version}/organizations/${id}/execution_environments/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of execution environments associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of execution environments found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more execution environment records. ## Results Each execution environment data structure includes the following fields: * `id`: Database ID for this execution environment. (integer) * `type`: Data type for this execution environment. (choice) * `url`: URL for this execution environment. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this execution environment was created. (datetime) * `modified`: Timestamp when this execution environment was last modified. (datetime) * `name`: Name of this execution environment. (string) * `description`: Optional description of this execution environment. (string) * `organization`: The organization used to determine access to this execution environment. (id) * `image`: The full image location, including the container registry, image name, and version tag. (string) * `managed`:  (boolean) * `credential`:  (id) * `pull`: Pull image before running? (choice) - `""`: --------- - `always`: Always pull container before running. - `missing`: Only pull the image if not present before running. - `never`: Never pull container before running. ## Sorting To specify that execution environments are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsExecutionEnvironmentsCreate
     * @summary # List Execution Environments for an Organization:
     * @request POST:/api/{version}/organizations/{id}/execution_environments/
     * @secure
     */
    apiOrganizationsExecutionEnvironmentsCreate: (
      id: string,
      version: string,
      data: ExecutionEnvironment,
      params: RequestParams = {}
    ) =>
      this.request<ExecutionEnvironment, any>({
        path: `/api/${version}/organizations/${id}/execution_environments/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of credentials associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of credentials found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more credential records. ## Results Each credential data structure includes the following fields: * `id`: Database ID for this credential. (integer) * `type`: Data type for this credential. (choice) * `url`: URL for this credential. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential was created. (datetime) * `modified`: Timestamp when this credential was last modified. (datetime) * `name`: Name of this credential. (string) * `description`: Optional description of this credential. (string) * `organization`:  (id) * `credential_type`: Specify the type of credential you want to create. Refer to the documentation for details on each type. (id) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `kind`:  (field) * `cloud`:  (field) * `kubernetes`:  (field) ## Sorting To specify that credentials are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsGalaxyCredentialsList
     * @summary # List Credentials for an Organization:
     * @request GET:/api/{version}/organizations/{id}/galaxy_credentials/
     * @secure
     */
    apiOrganizationsGalaxyCredentialsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Credential[]
        },
        any
      >({
        path: `/api/${version}/organizations/${id}/galaxy_credentials/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of credentials associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of credentials found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more credential records. ## Results Each credential data structure includes the following fields: * `id`: Database ID for this credential. (integer) * `type`: Data type for this credential. (choice) * `url`: URL for this credential. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential was created. (datetime) * `modified`: Timestamp when this credential was last modified. (datetime) * `name`: Name of this credential. (string) * `description`: Optional description of this credential. (string) * `organization`:  (id) * `credential_type`: Specify the type of credential you want to create. Refer to the documentation for details on each type. (id) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `kind`:  (field) * `cloud`:  (field) * `kubernetes`:  (field) ## Sorting To specify that credentials are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsGalaxyCredentialsCreate
     * @summary # List Credentials for an Organization:
     * @request POST:/api/{version}/organizations/{id}/galaxy_credentials/
     * @secure
     */
    apiOrganizationsGalaxyCredentialsCreate: (
      id: string,
      version: string,
      data: Credential,
      params: RequestParams = {}
    ) =>
      this.request<Credential, any>({
        path: `/api/${version}/organizations/${id}/galaxy_credentials/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of instance groups associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of instance groups found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more instance group records. ## Results Each instance group data structure includes the following fields: * `id`: Database ID for this instance group. (integer) * `type`: Data type for this instance group. (choice) * `url`: URL for this instance group. (string) * `related`: Data structure with URLs of related resources. (object) * `name`: Name of this instance group. (string) * `created`: Timestamp when this instance group was created. (datetime) * `modified`: Timestamp when this instance group was last modified. (datetime) * `capacity`:  (field) * `consumed_capacity`:  (field) * `percent_capacity_remaining`:  (field) * `jobs_running`: Count of jobs in the running or waiting state that are targeted for this instance group (integer) * `jobs_total`: Count of all jobs that target this instance group (integer) * `instances`:  (field) * `is_container_group`: Indicates whether instances in this group are containerized.Containerized groups have a designated Openshift or Kubernetes cluster. (boolean) * `credential`:  (id) * `policy_instance_percentage`: Minimum percentage of all instances that will be automatically assigned to this group when new instances come online. (integer) * `policy_instance_minimum`: Static minimum number of Instances that will be automatically assign to this group when new instances come online. (integer) * `policy_instance_list`: List of exact-match Instances that will be assigned to this group (json) * `pod_spec_override`:  (string) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) ## Sorting To specify that instance groups are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsInstanceGroupsList
     * @summary # List Instance Groups for an Organization:
     * @request GET:/api/{version}/organizations/{id}/instance_groups/
     * @secure
     */
    apiOrganizationsInstanceGroupsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: InstanceGroup[]
        },
        any
      >({
        path: `/api/${version}/organizations/${id}/instance_groups/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of instance groups associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of instance groups found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more instance group records. ## Results Each instance group data structure includes the following fields: * `id`: Database ID for this instance group. (integer) * `type`: Data type for this instance group. (choice) * `url`: URL for this instance group. (string) * `related`: Data structure with URLs of related resources. (object) * `name`: Name of this instance group. (string) * `created`: Timestamp when this instance group was created. (datetime) * `modified`: Timestamp when this instance group was last modified. (datetime) * `capacity`:  (field) * `consumed_capacity`:  (field) * `percent_capacity_remaining`:  (field) * `jobs_running`: Count of jobs in the running or waiting state that are targeted for this instance group (integer) * `jobs_total`: Count of all jobs that target this instance group (integer) * `instances`:  (field) * `is_container_group`: Indicates whether instances in this group are containerized.Containerized groups have a designated Openshift or Kubernetes cluster. (boolean) * `credential`:  (id) * `policy_instance_percentage`: Minimum percentage of all instances that will be automatically assigned to this group when new instances come online. (integer) * `policy_instance_minimum`: Static minimum number of Instances that will be automatically assign to this group when new instances come online. (integer) * `policy_instance_list`: List of exact-match Instances that will be assigned to this group (json) * `pod_spec_override`:  (string) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) ## Sorting To specify that instance groups are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsInstanceGroupsCreate
     * @summary # List Instance Groups for an Organization:
     * @request POST:/api/{version}/organizations/{id}/instance_groups/
     * @secure
     */
    apiOrganizationsInstanceGroupsCreate: (
      id: string,
      version: string,
      data: InstanceGroup,
      params: RequestParams = {}
    ) =>
      this.request<InstanceGroup, any>({
        path: `/api/${version}/organizations/${id}/instance_groups/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of inventories associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of inventories found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more inventory records. ## Results Each inventory data structure includes the following fields: * `id`: Database ID for this inventory. (integer) * `type`: Data type for this inventory. (choice) * `url`: URL for this inventory. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this inventory was created. (datetime) * `modified`: Timestamp when this inventory was last modified. (datetime) * `name`: Name of this inventory. (string) * `description`: Optional description of this inventory. (string) * `organization`: Organization containing this inventory. (id) * `kind`: Kind of inventory being represented. (choice) - `""`: Hosts have a direct link to this inventory. - `smart`: Hosts for inventory generated using the host_filter property. * `host_filter`: Filter that will be applied to the hosts of this inventory. (string) * `variables`: Inventory variables in JSON or YAML format. (json) * `has_active_failures`: This field is deprecated and will be removed in a future release. Flag indicating whether any hosts in this inventory have failed. (boolean) * `total_hosts`: This field is deprecated and will be removed in a future release. Total number of hosts in this inventory. (integer) * `hosts_with_active_failures`: This field is deprecated and will be removed in a future release. Number of hosts in this inventory with active failures. (integer) * `total_groups`: This field is deprecated and will be removed in a future release. Total number of groups in this inventory. (integer) * `has_inventory_sources`: This field is deprecated and will be removed in a future release. Flag indicating whether this inventory has any external inventory sources. (boolean) * `total_inventory_sources`: Total number of external inventory sources configured within this inventory. (integer) * `inventory_sources_with_failures`: Number of external inventory sources in this inventory with failures. (integer) * `pending_deletion`: Flag indicating the inventory is being deleted. (boolean) * `prevent_instance_group_fallback`: If enabled, the inventory will prevent adding any organization instance groups to the list of preferred instances groups to run associated job templates on.If this setting is enabled and you provided an empty list, the global instance groups will be applied. (boolean) ## Sorting To specify that inventories are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsInventoriesList
     * @summary # List Inventories for an Organization:
     * @request GET:/api/{version}/organizations/{id}/inventories/
     * @secure
     */
    apiOrganizationsInventoriesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Inventory[]
        },
        any
      >({
        path: `/api/${version}/organizations/${id}/inventories/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of job templates associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of job templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more job template records. ## Results Each job template data structure includes the following fields: * `id`: Database ID for this job template. (integer) * `type`: Data type for this job template. (choice) * `url`: URL for this job template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this job template was created. (datetime) * `modified`: Timestamp when this job template was last modified. (datetime) * `name`: Name of this job template. (string) * `description`: Optional description of this job template. (string) * `job_type`:  (choice) - `run`: Run - `check`: Check * `inventory`:  (id) * `project`:  (id) * `playbook`:  (string) * `scm_branch`: Branch to use in job run. Project default used if blank. Only allowed if project allow_override field is set to true. (string) * `forks`:  (integer) * `limit`:  (string) * `verbosity`:  (choice) - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `extra_vars`:  (json) * `job_tags`:  (string) * `force_handlers`:  (boolean) * `skip_tags`:  (string) * `start_at_task`:  (string) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `use_fact_cache`: If enabled, the service will act as an Ansible Fact Cache Plugin; persisting facts at the end of a playbook run to the database and caching facts for use by Ansible. (boolean) * `organization`: The organization used to determine access to this template. (id) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated * `execution_environment`: The container image to be used for execution. (id) * `host_config_key`:  (string) * `ask_scm_branch_on_launch`:  (boolean) * `ask_diff_mode_on_launch`:  (boolean) * `ask_variables_on_launch`:  (boolean) * `ask_limit_on_launch`:  (boolean) * `ask_tags_on_launch`:  (boolean) * `ask_skip_tags_on_launch`:  (boolean) * `ask_job_type_on_launch`:  (boolean) * `ask_verbosity_on_launch`:  (boolean) * `ask_inventory_on_launch`:  (boolean) * `ask_credential_on_launch`:  (boolean) * `ask_execution_environment_on_launch`:  (boolean) * `ask_labels_on_launch`:  (boolean) * `ask_forks_on_launch`:  (boolean) * `ask_job_slice_count_on_launch`:  (boolean) * `ask_timeout_on_launch`:  (boolean) * `ask_instance_groups_on_launch`:  (boolean) * `survey_enabled`:  (boolean) * `become_enabled`:  (boolean) * `diff_mode`: If enabled, textual changes made to any templated files on the host are shown in the standard output (boolean) * `allow_simultaneous`:  (boolean) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `job_slice_count`: The number of jobs to slice into at runtime. Will cause the Job Template to launch a workflow if value is greater than 1. (integer) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id) * `prevent_instance_group_fallback`: If enabled, the job template will prevent adding any inventory or organization instance groups to the list of preferred instances groups to run on.If this setting is enabled and you provided an empty list, the global instance groups will be applied. (boolean) ## Sorting To specify that job templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsJobTemplatesList
     * @summary # List Job Templates for an Organization:
     * @request GET:/api/{version}/organizations/{id}/job_templates/
     * @secure
     */
    apiOrganizationsJobTemplatesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: JobTemplate[]
        },
        any
      >({
        path: `/api/${version}/organizations/${id}/job_templates/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of job templates associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of job templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more job template records. ## Results Each job template data structure includes the following fields: * `id`: Database ID for this job template. (integer) * `type`: Data type for this job template. (choice) * `url`: URL for this job template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this job template was created. (datetime) * `modified`: Timestamp when this job template was last modified. (datetime) * `name`: Name of this job template. (string) * `description`: Optional description of this job template. (string) * `job_type`:  (choice) - `run`: Run - `check`: Check * `inventory`:  (id) * `project`:  (id) * `playbook`:  (string) * `scm_branch`: Branch to use in job run. Project default used if blank. Only allowed if project allow_override field is set to true. (string) * `forks`:  (integer) * `limit`:  (string) * `verbosity`:  (choice) - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `extra_vars`:  (json) * `job_tags`:  (string) * `force_handlers`:  (boolean) * `skip_tags`:  (string) * `start_at_task`:  (string) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `use_fact_cache`: If enabled, the service will act as an Ansible Fact Cache Plugin; persisting facts at the end of a playbook run to the database and caching facts for use by Ansible. (boolean) * `organization`: The organization used to determine access to this template. (id) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated * `execution_environment`: The container image to be used for execution. (id) * `host_config_key`:  (string) * `ask_scm_branch_on_launch`:  (boolean) * `ask_diff_mode_on_launch`:  (boolean) * `ask_variables_on_launch`:  (boolean) * `ask_limit_on_launch`:  (boolean) * `ask_tags_on_launch`:  (boolean) * `ask_skip_tags_on_launch`:  (boolean) * `ask_job_type_on_launch`:  (boolean) * `ask_verbosity_on_launch`:  (boolean) * `ask_inventory_on_launch`:  (boolean) * `ask_credential_on_launch`:  (boolean) * `ask_execution_environment_on_launch`:  (boolean) * `ask_labels_on_launch`:  (boolean) * `ask_forks_on_launch`:  (boolean) * `ask_job_slice_count_on_launch`:  (boolean) * `ask_timeout_on_launch`:  (boolean) * `ask_instance_groups_on_launch`:  (boolean) * `survey_enabled`:  (boolean) * `become_enabled`:  (boolean) * `diff_mode`: If enabled, textual changes made to any templated files on the host are shown in the standard output (boolean) * `allow_simultaneous`:  (boolean) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `job_slice_count`: The number of jobs to slice into at runtime. Will cause the Job Template to launch a workflow if value is greater than 1. (integer) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id) * `prevent_instance_group_fallback`: If enabled, the job template will prevent adding any inventory or organization instance groups to the list of preferred instances groups to run on.If this setting is enabled and you provided an empty list, the global instance groups will be applied. (boolean) ## Sorting To specify that job templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsJobTemplatesCreate
     * @summary # List Job Templates for an Organization:
     * @request POST:/api/{version}/organizations/{id}/job_templates/
     * @secure
     */
    apiOrganizationsJobTemplatesCreate: (
      id: string,
      version: string,
      data: JobTemplate,
      params: RequestParams = {}
    ) =>
      this.request<JobTemplate, any>({
        path: `/api/${version}/organizations/${id}/job_templates/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsNotificationTemplatesList
     * @summary # List Notification Templates for an Organization:
     * @request GET:/api/{version}/organizations/{id}/notification_templates/
     * @secure
     */
    apiOrganizationsNotificationTemplatesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: NotificationTemplate[]
        },
        any
      >({
        path: `/api/${version}/organizations/${id}/notification_templates/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsNotificationTemplatesCreate
     * @summary # List Notification Templates for an Organization:
     * @request POST:/api/{version}/organizations/{id}/notification_templates/
     * @secure
     */
    apiOrganizationsNotificationTemplatesCreate: (
      id: string,
      version: string,
      data: NotificationTemplate,
      params: RequestParams = {}
    ) =>
      this.request<NotificationTemplate, any>({
        path: `/api/${version}/organizations/${id}/notification_templates/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsNotificationTemplatesApprovalsList
     * @summary # List Notification Templates for an Organization:
     * @request GET:/api/{version}/organizations/{id}/notification_templates_approvals/
     * @secure
     */
    apiOrganizationsNotificationTemplatesApprovalsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: NotificationTemplate[]
        },
        any
      >({
        path: `/api/${version}/organizations/${id}/notification_templates_approvals/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsNotificationTemplatesApprovalsCreate
     * @summary # List Notification Templates for an Organization:
     * @request POST:/api/{version}/organizations/{id}/notification_templates_approvals/
     * @secure
     */
    apiOrganizationsNotificationTemplatesApprovalsCreate: (
      id: string,
      version: string,
      data: NotificationTemplate,
      params: RequestParams = {}
    ) =>
      this.request<NotificationTemplate, any>({
        path: `/api/${version}/organizations/${id}/notification_templates_approvals/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsNotificationTemplatesErrorList
     * @summary # List Notification Templates for an Organization:
     * @request GET:/api/{version}/organizations/{id}/notification_templates_error/
     * @secure
     */
    apiOrganizationsNotificationTemplatesErrorList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: NotificationTemplate[]
        },
        any
      >({
        path: `/api/${version}/organizations/${id}/notification_templates_error/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsNotificationTemplatesErrorCreate
     * @summary # List Notification Templates for an Organization:
     * @request POST:/api/{version}/organizations/{id}/notification_templates_error/
     * @secure
     */
    apiOrganizationsNotificationTemplatesErrorCreate: (
      id: string,
      version: string,
      data: NotificationTemplate,
      params: RequestParams = {}
    ) =>
      this.request<NotificationTemplate, any>({
        path: `/api/${version}/organizations/${id}/notification_templates_error/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsNotificationTemplatesStartedList
     * @summary # List Notification Templates for an Organization:
     * @request GET:/api/{version}/organizations/{id}/notification_templates_started/
     * @secure
     */
    apiOrganizationsNotificationTemplatesStartedList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: NotificationTemplate[]
        },
        any
      >({
        path: `/api/${version}/organizations/${id}/notification_templates_started/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsNotificationTemplatesStartedCreate
     * @summary # List Notification Templates for an Organization:
     * @request POST:/api/{version}/organizations/{id}/notification_templates_started/
     * @secure
     */
    apiOrganizationsNotificationTemplatesStartedCreate: (
      id: string,
      version: string,
      data: NotificationTemplate,
      params: RequestParams = {}
    ) =>
      this.request<NotificationTemplate, any>({
        path: `/api/${version}/organizations/${id}/notification_templates_started/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsNotificationTemplatesSuccessList
     * @summary # List Notification Templates for an Organization:
     * @request GET:/api/{version}/organizations/{id}/notification_templates_success/
     * @secure
     */
    apiOrganizationsNotificationTemplatesSuccessList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: NotificationTemplate[]
        },
        any
      >({
        path: `/api/${version}/organizations/${id}/notification_templates_success/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsNotificationTemplatesSuccessCreate
     * @summary # List Notification Templates for an Organization:
     * @request POST:/api/{version}/organizations/{id}/notification_templates_success/
     * @secure
     */
    apiOrganizationsNotificationTemplatesSuccessCreate: (
      id: string,
      version: string,
      data: NotificationTemplate,
      params: RequestParams = {}
    ) =>
      this.request<NotificationTemplate, any>({
        path: `/api/${version}/organizations/${id}/notification_templates_success/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of roles associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of roles found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more role records. ## Results Each role data structure includes the following fields: * `id`: Database ID for this role. (integer) * `type`: Data type for this role. (choice) * `url`: URL for this role. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `name`: Name of this role. (field) * `description`: Optional description of this role. (field) ## Sorting To specify that roles are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsObjectRolesList
     * @summary # List Roles for an Organization:
     * @request GET:/api/{version}/organizations/{id}/object_roles/
     * @secure
     */
    apiOrganizationsObjectRolesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Role[]
        },
        any
      >({
        path: `/api/${version}/organizations/${id}/object_roles/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of projects associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of projects found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more project records. ## Results Each project data structure includes the following fields: * `id`: Database ID for this project. (integer) * `type`: Data type for this project. (choice) * `url`: URL for this project. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this project was created. (datetime) * `modified`: Timestamp when this project was last modified. (datetime) * `name`: Name of this project. (string) * `description`: Optional description of this project. (string) * `local_path`: Local path (relative to PROJECTS_ROOT) containing playbooks and related files for this project. (string) * `scm_type`: Specifies the source control system used to store the project. (choice) - `""`: Manual - `git`: Git - `svn`: Subversion - `insights`: Red Hat Insights - `archive`: Remote Archive * `scm_url`: The location where the project is stored. (string) * `scm_branch`: Specific branch, tag or commit to checkout. (string) * `scm_refspec`: For git projects, an additional refspec to fetch. (string) * `scm_clean`: Discard any local changes before syncing the project. (boolean) * `scm_track_submodules`: Track submodules latest commits on defined branch. (boolean) * `scm_delete_on_update`: Delete the project before syncing. (boolean) * `credential`:  (id) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `scm_revision`: The last revision fetched by a project update (string) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `ok`: OK - `missing`: Missing * `organization`: The organization used to determine access to this template. (id) * `scm_update_on_launch`: Update the project when a job is launched that uses the project. (boolean) * `scm_update_cache_timeout`: The number of seconds after the last project update ran that a new project update will be launched as a job dependency. (integer) * `allow_override`: Allow changing the SCM branch or revision in a job template that uses this project. (boolean) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `default_environment`: The default execution environment for jobs run using this project. (id) * `signature_validation_credential`: An optional credential used for validating files in the project against unexpected changes. (id) * `last_update_failed`:  (boolean) * `last_updated`:  (datetime) ## Sorting To specify that projects are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsProjectsList
     * @summary # List Projects for an Organization:
     * @request GET:/api/{version}/organizations/{id}/projects/
     * @secure
     */
    apiOrganizationsProjectsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Project[]
        },
        any
      >({
        path: `/api/${version}/organizations/${id}/projects/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of projects associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of projects found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more project records. ## Results Each project data structure includes the following fields: * `id`: Database ID for this project. (integer) * `type`: Data type for this project. (choice) * `url`: URL for this project. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this project was created. (datetime) * `modified`: Timestamp when this project was last modified. (datetime) * `name`: Name of this project. (string) * `description`: Optional description of this project. (string) * `local_path`: Local path (relative to PROJECTS_ROOT) containing playbooks and related files for this project. (string) * `scm_type`: Specifies the source control system used to store the project. (choice) - `""`: Manual - `git`: Git - `svn`: Subversion - `insights`: Red Hat Insights - `archive`: Remote Archive * `scm_url`: The location where the project is stored. (string) * `scm_branch`: Specific branch, tag or commit to checkout. (string) * `scm_refspec`: For git projects, an additional refspec to fetch. (string) * `scm_clean`: Discard any local changes before syncing the project. (boolean) * `scm_track_submodules`: Track submodules latest commits on defined branch. (boolean) * `scm_delete_on_update`: Delete the project before syncing. (boolean) * `credential`:  (id) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `scm_revision`: The last revision fetched by a project update (string) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `ok`: OK - `missing`: Missing * `organization`: The organization used to determine access to this template. (id) * `scm_update_on_launch`: Update the project when a job is launched that uses the project. (boolean) * `scm_update_cache_timeout`: The number of seconds after the last project update ran that a new project update will be launched as a job dependency. (integer) * `allow_override`: Allow changing the SCM branch or revision in a job template that uses this project. (boolean) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `default_environment`: The default execution environment for jobs run using this project. (id) * `signature_validation_credential`: An optional credential used for validating files in the project against unexpected changes. (id) * `last_update_failed`:  (boolean) * `last_updated`:  (datetime) ## Sorting To specify that projects are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsProjectsCreate
     * @summary # List Projects for an Organization:
     * @request POST:/api/{version}/organizations/{id}/projects/
     * @secure
     */
    apiOrganizationsProjectsCreate: (
      id: string,
      version: string,
      data: Project,
      params: RequestParams = {}
    ) =>
      this.request<Project, any>({
        path: `/api/${version}/organizations/${id}/projects/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of teams associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of teams found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more team records. ## Results Each team data structure includes the following fields: * `id`: Database ID for this team. (integer) * `type`: Data type for this team. (choice) * `url`: URL for this team. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this team was created. (datetime) * `modified`: Timestamp when this team was last modified. (datetime) * `name`: Name of this team. (string) * `description`: Optional description of this team. (string) * `organization`:  (id) ## Sorting To specify that teams are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsTeamsList
     * @summary # List Teams for an Organization:
     * @request GET:/api/{version}/organizations/{id}/teams/
     * @secure
     */
    apiOrganizationsTeamsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Team[]
        },
        any
      >({
        path: `/api/${version}/organizations/${id}/teams/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of teams associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of teams found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more team records. ## Results Each team data structure includes the following fields: * `id`: Database ID for this team. (integer) * `type`: Data type for this team. (choice) * `url`: URL for this team. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this team was created. (datetime) * `modified`: Timestamp when this team was last modified. (datetime) * `name`: Name of this team. (string) * `description`: Optional description of this team. (string) * `organization`:  (id) ## Sorting To specify that teams are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsTeamsCreate
     * @summary # List Teams for an Organization:
     * @request POST:/api/{version}/organizations/{id}/teams/
     * @secure
     */
    apiOrganizationsTeamsCreate: (
      id: string,
      version: string,
      data: Team,
      params: RequestParams = {}
    ) =>
      this.request<Team, any>({
        path: `/api/${version}/organizations/${id}/teams/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of users associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of users found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more user records. ## Results Each user data structure includes the following fields: * `id`: Database ID for this user. (integer) * `type`: Data type for this user. (choice) * `url`: URL for this user. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this user was created. (datetime) * `modified`: Timestamp when this user was last modified. (datetime) * `username`: Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (string) * `first_name`:  (string) * `last_name`:  (string) * `email`:  (string) * `is_superuser`: Designates that this user has all permissions without explicitly assigning them. (boolean) * `is_system_auditor`:  (boolean) * `ldap_dn`:  (string) * `last_login`:  (datetime) * `external_account`: Set if the account is managed by an external service (field) ## Sorting To specify that users are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=username Prefix the field name with a dash `-` to sort in reverse: ?order_by=-username Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=username,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsUsersList
     * @summary # List Users for an Organization:
     * @request GET:/api/{version}/organizations/{id}/users/
     * @secure
     */
    apiOrganizationsUsersList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: User[]
        },
        any
      >({
        path: `/api/${version}/organizations/${id}/users/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of users associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of users found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more user records. ## Results Each user data structure includes the following fields: * `id`: Database ID for this user. (integer) * `type`: Data type for this user. (choice) * `url`: URL for this user. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this user was created. (datetime) * `modified`: Timestamp when this user was last modified. (datetime) * `username`: Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (string) * `first_name`:  (string) * `last_name`:  (string) * `email`:  (string) * `is_superuser`: Designates that this user has all permissions without explicitly assigning them. (boolean) * `is_system_auditor`:  (boolean) * `ldap_dn`:  (string) * `last_login`:  (datetime) * `external_account`: Set if the account is managed by an external service (field) ## Sorting To specify that users are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=username Prefix the field name with a dash `-` to sort in reverse: ?order_by=-username Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=username,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsUsersCreate
     * @summary # List Users for an Organization:
     * @request POST:/api/{version}/organizations/{id}/users/
     * @secure
     */
    apiOrganizationsUsersCreate: (
      id: string,
      version: string,
      data: User,
      params: RequestParams = {}
    ) =>
      this.request<User, any>({
        path: `/api/${version}/organizations/${id}/users/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of workflow job templates associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of workflow job templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more workflow job template records. ## Results Each workflow job template data structure includes the following fields: * `id`: Database ID for this workflow job template. (integer) * `type`: Data type for this workflow job template. (choice) * `url`: URL for this workflow job template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job template was created. (datetime) * `modified`: Timestamp when this workflow job template was last modified. (datetime) * `name`: Name of this workflow job template. (string) * `description`: Optional description of this workflow job template. (string) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `ok`: OK - `missing`: Missing - `none`: No External Source - `updating`: Updating * `extra_vars`:  (json) * `organization`: The organization used to determine access to this template. (id) * `survey_enabled`:  (boolean) * `allow_simultaneous`:  (boolean) * `ask_variables_on_launch`:  (boolean) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `limit`:  (string) * `scm_branch`:  (string) * `ask_inventory_on_launch`:  (boolean) * `ask_scm_branch_on_launch`:  (boolean) * `ask_limit_on_launch`:  (boolean) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id) * `ask_labels_on_launch`:  (boolean) * `ask_skip_tags_on_launch`:  (boolean) * `ask_tags_on_launch`:  (boolean) * `skip_tags`:  (string) * `job_tags`:  (string) ## Sorting To specify that workflow job templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsWorkflowJobTemplatesList
     * @summary # List Workflow Job Templates for an Organization:
     * @request GET:/api/{version}/organizations/{id}/workflow_job_templates/
     * @secure
     */
    apiOrganizationsWorkflowJobTemplatesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: WorkflowJobTemplate[]
        },
        any
      >({
        path: `/api/${version}/organizations/${id}/workflow_job_templates/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of workflow job templates associated with the selected organization. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of workflow job templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more workflow job template records. ## Results Each workflow job template data structure includes the following fields: * `id`: Database ID for this workflow job template. (integer) * `type`: Data type for this workflow job template. (choice) * `url`: URL for this workflow job template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job template was created. (datetime) * `modified`: Timestamp when this workflow job template was last modified. (datetime) * `name`: Name of this workflow job template. (string) * `description`: Optional description of this workflow job template. (string) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `ok`: OK - `missing`: Missing - `none`: No External Source - `updating`: Updating * `extra_vars`:  (json) * `organization`: The organization used to determine access to this template. (id) * `survey_enabled`:  (boolean) * `allow_simultaneous`:  (boolean) * `ask_variables_on_launch`:  (boolean) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `limit`:  (string) * `scm_branch`:  (string) * `ask_inventory_on_launch`:  (boolean) * `ask_scm_branch_on_launch`:  (boolean) * `ask_limit_on_launch`:  (boolean) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id) * `ask_labels_on_launch`:  (boolean) * `ask_skip_tags_on_launch`:  (boolean) * `ask_tags_on_launch`:  (boolean) * `skip_tags`:  (string) * `job_tags`:  (string) ## Sorting To specify that workflow job templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiOrganizationsWorkflowJobTemplatesCreate
     * @summary # List Workflow Job Templates for an Organization:
     * @request POST:/api/{version}/organizations/{id}/workflow_job_templates/
     * @secure
     */
    apiOrganizationsWorkflowJobTemplatesCreate: (
      id: string,
      version: string,
      data: WorkflowJobTemplate,
      params: RequestParams = {}
    ) =>
      this.request<WorkflowJobTemplate, any>({
        path: `/api/${version}/organizations/${id}/workflow_job_templates/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Everything returned here should be considered public / insecure, as this requires no auth and is intended for use by the installer process.
     *
     * @tags api
     * @name ApiPingList
     * @summary Return some basic information about this instance
     * @request GET:/api/{version}/ping/
     * @secure
     */
    apiPingList: (version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/ping/`,
        method: 'GET',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of project updates. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of project updates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more project update records. ## Results Each project update data structure includes the following fields: * `id`: Database ID for this project update. (integer) * `type`: Data type for this project update. (choice) * `url`: URL for this project update. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this project update was created. (datetime) * `modified`: Timestamp when this project update was last modified. (datetime) * `name`: Name of this project update. (string) * `description`: Optional description of this project update. (string) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `execution_node`: The node the job executed on. (string) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `local_path`: Local path (relative to PROJECTS_ROOT) containing playbooks and related files for this project. (string) * `scm_type`: Specifies the source control system used to store the project. (choice) - `""`: Manual - `git`: Git - `svn`: Subversion - `insights`: Red Hat Insights - `archive`: Remote Archive * `scm_url`: The location where the project is stored. (string) * `scm_branch`: Specific branch, tag or commit to checkout. (string) * `scm_refspec`: For git projects, an additional refspec to fetch. (string) * `scm_clean`: Discard any local changes before syncing the project. (boolean) * `scm_track_submodules`: Track submodules latest commits on defined branch. (boolean) * `scm_delete_on_update`: Delete the project before syncing. (boolean) * `credential`:  (id) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `scm_revision`: The SCM Revision discovered by this update for the given project and branch. (string) * `project`:  (id) * `job_type`:  (choice) - `run`: Run - `check`: Check * `job_tags`: Parts of the project update playbook that will be run. (string) ## Sorting To specify that project updates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiProjectUpdatesList
     * @summary # List Project Updates:
     * @request GET:/api/{version}/project_updates/
     * @secure
     */
    apiProjectUpdatesList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ProjectUpdateList[]
        },
        any
      >({
        path: `/api/${version}/project_updates/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single project update record containing the following fields: * `id`: Database ID for this project update. (integer) * `type`: Data type for this project update. (choice) * `url`: URL for this project update. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this project update was created. (datetime) * `modified`: Timestamp when this project update was last modified. (datetime) * `name`: Name of this project update. (string) * `description`: Optional description of this project update. (string) * `local_path`: Local path (relative to PROJECTS_ROOT) containing playbooks and related files for this project. (string) * `scm_type`: Specifies the source control system used to store the project. (choice) - `""`: Manual - `git`: Git - `svn`: Subversion - `insights`: Red Hat Insights - `archive`: Remote Archive * `scm_url`: The location where the project is stored. (string) * `scm_branch`: Specific branch, tag or commit to checkout. (string) * `scm_refspec`: For git projects, an additional refspec to fetch. (string) * `scm_clean`: Discard any local changes before syncing the project. (boolean) * `scm_track_submodules`: Track submodules latest commits on defined branch. (boolean) * `scm_delete_on_update`: Delete the project before syncing. (boolean) * `credential`:  (id) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `scm_revision`: The SCM Revision discovered by this update for the given project and branch. (string) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_args`:  (string) * `job_cwd`:  (string) * `job_env`:  (json) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `execution_node`: The node the job executed on. (string) * `result_traceback`:  (string) * `event_processing_finished`: Indicates whether all of the events generated by this unified job have been saved to the database. (boolean) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `project`:  (id) * `job_type`:  (choice) - `run`: Run - `check`: Check * `job_tags`: Parts of the project update playbook that will be run. (string) * `host_status_counts`: Playbook stats from the Ansible playbook_on_stats event. (json) * `playbook_counts`: A count of all plays and tasks for the job run. (field) # Delete a Project Update: Make a DELETE request to this resource to delete this project update.
     *
     * @tags api
     * @name ApiProjectUpdatesRead
     * @summary # Retrieve a Project Update:
     * @request GET:/api/{version}/project_updates/{id}/
     * @secure
     */
    apiProjectUpdatesRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<ProjectUpdateDetail, any>({
        path: `/api/${version}/project_updates/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single project update record containing the following fields: * `id`: Database ID for this project update. (integer) * `type`: Data type for this project update. (choice) * `url`: URL for this project update. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this project update was created. (datetime) * `modified`: Timestamp when this project update was last modified. (datetime) * `name`: Name of this project update. (string) * `description`: Optional description of this project update. (string) * `local_path`: Local path (relative to PROJECTS_ROOT) containing playbooks and related files for this project. (string) * `scm_type`: Specifies the source control system used to store the project. (choice) - `""`: Manual - `git`: Git - `svn`: Subversion - `insights`: Red Hat Insights - `archive`: Remote Archive * `scm_url`: The location where the project is stored. (string) * `scm_branch`: Specific branch, tag or commit to checkout. (string) * `scm_refspec`: For git projects, an additional refspec to fetch. (string) * `scm_clean`: Discard any local changes before syncing the project. (boolean) * `scm_track_submodules`: Track submodules latest commits on defined branch. (boolean) * `scm_delete_on_update`: Delete the project before syncing. (boolean) * `credential`:  (id) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `scm_revision`: The SCM Revision discovered by this update for the given project and branch. (string) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_args`:  (string) * `job_cwd`:  (string) * `job_env`:  (json) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `execution_node`: The node the job executed on. (string) * `result_traceback`:  (string) * `event_processing_finished`: Indicates whether all of the events generated by this unified job have been saved to the database. (boolean) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `project`:  (id) * `job_type`:  (choice) - `run`: Run - `check`: Check * `job_tags`: Parts of the project update playbook that will be run. (string) * `host_status_counts`: Playbook stats from the Ansible playbook_on_stats event. (json) * `playbook_counts`: A count of all plays and tasks for the job run. (field) # Delete a Project Update: Make a DELETE request to this resource to delete this project update.
     *
     * @tags api
     * @name ApiProjectUpdatesDelete
     * @summary # Retrieve a Project Update:
     * @request DELETE:/api/{version}/project_updates/{id}/
     * @secure
     */
    apiProjectUpdatesDelete: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/project_updates/${id}/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to determine if the project update can be canceled.  The response will include the following field: * `can_cancel`: Indicates whether this update can be canceled (boolean, read-only) Make a POST request to this resource to cancel a pending or running project update.  The response status code will be 202 if successful, or 405 if the update cannot be canceled.
     *
     * @tags api
     * @name ApiProjectUpdatesCancelRead
     * @summary # Cancel Project Update
     * @request GET:/api/{version}/project_updates/{id}/cancel/
     * @secure
     */
    apiProjectUpdatesCancelRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<ProjectUpdateCancel, any>({
        path: `/api/${version}/project_updates/${id}/cancel/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to determine if the project update can be canceled.  The response will include the following field: * `can_cancel`: Indicates whether this update can be canceled (boolean, read-only) Make a POST request to this resource to cancel a pending or running project update.  The response status code will be 202 if successful, or 405 if the update cannot be canceled.
     *
     * @tags api
     * @name ApiProjectUpdatesCancelCreate
     * @summary # Cancel Project Update
     * @request POST:/api/{version}/project_updates/{id}/cancel/
     * @secure
     */
    apiProjectUpdatesCancelCreate: (
      id: string,
      version: string,
      data: ProjectUpdateCancel,
      params: RequestParams = {}
    ) =>
      this.request<ProjectUpdateCancel, any>({
        path: `/api/${version}/project_updates/${id}/cancel/`,
        method: 'POST',
        body: data,
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of project update events associated with the selected project update. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of project update events found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more project update event records. ## Results Each project update event data structure includes the following fields: * `id`: Database ID for this project update event. (integer) * `type`: Data type for this project update event. (choice) * `url`: URL for this project update event. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this project update event was created. (datetime) * `modified`: Timestamp when this project update event was last modified. (datetime) * `event`:  (choice) - `runner_on_failed`: Host Failed - `runner_on_start`: Host Started - `runner_on_ok`: Host OK - `runner_on_error`: Host Failure - `runner_on_skipped`: Host Skipped - `runner_on_unreachable`: Host Unreachable - `runner_on_no_hosts`: No Hosts Remaining - `runner_on_async_poll`: Host Polling - `runner_on_async_ok`: Host Async OK - `runner_on_async_failed`: Host Async Failure - `runner_item_on_ok`: Item OK - `runner_item_on_failed`: Item Failed - `runner_item_on_skipped`: Item Skipped - `runner_retry`: Host Retry - `runner_on_file_diff`: File Difference - `playbook_on_start`: Playbook Started - `playbook_on_notify`: Running Handlers - `playbook_on_include`: Including File - `playbook_on_no_hosts_matched`: No Hosts Matched - `playbook_on_no_hosts_remaining`: No Hosts Remaining - `playbook_on_task_start`: Task Started - `playbook_on_vars_prompt`: Variables Prompted - `playbook_on_setup`: Gathering Facts - `playbook_on_import_for_host`: internal: on Import for Host - `playbook_on_not_import_for_host`: internal: on Not Import for Host - `playbook_on_play_start`: Play Started - `playbook_on_stats`: Playbook Complete - `debug`: Debug - `verbose`: Verbose - `deprecated`: Deprecated - `warning`: Warning - `system_warning`: System Warning - `error`: Error * `counter`:  (integer) * `event_display`:  (string) * `event_data`:  (json) * `event_level`:  (integer) * `failed`:  (boolean) * `changed`:  (boolean) * `uuid`:  (string) * `host_name`:  (field) * `playbook`:  (string) * `play`:  (string) * `task`:  (string) * `role`:  (string) * `stdout`:  (field) * `start_line`:  (integer) * `end_line`:  (integer) * `verbosity`:  (integer) * `project_update`:  (id) ## Sorting To specify that project update events are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiProjectUpdatesEventsList
     * @summary # List Project Update Events for a Project Update:
     * @request GET:/api/{version}/project_updates/{id}/events/
     * @secure
     */
    apiProjectUpdatesEventsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ProjectUpdateEvent[]
        },
        any
      >({
        path: `/api/${version}/project_updates/${id}/events/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notifications associated with the selected project update. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notifications found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification records. ## Results Each notification data structure includes the following fields: * `id`: Database ID for this notification. (integer) * `type`: Data type for this notification. (choice) * `url`: URL for this notification. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification was created. (datetime) * `modified`: Timestamp when this notification was last modified. (datetime) * `notification_template`:  (id) * `error`:  (string) * `status`:  (choice) - `pending`: Pending - `successful`: Successful - `failed`: Failed * `notifications_sent`:  (integer) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `recipients`:  (string) * `subject`:  (string) * `body`: Notification body (json) ## Sorting To specify that notifications are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiProjectUpdatesNotificationsList
     * @summary # List Notifications for a Project Update:
     * @request GET:/api/{version}/project_updates/{id}/notifications/
     * @secure
     */
    apiProjectUpdatesNotificationsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Notification[]
        },
        any
      >({
        path: `/api/${version}/project_updates/${id}/notifications/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of inventory updates associated with the selected project update. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of inventory updates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more inventory update records. ## Results Each inventory update data structure includes the following fields: * `id`: Database ID for this inventory update. (integer) * `type`: Data type for this inventory update. (choice) * `url`: URL for this inventory update. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this inventory update was created. (datetime) * `modified`: Timestamp when this inventory update was last modified. (datetime) * `name`: Name of this inventory update. (string) * `description`: Optional description of this inventory update. (string) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `execution_node`: The node the job executed on. (string) * `controller_node`: The instance that managed the execution environment. (string) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `source`:  (choice) - `file`: File, Directory or Script - `scm`: Sourced from a Project - `ec2`: Amazon EC2 - `gce`: Google Compute Engine - `azure_rm`: Microsoft Azure Resource Manager - `vmware`: VMware vCenter - `satellite6`: Red Hat Satellite 6 - `openstack`: OpenStack - `rhv`: Red Hat Virtualization - `controller`: Red Hat Ansible Automation Platform - `insights`: Red Hat Insights * `source_path`:  (string) * `source_vars`: Inventory source variables in YAML or JSON format. (string) * `credential`: Cloud credential to use for inventory updates. (integer) * `enabled_var`: Retrieve the enabled state from the given dict of host variables. The enabled variable may be specified as &quot;foo.bar&quot;, in which case the lookup will traverse into nested dicts, equivalent to: from_dict.get(&quot;foo&quot;, {}).get(&quot;bar&quot;, default) (string) * `enabled_value`: Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var=&quot;status.power_state&quot;and enabled_value=&quot;powered_on&quot; with host variables:{   &quot;status&quot;: {     &quot;power_state&quot;: &quot;powered_on&quot;,     &quot;created&quot;: &quot;2020-08-04T18:13:04+00:00&quot;,     &quot;healthy&quot;: true    },    &quot;name&quot;: &quot;foobar&quot;,    &quot;ip_address&quot;: &quot;192.168.2.1&quot;}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled (string) * `host_filter`: Regex where only matching hosts will be imported. (string) * `overwrite`: Overwrite local groups and hosts from remote inventory source. (boolean) * `overwrite_vars`: Overwrite local variables from remote inventory source. (boolean) * `custom_virtualenv`:  (string) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `verbosity`:  (choice) - `0`: 0 (WARNING) - `1`: 1 (INFO) - `2`: 2 (DEBUG) * `inventory`:  (id) * `inventory_source`:  (id) * `license_error`:  (boolean) * `org_host_limit_error`:  (boolean) * `source_project_update`: Inventory files from this Project Update were used for the inventory update. (id) * `instance_group`: The Instance group the job was run under (id) * `scm_revision`: The SCM Revision from the Project used for this inventory update.  Only applicable to inventories source from scm (string) ## Sorting To specify that inventory updates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiProjectUpdatesScmInventoryUpdatesList
     * @summary # List Inventory Updates for a Project Update:
     * @request GET:/api/{version}/project_updates/{id}/scm_inventory_updates/
     * @secure
     */
    apiProjectUpdatesScmInventoryUpdatesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: InventoryUpdateList[]
        },
        any
      >({
        path: `/api/${version}/project_updates/${id}/scm_inventory_updates/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve the stdout from running this project update. ## Format Use the `format` query string parameter to specify the output format. * Browsable API: `?format=api` * HTML: `?format=html` * Plain Text: `?format=txt` * Plain Text with ANSI color codes: `?format=ansi` * JSON structure: `?format=json` * Downloaded Plain Text: `?format=txt_download` * Downloaded Plain Text with ANSI color codes: `?format=ansi_download` (_New in Ansible Tower 2.0.0_) When using the Browsable API, HTML and JSON formats, the `start_line` and `end_line` query string parameters can be used to specify a range of line numbers to retrieve. Use `dark=1` or `dark=0` as a query string parameter to force or disable a dark background. Files over 1.0 MB (configurable) will not display in the browser. Use the `txt_download` or `ansi_download` formats to download the file directly to view it.
     *
     * @tags api
     * @name ApiProjectUpdatesStdoutRead
     * @summary # Retrieve Project Update Stdout:
     * @request GET:/api/{version}/project_updates/{id}/stdout/
     * @secure
     */
    apiProjectUpdatesStdoutRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<UnifiedJobStdout, any>({
        path: `/api/${version}/project_updates/${id}/stdout/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of projects. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of projects found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more project records. ## Results Each project data structure includes the following fields: * `id`: Database ID for this project. (integer) * `type`: Data type for this project. (choice) * `url`: URL for this project. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this project was created. (datetime) * `modified`: Timestamp when this project was last modified. (datetime) * `name`: Name of this project. (string) * `description`: Optional description of this project. (string) * `local_path`: Local path (relative to PROJECTS_ROOT) containing playbooks and related files for this project. (string) * `scm_type`: Specifies the source control system used to store the project. (choice) - `""`: Manual - `git`: Git - `svn`: Subversion - `insights`: Red Hat Insights - `archive`: Remote Archive * `scm_url`: The location where the project is stored. (string) * `scm_branch`: Specific branch, tag or commit to checkout. (string) * `scm_refspec`: For git projects, an additional refspec to fetch. (string) * `scm_clean`: Discard any local changes before syncing the project. (boolean) * `scm_track_submodules`: Track submodules latest commits on defined branch. (boolean) * `scm_delete_on_update`: Delete the project before syncing. (boolean) * `credential`:  (id) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `scm_revision`: The last revision fetched by a project update (string) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `ok`: OK - `missing`: Missing * `organization`: The organization used to determine access to this template. (id) * `scm_update_on_launch`: Update the project when a job is launched that uses the project. (boolean) * `scm_update_cache_timeout`: The number of seconds after the last project update ran that a new project update will be launched as a job dependency. (integer) * `allow_override`: Allow changing the SCM branch or revision in a job template that uses this project. (boolean) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `default_environment`: The default execution environment for jobs run using this project. (id) * `signature_validation_credential`: An optional credential used for validating files in the project against unexpected changes. (id) * `last_update_failed`:  (boolean) * `last_updated`:  (datetime) ## Sorting To specify that projects are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiProjectsList
     * @summary # List Projects:
     * @request GET:/api/{version}/projects/
     * @secure
     */
    apiProjectsList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Project[]
        },
        any
      >({
        path: `/api/${version}/projects/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of projects. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of projects found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more project records. ## Results Each project data structure includes the following fields: * `id`: Database ID for this project. (integer) * `type`: Data type for this project. (choice) * `url`: URL for this project. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this project was created. (datetime) * `modified`: Timestamp when this project was last modified. (datetime) * `name`: Name of this project. (string) * `description`: Optional description of this project. (string) * `local_path`: Local path (relative to PROJECTS_ROOT) containing playbooks and related files for this project. (string) * `scm_type`: Specifies the source control system used to store the project. (choice) - `""`: Manual - `git`: Git - `svn`: Subversion - `insights`: Red Hat Insights - `archive`: Remote Archive * `scm_url`: The location where the project is stored. (string) * `scm_branch`: Specific branch, tag or commit to checkout. (string) * `scm_refspec`: For git projects, an additional refspec to fetch. (string) * `scm_clean`: Discard any local changes before syncing the project. (boolean) * `scm_track_submodules`: Track submodules latest commits on defined branch. (boolean) * `scm_delete_on_update`: Delete the project before syncing. (boolean) * `credential`:  (id) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `scm_revision`: The last revision fetched by a project update (string) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `ok`: OK - `missing`: Missing * `organization`: The organization used to determine access to this template. (id) * `scm_update_on_launch`: Update the project when a job is launched that uses the project. (boolean) * `scm_update_cache_timeout`: The number of seconds after the last project update ran that a new project update will be launched as a job dependency. (integer) * `allow_override`: Allow changing the SCM branch or revision in a job template that uses this project. (boolean) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `default_environment`: The default execution environment for jobs run using this project. (id) * `signature_validation_credential`: An optional credential used for validating files in the project against unexpected changes. (id) * `last_update_failed`:  (boolean) * `last_updated`:  (datetime) ## Sorting To specify that projects are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiProjectsCreate
     * @summary # List Projects:
     * @request POST:/api/{version}/projects/
     * @secure
     */
    apiProjectsCreate: (version: string, data: Project, params: RequestParams = {}) =>
      this.request<Project, any>({
        path: `/api/${version}/projects/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single project record containing the following fields: * `id`: Database ID for this project. (integer) * `type`: Data type for this project. (choice) * `url`: URL for this project. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this project was created. (datetime) * `modified`: Timestamp when this project was last modified. (datetime) * `name`: Name of this project. (string) * `description`: Optional description of this project. (string) * `local_path`: Local path (relative to PROJECTS_ROOT) containing playbooks and related files for this project. (string) * `scm_type`: Specifies the source control system used to store the project. (choice) - `""`: Manual - `git`: Git - `svn`: Subversion - `insights`: Red Hat Insights - `archive`: Remote Archive * `scm_url`: The location where the project is stored. (string) * `scm_branch`: Specific branch, tag or commit to checkout. (string) * `scm_refspec`: For git projects, an additional refspec to fetch. (string) * `scm_clean`: Discard any local changes before syncing the project. (boolean) * `scm_track_submodules`: Track submodules latest commits on defined branch. (boolean) * `scm_delete_on_update`: Delete the project before syncing. (boolean) * `credential`:  (id) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `scm_revision`: The last revision fetched by a project update (string) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `ok`: OK - `missing`: Missing * `organization`: The organization used to determine access to this template. (id) * `scm_update_on_launch`: Update the project when a job is launched that uses the project. (boolean) * `scm_update_cache_timeout`: The number of seconds after the last project update ran that a new project update will be launched as a job dependency. (integer) * `allow_override`: Allow changing the SCM branch or revision in a job template that uses this project. (boolean) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `default_environment`: The default execution environment for jobs run using this project. (id) * `signature_validation_credential`: An optional credential used for validating files in the project against unexpected changes. (id) * `last_update_failed`:  (boolean) * `last_updated`:  (datetime) # Update a Project: Make a PUT or PATCH request to this resource to update this project.  The following fields may be modified: * `name`: Name of this project. (string, required) * `description`: Optional description of this project. (string, default=`""`) * `local_path`: Local path (relative to PROJECTS_ROOT) containing playbooks and related files for this project. (string, default=`""`) * `scm_type`: Specifies the source control system used to store the project. (choice) - `""`: Manual (default) - `git`: Git - `svn`: Subversion - `insights`: Red Hat Insights - `archive`: Remote Archive * `scm_url`: The location where the project is stored. (string, default=`""`) * `scm_branch`: Specific branch, tag or commit to checkout. (string, default=`""`) * `scm_refspec`: For git projects, an additional refspec to fetch. (string, default=`""`) * `scm_clean`: Discard any local changes before syncing the project. (boolean, default=`False`) * `scm_track_submodules`: Track submodules latest commits on defined branch. (boolean, default=`False`) * `scm_delete_on_update`: Delete the project before syncing. (boolean, default=`False`) * `credential`:  (id, default=``) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer, default=`0`) * `organization`: The organization used to determine access to this template. (id, default=``) * `scm_update_on_launch`: Update the project when a job is launched that uses the project. (boolean, default=`False`) * `scm_update_cache_timeout`: The number of seconds after the last project update ran that a new project update will be launched as a job dependency. (integer, default=`0`) * `allow_override`: Allow changing the SCM branch or revision in a job template that uses this project. (boolean, default=`False`) * `default_environment`: The default execution environment for jobs run using this project. (id, default=``) * `signature_validation_credential`: An optional credential used for validating files in the project against unexpected changes. (id, default=``) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Project: Make a DELETE request to this resource to delete this project.
     *
     * @tags api
     * @name ApiProjectsRead
     * @summary # Retrieve a Project:
     * @request GET:/api/{version}/projects/{id}/
     * @secure
     */
    apiProjectsRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<Project, any>({
        path: `/api/${version}/projects/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single project record containing the following fields: * `id`: Database ID for this project. (integer) * `type`: Data type for this project. (choice) * `url`: URL for this project. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this project was created. (datetime) * `modified`: Timestamp when this project was last modified. (datetime) * `name`: Name of this project. (string) * `description`: Optional description of this project. (string) * `local_path`: Local path (relative to PROJECTS_ROOT) containing playbooks and related files for this project. (string) * `scm_type`: Specifies the source control system used to store the project. (choice) - `""`: Manual - `git`: Git - `svn`: Subversion - `insights`: Red Hat Insights - `archive`: Remote Archive * `scm_url`: The location where the project is stored. (string) * `scm_branch`: Specific branch, tag or commit to checkout. (string) * `scm_refspec`: For git projects, an additional refspec to fetch. (string) * `scm_clean`: Discard any local changes before syncing the project. (boolean) * `scm_track_submodules`: Track submodules latest commits on defined branch. (boolean) * `scm_delete_on_update`: Delete the project before syncing. (boolean) * `credential`:  (id) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `scm_revision`: The last revision fetched by a project update (string) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `ok`: OK - `missing`: Missing * `organization`: The organization used to determine access to this template. (id) * `scm_update_on_launch`: Update the project when a job is launched that uses the project. (boolean) * `scm_update_cache_timeout`: The number of seconds after the last project update ran that a new project update will be launched as a job dependency. (integer) * `allow_override`: Allow changing the SCM branch or revision in a job template that uses this project. (boolean) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `default_environment`: The default execution environment for jobs run using this project. (id) * `signature_validation_credential`: An optional credential used for validating files in the project against unexpected changes. (id) * `last_update_failed`:  (boolean) * `last_updated`:  (datetime) # Update a Project: Make a PUT or PATCH request to this resource to update this project.  The following fields may be modified: * `name`: Name of this project. (string, required) * `description`: Optional description of this project. (string, default=`""`) * `local_path`: Local path (relative to PROJECTS_ROOT) containing playbooks and related files for this project. (string, default=`""`) * `scm_type`: Specifies the source control system used to store the project. (choice) - `""`: Manual (default) - `git`: Git - `svn`: Subversion - `insights`: Red Hat Insights - `archive`: Remote Archive * `scm_url`: The location where the project is stored. (string, default=`""`) * `scm_branch`: Specific branch, tag or commit to checkout. (string, default=`""`) * `scm_refspec`: For git projects, an additional refspec to fetch. (string, default=`""`) * `scm_clean`: Discard any local changes before syncing the project. (boolean, default=`False`) * `scm_track_submodules`: Track submodules latest commits on defined branch. (boolean, default=`False`) * `scm_delete_on_update`: Delete the project before syncing. (boolean, default=`False`) * `credential`:  (id, default=``) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer, default=`0`) * `organization`: The organization used to determine access to this template. (id, default=``) * `scm_update_on_launch`: Update the project when a job is launched that uses the project. (boolean, default=`False`) * `scm_update_cache_timeout`: The number of seconds after the last project update ran that a new project update will be launched as a job dependency. (integer, default=`0`) * `allow_override`: Allow changing the SCM branch or revision in a job template that uses this project. (boolean, default=`False`) * `default_environment`: The default execution environment for jobs run using this project. (id, default=``) * `signature_validation_credential`: An optional credential used for validating files in the project against unexpected changes. (id, default=``) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Project: Make a DELETE request to this resource to delete this project.
     *
     * @tags api
     * @name ApiProjectsUpdate
     * @summary # Retrieve a Project:
     * @request PUT:/api/{version}/projects/{id}/
     * @secure
     */
    apiProjectsUpdate: (id: string, version: string, data: Project, params: RequestParams = {}) =>
      this.request<Project, any>({
        path: `/api/${version}/projects/${id}/`,
        method: 'PUT',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single project record containing the following fields: * `id`: Database ID for this project. (integer) * `type`: Data type for this project. (choice) * `url`: URL for this project. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this project was created. (datetime) * `modified`: Timestamp when this project was last modified. (datetime) * `name`: Name of this project. (string) * `description`: Optional description of this project. (string) * `local_path`: Local path (relative to PROJECTS_ROOT) containing playbooks and related files for this project. (string) * `scm_type`: Specifies the source control system used to store the project. (choice) - `""`: Manual - `git`: Git - `svn`: Subversion - `insights`: Red Hat Insights - `archive`: Remote Archive * `scm_url`: The location where the project is stored. (string) * `scm_branch`: Specific branch, tag or commit to checkout. (string) * `scm_refspec`: For git projects, an additional refspec to fetch. (string) * `scm_clean`: Discard any local changes before syncing the project. (boolean) * `scm_track_submodules`: Track submodules latest commits on defined branch. (boolean) * `scm_delete_on_update`: Delete the project before syncing. (boolean) * `credential`:  (id) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `scm_revision`: The last revision fetched by a project update (string) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `ok`: OK - `missing`: Missing * `organization`: The organization used to determine access to this template. (id) * `scm_update_on_launch`: Update the project when a job is launched that uses the project. (boolean) * `scm_update_cache_timeout`: The number of seconds after the last project update ran that a new project update will be launched as a job dependency. (integer) * `allow_override`: Allow changing the SCM branch or revision in a job template that uses this project. (boolean) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `default_environment`: The default execution environment for jobs run using this project. (id) * `signature_validation_credential`: An optional credential used for validating files in the project against unexpected changes. (id) * `last_update_failed`:  (boolean) * `last_updated`:  (datetime) # Update a Project: Make a PUT or PATCH request to this resource to update this project.  The following fields may be modified: * `name`: Name of this project. (string, required) * `description`: Optional description of this project. (string, default=`""`) * `local_path`: Local path (relative to PROJECTS_ROOT) containing playbooks and related files for this project. (string, default=`""`) * `scm_type`: Specifies the source control system used to store the project. (choice) - `""`: Manual (default) - `git`: Git - `svn`: Subversion - `insights`: Red Hat Insights - `archive`: Remote Archive * `scm_url`: The location where the project is stored. (string, default=`""`) * `scm_branch`: Specific branch, tag or commit to checkout. (string, default=`""`) * `scm_refspec`: For git projects, an additional refspec to fetch. (string, default=`""`) * `scm_clean`: Discard any local changes before syncing the project. (boolean, default=`False`) * `scm_track_submodules`: Track submodules latest commits on defined branch. (boolean, default=`False`) * `scm_delete_on_update`: Delete the project before syncing. (boolean, default=`False`) * `credential`:  (id, default=``) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer, default=`0`) * `organization`: The organization used to determine access to this template. (id, default=``) * `scm_update_on_launch`: Update the project when a job is launched that uses the project. (boolean, default=`False`) * `scm_update_cache_timeout`: The number of seconds after the last project update ran that a new project update will be launched as a job dependency. (integer, default=`0`) * `allow_override`: Allow changing the SCM branch or revision in a job template that uses this project. (boolean, default=`False`) * `default_environment`: The default execution environment for jobs run using this project. (id, default=``) * `signature_validation_credential`: An optional credential used for validating files in the project against unexpected changes. (id, default=``) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Project: Make a DELETE request to this resource to delete this project.
     *
     * @tags api
     * @name ApiProjectsPartialUpdate
     * @summary # Retrieve a Project:
     * @request PATCH:/api/{version}/projects/{id}/
     * @secure
     */
    apiProjectsPartialUpdate: (
      id: string,
      version: string,
      data: Project,
      params: RequestParams = {}
    ) =>
      this.request<Project, any>({
        path: `/api/${version}/projects/${id}/`,
        method: 'PATCH',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single project record containing the following fields: * `id`: Database ID for this project. (integer) * `type`: Data type for this project. (choice) * `url`: URL for this project. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this project was created. (datetime) * `modified`: Timestamp when this project was last modified. (datetime) * `name`: Name of this project. (string) * `description`: Optional description of this project. (string) * `local_path`: Local path (relative to PROJECTS_ROOT) containing playbooks and related files for this project. (string) * `scm_type`: Specifies the source control system used to store the project. (choice) - `""`: Manual - `git`: Git - `svn`: Subversion - `insights`: Red Hat Insights - `archive`: Remote Archive * `scm_url`: The location where the project is stored. (string) * `scm_branch`: Specific branch, tag or commit to checkout. (string) * `scm_refspec`: For git projects, an additional refspec to fetch. (string) * `scm_clean`: Discard any local changes before syncing the project. (boolean) * `scm_track_submodules`: Track submodules latest commits on defined branch. (boolean) * `scm_delete_on_update`: Delete the project before syncing. (boolean) * `credential`:  (id) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `scm_revision`: The last revision fetched by a project update (string) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `ok`: OK - `missing`: Missing * `organization`: The organization used to determine access to this template. (id) * `scm_update_on_launch`: Update the project when a job is launched that uses the project. (boolean) * `scm_update_cache_timeout`: The number of seconds after the last project update ran that a new project update will be launched as a job dependency. (integer) * `allow_override`: Allow changing the SCM branch or revision in a job template that uses this project. (boolean) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `default_environment`: The default execution environment for jobs run using this project. (id) * `signature_validation_credential`: An optional credential used for validating files in the project against unexpected changes. (id) * `last_update_failed`:  (boolean) * `last_updated`:  (datetime) # Update a Project: Make a PUT or PATCH request to this resource to update this project.  The following fields may be modified: * `name`: Name of this project. (string, required) * `description`: Optional description of this project. (string, default=`""`) * `local_path`: Local path (relative to PROJECTS_ROOT) containing playbooks and related files for this project. (string, default=`""`) * `scm_type`: Specifies the source control system used to store the project. (choice) - `""`: Manual (default) - `git`: Git - `svn`: Subversion - `insights`: Red Hat Insights - `archive`: Remote Archive * `scm_url`: The location where the project is stored. (string, default=`""`) * `scm_branch`: Specific branch, tag or commit to checkout. (string, default=`""`) * `scm_refspec`: For git projects, an additional refspec to fetch. (string, default=`""`) * `scm_clean`: Discard any local changes before syncing the project. (boolean, default=`False`) * `scm_track_submodules`: Track submodules latest commits on defined branch. (boolean, default=`False`) * `scm_delete_on_update`: Delete the project before syncing. (boolean, default=`False`) * `credential`:  (id, default=``) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer, default=`0`) * `organization`: The organization used to determine access to this template. (id, default=``) * `scm_update_on_launch`: Update the project when a job is launched that uses the project. (boolean, default=`False`) * `scm_update_cache_timeout`: The number of seconds after the last project update ran that a new project update will be launched as a job dependency. (integer, default=`0`) * `allow_override`: Allow changing the SCM branch or revision in a job template that uses this project. (boolean, default=`False`) * `default_environment`: The default execution environment for jobs run using this project. (id, default=``) * `signature_validation_credential`: An optional credential used for validating files in the project against unexpected changes. (id, default=``) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Project: Make a DELETE request to this resource to delete this project.
     *
     * @tags api
     * @name ApiProjectsDelete
     * @summary # Retrieve a Project:
     * @request DELETE:/api/{version}/projects/{id}/
     * @secure
     */
    apiProjectsDelete: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/projects/${id}/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of users. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of users found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more user records. ## Results Each user data structure includes the following fields: * `id`: Database ID for this user. (integer) * `type`: Data type for this user. (choice) * `url`: URL for this user. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this user was created. (datetime) * `modified`: Timestamp when this user was last modified. (datetime) * `username`: Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (string) * `first_name`:  (string) * `last_name`:  (string) * `email`:  (string) * `is_superuser`: Designates that this user has all permissions without explicitly assigning them. (boolean) * `is_system_auditor`:  (boolean) * `ldap_dn`:  (string) * `last_login`:  (datetime) * `external_account`: Set if the account is managed by an external service (field) ## Sorting To specify that users are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=username Prefix the field name with a dash `-` to sort in reverse: ?order_by=-username Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=username,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiProjectsAccessListList
     * @summary # List Users:
     * @request GET:/api/{version}/projects/{id}/access_list/
     * @secure
     */
    apiProjectsAccessListList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ResourceAccessListElement[]
        },
        any
      >({
        path: `/api/${version}/projects/${id}/access_list/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of activity streams associated with the selected project. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of activity streams found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more activity stream records. ## Results Each activity stream data structure includes the following fields: * `id`: Database ID for this activity stream. (integer) * `type`: Data type for this activity stream. (choice) * `url`: URL for this activity stream. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `timestamp`:  (datetime) * `operation`: The action taken with respect to the given object(s). (choice) - `create`: Entity Created - `update`: Entity Updated - `delete`: Entity Deleted - `associate`: Entity Associated with another Entity - `disassociate`: Entity was Disassociated with another Entity * `changes`: A summary of the new and changed values when an object is created, updated, or deleted (json) * `object1`: For create, update, and delete events this is the object type that was affected. For associate and disassociate events this is the object type associated or disassociated with object2. (string) * `object2`: Unpopulated for create, update, and delete events. For associate and disassociate events this is the object type that object1 is being associated with. (string) * `object_association`: When present, shows the field name of the role or relationship that changed. (field) * `action_node`: The cluster node the activity took place on. (string) * `object_type`: When present, shows the model on which the role or relationship was defined. (field) ## Sorting To specify that activity streams are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiProjectsActivityStreamList
     * @summary # List Activity Streams for a Project:
     * @request GET:/api/{version}/projects/{id}/activity_stream/
     * @secure
     */
    apiProjectsActivityStreamList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ActivityStream[]
        },
        any
      >({
        path: `/api/${version}/projects/${id}/activity_stream/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiProjectsCopyList
     * @request GET:/api/{version}/projects/{id}/copy/
     * @secure
     */
    apiProjectsCopyList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Copy[]
        },
        any
      >({
        path: `/api/${version}/projects/${id}/copy/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiProjectsCopyCreate
     * @request POST:/api/{version}/projects/{id}/copy/
     * @secure
     */
    apiProjectsCopyCreate: (id: string, version: string, data: Copy, params: RequestParams = {}) =>
      this.request<Copy, any>({
        path: `/api/${version}/projects/${id}/copy/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single project record containing the following fields: * `inventory_files`: Array of inventory files and directories available within this project, not comprehensive. (json)
     *
     * @tags api
     * @name ApiProjectsInventoriesRead
     * @summary # Retrieve a Project:
     * @request GET:/api/{version}/projects/{id}/inventories/
     * @secure
     */
    apiProjectsInventoriesRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<ProjectInventories, any>({
        path: `/api/${version}/projects/${id}/inventories/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected project. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiProjectsNotificationTemplatesErrorList
     * @summary # List Notification Templates for a Project:
     * @request GET:/api/{version}/projects/{id}/notification_templates_error/
     * @secure
     */
    apiProjectsNotificationTemplatesErrorList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: NotificationTemplate[]
        },
        any
      >({
        path: `/api/${version}/projects/${id}/notification_templates_error/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected project. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiProjectsNotificationTemplatesErrorCreate
     * @summary # List Notification Templates for a Project:
     * @request POST:/api/{version}/projects/{id}/notification_templates_error/
     * @secure
     */
    apiProjectsNotificationTemplatesErrorCreate: (
      id: string,
      version: string,
      data: NotificationTemplate,
      params: RequestParams = {}
    ) =>
      this.request<NotificationTemplate, any>({
        path: `/api/${version}/projects/${id}/notification_templates_error/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected project. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiProjectsNotificationTemplatesStartedList
     * @summary # List Notification Templates for a Project:
     * @request GET:/api/{version}/projects/{id}/notification_templates_started/
     * @secure
     */
    apiProjectsNotificationTemplatesStartedList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: NotificationTemplate[]
        },
        any
      >({
        path: `/api/${version}/projects/${id}/notification_templates_started/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected project. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiProjectsNotificationTemplatesStartedCreate
     * @summary # List Notification Templates for a Project:
     * @request POST:/api/{version}/projects/{id}/notification_templates_started/
     * @secure
     */
    apiProjectsNotificationTemplatesStartedCreate: (
      id: string,
      version: string,
      data: NotificationTemplate,
      params: RequestParams = {}
    ) =>
      this.request<NotificationTemplate, any>({
        path: `/api/${version}/projects/${id}/notification_templates_started/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected project. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiProjectsNotificationTemplatesSuccessList
     * @summary # List Notification Templates for a Project:
     * @request GET:/api/{version}/projects/{id}/notification_templates_success/
     * @secure
     */
    apiProjectsNotificationTemplatesSuccessList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: NotificationTemplate[]
        },
        any
      >({
        path: `/api/${version}/projects/${id}/notification_templates_success/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected project. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiProjectsNotificationTemplatesSuccessCreate
     * @summary # List Notification Templates for a Project:
     * @request POST:/api/{version}/projects/{id}/notification_templates_success/
     * @secure
     */
    apiProjectsNotificationTemplatesSuccessCreate: (
      id: string,
      version: string,
      data: NotificationTemplate,
      params: RequestParams = {}
    ) =>
      this.request<NotificationTemplate, any>({
        path: `/api/${version}/projects/${id}/notification_templates_success/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of roles associated with the selected project. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of roles found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more role records. ## Results Each role data structure includes the following fields: * `id`: Database ID for this role. (integer) * `type`: Data type for this role. (choice) * `url`: URL for this role. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `name`: Name of this role. (field) * `description`: Optional description of this role. (field) ## Sorting To specify that roles are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiProjectsObjectRolesList
     * @summary # List Roles for a Project:
     * @request GET:/api/{version}/projects/{id}/object_roles/
     * @secure
     */
    apiProjectsObjectRolesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Role[]
        },
        any
      >({
        path: `/api/${version}/projects/${id}/object_roles/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a list of playbooks available for a project.
     *
     * @tags api
     * @name ApiProjectsPlaybooksRead
     * @summary # Retrieve Project Playbooks:
     * @request GET:/api/{version}/projects/{id}/playbooks/
     * @secure
     */
    apiProjectsPlaybooksRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<ProjectPlaybooks, any>({
        path: `/api/${version}/projects/${id}/playbooks/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of project updates associated with the selected project. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of project updates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more project update records. ## Results Each project update data structure includes the following fields: * `id`: Database ID for this project update. (integer) * `type`: Data type for this project update. (choice) * `url`: URL for this project update. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this project update was created. (datetime) * `modified`: Timestamp when this project update was last modified. (datetime) * `name`: Name of this project update. (string) * `description`: Optional description of this project update. (string) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `execution_node`: The node the job executed on. (string) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `local_path`: Local path (relative to PROJECTS_ROOT) containing playbooks and related files for this project. (string) * `scm_type`: Specifies the source control system used to store the project. (choice) - `""`: Manual - `git`: Git - `svn`: Subversion - `insights`: Red Hat Insights - `archive`: Remote Archive * `scm_url`: The location where the project is stored. (string) * `scm_branch`: Specific branch, tag or commit to checkout. (string) * `scm_refspec`: For git projects, an additional refspec to fetch. (string) * `scm_clean`: Discard any local changes before syncing the project. (boolean) * `scm_track_submodules`: Track submodules latest commits on defined branch. (boolean) * `scm_delete_on_update`: Delete the project before syncing. (boolean) * `credential`:  (id) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `scm_revision`: The SCM Revision discovered by this update for the given project and branch. (string) * `project`:  (id) * `job_type`:  (choice) - `run`: Run - `check`: Check * `job_tags`: Parts of the project update playbook that will be run. (string) ## Sorting To specify that project updates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiProjectsProjectUpdatesList
     * @summary # List Project Updates for a Project:
     * @request GET:/api/{version}/projects/{id}/project_updates/
     * @secure
     */
    apiProjectsProjectUpdatesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ProjectUpdateList[]
        },
        any
      >({
        path: `/api/${version}/projects/${id}/project_updates/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of schedules associated with the selected project. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of schedules found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more schedule records. ## Results Each schedule data structure includes the following fields: * `rrule`: A value representing the schedules iCal recurrence rule. (string) * `id`: Database ID for this schedule. (integer) * `type`: Data type for this schedule. (choice) * `url`: URL for this schedule. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this schedule was created. (datetime) * `modified`: Timestamp when this schedule was last modified. (datetime) * `name`: Name of this schedule. (string) * `description`: Optional description of this schedule. (string) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `unified_job_template`:  (id) * `enabled`: Enables processing of this schedule. (boolean) * `dtstart`: The first occurrence of the schedule occurs on or after this time. (datetime) * `dtend`: The last occurrence of the schedule occurs before this time, aftewards the schedule expires. (datetime) * `next_run`: The next time that the scheduled action will run. (datetime) * `timezone`: The timezone this schedule runs in. This field is extracted from the RRULE. If the timezone in the RRULE is a link to another timezone, the link will be reflected in this field. (field) * `until`: The date this schedule will end. This field is computed from the RRULE. If the schedule does not end an emptry string will be returned (field) ## Sorting To specify that schedules are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiProjectsSchedulesList
     * @summary # List Schedules for a Project:
     * @request GET:/api/{version}/projects/{id}/schedules/
     * @secure
     */
    apiProjectsSchedulesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Schedule[]
        },
        any
      >({
        path: `/api/${version}/projects/${id}/schedules/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of schedules associated with the selected project. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of schedules found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more schedule records. ## Results Each schedule data structure includes the following fields: * `rrule`: A value representing the schedules iCal recurrence rule. (string) * `id`: Database ID for this schedule. (integer) * `type`: Data type for this schedule. (choice) * `url`: URL for this schedule. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this schedule was created. (datetime) * `modified`: Timestamp when this schedule was last modified. (datetime) * `name`: Name of this schedule. (string) * `description`: Optional description of this schedule. (string) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `unified_job_template`:  (id) * `enabled`: Enables processing of this schedule. (boolean) * `dtstart`: The first occurrence of the schedule occurs on or after this time. (datetime) * `dtend`: The last occurrence of the schedule occurs before this time, aftewards the schedule expires. (datetime) * `next_run`: The next time that the scheduled action will run. (datetime) * `timezone`: The timezone this schedule runs in. This field is extracted from the RRULE. If the timezone in the RRULE is a link to another timezone, the link will be reflected in this field. (field) * `until`: The date this schedule will end. This field is computed from the RRULE. If the schedule does not end an emptry string will be returned (field) ## Sorting To specify that schedules are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiProjectsSchedulesCreate
     * @summary # List Schedules for a Project:
     * @request POST:/api/{version}/projects/{id}/schedules/
     * @secure
     */
    apiProjectsSchedulesCreate: (
      id: string,
      version: string,
      data: Schedule,
      params: RequestParams = {}
    ) =>
      this.request<Schedule, any>({
        path: `/api/${version}/projects/${id}/schedules/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of inventory sources associated with the selected project. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of inventory sources found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more inventory source records. ## Results Each inventory source data structure includes the following fields: * `id`: Database ID for this inventory source. (integer) * `type`: Data type for this inventory source. (choice) * `url`: URL for this inventory source. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this inventory source was created. (datetime) * `modified`: Timestamp when this inventory source was last modified. (datetime) * `name`: Name of this inventory source. (string) * `description`: Optional description of this inventory source. (string) * `source`:  (choice) - `file`: File, Directory or Script - `scm`: Sourced from a Project - `ec2`: Amazon EC2 - `gce`: Google Compute Engine - `azure_rm`: Microsoft Azure Resource Manager - `vmware`: VMware vCenter - `satellite6`: Red Hat Satellite 6 - `openstack`: OpenStack - `rhv`: Red Hat Virtualization - `controller`: Red Hat Ansible Automation Platform - `insights`: Red Hat Insights * `source_path`:  (string) * `source_vars`: Inventory source variables in YAML or JSON format. (string) * `credential`: Cloud credential to use for inventory updates. (integer) * `enabled_var`: Retrieve the enabled state from the given dict of host variables. The enabled variable may be specified as &quot;foo.bar&quot;, in which case the lookup will traverse into nested dicts, equivalent to: from_dict.get(&quot;foo&quot;, {}).get(&quot;bar&quot;, default) (string) * `enabled_value`: Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var=&quot;status.power_state&quot;and enabled_value=&quot;powered_on&quot; with host variables:{   &quot;status&quot;: {     &quot;power_state&quot;: &quot;powered_on&quot;,     &quot;created&quot;: &quot;2020-08-04T18:13:04+00:00&quot;,     &quot;healthy&quot;: true    },    &quot;name&quot;: &quot;foobar&quot;,    &quot;ip_address&quot;: &quot;192.168.2.1&quot;}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled (string) * `host_filter`: Regex where only matching hosts will be imported. (string) * `overwrite`: Overwrite local groups and hosts from remote inventory source. (boolean) * `overwrite_vars`: Overwrite local variables from remote inventory source. (boolean) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `verbosity`:  (choice) - `0`: 0 (WARNING) - `1`: 1 (INFO) - `2`: 2 (DEBUG) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `none`: No External Source * `execution_environment`: The container image to be used for execution. (id) * `inventory`:  (id) * `update_on_launch`:  (boolean) * `update_cache_timeout`:  (integer) * `source_project`: Project containing inventory file used as source. (id) * `last_update_failed`:  (boolean) * `last_updated`:  (datetime) ## Sorting To specify that inventory sources are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiProjectsScmInventorySourcesList
     * @summary # List Inventory Sources for a Project:
     * @request GET:/api/{version}/projects/{id}/scm_inventory_sources/
     * @secure
     */
    apiProjectsScmInventorySourcesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: InventorySource[]
        },
        any
      >({
        path: `/api/${version}/projects/${id}/scm_inventory_sources/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of teams. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of teams found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more team records. ## Results Each team data structure includes the following fields: * `id`: Database ID for this team. (integer) * `type`: Data type for this team. (choice) * `url`: URL for this team. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this team was created. (datetime) * `modified`: Timestamp when this team was last modified. (datetime) * `name`: Name of this team. (string) * `description`: Optional description of this team. (string) * `organization`:  (id) ## Sorting To specify that teams are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiProjectsTeamsList
     * @summary # List Teams:
     * @request GET:/api/{version}/projects/{id}/teams/
     * @secure
     */
    apiProjectsTeamsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Team[]
        },
        any
      >({
        path: `/api/${version}/projects/${id}/teams/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to determine if the project can be updated from its SCM source.  The response will include the following field: * `can_update`: Flag indicating if this project can be updated (boolean, read-only) Make a POST request to this resource to update the project.  If the project cannot be updated, a 405 status code will be returned.
     *
     * @tags api
     * @name ApiProjectsUpdateRead
     * @summary # Update Project
     * @request GET:/api/{version}/projects/{id}/update/
     * @secure
     */
    apiProjectsUpdateRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<ProjectUpdateView, any>({
        path: `/api/${version}/projects/${id}/update/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to determine if the project can be updated from its SCM source.  The response will include the following field: * `can_update`: Flag indicating if this project can be updated (boolean, read-only) Make a POST request to this resource to update the project.  If the project cannot be updated, a 405 status code will be returned.
     *
     * @tags api
     * @name ApiProjectsUpdateCreate
     * @summary # Update Project
     * @request POST:/api/{version}/projects/{id}/update/
     * @secure
     */
    apiProjectsUpdateCreate: (
      id: string,
      version: string,
      data: ProjectUpdateView,
      params: RequestParams = {}
    ) =>
      this.request<ProjectUpdateView, any>({
        path: `/api/${version}/projects/${id}/update/`,
        method: 'POST',
        body: data,
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of roles. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of roles found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more role records. ## Results Each role data structure includes the following fields: * `id`: Database ID for this role. (integer) * `type`: Data type for this role. (choice) * `url`: URL for this role. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `name`: Name of this role. (field) * `description`: Optional description of this role. (field) ## Sorting To specify that roles are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiRolesList
     * @summary # List Roles:
     * @request GET:/api/{version}/roles/
     * @secure
     */
    apiRolesList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Role[]
        },
        any
      >({
        path: `/api/${version}/roles/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single role record containing the following fields: * `id`: Database ID for this role. (integer) * `type`: Data type for this role. (choice) * `url`: URL for this role. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `name`: Name of this role. (field) * `description`: Optional description of this role. (field)
     *
     * @tags api
     * @name ApiRolesRead
     * @summary # Retrieve a Role:
     * @request GET:/api/{version}/roles/{id}/
     * @secure
     */
    apiRolesRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<Role, any>({
        path: `/api/${version}/roles/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of roles associated with the selected role. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of roles found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more role records. ## Results Each role data structure includes the following fields: * `id`: Database ID for this role. (integer) * `type`: Data type for this role. (choice) * `url`: URL for this role. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `name`: Name of this role. (field) * `description`: Optional description of this role. (field) ## Sorting To specify that roles are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiRolesChildrenList
     * @summary # List Roles for a Role:
     * @request GET:/api/{version}/roles/{id}/children/
     * @secure
     */
    apiRolesChildrenList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Role[]
        },
        any
      >({
        path: `/api/${version}/roles/${id}/children/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of roles associated with the selected role. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of roles found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more role records. ## Results Each role data structure includes the following fields: * `id`: Database ID for this role. (integer) * `type`: Data type for this role. (choice) * `url`: URL for this role. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `name`: Name of this role. (field) * `description`: Optional description of this role. (field) ## Sorting To specify that roles are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiRolesParentsList
     * @summary # List Roles for a Role:
     * @request GET:/api/{version}/roles/{id}/parents/
     * @secure
     */
    apiRolesParentsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Role[]
        },
        any
      >({
        path: `/api/${version}/roles/${id}/parents/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of teams associated with the selected role. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of teams found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more team records. ## Results Each team data structure includes the following fields: * `id`: Database ID for this team. (integer) * `type`: Data type for this team. (choice) * `url`: URL for this team. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this team was created. (datetime) * `modified`: Timestamp when this team was last modified. (datetime) * `name`: Name of this team. (string) * `description`: Optional description of this team. (string) * `organization`:  (id) ## Sorting To specify that teams are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiRolesTeamsList
     * @summary # List Teams for a Role:
     * @request GET:/api/{version}/roles/{id}/teams/
     * @secure
     */
    apiRolesTeamsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Team[]
        },
        any
      >({
        path: `/api/${version}/roles/${id}/teams/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of teams associated with the selected role. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of teams found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more team records. ## Results Each team data structure includes the following fields: * `id`: Database ID for this team. (integer) * `type`: Data type for this team. (choice) * `url`: URL for this team. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this team was created. (datetime) * `modified`: Timestamp when this team was last modified. (datetime) * `name`: Name of this team. (string) * `description`: Optional description of this team. (string) * `organization`:  (id) ## Sorting To specify that teams are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiRolesTeamsCreate
     * @summary # List Teams for a Role:
     * @request POST:/api/{version}/roles/{id}/teams/
     * @secure
     */
    apiRolesTeamsCreate: (id: string, version: string, data: Team, params: RequestParams = {}) =>
      this.request<Team, any>({
        path: `/api/${version}/roles/${id}/teams/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of users associated with the selected role. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of users found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more user records. ## Results Each user data structure includes the following fields: * `id`: Database ID for this user. (integer) * `type`: Data type for this user. (choice) * `url`: URL for this user. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this user was created. (datetime) * `modified`: Timestamp when this user was last modified. (datetime) * `username`: Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (string) * `first_name`:  (string) * `last_name`:  (string) * `email`:  (string) * `is_superuser`: Designates that this user has all permissions without explicitly assigning them. (boolean) * `is_system_auditor`:  (boolean) * `ldap_dn`:  (string) * `last_login`:  (datetime) * `external_account`: Set if the account is managed by an external service (field) ## Sorting To specify that users are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=username Prefix the field name with a dash `-` to sort in reverse: ?order_by=-username Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=username,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiRolesUsersList
     * @summary # List Users for a Role:
     * @request GET:/api/{version}/roles/{id}/users/
     * @secure
     */
    apiRolesUsersList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: User[]
        },
        any
      >({
        path: `/api/${version}/roles/${id}/users/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of users associated with the selected role. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of users found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more user records. ## Results Each user data structure includes the following fields: * `id`: Database ID for this user. (integer) * `type`: Data type for this user. (choice) * `url`: URL for this user. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this user was created. (datetime) * `modified`: Timestamp when this user was last modified. (datetime) * `username`: Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (string) * `first_name`:  (string) * `last_name`:  (string) * `email`:  (string) * `is_superuser`: Designates that this user has all permissions without explicitly assigning them. (boolean) * `is_system_auditor`:  (boolean) * `ldap_dn`:  (string) * `last_login`:  (datetime) * `external_account`: Set if the account is managed by an external service (field) ## Sorting To specify that users are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=username Prefix the field name with a dash `-` to sort in reverse: ?order_by=-username Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=username,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiRolesUsersCreate
     * @summary # List Users for a Role:
     * @request POST:/api/{version}/roles/{id}/users/
     * @secure
     */
    apiRolesUsersCreate: (id: string, version: string, data: User, params: RequestParams = {}) =>
      this.request<User, any>({
        path: `/api/${version}/roles/${id}/users/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of schedules. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of schedules found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more schedule records. ## Results Each schedule data structure includes the following fields: * `rrule`: A value representing the schedules iCal recurrence rule. (string) * `id`: Database ID for this schedule. (integer) * `type`: Data type for this schedule. (choice) * `url`: URL for this schedule. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this schedule was created. (datetime) * `modified`: Timestamp when this schedule was last modified. (datetime) * `name`: Name of this schedule. (string) * `description`: Optional description of this schedule. (string) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `unified_job_template`:  (id) * `enabled`: Enables processing of this schedule. (boolean) * `dtstart`: The first occurrence of the schedule occurs on or after this time. (datetime) * `dtend`: The last occurrence of the schedule occurs before this time, aftewards the schedule expires. (datetime) * `next_run`: The next time that the scheduled action will run. (datetime) * `timezone`: The timezone this schedule runs in. This field is extracted from the RRULE. If the timezone in the RRULE is a link to another timezone, the link will be reflected in this field. (field) * `until`: The date this schedule will end. This field is computed from the RRULE. If the schedule does not end an emptry string will be returned (field) ## Sorting To specify that schedules are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiSchedulesList
     * @summary # List Schedules:
     * @request GET:/api/{version}/schedules/
     * @secure
     */
    apiSchedulesList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Schedule[]
        },
        any
      >({
        path: `/api/${version}/schedules/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of schedules. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of schedules found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more schedule records. ## Results Each schedule data structure includes the following fields: * `rrule`: A value representing the schedules iCal recurrence rule. (string) * `id`: Database ID for this schedule. (integer) * `type`: Data type for this schedule. (choice) * `url`: URL for this schedule. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this schedule was created. (datetime) * `modified`: Timestamp when this schedule was last modified. (datetime) * `name`: Name of this schedule. (string) * `description`: Optional description of this schedule. (string) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `unified_job_template`:  (id) * `enabled`: Enables processing of this schedule. (boolean) * `dtstart`: The first occurrence of the schedule occurs on or after this time. (datetime) * `dtend`: The last occurrence of the schedule occurs before this time, aftewards the schedule expires. (datetime) * `next_run`: The next time that the scheduled action will run. (datetime) * `timezone`: The timezone this schedule runs in. This field is extracted from the RRULE. If the timezone in the RRULE is a link to another timezone, the link will be reflected in this field. (field) * `until`: The date this schedule will end. This field is computed from the RRULE. If the schedule does not end an emptry string will be returned (field) ## Sorting To specify that schedules are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiSchedulesCreate
     * @summary # List Schedules:
     * @request POST:/api/{version}/schedules/
     * @secure
     */
    apiSchedulesCreate: (version: string, data: Schedule, params: RequestParams = {}) =>
      this.request<Schedule, any>({
        path: `/api/${version}/schedules/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiSchedulesPreviewCreate
     * @request POST:/api/{version}/schedules/preview/
     * @secure
     */
    apiSchedulesPreviewCreate: (
      version: string,
      data: SchedulePreview,
      params: RequestParams = {}
    ) =>
      this.request<SchedulePreview, any>({
        path: `/api/${version}/schedules/preview/`,
        method: 'POST',
        body: data,
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiSchedulesZoneinfoList
     * @request GET:/api/{version}/schedules/zoneinfo/
     * @secure
     */
    apiSchedulesZoneinfoList: (version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/schedules/zoneinfo/`,
        method: 'GET',
        secure: true,
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single schedule record containing the following fields: * `rrule`: A value representing the schedules iCal recurrence rule. (string) * `id`: Database ID for this schedule. (integer) * `type`: Data type for this schedule. (choice) * `url`: URL for this schedule. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this schedule was created. (datetime) * `modified`: Timestamp when this schedule was last modified. (datetime) * `name`: Name of this schedule. (string) * `description`: Optional description of this schedule. (string) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `unified_job_template`:  (id) * `enabled`: Enables processing of this schedule. (boolean) * `dtstart`: The first occurrence of the schedule occurs on or after this time. (datetime) * `dtend`: The last occurrence of the schedule occurs before this time, aftewards the schedule expires. (datetime) * `next_run`: The next time that the scheduled action will run. (datetime) * `timezone`: The timezone this schedule runs in. This field is extracted from the RRULE. If the timezone in the RRULE is a link to another timezone, the link will be reflected in this field. (field) * `until`: The date this schedule will end. This field is computed from the RRULE. If the schedule does not end an emptry string will be returned (field) # Update a Schedule: Make a PUT or PATCH request to this resource to update this schedule.  The following fields may be modified: * `rrule`: A value representing the schedules iCal recurrence rule. (string, required) * `name`: Name of this schedule. (string, required) * `description`: Optional description of this schedule. (string, default=`""`) * `extra_data`:  (json, default=`{}`) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id, default=``) * `scm_branch`:  (string, default=`""`) * `job_type`:  (choice) - `None`: --------- (default) - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string, default=`""`) * `skip_tags`:  (string, default=`""`) * `limit`:  (string, default=`""`) * `diff_mode`:  (boolean, default=`None`) * `verbosity`:  (choice) - `None`: --------- (default) - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id, default=``) * `forks`:  (integer, default=`None`) * `job_slice_count`:  (integer, default=`None`) * `timeout`:  (integer, default=`None`) * `unified_job_template`:  (id, required) * `enabled`: Enables processing of this schedule. (boolean, default=`True`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Schedule: Make a DELETE request to this resource to delete this schedule.
     *
     * @tags api
     * @name ApiSchedulesRead
     * @summary # Retrieve a Schedule:
     * @request GET:/api/{version}/schedules/{id}/
     * @secure
     */
    apiSchedulesRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<Schedule, any>({
        path: `/api/${version}/schedules/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single schedule record containing the following fields: * `rrule`: A value representing the schedules iCal recurrence rule. (string) * `id`: Database ID for this schedule. (integer) * `type`: Data type for this schedule. (choice) * `url`: URL for this schedule. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this schedule was created. (datetime) * `modified`: Timestamp when this schedule was last modified. (datetime) * `name`: Name of this schedule. (string) * `description`: Optional description of this schedule. (string) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `unified_job_template`:  (id) * `enabled`: Enables processing of this schedule. (boolean) * `dtstart`: The first occurrence of the schedule occurs on or after this time. (datetime) * `dtend`: The last occurrence of the schedule occurs before this time, aftewards the schedule expires. (datetime) * `next_run`: The next time that the scheduled action will run. (datetime) * `timezone`: The timezone this schedule runs in. This field is extracted from the RRULE. If the timezone in the RRULE is a link to another timezone, the link will be reflected in this field. (field) * `until`: The date this schedule will end. This field is computed from the RRULE. If the schedule does not end an emptry string will be returned (field) # Update a Schedule: Make a PUT or PATCH request to this resource to update this schedule.  The following fields may be modified: * `rrule`: A value representing the schedules iCal recurrence rule. (string, required) * `name`: Name of this schedule. (string, required) * `description`: Optional description of this schedule. (string, default=`""`) * `extra_data`:  (json, default=`{}`) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id, default=``) * `scm_branch`:  (string, default=`""`) * `job_type`:  (choice) - `None`: --------- (default) - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string, default=`""`) * `skip_tags`:  (string, default=`""`) * `limit`:  (string, default=`""`) * `diff_mode`:  (boolean, default=`None`) * `verbosity`:  (choice) - `None`: --------- (default) - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id, default=``) * `forks`:  (integer, default=`None`) * `job_slice_count`:  (integer, default=`None`) * `timeout`:  (integer, default=`None`) * `unified_job_template`:  (id, required) * `enabled`: Enables processing of this schedule. (boolean, default=`True`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Schedule: Make a DELETE request to this resource to delete this schedule.
     *
     * @tags api
     * @name ApiSchedulesUpdate
     * @summary # Retrieve a Schedule:
     * @request PUT:/api/{version}/schedules/{id}/
     * @secure
     */
    apiSchedulesUpdate: (id: string, version: string, data: Schedule, params: RequestParams = {}) =>
      this.request<Schedule, any>({
        path: `/api/${version}/schedules/${id}/`,
        method: 'PUT',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single schedule record containing the following fields: * `rrule`: A value representing the schedules iCal recurrence rule. (string) * `id`: Database ID for this schedule. (integer) * `type`: Data type for this schedule. (choice) * `url`: URL for this schedule. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this schedule was created. (datetime) * `modified`: Timestamp when this schedule was last modified. (datetime) * `name`: Name of this schedule. (string) * `description`: Optional description of this schedule. (string) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `unified_job_template`:  (id) * `enabled`: Enables processing of this schedule. (boolean) * `dtstart`: The first occurrence of the schedule occurs on or after this time. (datetime) * `dtend`: The last occurrence of the schedule occurs before this time, aftewards the schedule expires. (datetime) * `next_run`: The next time that the scheduled action will run. (datetime) * `timezone`: The timezone this schedule runs in. This field is extracted from the RRULE. If the timezone in the RRULE is a link to another timezone, the link will be reflected in this field. (field) * `until`: The date this schedule will end. This field is computed from the RRULE. If the schedule does not end an emptry string will be returned (field) # Update a Schedule: Make a PUT or PATCH request to this resource to update this schedule.  The following fields may be modified: * `rrule`: A value representing the schedules iCal recurrence rule. (string, required) * `name`: Name of this schedule. (string, required) * `description`: Optional description of this schedule. (string, default=`""`) * `extra_data`:  (json, default=`{}`) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id, default=``) * `scm_branch`:  (string, default=`""`) * `job_type`:  (choice) - `None`: --------- (default) - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string, default=`""`) * `skip_tags`:  (string, default=`""`) * `limit`:  (string, default=`""`) * `diff_mode`:  (boolean, default=`None`) * `verbosity`:  (choice) - `None`: --------- (default) - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id, default=``) * `forks`:  (integer, default=`None`) * `job_slice_count`:  (integer, default=`None`) * `timeout`:  (integer, default=`None`) * `unified_job_template`:  (id, required) * `enabled`: Enables processing of this schedule. (boolean, default=`True`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Schedule: Make a DELETE request to this resource to delete this schedule.
     *
     * @tags api
     * @name ApiSchedulesPartialUpdate
     * @summary # Retrieve a Schedule:
     * @request PATCH:/api/{version}/schedules/{id}/
     * @secure
     */
    apiSchedulesPartialUpdate: (
      id: string,
      version: string,
      data: Schedule,
      params: RequestParams = {}
    ) =>
      this.request<Schedule, any>({
        path: `/api/${version}/schedules/${id}/`,
        method: 'PATCH',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single schedule record containing the following fields: * `rrule`: A value representing the schedules iCal recurrence rule. (string) * `id`: Database ID for this schedule. (integer) * `type`: Data type for this schedule. (choice) * `url`: URL for this schedule. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this schedule was created. (datetime) * `modified`: Timestamp when this schedule was last modified. (datetime) * `name`: Name of this schedule. (string) * `description`: Optional description of this schedule. (string) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `unified_job_template`:  (id) * `enabled`: Enables processing of this schedule. (boolean) * `dtstart`: The first occurrence of the schedule occurs on or after this time. (datetime) * `dtend`: The last occurrence of the schedule occurs before this time, aftewards the schedule expires. (datetime) * `next_run`: The next time that the scheduled action will run. (datetime) * `timezone`: The timezone this schedule runs in. This field is extracted from the RRULE. If the timezone in the RRULE is a link to another timezone, the link will be reflected in this field. (field) * `until`: The date this schedule will end. This field is computed from the RRULE. If the schedule does not end an emptry string will be returned (field) # Update a Schedule: Make a PUT or PATCH request to this resource to update this schedule.  The following fields may be modified: * `rrule`: A value representing the schedules iCal recurrence rule. (string, required) * `name`: Name of this schedule. (string, required) * `description`: Optional description of this schedule. (string, default=`""`) * `extra_data`:  (json, default=`{}`) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id, default=``) * `scm_branch`:  (string, default=`""`) * `job_type`:  (choice) - `None`: --------- (default) - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string, default=`""`) * `skip_tags`:  (string, default=`""`) * `limit`:  (string, default=`""`) * `diff_mode`:  (boolean, default=`None`) * `verbosity`:  (choice) - `None`: --------- (default) - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id, default=``) * `forks`:  (integer, default=`None`) * `job_slice_count`:  (integer, default=`None`) * `timeout`:  (integer, default=`None`) * `unified_job_template`:  (id, required) * `enabled`: Enables processing of this schedule. (boolean, default=`True`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Schedule: Make a DELETE request to this resource to delete this schedule.
     *
     * @tags api
     * @name ApiSchedulesDelete
     * @summary # Retrieve a Schedule:
     * @request DELETE:/api/{version}/schedules/{id}/
     * @secure
     */
    apiSchedulesDelete: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/schedules/${id}/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of credentials associated with the selected schedule. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of credentials found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more credential records. ## Results Each credential data structure includes the following fields: * `id`: Database ID for this credential. (integer) * `type`: Data type for this credential. (choice) * `url`: URL for this credential. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential was created. (datetime) * `modified`: Timestamp when this credential was last modified. (datetime) * `name`: Name of this credential. (string) * `description`: Optional description of this credential. (string) * `organization`:  (id) * `credential_type`: Specify the type of credential you want to create. Refer to the documentation for details on each type. (id) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `kind`:  (field) * `cloud`:  (field) * `kubernetes`:  (field) ## Sorting To specify that credentials are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiSchedulesCredentialsList
     * @summary # List Credentials for a Schedule:
     * @request GET:/api/{version}/schedules/{id}/credentials/
     * @secure
     */
    apiSchedulesCredentialsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Credential[]
        },
        any
      >({
        path: `/api/${version}/schedules/${id}/credentials/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of credentials associated with the selected schedule. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of credentials found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more credential records. ## Results Each credential data structure includes the following fields: * `id`: Database ID for this credential. (integer) * `type`: Data type for this credential. (choice) * `url`: URL for this credential. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential was created. (datetime) * `modified`: Timestamp when this credential was last modified. (datetime) * `name`: Name of this credential. (string) * `description`: Optional description of this credential. (string) * `organization`:  (id) * `credential_type`: Specify the type of credential you want to create. Refer to the documentation for details on each type. (id) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `kind`:  (field) * `cloud`:  (field) * `kubernetes`:  (field) ## Sorting To specify that credentials are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiSchedulesCredentialsCreate
     * @summary # List Credentials for a Schedule:
     * @request POST:/api/{version}/schedules/{id}/credentials/
     * @secure
     */
    apiSchedulesCredentialsCreate: (
      id: string,
      version: string,
      data: Credential,
      params: RequestParams = {}
    ) =>
      this.request<Credential, any>({
        path: `/api/${version}/schedules/${id}/credentials/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of instance groups associated with the selected schedule. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of instance groups found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more instance group records. ## Results Each instance group data structure includes the following fields: * `id`: Database ID for this instance group. (integer) * `type`: Data type for this instance group. (choice) * `url`: URL for this instance group. (string) * `related`: Data structure with URLs of related resources. (object) * `name`: Name of this instance group. (string) * `created`: Timestamp when this instance group was created. (datetime) * `modified`: Timestamp when this instance group was last modified. (datetime) * `capacity`:  (field) * `consumed_capacity`:  (field) * `percent_capacity_remaining`:  (field) * `jobs_running`: Count of jobs in the running or waiting state that are targeted for this instance group (integer) * `jobs_total`: Count of all jobs that target this instance group (integer) * `instances`:  (field) * `is_container_group`: Indicates whether instances in this group are containerized.Containerized groups have a designated Openshift or Kubernetes cluster. (boolean) * `credential`:  (id) * `policy_instance_percentage`: Minimum percentage of all instances that will be automatically assigned to this group when new instances come online. (integer) * `policy_instance_minimum`: Static minimum number of Instances that will be automatically assign to this group when new instances come online. (integer) * `policy_instance_list`: List of exact-match Instances that will be assigned to this group (json) * `pod_spec_override`:  (string) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) ## Sorting To specify that instance groups are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiSchedulesInstanceGroupsList
     * @summary # List Instance Groups for a Schedule:
     * @request GET:/api/{version}/schedules/{id}/instance_groups/
     * @secure
     */
    apiSchedulesInstanceGroupsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: InstanceGroup[]
        },
        any
      >({
        path: `/api/${version}/schedules/${id}/instance_groups/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of instance groups associated with the selected schedule. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of instance groups found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more instance group records. ## Results Each instance group data structure includes the following fields: * `id`: Database ID for this instance group. (integer) * `type`: Data type for this instance group. (choice) * `url`: URL for this instance group. (string) * `related`: Data structure with URLs of related resources. (object) * `name`: Name of this instance group. (string) * `created`: Timestamp when this instance group was created. (datetime) * `modified`: Timestamp when this instance group was last modified. (datetime) * `capacity`:  (field) * `consumed_capacity`:  (field) * `percent_capacity_remaining`:  (field) * `jobs_running`: Count of jobs in the running or waiting state that are targeted for this instance group (integer) * `jobs_total`: Count of all jobs that target this instance group (integer) * `instances`:  (field) * `is_container_group`: Indicates whether instances in this group are containerized.Containerized groups have a designated Openshift or Kubernetes cluster. (boolean) * `credential`:  (id) * `policy_instance_percentage`: Minimum percentage of all instances that will be automatically assigned to this group when new instances come online. (integer) * `policy_instance_minimum`: Static minimum number of Instances that will be automatically assign to this group when new instances come online. (integer) * `policy_instance_list`: List of exact-match Instances that will be assigned to this group (json) * `pod_spec_override`:  (string) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) ## Sorting To specify that instance groups are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiSchedulesInstanceGroupsCreate
     * @summary # List Instance Groups for a Schedule:
     * @request POST:/api/{version}/schedules/{id}/instance_groups/
     * @secure
     */
    apiSchedulesInstanceGroupsCreate: (
      id: string,
      version: string,
      data: InstanceGroup,
      params: RequestParams = {}
    ) =>
      this.request<InstanceGroup, any>({
        path: `/api/${version}/schedules/${id}/instance_groups/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of unified jobs associated with the selected schedule. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of unified jobs found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more unified job records. ## Results Each unified job data structure includes the following fields: * `id`: Database ID for this unified job. (integer) * `type`: Data type for this unified job. (choice) * `url`: URL for this unified job. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this unified job was created. (datetime) * `modified`: Timestamp when this unified job was last modified. (datetime) * `name`: Name of this unified job. (string) * `description`: Optional description of this unified job. (string) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `execution_node`: The node the job executed on. (string) * `controller_node`: The instance that managed the execution environment. (string) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) ## Sorting To specify that unified jobs are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiSchedulesJobsList
     * @summary # List Unified Jobs for a Schedule:
     * @request GET:/api/{version}/schedules/{id}/jobs/
     * @secure
     */
    apiSchedulesJobsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: UnifiedJobList[]
        },
        any
      >({
        path: `/api/${version}/schedules/${id}/jobs/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of labels associated with the selected schedule. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of labels found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more label records. ## Results Each label data structure includes the following fields: * `id`: Database ID for this label. (integer) * `type`: Data type for this label. (choice) * `url`: URL for this label. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this label was created. (datetime) * `modified`: Timestamp when this label was last modified. (datetime) * `name`: Name of this label. (string) * `organization`: Organization this label belongs to. (id) ## Sorting To specify that labels are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiSchedulesLabelsList
     * @summary # List Labels for a Schedule:
     * @request GET:/api/{version}/schedules/{id}/labels/
     * @secure
     */
    apiSchedulesLabelsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Label[]
        },
        any
      >({
        path: `/api/${version}/schedules/${id}/labels/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of labels associated with the selected schedule. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of labels found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more label records. ## Results Each label data structure includes the following fields: * `id`: Database ID for this label. (integer) * `type`: Data type for this label. (choice) * `url`: URL for this label. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this label was created. (datetime) * `modified`: Timestamp when this label was last modified. (datetime) * `name`: Name of this label. (string) * `organization`: Organization this label belongs to. (id) ## Sorting To specify that labels are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiSchedulesLabelsCreate
     * @summary # List Labels for a Schedule:
     * @request POST:/api/{version}/schedules/{id}/labels/
     * @secure
     */
    apiSchedulesLabelsCreate: (
      id: string,
      version: string,
      data: Label,
      params: RequestParams = {}
    ) =>
      this.request<Label, any>({
        path: `/api/${version}/schedules/${id}/labels/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of settings. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of settings found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more setting records. ## Results Each setting data structure includes the following fields: * `url`:  (string) * `slug`:  (string) * `name`:  (string) ## Sorting To specify that settings are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiSettingsList
     * @summary # List Settings:
     * @request GET:/api/{version}/settings/
     * @secure
     */
    apiSettingsList: (
      version: string,
      query?: {
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: SettingCategory[]
        },
        any
      >({
        path: `/api/${version}/settings/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description # Test Logging Configuration
     *
     * @tags api
     * @name ApiSettingsLoggingTestCreate
     * @request POST:/api/{version}/settings/logging/test/
     * @secure
     */
    apiSettingsLoggingTestCreate: (
      version: string,
      data: SettingSingleton,
      params: RequestParams = {}
    ) =>
      this.request<SettingSingleton, any>({
        path: `/api/${version}/settings/logging/test/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single setting record containing the following fields: * `ACTIVITY_STREAM_ENABLED`: Enable capturing activity for the activity stream. (boolean) * `ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC`: Enable capturing activity for the activity stream when running inventory sync. (boolean) * `ORG_ADMINS_CAN_SEE_ALL_USERS`: Controls whether any Organization Admin can view all users and teams, even those not associated with their Organization. (boolean) * `MANAGE_ORGANIZATION_AUTH`: Controls whether any Organization Admin has the privileges to create and manage users and teams. You may want to disable this ability if you are using an LDAP or SAML integration. (boolean) * `TOWER_URL_BASE`: This setting is used by services like notifications to render a valid url to the service. (string) * `REMOTE_HOST_HEADERS`: HTTP headers and meta keys to search to determine remote host name or IP. Add additional items to this list, such as &quot;HTTP_X_FORWARDED_FOR&quot;, if behind a reverse proxy. See the &quot;Proxy Support&quot; section of the AAP Installation guide for more details. (list) * `PROXY_IP_ALLOWED_LIST`: If the service is behind a reverse proxy/load balancer, use this setting to configure the proxy IP addresses from which the service should trust custom REMOTE_HOST_HEADERS header values. If this setting is an empty list (the default), the headers specified by REMOTE_HOST_HEADERS will be trusted unconditionally&#x27;) (list) * `LICENSE`: The license controls which features and functionality are enabled. Use /api/v2/config/ to update or change the license. (nested object) * `REDHAT_USERNAME`: This username is used to send data to Automation Analytics (string) * `REDHAT_PASSWORD`: This password is used to send data to Automation Analytics (string) * `SUBSCRIPTIONS_USERNAME`: This username is used to retrieve subscription and content information (string) * `SUBSCRIPTIONS_PASSWORD`: This password is used to retrieve subscription and content information (string) * `AUTOMATION_ANALYTICS_URL`: This setting is used to to configure the upload URL for data collection for Automation Analytics. (string) * `INSTALL_UUID`:  (string) * `DEFAULT_CONTROL_PLANE_QUEUE_NAME`:  (string) * `DEFAULT_EXECUTION_QUEUE_NAME`:  (string) * `DEFAULT_EXECUTION_ENVIRONMENT`: The Execution Environment to be used when one has not been configured for a job template. (field) * `CUSTOM_VENV_PATHS`: Paths where Tower will look for custom virtual environments (in addition to /var/lib/awx/venv/). Enter one path per line. (list) * `AD_HOC_COMMANDS`: List of modules allowed to be used by ad-hoc jobs. (list) * `ALLOW_JINJA_IN_EXTRA_VARS`: Ansible allows variable substitution via the Jinja2 templating language for --extra-vars. This poses a potential security risk where users with the ability to specify extra vars at job launch time can use Jinja2 templates to run arbitrary Python.  It is recommended that this value be set to &quot;template&quot; or &quot;never&quot;. (choice) - `always`: Always - `never`: Never - `template`: Only On Job Template Definitions * `AWX_ISOLATION_BASE_PATH`: The directory in which the service will create new temporary directories for job execution and isolation (such as credential files). (string) * `AWX_ISOLATION_SHOW_PATHS`: List of paths that would otherwise be hidden to expose to isolated jobs. Enter one path per line. Volumes will be mounted from the execution node to the container. The supported format is HOST-DIR[:CONTAINER-DIR[:OPTIONS]].  (list) * `AWX_TASK_ENV`: Additional environment variables set for playbook runs, inventory updates, project updates, and notification sending. (nested object) * `GALAXY_TASK_ENV`: Additional environment variables set for invocations of ansible-galaxy within project updates. Useful if you must use a proxy server for ansible-galaxy but not git. (nested object) * `INSIGHTS_TRACKING_STATE`: Enables the service to gather data on automation and send it to Automation Analytics. (boolean) * `PROJECT_UPDATE_VVV`: Adds the CLI -vvv flag to ansible-playbook runs of project_update.yml used for project updates. (boolean) * `AWX_ROLES_ENABLED`: Allows roles to be dynamically downloaded from a requirements.yml file for SCM projects. (boolean) * `AWX_COLLECTIONS_ENABLED`: Allows collections to be dynamically downloaded from a requirements.yml file for SCM projects. (boolean) * `AWX_SHOW_PLAYBOOK_LINKS`: Follow symbolic links when scanning for playbooks. Be aware that setting this to True can lead to infinite recursion if a link points to a parent directory of itself. (boolean) * `AWX_MOUNT_ISOLATED_PATHS_ON_K8S`: Expose paths via hostPath for the Pods created by a Container Group. HostPath volumes present many security risks, and it is a best practice to avoid the use of HostPaths when possible.  (boolean) * `GALAXY_IGNORE_CERTS`: If set to true, certificate validation will not be done when installing content from any Galaxy server. (boolean) * `STDOUT_MAX_BYTES_DISPLAY`: Maximum Size of Standard Output in bytes to display before requiring the output be downloaded. (integer) * `EVENT_STDOUT_MAX_BYTES_DISPLAY`: Maximum Size of Standard Output in bytes to display for a single job or ad hoc command event. `stdout` will end with `…` when truncated. (integer) * `MAX_WEBSOCKET_EVENT_RATE`: Maximum number of messages to update the UI live job output with per second. Value of 0 means no limit. (integer) * `SCHEDULE_MAX_JOBS`: Maximum number of the same job template that can be waiting to run when launching from a schedule before no more are created. (integer) * `AWX_ANSIBLE_CALLBACK_PLUGINS`: List of paths to search for extra callback plugins to be used when running jobs. Enter one path per line. (list) * `DEFAULT_JOB_TIMEOUT`: Maximum time in seconds to allow jobs to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual job template will override this. (integer) * `DEFAULT_JOB_IDLE_TIMEOUT`: If no output is detected from ansible in this number of seconds the execution will be terminated. Use value of 0 to indicate that no idle timeout should be imposed. (integer) * `DEFAULT_INVENTORY_UPDATE_TIMEOUT`: Maximum time in seconds to allow inventory updates to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual inventory source will override this. (integer) * `DEFAULT_PROJECT_UPDATE_TIMEOUT`: Maximum time in seconds to allow project updates to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual project will override this. (integer) * `ANSIBLE_FACT_CACHE_TIMEOUT`: Maximum time, in seconds, that stored Ansible facts are considered valid since the last time they were modified. Only valid, non-stale, facts will be accessible by a playbook. Note, this does not influence the deletion of ansible_facts from the database. Use a value of 0 to indicate that no timeout should be imposed. (integer) * `MAX_FORKS`: Saving a Job Template with more than this number of forks will result in an error. When set to 0, no limit is applied. (integer) * `LOG_AGGREGATOR_HOST`: Hostname/IP where external logs will be sent to. (string) * `LOG_AGGREGATOR_PORT`: Port on Logging Aggregator to send logs to (if required and not provided in Logging Aggregator). (integer) * `LOG_AGGREGATOR_TYPE`: Format messages for the chosen log aggregator. (choice) - `None`: --------- - `logstash` - `splunk` - `loggly` - `sumologic` - `other` * `LOG_AGGREGATOR_USERNAME`: Username for external log aggregator (if required; HTTP/s only). (string) * `LOG_AGGREGATOR_PASSWORD`: Password or authentication token for external log aggregator (if required; HTTP/s only). (string) * `LOG_AGGREGATOR_LOGGERS`: List of loggers that will send HTTP logs to the collector, these can include any or all of: awx - service logs activity_stream - activity stream records job_events - callback data from Ansible job events system_tracking - facts gathered from scan jobs. (list) * `LOG_AGGREGATOR_INDIVIDUAL_FACTS`: If set, system tracking facts will be sent for each package, service, or other item found in a scan, allowing for greater search query granularity. If unset, facts will be sent as a single dictionary, allowing for greater efficiency in fact processing. (boolean) * `LOG_AGGREGATOR_ENABLED`: Enable sending logs to external log aggregator. (boolean) * `LOG_AGGREGATOR_TOWER_UUID`: Useful to uniquely identify instances. (string) * `LOG_AGGREGATOR_PROTOCOL`: Protocol used to communicate with log aggregator.  HTTPS/HTTP assumes HTTPS unless http:// is explicitly used in the Logging Aggregator hostname. (choice) - `https`: HTTPS/HTTP - `tcp`: TCP - `udp`: UDP * `LOG_AGGREGATOR_TCP_TIMEOUT`: Number of seconds for a TCP connection to external log aggregator to timeout. Applies to HTTPS and TCP log aggregator protocols. (integer) * `LOG_AGGREGATOR_VERIFY_CERT`: Flag to control enable/disable of certificate verification when LOG_AGGREGATOR_PROTOCOL is &quot;https&quot;. If enabled, the log handler will verify certificate sent by external log aggregator before establishing connection. (boolean) * `LOG_AGGREGATOR_LEVEL`: Level threshold used by log handler. Severities from lowest to highest are DEBUG, INFO, WARNING, ERROR, CRITICAL. Messages less severe than the threshold will be ignored by log handler. (messages under category awx.anlytics ignore this setting) (choice) - `DEBUG` - `INFO` - `WARNING` - `ERROR` - `CRITICAL` * `LOG_AGGREGATOR_MAX_DISK_USAGE_GB`: Amount of data to store (in gigabytes) during an outage of the external log aggregator (defaults to 1). Equivalent to the rsyslogd queue.maxdiskspace setting. (integer) * `LOG_AGGREGATOR_MAX_DISK_USAGE_PATH`: Location to persist logs that should be retried after an outage of the external log aggregator (defaults to /var/lib/awx). Equivalent to the rsyslogd queue.spoolDirectory setting. (string) * `LOG_AGGREGATOR_RSYSLOGD_DEBUG`: Enabled high verbosity debugging for rsyslogd.  Useful for debugging connection issues for external log aggregation. (boolean) * `API_400_ERROR_LOG_FORMAT`: The format of logged messages when an API 4XX error occurs, the following variables will be substituted: status_code - The HTTP status code of the error user_name - The user name attempting to use the API url_path - The URL path to the API endpoint called remote_addr - The remote address seen for the user error - The error set by the api endpoint Variables need to be in the format {&lt;variable name&gt;}. (string) * `AUTOMATION_ANALYTICS_LAST_GATHER`:  (datetime) * `AUTOMATION_ANALYTICS_LAST_ENTRIES`:  (string) * `AUTOMATION_ANALYTICS_GATHER_INTERVAL`: Interval (in seconds) between data gathering. (integer) * `IS_K8S`: Indicates whether the instance is part of a kubernetes-based deployment. (boolean) * `SESSION_COOKIE_AGE`: Number of seconds that a user is inactive before they will need to login again. (integer) * `SESSIONS_PER_USER`: Maximum number of simultaneous logged in sessions a user may have. To disable enter -1. (integer) * `DISABLE_LOCAL_AUTH`: Controls whether users are prevented from using the built-in authentication system. You probably want to do this if you are using an LDAP or SAML integration. (boolean) * `AUTH_BASIC_ENABLED`: Enable HTTP Basic Auth for the API Browser. (boolean) * `OAUTH2_PROVIDER`: Dictionary for customizing OAuth 2 timeouts, available items are `ACCESS_TOKEN_EXPIRE_SECONDS`, the duration of access tokens in the number of seconds, `AUTHORIZATION_CODE_EXPIRE_SECONDS`, the duration of authorization codes in the number of seconds, and `REFRESH_TOKEN_EXPIRE_SECONDS`, the duration of refresh tokens, after expired access tokens, in the number of seconds. (nested object) * `ALLOW_OAUTH2_FOR_EXTERNAL_USERS`: For security reasons, users from external auth providers (LDAP, SAML, SSO, Radius, and others) are not allowed to create OAuth2 tokens. To change this behavior, enable this setting. Existing tokens will not be deleted when this setting is toggled off. (boolean) * `LOGIN_REDIRECT_OVERRIDE`: URL to which unauthorized users will be redirected to log in.  If blank, users will be sent to the login page. (string) * `PENDO_TRACKING_STATE`: Enable or Disable User Analytics Tracking. (choice) - `off`: Off - `anonymous`: Anonymous - `detailed`: Detailed * `CUSTOM_LOGIN_INFO`: If needed, you can add specific information (such as a legal notice or a disclaimer) to a text box in the login modal using this setting. Any content added must be in plain text or an HTML fragment, as other markup languages are not supported. (string) * `CUSTOM_LOGO`: To set up a custom logo, provide a file that you create. For the custom logo to look its best, use a .png file with a transparent background. GIF, PNG and JPEG formats are supported. (string) * `MAX_UI_JOB_EVENTS`: Maximum number of job events for the UI to retrieve within a single request. (integer) * `UI_LIVE_UPDATES_ENABLED`: If disabled, the page will not refresh when events are received. Reloading the page will be required to get the latest details. (boolean) * `AUTHENTICATION_BACKENDS`: List of authentication backends that are enabled based on license features and other authentication settings. (list) * `SOCIAL_AUTH_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_USER_FIELDS`: When set to an empty list `[]`, this setting prevents new user accounts from being created. Only users who have previously logged in using social auth or have a user account with a matching email address will be able to login. (list) * `AUTH_LDAP_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string) * `AUTH_LDAP_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string) * `AUTH_LDAP_BIND_PASSWORD`: Password used to bind LDAP user account. (string) * `AUTH_LDAP_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean) * `AUTH_LDAP_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object) * `AUTH_LDAP_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list) * `AUTH_LDAP_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string) * `AUTH_LDAP_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object) * `AUTH_LDAP_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list) * `AUTH_LDAP_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object) * `AUTH_LDAP_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string) * `AUTH_LDAP_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string) * `AUTH_LDAP_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object) * `AUTH_LDAP_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_1_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string) * `AUTH_LDAP_1_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string) * `AUTH_LDAP_1_BIND_PASSWORD`: Password used to bind LDAP user account. (string) * `AUTH_LDAP_1_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean) * `AUTH_LDAP_1_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object) * `AUTH_LDAP_1_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list) * `AUTH_LDAP_1_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string) * `AUTH_LDAP_1_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object) * `AUTH_LDAP_1_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list) * `AUTH_LDAP_1_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_1_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object) * `AUTH_LDAP_1_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string) * `AUTH_LDAP_1_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string) * `AUTH_LDAP_1_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object) * `AUTH_LDAP_1_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_1_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_2_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string) * `AUTH_LDAP_2_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string) * `AUTH_LDAP_2_BIND_PASSWORD`: Password used to bind LDAP user account. (string) * `AUTH_LDAP_2_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean) * `AUTH_LDAP_2_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object) * `AUTH_LDAP_2_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list) * `AUTH_LDAP_2_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string) * `AUTH_LDAP_2_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object) * `AUTH_LDAP_2_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list) * `AUTH_LDAP_2_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_2_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object) * `AUTH_LDAP_2_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string) * `AUTH_LDAP_2_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string) * `AUTH_LDAP_2_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object) * `AUTH_LDAP_2_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_2_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_3_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string) * `AUTH_LDAP_3_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string) * `AUTH_LDAP_3_BIND_PASSWORD`: Password used to bind LDAP user account. (string) * `AUTH_LDAP_3_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean) * `AUTH_LDAP_3_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object) * `AUTH_LDAP_3_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list) * `AUTH_LDAP_3_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string) * `AUTH_LDAP_3_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object) * `AUTH_LDAP_3_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list) * `AUTH_LDAP_3_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_3_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object) * `AUTH_LDAP_3_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string) * `AUTH_LDAP_3_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string) * `AUTH_LDAP_3_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object) * `AUTH_LDAP_3_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_3_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_4_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string) * `AUTH_LDAP_4_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string) * `AUTH_LDAP_4_BIND_PASSWORD`: Password used to bind LDAP user account. (string) * `AUTH_LDAP_4_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean) * `AUTH_LDAP_4_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object) * `AUTH_LDAP_4_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list) * `AUTH_LDAP_4_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string) * `AUTH_LDAP_4_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object) * `AUTH_LDAP_4_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list) * `AUTH_LDAP_4_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_4_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object) * `AUTH_LDAP_4_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string) * `AUTH_LDAP_4_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string) * `AUTH_LDAP_4_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object) * `AUTH_LDAP_4_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_4_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_5_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string) * `AUTH_LDAP_5_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string) * `AUTH_LDAP_5_BIND_PASSWORD`: Password used to bind LDAP user account. (string) * `AUTH_LDAP_5_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean) * `AUTH_LDAP_5_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object) * `AUTH_LDAP_5_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list) * `AUTH_LDAP_5_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string) * `AUTH_LDAP_5_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object) * `AUTH_LDAP_5_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list) * `AUTH_LDAP_5_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_5_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object) * `AUTH_LDAP_5_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string) * `AUTH_LDAP_5_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string) * `AUTH_LDAP_5_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object) * `AUTH_LDAP_5_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_5_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object) * `RADIUS_SERVER`: Hostname/IP of RADIUS server. RADIUS authentication is disabled if this setting is empty. (string) * `RADIUS_PORT`: Port of RADIUS server. (integer) * `RADIUS_SECRET`: Shared secret for authenticating to RADIUS server. (string) * `TACACSPLUS_HOST`: Hostname of TACACS+ server. (string) * `TACACSPLUS_PORT`: Port number of TACACS+ server. (integer) * `TACACSPLUS_SECRET`: Shared secret for authenticating to TACACS+ server. (string) * `TACACSPLUS_SESSION_TIMEOUT`: TACACS+ session timeout value in seconds, 0 disables timeout. (integer) * `TACACSPLUS_AUTH_PROTOCOL`: Choose the authentication protocol used by TACACS+ client. (choice) - `ascii` - `pap` * `SOCIAL_AUTH_GOOGLE_OAUTH2_CALLBACK_URL`: Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail. (string) * `SOCIAL_AUTH_GOOGLE_OAUTH2_KEY`: The OAuth2 key from your web application. (string) * `SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET`: The OAuth2 secret from your web application. (string) * `SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS`: Update this setting to restrict the domains who are allowed to login using Google OAuth2. (list) * `SOCIAL_AUTH_GOOGLE_OAUTH2_AUTH_EXTRA_ARGUMENTS`: Extra arguments for Google OAuth2 login. You can restrict it to only allow a single domain to authenticate, even if the user is logged in with multple Google accounts. Refer to the documentation for more detail. (nested object) * `SOCIAL_AUTH_GOOGLE_OAUTH2_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GOOGLE_OAUTH2_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_CALLBACK_URL`: Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail. (string) * `SOCIAL_AUTH_GITHUB_KEY`: The OAuth2 key (Client ID) from your GitHub developer application. (string) * `SOCIAL_AUTH_GITHUB_SECRET`: The OAuth2 secret (Client Secret) from your GitHub developer application. (string) * `SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ORG_CALLBACK_URL`: Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail. (string) * `SOCIAL_AUTH_GITHUB_ORG_KEY`: The OAuth2 key (Client ID) from your GitHub organization application. (string) * `SOCIAL_AUTH_GITHUB_ORG_SECRET`: The OAuth2 secret (Client Secret) from your GitHub organization application. (string) * `SOCIAL_AUTH_GITHUB_ORG_NAME`: The name of your GitHub organization, as used in your organization&#x27;s URL: https://github.com/&lt;yourorg&gt;/. (string) * `SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_TEAM_CALLBACK_URL`: Create an organization-owned application at https://github.com/organizations/&lt;yourorg&gt;/settings/applications and obtain an OAuth2 key (Client ID) and secret (Client Secret). Provide this URL as the callback URL for your application. (string) * `SOCIAL_AUTH_GITHUB_TEAM_KEY`: The OAuth2 key (Client ID) from your GitHub organization application. (string) * `SOCIAL_AUTH_GITHUB_TEAM_SECRET`: The OAuth2 secret (Client Secret) from your GitHub organization application. (string) * `SOCIAL_AUTH_GITHUB_TEAM_ID`: Find the numeric team ID using the Github API: http://fabian-kostadinov.github.io/2015/01/16/how-to-find-a-github-team-id/. (string) * `SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_CALLBACK_URL`: Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_URL`: The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_API_URL`: The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_KEY`: The OAuth2 key (Client ID) from your GitHub Enterprise developer application. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_SECRET`: The OAuth2 secret (Client Secret) from your GitHub Enterprise developer application. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_CALLBACK_URL`: Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_URL`: The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_API_URL`: The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_KEY`: The OAuth2 key (Client ID) from your GitHub Enterprise organization application. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_SECRET`: The OAuth2 secret (Client Secret) from your GitHub Enterprise organization application. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_NAME`: The name of your GitHub Enterprise organization, as used in your organization&#x27;s URL: https://github.com/&lt;yourorg&gt;/. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_CALLBACK_URL`: Create an organization-owned application at https://github.com/organizations/&lt;yourorg&gt;/settings/applications and obtain an OAuth2 key (Client ID) and secret (Client Secret). Provide this URL as the callback URL for your application. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_URL`: The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_API_URL`: The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_KEY`: The OAuth2 key (Client ID) from your GitHub Enterprise organization application. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_SECRET`: The OAuth2 secret (Client Secret) from your GitHub Enterprise organization application. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ID`: Find the numeric team ID using the Github Enterprise API: http://fabian-kostadinov.github.io/2015/01/16/how-to-find-a-github-team-id/. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_AZUREAD_OAUTH2_CALLBACK_URL`: Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail.  (string) * `SOCIAL_AUTH_AZUREAD_OAUTH2_KEY`: The OAuth2 key (Client ID) from your Azure AD application. (string) * `SOCIAL_AUTH_AZUREAD_OAUTH2_SECRET`: The OAuth2 secret (Client Secret) from your Azure AD application. (string) * `SOCIAL_AUTH_AZUREAD_OAUTH2_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_AZUREAD_OAUTH2_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_OIDC_KEY`: The OIDC key (Client ID) from your IDP. (string) * `SOCIAL_AUTH_OIDC_SECRET`: The OIDC secret (Client Secret) from your IDP. (string) * `SOCIAL_AUTH_OIDC_OIDC_ENDPOINT`: The URL for your OIDC provider including the path up to /.well-known/openid-configuration (string) * `SOCIAL_AUTH_OIDC_VERIFY_SSL`: Verify the OIDV provider ssl certificate. (boolean) * `SAML_AUTO_CREATE_OBJECTS`: When enabled (the default), mapped Organizations and Teams will be created automatically on successful SAML login. (boolean) * `SOCIAL_AUTH_SAML_CALLBACK_URL`: Register the service as a service provider (SP) with each identity provider (IdP) you have configured. Provide your SP Entity ID and this ACS URL for your application. (string) * `SOCIAL_AUTH_SAML_METADATA_URL`: If your identity provider (IdP) allows uploading an XML metadata file, you can download one from this URL. (string) * `SOCIAL_AUTH_SAML_SP_ENTITY_ID`: The application-defined unique identifier used as the audience of the SAML service provider (SP) configuration. This is usually the URL for the service. (string) * `SOCIAL_AUTH_SAML_SP_PUBLIC_CERT`: Create a keypair to use as a service provider (SP) and include the certificate content here. (string) * `SOCIAL_AUTH_SAML_SP_PRIVATE_KEY`: Create a keypair to use as a service provider (SP) and include the private key content here. (string) * `SOCIAL_AUTH_SAML_ORG_INFO`: Provide the URL, display name, and the name of your app. Refer to the documentation for example syntax. (nested object) * `SOCIAL_AUTH_SAML_TECHNICAL_CONTACT`: Provide the name and email address of the technical contact for your service provider. Refer to the documentation for example syntax. (nested object) * `SOCIAL_AUTH_SAML_SUPPORT_CONTACT`: Provide the name and email address of the support contact for your service provider. Refer to the documentation for example syntax. (nested object) * `SOCIAL_AUTH_SAML_ENABLED_IDPS`: Configure the Entity ID, SSO URL and certificate for each identity provider (IdP) in use. Multiple SAML IdPs are supported. Some IdPs may provide user data using attribute names that differ from the default OIDs. Attribute names may be overridden for each IdP. Refer to the Ansible documentation for additional details and syntax. (nested object) * `SOCIAL_AUTH_SAML_SECURITY_CONFIG`: A dict of key value pairs that are passed to the underlying python-saml security setting https://github.com/onelogin/python-saml#settings (nested object) * `SOCIAL_AUTH_SAML_SP_EXTRA`: A dict of key value pairs to be passed to the underlying python-saml Service Provider configuration setting. (nested object) * `SOCIAL_AUTH_SAML_EXTRA_DATA`: A list of tuples that maps IDP attributes to extra_attributes. Each attribute will be a list of values, even if only 1 value. (list) * `SOCIAL_AUTH_SAML_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_SAML_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_SAML_ORGANIZATION_ATTR`: Used to translate user organization membership. (nested object) * `SOCIAL_AUTH_SAML_TEAM_ATTR`: Used to translate user team membership. (nested object) * `SOCIAL_AUTH_SAML_USER_FLAGS_BY_ATTR`: Used to map super users and system auditors from SAML. (nested object) * `NAMED_URL_FORMATS`: Read-only list of key-value pairs that shows the standard format of all available named URLs. (nested object) * `NAMED_URL_GRAPH_NODES`: Read-only list of key-value pairs that exposes named URL graph topology. Use this list to programmatically generate named URLs for resources (nested object) # Update a Setting: Make a PUT or PATCH request to this resource to update this setting.  The following fields may be modified: * `ACTIVITY_STREAM_ENABLED`: Enable capturing activity for the activity stream. (boolean, required) * `ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC`: Enable capturing activity for the activity stream when running inventory sync. (boolean, required) * `ORG_ADMINS_CAN_SEE_ALL_USERS`: Controls whether any Organization Admin can view all users and teams, even those not associated with their Organization. (boolean, required) * `MANAGE_ORGANIZATION_AUTH`: Controls whether any Organization Admin has the privileges to create and manage users and teams. You may want to disable this ability if you are using an LDAP or SAML integration. (boolean, required) * `TOWER_URL_BASE`: This setting is used by services like notifications to render a valid url to the service. (string, required) * `REMOTE_HOST_HEADERS`: HTTP headers and meta keys to search to determine remote host name or IP. Add additional items to this list, such as &quot;HTTP_X_FORWARDED_FOR&quot;, if behind a reverse proxy. See the &quot;Proxy Support&quot; section of the AAP Installation guide for more details. (list, required) * `PROXY_IP_ALLOWED_LIST`: If the service is behind a reverse proxy/load balancer, use this setting to configure the proxy IP addresses from which the service should trust custom REMOTE_HOST_HEADERS header values. If this setting is an empty list (the default), the headers specified by REMOTE_HOST_HEADERS will be trusted unconditionally&#x27;) (list, required) * `REDHAT_USERNAME`: This username is used to send data to Automation Analytics (string, default=`""`) * `REDHAT_PASSWORD`: This password is used to send data to Automation Analytics (string, default=`""`) * `SUBSCRIPTIONS_USERNAME`: This username is used to retrieve subscription and content information (string, default=`""`) * `SUBSCRIPTIONS_PASSWORD`: This password is used to retrieve subscription and content information (string, default=`""`) * `AUTOMATION_ANALYTICS_URL`: This setting is used to to configure the upload URL for data collection for Automation Analytics. (string, default=`"https://example.com"`) * `DEFAULT_EXECUTION_ENVIRONMENT`: The Execution Environment to be used when one has not been configured for a job template. (field, default=`None`) * `CUSTOM_VENV_PATHS`: Paths where Tower will look for custom virtual environments (in addition to /var/lib/awx/venv/). Enter one path per line. (list, default=`[]`) * `AD_HOC_COMMANDS`: List of modules allowed to be used by ad-hoc jobs. (list, default=`[&#x27;command&#x27;, &#x27;shell&#x27;, &#x27;yum&#x27;, &#x27;apt&#x27;, &#x27;apt_key&#x27;, &#x27;apt_repository&#x27;, &#x27;apt_rpm&#x27;, &#x27;service&#x27;, &#x27;group&#x27;, &#x27;user&#x27;, &#x27;mount&#x27;, &#x27;ping&#x27;, &#x27;selinux&#x27;, &#x27;setup&#x27;, &#x27;win_ping&#x27;, &#x27;win_service&#x27;, &#x27;win_updates&#x27;, &#x27;win_group&#x27;, &#x27;win_user&#x27;]`) * `ALLOW_JINJA_IN_EXTRA_VARS`: Ansible allows variable substitution via the Jinja2 templating language for --extra-vars. This poses a potential security risk where users with the ability to specify extra vars at job launch time can use Jinja2 templates to run arbitrary Python.  It is recommended that this value be set to &quot;template&quot; or &quot;never&quot;. (choice, required) - `always`: Always - `never`: Never - `template`: Only On Job Template Definitions (default) * `AWX_ISOLATION_BASE_PATH`: The directory in which the service will create new temporary directories for job execution and isolation (such as credential files). (string, required) * `AWX_ISOLATION_SHOW_PATHS`: List of paths that would otherwise be hidden to expose to isolated jobs. Enter one path per line. Volumes will be mounted from the execution node to the container. The supported format is HOST-DIR[:CONTAINER-DIR[:OPTIONS]].  (list, default=`[]`) * `AWX_TASK_ENV`: Additional environment variables set for playbook runs, inventory updates, project updates, and notification sending. (nested object, default=`{}`) * `GALAXY_TASK_ENV`: Additional environment variables set for invocations of ansible-galaxy within project updates. Useful if you must use a proxy server for ansible-galaxy but not git. (nested object, required) * `INSIGHTS_TRACKING_STATE`: Enables the service to gather data on automation and send it to Automation Analytics. (boolean, default=`False`) * `PROJECT_UPDATE_VVV`: Adds the CLI -vvv flag to ansible-playbook runs of project_update.yml used for project updates. (boolean, required) * `AWX_ROLES_ENABLED`: Allows roles to be dynamically downloaded from a requirements.yml file for SCM projects. (boolean, default=`True`) * `AWX_COLLECTIONS_ENABLED`: Allows collections to be dynamically downloaded from a requirements.yml file for SCM projects. (boolean, default=`True`) * `AWX_SHOW_PLAYBOOK_LINKS`: Follow symbolic links when scanning for playbooks. Be aware that setting this to True can lead to infinite recursion if a link points to a parent directory of itself. (boolean, default=`False`) * `AWX_MOUNT_ISOLATED_PATHS_ON_K8S`: Expose paths via hostPath for the Pods created by a Container Group. HostPath volumes present many security risks, and it is a best practice to avoid the use of HostPaths when possible.  (boolean, default=`False`) * `GALAXY_IGNORE_CERTS`: If set to true, certificate validation will not be done when installing content from any Galaxy server. (boolean, default=`False`) * `STDOUT_MAX_BYTES_DISPLAY`: Maximum Size of Standard Output in bytes to display before requiring the output be downloaded. (integer, required) * `EVENT_STDOUT_MAX_BYTES_DISPLAY`: Maximum Size of Standard Output in bytes to display for a single job or ad hoc command event. `stdout` will end with `…` when truncated. (integer, required) * `MAX_WEBSOCKET_EVENT_RATE`: Maximum number of messages to update the UI live job output with per second. Value of 0 means no limit. (integer, default=`30`) * `SCHEDULE_MAX_JOBS`: Maximum number of the same job template that can be waiting to run when launching from a schedule before no more are created. (integer, required) * `AWX_ANSIBLE_CALLBACK_PLUGINS`: List of paths to search for extra callback plugins to be used when running jobs. Enter one path per line. (list, default=`[]`) * `DEFAULT_JOB_TIMEOUT`: Maximum time in seconds to allow jobs to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual job template will override this. (integer, default=`0`) * `DEFAULT_JOB_IDLE_TIMEOUT`: If no output is detected from ansible in this number of seconds the execution will be terminated. Use value of 0 to indicate that no idle timeout should be imposed. (integer, default=`0`) * `DEFAULT_INVENTORY_UPDATE_TIMEOUT`: Maximum time in seconds to allow inventory updates to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual inventory source will override this. (integer, default=`0`) * `DEFAULT_PROJECT_UPDATE_TIMEOUT`: Maximum time in seconds to allow project updates to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual project will override this. (integer, default=`0`) * `ANSIBLE_FACT_CACHE_TIMEOUT`: Maximum time, in seconds, that stored Ansible facts are considered valid since the last time they were modified. Only valid, non-stale, facts will be accessible by a playbook. Note, this does not influence the deletion of ansible_facts from the database. Use a value of 0 to indicate that no timeout should be imposed. (integer, default=`0`) * `MAX_FORKS`: Saving a Job Template with more than this number of forks will result in an error. When set to 0, no limit is applied. (integer, default=`200`) * `LOG_AGGREGATOR_HOST`: Hostname/IP where external logs will be sent to. (string, default=`""`) * `LOG_AGGREGATOR_PORT`: Port on Logging Aggregator to send logs to (if required and not provided in Logging Aggregator). (integer, default=`None`) * `LOG_AGGREGATOR_TYPE`: Format messages for the chosen log aggregator. (choice) - `None`: --------- (default) - `logstash` - `splunk` - `loggly` - `sumologic` - `other` * `LOG_AGGREGATOR_USERNAME`: Username for external log aggregator (if required; HTTP/s only). (string, default=`""`) * `LOG_AGGREGATOR_PASSWORD`: Password or authentication token for external log aggregator (if required; HTTP/s only). (string, default=`""`) * `LOG_AGGREGATOR_LOGGERS`: List of loggers that will send HTTP logs to the collector, these can include any or all of: awx - service logs activity_stream - activity stream records job_events - callback data from Ansible job events system_tracking - facts gathered from scan jobs. (list, default=`[&#x27;awx&#x27;, &#x27;activity_stream&#x27;, &#x27;job_events&#x27;, &#x27;system_tracking&#x27;]`) * `LOG_AGGREGATOR_INDIVIDUAL_FACTS`: If set, system tracking facts will be sent for each package, service, or other item found in a scan, allowing for greater search query granularity. If unset, facts will be sent as a single dictionary, allowing for greater efficiency in fact processing. (boolean, default=`False`) * `LOG_AGGREGATOR_ENABLED`: Enable sending logs to external log aggregator. (boolean, default=`False`) * `LOG_AGGREGATOR_TOWER_UUID`: Useful to uniquely identify instances. (string, default=`""`) * `LOG_AGGREGATOR_PROTOCOL`: Protocol used to communicate with log aggregator.  HTTPS/HTTP assumes HTTPS unless http:// is explicitly used in the Logging Aggregator hostname. (choice) - `https`: HTTPS/HTTP (default) - `tcp`: TCP - `udp`: UDP * `LOG_AGGREGATOR_TCP_TIMEOUT`: Number of seconds for a TCP connection to external log aggregator to timeout. Applies to HTTPS and TCP log aggregator protocols. (integer, default=`5`) * `LOG_AGGREGATOR_VERIFY_CERT`: Flag to control enable/disable of certificate verification when LOG_AGGREGATOR_PROTOCOL is &quot;https&quot;. If enabled, the log handler will verify certificate sent by external log aggregator before establishing connection. (boolean, default=`True`) * `LOG_AGGREGATOR_LEVEL`: Level threshold used by log handler. Severities from lowest to highest are DEBUG, INFO, WARNING, ERROR, CRITICAL. Messages less severe than the threshold will be ignored by log handler. (messages under category awx.anlytics ignore this setting) (choice) - `DEBUG` - `INFO` (default) - `WARNING` - `ERROR` - `CRITICAL` * `LOG_AGGREGATOR_MAX_DISK_USAGE_GB`: Amount of data to store (in gigabytes) during an outage of the external log aggregator (defaults to 1). Equivalent to the rsyslogd queue.maxdiskspace setting. (integer, default=`1`) * `LOG_AGGREGATOR_MAX_DISK_USAGE_PATH`: Location to persist logs that should be retried after an outage of the external log aggregator (defaults to /var/lib/awx). Equivalent to the rsyslogd queue.spoolDirectory setting. (string, default=`"/var/lib/awx"`) * `LOG_AGGREGATOR_RSYSLOGD_DEBUG`: Enabled high verbosity debugging for rsyslogd.  Useful for debugging connection issues for external log aggregation. (boolean, default=`False`) * `API_400_ERROR_LOG_FORMAT`: The format of logged messages when an API 4XX error occurs, the following variables will be substituted: status_code - The HTTP status code of the error user_name - The user name attempting to use the API url_path - The URL path to the API endpoint called remote_addr - The remote address seen for the user error - The error set by the api endpoint Variables need to be in the format {&lt;variable name&gt;}. (string, default=`"status {status_code} received by user {user_name} attempting to access {url_path} from {remote_addr}"`) * `AUTOMATION_ANALYTICS_LAST_GATHER`:  (datetime, required) * `AUTOMATION_ANALYTICS_LAST_ENTRIES`:  (string, default=`""`) * `AUTOMATION_ANALYTICS_GATHER_INTERVAL`: Interval (in seconds) between data gathering. (integer, default=`14400`) * `SESSION_COOKIE_AGE`: Number of seconds that a user is inactive before they will need to login again. (integer, required) * `SESSIONS_PER_USER`: Maximum number of simultaneous logged in sessions a user may have. To disable enter -1. (integer, required) * `DISABLE_LOCAL_AUTH`: Controls whether users are prevented from using the built-in authentication system. You probably want to do this if you are using an LDAP or SAML integration. (boolean, required) * `AUTH_BASIC_ENABLED`: Enable HTTP Basic Auth for the API Browser. (boolean, required) * `OAUTH2_PROVIDER`: Dictionary for customizing OAuth 2 timeouts, available items are `ACCESS_TOKEN_EXPIRE_SECONDS`, the duration of access tokens in the number of seconds, `AUTHORIZATION_CODE_EXPIRE_SECONDS`, the duration of authorization codes in the number of seconds, and `REFRESH_TOKEN_EXPIRE_SECONDS`, the duration of refresh tokens, after expired access tokens, in the number of seconds. (nested object, default=`{&#x27;ACCESS_TOKEN_EXPIRE_SECONDS&#x27;: 31536000000, &#x27;AUTHORIZATION_CODE_EXPIRE_SECONDS&#x27;: 600, &#x27;REFRESH_TOKEN_EXPIRE_SECONDS&#x27;: 2628000}`) * `ALLOW_OAUTH2_FOR_EXTERNAL_USERS`: For security reasons, users from external auth providers (LDAP, SAML, SSO, Radius, and others) are not allowed to create OAuth2 tokens. To change this behavior, enable this setting. Existing tokens will not be deleted when this setting is toggled off. (boolean, default=`False`) * `LOGIN_REDIRECT_OVERRIDE`: URL to which unauthorized users will be redirected to log in.  If blank, users will be sent to the login page. (string, default=`""`) * `CUSTOM_LOGIN_INFO`: If needed, you can add specific information (such as a legal notice or a disclaimer) to a text box in the login modal using this setting. Any content added must be in plain text or an HTML fragment, as other markup languages are not supported. (string, default=`""`) * `CUSTOM_LOGO`: To set up a custom logo, provide a file that you create. For the custom logo to look its best, use a .png file with a transparent background. GIF, PNG and JPEG formats are supported. (string, default=`""`) * `MAX_UI_JOB_EVENTS`: Maximum number of job events for the UI to retrieve within a single request. (integer, required) * `UI_LIVE_UPDATES_ENABLED`: If disabled, the page will not refresh when events are received. Reloading the page will be required to get the latest details. (boolean, required) * `SOCIAL_AUTH_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_USER_FIELDS`: When set to an empty list `[]`, this setting prevents new user accounts from being created. Only users who have previously logged in using social auth or have a user account with a matching email address will be able to login. (list, default=`None`) * `AUTH_LDAP_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string, default=`""`) * `AUTH_LDAP_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string, default=`""`) * `AUTH_LDAP_BIND_PASSWORD`: Password used to bind LDAP user account. (string, default=`""`) * `AUTH_LDAP_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean, default=`False`) * `AUTH_LDAP_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object, default=`{&#x27;OPT_REFERRALS&#x27;: 0, &#x27;OPT_NETWORK_TIMEOUT&#x27;: 30}`) * `AUTH_LDAP_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list, default=`[]`) * `AUTH_LDAP_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string, default=`""`) * `AUTH_LDAP_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object, default=`{}`) * `AUTH_LDAP_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list, default=`[]`) * `AUTH_LDAP_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` (default) - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object, default=`OrderedDict([(&#x27;member_attr&#x27;, &#x27;member&#x27;), (&#x27;name_attr&#x27;, &#x27;cn&#x27;)])`) * `AUTH_LDAP_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string, default=`""`) * `AUTH_LDAP_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string, default=`""`) * `AUTH_LDAP_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object, default=`{}`) * `AUTH_LDAP_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_1_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string, default=`""`) * `AUTH_LDAP_1_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string, default=`""`) * `AUTH_LDAP_1_BIND_PASSWORD`: Password used to bind LDAP user account. (string, default=`""`) * `AUTH_LDAP_1_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean, default=`False`) * `AUTH_LDAP_1_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object, default=`{&#x27;OPT_REFERRALS&#x27;: 0, &#x27;OPT_NETWORK_TIMEOUT&#x27;: 30}`) * `AUTH_LDAP_1_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list, default=`[]`) * `AUTH_LDAP_1_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string, default=`""`) * `AUTH_LDAP_1_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object, default=`{}`) * `AUTH_LDAP_1_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list, default=`[]`) * `AUTH_LDAP_1_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` (default) - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_1_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object, default=`OrderedDict([(&#x27;member_attr&#x27;, &#x27;member&#x27;), (&#x27;name_attr&#x27;, &#x27;cn&#x27;)])`) * `AUTH_LDAP_1_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string, default=`""`) * `AUTH_LDAP_1_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string, default=`""`) * `AUTH_LDAP_1_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object, default=`{}`) * `AUTH_LDAP_1_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_1_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_2_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string, default=`""`) * `AUTH_LDAP_2_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string, default=`""`) * `AUTH_LDAP_2_BIND_PASSWORD`: Password used to bind LDAP user account. (string, default=`""`) * `AUTH_LDAP_2_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean, default=`False`) * `AUTH_LDAP_2_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object, default=`{&#x27;OPT_REFERRALS&#x27;: 0, &#x27;OPT_NETWORK_TIMEOUT&#x27;: 30}`) * `AUTH_LDAP_2_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list, default=`[]`) * `AUTH_LDAP_2_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string, default=`""`) * `AUTH_LDAP_2_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object, default=`{}`) * `AUTH_LDAP_2_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list, default=`[]`) * `AUTH_LDAP_2_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` (default) - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_2_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object, default=`OrderedDict([(&#x27;member_attr&#x27;, &#x27;member&#x27;), (&#x27;name_attr&#x27;, &#x27;cn&#x27;)])`) * `AUTH_LDAP_2_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string, default=`""`) * `AUTH_LDAP_2_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string, default=`""`) * `AUTH_LDAP_2_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object, default=`{}`) * `AUTH_LDAP_2_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_2_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_3_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string, default=`""`) * `AUTH_LDAP_3_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string, default=`""`) * `AUTH_LDAP_3_BIND_PASSWORD`: Password used to bind LDAP user account. (string, default=`""`) * `AUTH_LDAP_3_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean, default=`False`) * `AUTH_LDAP_3_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object, default=`{&#x27;OPT_REFERRALS&#x27;: 0, &#x27;OPT_NETWORK_TIMEOUT&#x27;: 30}`) * `AUTH_LDAP_3_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list, default=`[]`) * `AUTH_LDAP_3_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string, default=`""`) * `AUTH_LDAP_3_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object, default=`{}`) * `AUTH_LDAP_3_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list, default=`[]`) * `AUTH_LDAP_3_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` (default) - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_3_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object, default=`OrderedDict([(&#x27;member_attr&#x27;, &#x27;member&#x27;), (&#x27;name_attr&#x27;, &#x27;cn&#x27;)])`) * `AUTH_LDAP_3_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string, default=`""`) * `AUTH_LDAP_3_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string, default=`""`) * `AUTH_LDAP_3_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object, default=`{}`) * `AUTH_LDAP_3_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_3_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_4_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string, default=`""`) * `AUTH_LDAP_4_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string, default=`""`) * `AUTH_LDAP_4_BIND_PASSWORD`: Password used to bind LDAP user account. (string, default=`""`) * `AUTH_LDAP_4_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean, default=`False`) * `AUTH_LDAP_4_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object, default=`{&#x27;OPT_REFERRALS&#x27;: 0, &#x27;OPT_NETWORK_TIMEOUT&#x27;: 30}`) * `AUTH_LDAP_4_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list, default=`[]`) * `AUTH_LDAP_4_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string, default=`""`) * `AUTH_LDAP_4_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object, default=`{}`) * `AUTH_LDAP_4_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list, default=`[]`) * `AUTH_LDAP_4_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` (default) - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_4_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object, default=`OrderedDict([(&#x27;member_attr&#x27;, &#x27;member&#x27;), (&#x27;name_attr&#x27;, &#x27;cn&#x27;)])`) * `AUTH_LDAP_4_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string, default=`""`) * `AUTH_LDAP_4_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string, default=`""`) * `AUTH_LDAP_4_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object, default=`{}`) * `AUTH_LDAP_4_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_4_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_5_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string, default=`""`) * `AUTH_LDAP_5_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string, default=`""`) * `AUTH_LDAP_5_BIND_PASSWORD`: Password used to bind LDAP user account. (string, default=`""`) * `AUTH_LDAP_5_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean, default=`False`) * `AUTH_LDAP_5_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object, default=`{&#x27;OPT_REFERRALS&#x27;: 0, &#x27;OPT_NETWORK_TIMEOUT&#x27;: 30}`) * `AUTH_LDAP_5_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list, default=`[]`) * `AUTH_LDAP_5_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string, default=`""`) * `AUTH_LDAP_5_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object, default=`{}`) * `AUTH_LDAP_5_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list, default=`[]`) * `AUTH_LDAP_5_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` (default) - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_5_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object, default=`OrderedDict([(&#x27;member_attr&#x27;, &#x27;member&#x27;), (&#x27;name_attr&#x27;, &#x27;cn&#x27;)])`) * `AUTH_LDAP_5_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string, default=`""`) * `AUTH_LDAP_5_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string, default=`""`) * `AUTH_LDAP_5_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object, default=`{}`) * `AUTH_LDAP_5_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_5_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object, default=`{}`) * `RADIUS_SERVER`: Hostname/IP of RADIUS server. RADIUS authentication is disabled if this setting is empty. (string, default=`""`) * `RADIUS_PORT`: Port of RADIUS server. (integer, default=`1812`) * `RADIUS_SECRET`: Shared secret for authenticating to RADIUS server. (string, default=`""`) * `TACACSPLUS_HOST`: Hostname of TACACS+ server. (string, default=`""`) * `TACACSPLUS_PORT`: Port number of TACACS+ server. (integer, default=`49`) * `TACACSPLUS_SECRET`: Shared secret for authenticating to TACACS+ server. (string, default=`""`) * `TACACSPLUS_SESSION_TIMEOUT`: TACACS+ session timeout value in seconds, 0 disables timeout. (integer, default=`5`) * `TACACSPLUS_AUTH_PROTOCOL`: Choose the authentication protocol used by TACACS+ client. (choice) - `ascii` (default) - `pap` * `SOCIAL_AUTH_GOOGLE_OAUTH2_KEY`: The OAuth2 key from your web application. (string, default=`""`) * `SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET`: The OAuth2 secret from your web application. (string, default=`""`) * `SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS`: Update this setting to restrict the domains who are allowed to login using Google OAuth2. (list, default=`[]`) * `SOCIAL_AUTH_GOOGLE_OAUTH2_AUTH_EXTRA_ARGUMENTS`: Extra arguments for Google OAuth2 login. You can restrict it to only allow a single domain to authenticate, even if the user is logged in with multple Google accounts. Refer to the documentation for more detail. (nested object, default=`{}`) * `SOCIAL_AUTH_GOOGLE_OAUTH2_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GOOGLE_OAUTH2_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_KEY`: The OAuth2 key (Client ID) from your GitHub developer application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_SECRET`: The OAuth2 secret (Client Secret) from your GitHub developer application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ORG_KEY`: The OAuth2 key (Client ID) from your GitHub organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ORG_SECRET`: The OAuth2 secret (Client Secret) from your GitHub organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ORG_NAME`: The name of your GitHub organization, as used in your organization&#x27;s URL: https://github.com/&lt;yourorg&gt;/. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_TEAM_KEY`: The OAuth2 key (Client ID) from your GitHub organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_TEAM_SECRET`: The OAuth2 secret (Client Secret) from your GitHub organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_TEAM_ID`: Find the numeric team ID using the Github API: http://fabian-kostadinov.github.io/2015/01/16/how-to-find-a-github-team-id/. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_URL`: The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_API_URL`: The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_KEY`: The OAuth2 key (Client ID) from your GitHub Enterprise developer application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_SECRET`: The OAuth2 secret (Client Secret) from your GitHub Enterprise developer application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_URL`: The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_API_URL`: The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_KEY`: The OAuth2 key (Client ID) from your GitHub Enterprise organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_SECRET`: The OAuth2 secret (Client Secret) from your GitHub Enterprise organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_NAME`: The name of your GitHub Enterprise organization, as used in your organization&#x27;s URL: https://github.com/&lt;yourorg&gt;/. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_URL`: The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_API_URL`: The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_KEY`: The OAuth2 key (Client ID) from your GitHub Enterprise organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_SECRET`: The OAuth2 secret (Client Secret) from your GitHub Enterprise organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ID`: Find the numeric team ID using the Github Enterprise API: http://fabian-kostadinov.github.io/2015/01/16/how-to-find-a-github-team-id/. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_AZUREAD_OAUTH2_KEY`: The OAuth2 key (Client ID) from your Azure AD application. (string, default=`""`) * `SOCIAL_AUTH_AZUREAD_OAUTH2_SECRET`: The OAuth2 secret (Client Secret) from your Azure AD application. (string, default=`""`) * `SOCIAL_AUTH_AZUREAD_OAUTH2_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_AZUREAD_OAUTH2_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_OIDC_KEY`: The OIDC key (Client ID) from your IDP. (string, default=`""`) * `SOCIAL_AUTH_OIDC_SECRET`: The OIDC secret (Client Secret) from your IDP. (string, default=`""`) * `SOCIAL_AUTH_OIDC_OIDC_ENDPOINT`: The URL for your OIDC provider including the path up to /.well-known/openid-configuration (string, default=`""`) * `SOCIAL_AUTH_OIDC_VERIFY_SSL`: Verify the OIDV provider ssl certificate. (boolean, default=`True`) * `SAML_AUTO_CREATE_OBJECTS`: When enabled (the default), mapped Organizations and Teams will be created automatically on successful SAML login. (boolean, default=`True`) * `SOCIAL_AUTH_SAML_SP_ENTITY_ID`: The application-defined unique identifier used as the audience of the SAML service provider (SP) configuration. This is usually the URL for the service. (string, default=`""`) * `SOCIAL_AUTH_SAML_SP_PUBLIC_CERT`: Create a keypair to use as a service provider (SP) and include the certificate content here. (string, required) * `SOCIAL_AUTH_SAML_SP_PRIVATE_KEY`: Create a keypair to use as a service provider (SP) and include the private key content here. (string, required) * `SOCIAL_AUTH_SAML_ORG_INFO`: Provide the URL, display name, and the name of your app. Refer to the documentation for example syntax. (nested object, required) * `SOCIAL_AUTH_SAML_TECHNICAL_CONTACT`: Provide the name and email address of the technical contact for your service provider. Refer to the documentation for example syntax. (nested object, required) * `SOCIAL_AUTH_SAML_SUPPORT_CONTACT`: Provide the name and email address of the support contact for your service provider. Refer to the documentation for example syntax. (nested object, required) * `SOCIAL_AUTH_SAML_ENABLED_IDPS`: Configure the Entity ID, SSO URL and certificate for each identity provider (IdP) in use. Multiple SAML IdPs are supported. Some IdPs may provide user data using attribute names that differ from the default OIDs. Attribute names may be overridden for each IdP. Refer to the Ansible documentation for additional details and syntax. (nested object, default=`{}`) * `SOCIAL_AUTH_SAML_SECURITY_CONFIG`: A dict of key value pairs that are passed to the underlying python-saml security setting https://github.com/onelogin/python-saml#settings (nested object, default=`{&#x27;requestedAuthnContext&#x27;: False}`) * `SOCIAL_AUTH_SAML_SP_EXTRA`: A dict of key value pairs to be passed to the underlying python-saml Service Provider configuration setting. (nested object, default=`None`) * `SOCIAL_AUTH_SAML_EXTRA_DATA`: A list of tuples that maps IDP attributes to extra_attributes. Each attribute will be a list of values, even if only 1 value. (list, default=`None`) * `SOCIAL_AUTH_SAML_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_SAML_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_SAML_ORGANIZATION_ATTR`: Used to translate user organization membership. (nested object, default=`{}`) * `SOCIAL_AUTH_SAML_TEAM_ATTR`: Used to translate user team membership. (nested object, default=`{}`) * `SOCIAL_AUTH_SAML_USER_FLAGS_BY_ATTR`: Used to map super users and system auditors from SAML. (nested object, default=`{}`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Setting: Make a DELETE request to this resource to delete this setting.
     *
     * @tags api
     * @name ApiSettingsRead
     * @summary # Retrieve a Setting:
     * @request GET:/api/{version}/settings/{category_slug}/
     * @secure
     */
    apiSettingsRead: (categorySlug: string, version: string, params: RequestParams = {}) =>
      this.request<SettingSingleton, any>({
        path: `/api/${version}/settings/${categorySlug}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single setting record containing the following fields: * `ACTIVITY_STREAM_ENABLED`: Enable capturing activity for the activity stream. (boolean) * `ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC`: Enable capturing activity for the activity stream when running inventory sync. (boolean) * `ORG_ADMINS_CAN_SEE_ALL_USERS`: Controls whether any Organization Admin can view all users and teams, even those not associated with their Organization. (boolean) * `MANAGE_ORGANIZATION_AUTH`: Controls whether any Organization Admin has the privileges to create and manage users and teams. You may want to disable this ability if you are using an LDAP or SAML integration. (boolean) * `TOWER_URL_BASE`: This setting is used by services like notifications to render a valid url to the service. (string) * `REMOTE_HOST_HEADERS`: HTTP headers and meta keys to search to determine remote host name or IP. Add additional items to this list, such as &quot;HTTP_X_FORWARDED_FOR&quot;, if behind a reverse proxy. See the &quot;Proxy Support&quot; section of the AAP Installation guide for more details. (list) * `PROXY_IP_ALLOWED_LIST`: If the service is behind a reverse proxy/load balancer, use this setting to configure the proxy IP addresses from which the service should trust custom REMOTE_HOST_HEADERS header values. If this setting is an empty list (the default), the headers specified by REMOTE_HOST_HEADERS will be trusted unconditionally&#x27;) (list) * `LICENSE`: The license controls which features and functionality are enabled. Use /api/v2/config/ to update or change the license. (nested object) * `REDHAT_USERNAME`: This username is used to send data to Automation Analytics (string) * `REDHAT_PASSWORD`: This password is used to send data to Automation Analytics (string) * `SUBSCRIPTIONS_USERNAME`: This username is used to retrieve subscription and content information (string) * `SUBSCRIPTIONS_PASSWORD`: This password is used to retrieve subscription and content information (string) * `AUTOMATION_ANALYTICS_URL`: This setting is used to to configure the upload URL for data collection for Automation Analytics. (string) * `INSTALL_UUID`:  (string) * `DEFAULT_CONTROL_PLANE_QUEUE_NAME`:  (string) * `DEFAULT_EXECUTION_QUEUE_NAME`:  (string) * `DEFAULT_EXECUTION_ENVIRONMENT`: The Execution Environment to be used when one has not been configured for a job template. (field) * `CUSTOM_VENV_PATHS`: Paths where Tower will look for custom virtual environments (in addition to /var/lib/awx/venv/). Enter one path per line. (list) * `AD_HOC_COMMANDS`: List of modules allowed to be used by ad-hoc jobs. (list) * `ALLOW_JINJA_IN_EXTRA_VARS`: Ansible allows variable substitution via the Jinja2 templating language for --extra-vars. This poses a potential security risk where users with the ability to specify extra vars at job launch time can use Jinja2 templates to run arbitrary Python.  It is recommended that this value be set to &quot;template&quot; or &quot;never&quot;. (choice) - `always`: Always - `never`: Never - `template`: Only On Job Template Definitions * `AWX_ISOLATION_BASE_PATH`: The directory in which the service will create new temporary directories for job execution and isolation (such as credential files). (string) * `AWX_ISOLATION_SHOW_PATHS`: List of paths that would otherwise be hidden to expose to isolated jobs. Enter one path per line. Volumes will be mounted from the execution node to the container. The supported format is HOST-DIR[:CONTAINER-DIR[:OPTIONS]].  (list) * `AWX_TASK_ENV`: Additional environment variables set for playbook runs, inventory updates, project updates, and notification sending. (nested object) * `GALAXY_TASK_ENV`: Additional environment variables set for invocations of ansible-galaxy within project updates. Useful if you must use a proxy server for ansible-galaxy but not git. (nested object) * `INSIGHTS_TRACKING_STATE`: Enables the service to gather data on automation and send it to Automation Analytics. (boolean) * `PROJECT_UPDATE_VVV`: Adds the CLI -vvv flag to ansible-playbook runs of project_update.yml used for project updates. (boolean) * `AWX_ROLES_ENABLED`: Allows roles to be dynamically downloaded from a requirements.yml file for SCM projects. (boolean) * `AWX_COLLECTIONS_ENABLED`: Allows collections to be dynamically downloaded from a requirements.yml file for SCM projects. (boolean) * `AWX_SHOW_PLAYBOOK_LINKS`: Follow symbolic links when scanning for playbooks. Be aware that setting this to True can lead to infinite recursion if a link points to a parent directory of itself. (boolean) * `AWX_MOUNT_ISOLATED_PATHS_ON_K8S`: Expose paths via hostPath for the Pods created by a Container Group. HostPath volumes present many security risks, and it is a best practice to avoid the use of HostPaths when possible.  (boolean) * `GALAXY_IGNORE_CERTS`: If set to true, certificate validation will not be done when installing content from any Galaxy server. (boolean) * `STDOUT_MAX_BYTES_DISPLAY`: Maximum Size of Standard Output in bytes to display before requiring the output be downloaded. (integer) * `EVENT_STDOUT_MAX_BYTES_DISPLAY`: Maximum Size of Standard Output in bytes to display for a single job or ad hoc command event. `stdout` will end with `…` when truncated. (integer) * `MAX_WEBSOCKET_EVENT_RATE`: Maximum number of messages to update the UI live job output with per second. Value of 0 means no limit. (integer) * `SCHEDULE_MAX_JOBS`: Maximum number of the same job template that can be waiting to run when launching from a schedule before no more are created. (integer) * `AWX_ANSIBLE_CALLBACK_PLUGINS`: List of paths to search for extra callback plugins to be used when running jobs. Enter one path per line. (list) * `DEFAULT_JOB_TIMEOUT`: Maximum time in seconds to allow jobs to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual job template will override this. (integer) * `DEFAULT_JOB_IDLE_TIMEOUT`: If no output is detected from ansible in this number of seconds the execution will be terminated. Use value of 0 to indicate that no idle timeout should be imposed. (integer) * `DEFAULT_INVENTORY_UPDATE_TIMEOUT`: Maximum time in seconds to allow inventory updates to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual inventory source will override this. (integer) * `DEFAULT_PROJECT_UPDATE_TIMEOUT`: Maximum time in seconds to allow project updates to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual project will override this. (integer) * `ANSIBLE_FACT_CACHE_TIMEOUT`: Maximum time, in seconds, that stored Ansible facts are considered valid since the last time they were modified. Only valid, non-stale, facts will be accessible by a playbook. Note, this does not influence the deletion of ansible_facts from the database. Use a value of 0 to indicate that no timeout should be imposed. (integer) * `MAX_FORKS`: Saving a Job Template with more than this number of forks will result in an error. When set to 0, no limit is applied. (integer) * `LOG_AGGREGATOR_HOST`: Hostname/IP where external logs will be sent to. (string) * `LOG_AGGREGATOR_PORT`: Port on Logging Aggregator to send logs to (if required and not provided in Logging Aggregator). (integer) * `LOG_AGGREGATOR_TYPE`: Format messages for the chosen log aggregator. (choice) - `None`: --------- - `logstash` - `splunk` - `loggly` - `sumologic` - `other` * `LOG_AGGREGATOR_USERNAME`: Username for external log aggregator (if required; HTTP/s only). (string) * `LOG_AGGREGATOR_PASSWORD`: Password or authentication token for external log aggregator (if required; HTTP/s only). (string) * `LOG_AGGREGATOR_LOGGERS`: List of loggers that will send HTTP logs to the collector, these can include any or all of: awx - service logs activity_stream - activity stream records job_events - callback data from Ansible job events system_tracking - facts gathered from scan jobs. (list) * `LOG_AGGREGATOR_INDIVIDUAL_FACTS`: If set, system tracking facts will be sent for each package, service, or other item found in a scan, allowing for greater search query granularity. If unset, facts will be sent as a single dictionary, allowing for greater efficiency in fact processing. (boolean) * `LOG_AGGREGATOR_ENABLED`: Enable sending logs to external log aggregator. (boolean) * `LOG_AGGREGATOR_TOWER_UUID`: Useful to uniquely identify instances. (string) * `LOG_AGGREGATOR_PROTOCOL`: Protocol used to communicate with log aggregator.  HTTPS/HTTP assumes HTTPS unless http:// is explicitly used in the Logging Aggregator hostname. (choice) - `https`: HTTPS/HTTP - `tcp`: TCP - `udp`: UDP * `LOG_AGGREGATOR_TCP_TIMEOUT`: Number of seconds for a TCP connection to external log aggregator to timeout. Applies to HTTPS and TCP log aggregator protocols. (integer) * `LOG_AGGREGATOR_VERIFY_CERT`: Flag to control enable/disable of certificate verification when LOG_AGGREGATOR_PROTOCOL is &quot;https&quot;. If enabled, the log handler will verify certificate sent by external log aggregator before establishing connection. (boolean) * `LOG_AGGREGATOR_LEVEL`: Level threshold used by log handler. Severities from lowest to highest are DEBUG, INFO, WARNING, ERROR, CRITICAL. Messages less severe than the threshold will be ignored by log handler. (messages under category awx.anlytics ignore this setting) (choice) - `DEBUG` - `INFO` - `WARNING` - `ERROR` - `CRITICAL` * `LOG_AGGREGATOR_MAX_DISK_USAGE_GB`: Amount of data to store (in gigabytes) during an outage of the external log aggregator (defaults to 1). Equivalent to the rsyslogd queue.maxdiskspace setting. (integer) * `LOG_AGGREGATOR_MAX_DISK_USAGE_PATH`: Location to persist logs that should be retried after an outage of the external log aggregator (defaults to /var/lib/awx). Equivalent to the rsyslogd queue.spoolDirectory setting. (string) * `LOG_AGGREGATOR_RSYSLOGD_DEBUG`: Enabled high verbosity debugging for rsyslogd.  Useful for debugging connection issues for external log aggregation. (boolean) * `API_400_ERROR_LOG_FORMAT`: The format of logged messages when an API 4XX error occurs, the following variables will be substituted: status_code - The HTTP status code of the error user_name - The user name attempting to use the API url_path - The URL path to the API endpoint called remote_addr - The remote address seen for the user error - The error set by the api endpoint Variables need to be in the format {&lt;variable name&gt;}. (string) * `AUTOMATION_ANALYTICS_LAST_GATHER`:  (datetime) * `AUTOMATION_ANALYTICS_LAST_ENTRIES`:  (string) * `AUTOMATION_ANALYTICS_GATHER_INTERVAL`: Interval (in seconds) between data gathering. (integer) * `IS_K8S`: Indicates whether the instance is part of a kubernetes-based deployment. (boolean) * `SESSION_COOKIE_AGE`: Number of seconds that a user is inactive before they will need to login again. (integer) * `SESSIONS_PER_USER`: Maximum number of simultaneous logged in sessions a user may have. To disable enter -1. (integer) * `DISABLE_LOCAL_AUTH`: Controls whether users are prevented from using the built-in authentication system. You probably want to do this if you are using an LDAP or SAML integration. (boolean) * `AUTH_BASIC_ENABLED`: Enable HTTP Basic Auth for the API Browser. (boolean) * `OAUTH2_PROVIDER`: Dictionary for customizing OAuth 2 timeouts, available items are `ACCESS_TOKEN_EXPIRE_SECONDS`, the duration of access tokens in the number of seconds, `AUTHORIZATION_CODE_EXPIRE_SECONDS`, the duration of authorization codes in the number of seconds, and `REFRESH_TOKEN_EXPIRE_SECONDS`, the duration of refresh tokens, after expired access tokens, in the number of seconds. (nested object) * `ALLOW_OAUTH2_FOR_EXTERNAL_USERS`: For security reasons, users from external auth providers (LDAP, SAML, SSO, Radius, and others) are not allowed to create OAuth2 tokens. To change this behavior, enable this setting. Existing tokens will not be deleted when this setting is toggled off. (boolean) * `LOGIN_REDIRECT_OVERRIDE`: URL to which unauthorized users will be redirected to log in.  If blank, users will be sent to the login page. (string) * `PENDO_TRACKING_STATE`: Enable or Disable User Analytics Tracking. (choice) - `off`: Off - `anonymous`: Anonymous - `detailed`: Detailed * `CUSTOM_LOGIN_INFO`: If needed, you can add specific information (such as a legal notice or a disclaimer) to a text box in the login modal using this setting. Any content added must be in plain text or an HTML fragment, as other markup languages are not supported. (string) * `CUSTOM_LOGO`: To set up a custom logo, provide a file that you create. For the custom logo to look its best, use a .png file with a transparent background. GIF, PNG and JPEG formats are supported. (string) * `MAX_UI_JOB_EVENTS`: Maximum number of job events for the UI to retrieve within a single request. (integer) * `UI_LIVE_UPDATES_ENABLED`: If disabled, the page will not refresh when events are received. Reloading the page will be required to get the latest details. (boolean) * `AUTHENTICATION_BACKENDS`: List of authentication backends that are enabled based on license features and other authentication settings. (list) * `SOCIAL_AUTH_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_USER_FIELDS`: When set to an empty list `[]`, this setting prevents new user accounts from being created. Only users who have previously logged in using social auth or have a user account with a matching email address will be able to login. (list) * `AUTH_LDAP_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string) * `AUTH_LDAP_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string) * `AUTH_LDAP_BIND_PASSWORD`: Password used to bind LDAP user account. (string) * `AUTH_LDAP_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean) * `AUTH_LDAP_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object) * `AUTH_LDAP_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list) * `AUTH_LDAP_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string) * `AUTH_LDAP_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object) * `AUTH_LDAP_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list) * `AUTH_LDAP_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object) * `AUTH_LDAP_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string) * `AUTH_LDAP_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string) * `AUTH_LDAP_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object) * `AUTH_LDAP_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_1_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string) * `AUTH_LDAP_1_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string) * `AUTH_LDAP_1_BIND_PASSWORD`: Password used to bind LDAP user account. (string) * `AUTH_LDAP_1_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean) * `AUTH_LDAP_1_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object) * `AUTH_LDAP_1_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list) * `AUTH_LDAP_1_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string) * `AUTH_LDAP_1_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object) * `AUTH_LDAP_1_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list) * `AUTH_LDAP_1_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_1_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object) * `AUTH_LDAP_1_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string) * `AUTH_LDAP_1_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string) * `AUTH_LDAP_1_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object) * `AUTH_LDAP_1_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_1_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_2_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string) * `AUTH_LDAP_2_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string) * `AUTH_LDAP_2_BIND_PASSWORD`: Password used to bind LDAP user account. (string) * `AUTH_LDAP_2_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean) * `AUTH_LDAP_2_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object) * `AUTH_LDAP_2_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list) * `AUTH_LDAP_2_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string) * `AUTH_LDAP_2_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object) * `AUTH_LDAP_2_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list) * `AUTH_LDAP_2_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_2_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object) * `AUTH_LDAP_2_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string) * `AUTH_LDAP_2_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string) * `AUTH_LDAP_2_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object) * `AUTH_LDAP_2_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_2_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_3_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string) * `AUTH_LDAP_3_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string) * `AUTH_LDAP_3_BIND_PASSWORD`: Password used to bind LDAP user account. (string) * `AUTH_LDAP_3_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean) * `AUTH_LDAP_3_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object) * `AUTH_LDAP_3_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list) * `AUTH_LDAP_3_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string) * `AUTH_LDAP_3_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object) * `AUTH_LDAP_3_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list) * `AUTH_LDAP_3_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_3_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object) * `AUTH_LDAP_3_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string) * `AUTH_LDAP_3_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string) * `AUTH_LDAP_3_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object) * `AUTH_LDAP_3_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_3_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_4_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string) * `AUTH_LDAP_4_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string) * `AUTH_LDAP_4_BIND_PASSWORD`: Password used to bind LDAP user account. (string) * `AUTH_LDAP_4_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean) * `AUTH_LDAP_4_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object) * `AUTH_LDAP_4_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list) * `AUTH_LDAP_4_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string) * `AUTH_LDAP_4_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object) * `AUTH_LDAP_4_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list) * `AUTH_LDAP_4_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_4_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object) * `AUTH_LDAP_4_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string) * `AUTH_LDAP_4_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string) * `AUTH_LDAP_4_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object) * `AUTH_LDAP_4_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_4_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_5_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string) * `AUTH_LDAP_5_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string) * `AUTH_LDAP_5_BIND_PASSWORD`: Password used to bind LDAP user account. (string) * `AUTH_LDAP_5_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean) * `AUTH_LDAP_5_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object) * `AUTH_LDAP_5_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list) * `AUTH_LDAP_5_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string) * `AUTH_LDAP_5_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object) * `AUTH_LDAP_5_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list) * `AUTH_LDAP_5_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_5_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object) * `AUTH_LDAP_5_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string) * `AUTH_LDAP_5_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string) * `AUTH_LDAP_5_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object) * `AUTH_LDAP_5_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_5_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object) * `RADIUS_SERVER`: Hostname/IP of RADIUS server. RADIUS authentication is disabled if this setting is empty. (string) * `RADIUS_PORT`: Port of RADIUS server. (integer) * `RADIUS_SECRET`: Shared secret for authenticating to RADIUS server. (string) * `TACACSPLUS_HOST`: Hostname of TACACS+ server. (string) * `TACACSPLUS_PORT`: Port number of TACACS+ server. (integer) * `TACACSPLUS_SECRET`: Shared secret for authenticating to TACACS+ server. (string) * `TACACSPLUS_SESSION_TIMEOUT`: TACACS+ session timeout value in seconds, 0 disables timeout. (integer) * `TACACSPLUS_AUTH_PROTOCOL`: Choose the authentication protocol used by TACACS+ client. (choice) - `ascii` - `pap` * `SOCIAL_AUTH_GOOGLE_OAUTH2_CALLBACK_URL`: Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail. (string) * `SOCIAL_AUTH_GOOGLE_OAUTH2_KEY`: The OAuth2 key from your web application. (string) * `SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET`: The OAuth2 secret from your web application. (string) * `SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS`: Update this setting to restrict the domains who are allowed to login using Google OAuth2. (list) * `SOCIAL_AUTH_GOOGLE_OAUTH2_AUTH_EXTRA_ARGUMENTS`: Extra arguments for Google OAuth2 login. You can restrict it to only allow a single domain to authenticate, even if the user is logged in with multple Google accounts. Refer to the documentation for more detail. (nested object) * `SOCIAL_AUTH_GOOGLE_OAUTH2_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GOOGLE_OAUTH2_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_CALLBACK_URL`: Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail. (string) * `SOCIAL_AUTH_GITHUB_KEY`: The OAuth2 key (Client ID) from your GitHub developer application. (string) * `SOCIAL_AUTH_GITHUB_SECRET`: The OAuth2 secret (Client Secret) from your GitHub developer application. (string) * `SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ORG_CALLBACK_URL`: Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail. (string) * `SOCIAL_AUTH_GITHUB_ORG_KEY`: The OAuth2 key (Client ID) from your GitHub organization application. (string) * `SOCIAL_AUTH_GITHUB_ORG_SECRET`: The OAuth2 secret (Client Secret) from your GitHub organization application. (string) * `SOCIAL_AUTH_GITHUB_ORG_NAME`: The name of your GitHub organization, as used in your organization&#x27;s URL: https://github.com/&lt;yourorg&gt;/. (string) * `SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_TEAM_CALLBACK_URL`: Create an organization-owned application at https://github.com/organizations/&lt;yourorg&gt;/settings/applications and obtain an OAuth2 key (Client ID) and secret (Client Secret). Provide this URL as the callback URL for your application. (string) * `SOCIAL_AUTH_GITHUB_TEAM_KEY`: The OAuth2 key (Client ID) from your GitHub organization application. (string) * `SOCIAL_AUTH_GITHUB_TEAM_SECRET`: The OAuth2 secret (Client Secret) from your GitHub organization application. (string) * `SOCIAL_AUTH_GITHUB_TEAM_ID`: Find the numeric team ID using the Github API: http://fabian-kostadinov.github.io/2015/01/16/how-to-find-a-github-team-id/. (string) * `SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_CALLBACK_URL`: Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_URL`: The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_API_URL`: The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_KEY`: The OAuth2 key (Client ID) from your GitHub Enterprise developer application. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_SECRET`: The OAuth2 secret (Client Secret) from your GitHub Enterprise developer application. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_CALLBACK_URL`: Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_URL`: The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_API_URL`: The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_KEY`: The OAuth2 key (Client ID) from your GitHub Enterprise organization application. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_SECRET`: The OAuth2 secret (Client Secret) from your GitHub Enterprise organization application. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_NAME`: The name of your GitHub Enterprise organization, as used in your organization&#x27;s URL: https://github.com/&lt;yourorg&gt;/. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_CALLBACK_URL`: Create an organization-owned application at https://github.com/organizations/&lt;yourorg&gt;/settings/applications and obtain an OAuth2 key (Client ID) and secret (Client Secret). Provide this URL as the callback URL for your application. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_URL`: The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_API_URL`: The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_KEY`: The OAuth2 key (Client ID) from your GitHub Enterprise organization application. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_SECRET`: The OAuth2 secret (Client Secret) from your GitHub Enterprise organization application. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ID`: Find the numeric team ID using the Github Enterprise API: http://fabian-kostadinov.github.io/2015/01/16/how-to-find-a-github-team-id/. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_AZUREAD_OAUTH2_CALLBACK_URL`: Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail.  (string) * `SOCIAL_AUTH_AZUREAD_OAUTH2_KEY`: The OAuth2 key (Client ID) from your Azure AD application. (string) * `SOCIAL_AUTH_AZUREAD_OAUTH2_SECRET`: The OAuth2 secret (Client Secret) from your Azure AD application. (string) * `SOCIAL_AUTH_AZUREAD_OAUTH2_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_AZUREAD_OAUTH2_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_OIDC_KEY`: The OIDC key (Client ID) from your IDP. (string) * `SOCIAL_AUTH_OIDC_SECRET`: The OIDC secret (Client Secret) from your IDP. (string) * `SOCIAL_AUTH_OIDC_OIDC_ENDPOINT`: The URL for your OIDC provider including the path up to /.well-known/openid-configuration (string) * `SOCIAL_AUTH_OIDC_VERIFY_SSL`: Verify the OIDV provider ssl certificate. (boolean) * `SAML_AUTO_CREATE_OBJECTS`: When enabled (the default), mapped Organizations and Teams will be created automatically on successful SAML login. (boolean) * `SOCIAL_AUTH_SAML_CALLBACK_URL`: Register the service as a service provider (SP) with each identity provider (IdP) you have configured. Provide your SP Entity ID and this ACS URL for your application. (string) * `SOCIAL_AUTH_SAML_METADATA_URL`: If your identity provider (IdP) allows uploading an XML metadata file, you can download one from this URL. (string) * `SOCIAL_AUTH_SAML_SP_ENTITY_ID`: The application-defined unique identifier used as the audience of the SAML service provider (SP) configuration. This is usually the URL for the service. (string) * `SOCIAL_AUTH_SAML_SP_PUBLIC_CERT`: Create a keypair to use as a service provider (SP) and include the certificate content here. (string) * `SOCIAL_AUTH_SAML_SP_PRIVATE_KEY`: Create a keypair to use as a service provider (SP) and include the private key content here. (string) * `SOCIAL_AUTH_SAML_ORG_INFO`: Provide the URL, display name, and the name of your app. Refer to the documentation for example syntax. (nested object) * `SOCIAL_AUTH_SAML_TECHNICAL_CONTACT`: Provide the name and email address of the technical contact for your service provider. Refer to the documentation for example syntax. (nested object) * `SOCIAL_AUTH_SAML_SUPPORT_CONTACT`: Provide the name and email address of the support contact for your service provider. Refer to the documentation for example syntax. (nested object) * `SOCIAL_AUTH_SAML_ENABLED_IDPS`: Configure the Entity ID, SSO URL and certificate for each identity provider (IdP) in use. Multiple SAML IdPs are supported. Some IdPs may provide user data using attribute names that differ from the default OIDs. Attribute names may be overridden for each IdP. Refer to the Ansible documentation for additional details and syntax. (nested object) * `SOCIAL_AUTH_SAML_SECURITY_CONFIG`: A dict of key value pairs that are passed to the underlying python-saml security setting https://github.com/onelogin/python-saml#settings (nested object) * `SOCIAL_AUTH_SAML_SP_EXTRA`: A dict of key value pairs to be passed to the underlying python-saml Service Provider configuration setting. (nested object) * `SOCIAL_AUTH_SAML_EXTRA_DATA`: A list of tuples that maps IDP attributes to extra_attributes. Each attribute will be a list of values, even if only 1 value. (list) * `SOCIAL_AUTH_SAML_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_SAML_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_SAML_ORGANIZATION_ATTR`: Used to translate user organization membership. (nested object) * `SOCIAL_AUTH_SAML_TEAM_ATTR`: Used to translate user team membership. (nested object) * `SOCIAL_AUTH_SAML_USER_FLAGS_BY_ATTR`: Used to map super users and system auditors from SAML. (nested object) * `NAMED_URL_FORMATS`: Read-only list of key-value pairs that shows the standard format of all available named URLs. (nested object) * `NAMED_URL_GRAPH_NODES`: Read-only list of key-value pairs that exposes named URL graph topology. Use this list to programmatically generate named URLs for resources (nested object) # Update a Setting: Make a PUT or PATCH request to this resource to update this setting.  The following fields may be modified: * `ACTIVITY_STREAM_ENABLED`: Enable capturing activity for the activity stream. (boolean, required) * `ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC`: Enable capturing activity for the activity stream when running inventory sync. (boolean, required) * `ORG_ADMINS_CAN_SEE_ALL_USERS`: Controls whether any Organization Admin can view all users and teams, even those not associated with their Organization. (boolean, required) * `MANAGE_ORGANIZATION_AUTH`: Controls whether any Organization Admin has the privileges to create and manage users and teams. You may want to disable this ability if you are using an LDAP or SAML integration. (boolean, required) * `TOWER_URL_BASE`: This setting is used by services like notifications to render a valid url to the service. (string, required) * `REMOTE_HOST_HEADERS`: HTTP headers and meta keys to search to determine remote host name or IP. Add additional items to this list, such as &quot;HTTP_X_FORWARDED_FOR&quot;, if behind a reverse proxy. See the &quot;Proxy Support&quot; section of the AAP Installation guide for more details. (list, required) * `PROXY_IP_ALLOWED_LIST`: If the service is behind a reverse proxy/load balancer, use this setting to configure the proxy IP addresses from which the service should trust custom REMOTE_HOST_HEADERS header values. If this setting is an empty list (the default), the headers specified by REMOTE_HOST_HEADERS will be trusted unconditionally&#x27;) (list, required) * `REDHAT_USERNAME`: This username is used to send data to Automation Analytics (string, default=`""`) * `REDHAT_PASSWORD`: This password is used to send data to Automation Analytics (string, default=`""`) * `SUBSCRIPTIONS_USERNAME`: This username is used to retrieve subscription and content information (string, default=`""`) * `SUBSCRIPTIONS_PASSWORD`: This password is used to retrieve subscription and content information (string, default=`""`) * `AUTOMATION_ANALYTICS_URL`: This setting is used to to configure the upload URL for data collection for Automation Analytics. (string, default=`"https://example.com"`) * `DEFAULT_EXECUTION_ENVIRONMENT`: The Execution Environment to be used when one has not been configured for a job template. (field, default=`None`) * `CUSTOM_VENV_PATHS`: Paths where Tower will look for custom virtual environments (in addition to /var/lib/awx/venv/). Enter one path per line. (list, default=`[]`) * `AD_HOC_COMMANDS`: List of modules allowed to be used by ad-hoc jobs. (list, default=`[&#x27;command&#x27;, &#x27;shell&#x27;, &#x27;yum&#x27;, &#x27;apt&#x27;, &#x27;apt_key&#x27;, &#x27;apt_repository&#x27;, &#x27;apt_rpm&#x27;, &#x27;service&#x27;, &#x27;group&#x27;, &#x27;user&#x27;, &#x27;mount&#x27;, &#x27;ping&#x27;, &#x27;selinux&#x27;, &#x27;setup&#x27;, &#x27;win_ping&#x27;, &#x27;win_service&#x27;, &#x27;win_updates&#x27;, &#x27;win_group&#x27;, &#x27;win_user&#x27;]`) * `ALLOW_JINJA_IN_EXTRA_VARS`: Ansible allows variable substitution via the Jinja2 templating language for --extra-vars. This poses a potential security risk where users with the ability to specify extra vars at job launch time can use Jinja2 templates to run arbitrary Python.  It is recommended that this value be set to &quot;template&quot; or &quot;never&quot;. (choice, required) - `always`: Always - `never`: Never - `template`: Only On Job Template Definitions (default) * `AWX_ISOLATION_BASE_PATH`: The directory in which the service will create new temporary directories for job execution and isolation (such as credential files). (string, required) * `AWX_ISOLATION_SHOW_PATHS`: List of paths that would otherwise be hidden to expose to isolated jobs. Enter one path per line. Volumes will be mounted from the execution node to the container. The supported format is HOST-DIR[:CONTAINER-DIR[:OPTIONS]].  (list, default=`[]`) * `AWX_TASK_ENV`: Additional environment variables set for playbook runs, inventory updates, project updates, and notification sending. (nested object, default=`{}`) * `GALAXY_TASK_ENV`: Additional environment variables set for invocations of ansible-galaxy within project updates. Useful if you must use a proxy server for ansible-galaxy but not git. (nested object, required) * `INSIGHTS_TRACKING_STATE`: Enables the service to gather data on automation and send it to Automation Analytics. (boolean, default=`False`) * `PROJECT_UPDATE_VVV`: Adds the CLI -vvv flag to ansible-playbook runs of project_update.yml used for project updates. (boolean, required) * `AWX_ROLES_ENABLED`: Allows roles to be dynamically downloaded from a requirements.yml file for SCM projects. (boolean, default=`True`) * `AWX_COLLECTIONS_ENABLED`: Allows collections to be dynamically downloaded from a requirements.yml file for SCM projects. (boolean, default=`True`) * `AWX_SHOW_PLAYBOOK_LINKS`: Follow symbolic links when scanning for playbooks. Be aware that setting this to True can lead to infinite recursion if a link points to a parent directory of itself. (boolean, default=`False`) * `AWX_MOUNT_ISOLATED_PATHS_ON_K8S`: Expose paths via hostPath for the Pods created by a Container Group. HostPath volumes present many security risks, and it is a best practice to avoid the use of HostPaths when possible.  (boolean, default=`False`) * `GALAXY_IGNORE_CERTS`: If set to true, certificate validation will not be done when installing content from any Galaxy server. (boolean, default=`False`) * `STDOUT_MAX_BYTES_DISPLAY`: Maximum Size of Standard Output in bytes to display before requiring the output be downloaded. (integer, required) * `EVENT_STDOUT_MAX_BYTES_DISPLAY`: Maximum Size of Standard Output in bytes to display for a single job or ad hoc command event. `stdout` will end with `…` when truncated. (integer, required) * `MAX_WEBSOCKET_EVENT_RATE`: Maximum number of messages to update the UI live job output with per second. Value of 0 means no limit. (integer, default=`30`) * `SCHEDULE_MAX_JOBS`: Maximum number of the same job template that can be waiting to run when launching from a schedule before no more are created. (integer, required) * `AWX_ANSIBLE_CALLBACK_PLUGINS`: List of paths to search for extra callback plugins to be used when running jobs. Enter one path per line. (list, default=`[]`) * `DEFAULT_JOB_TIMEOUT`: Maximum time in seconds to allow jobs to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual job template will override this. (integer, default=`0`) * `DEFAULT_JOB_IDLE_TIMEOUT`: If no output is detected from ansible in this number of seconds the execution will be terminated. Use value of 0 to indicate that no idle timeout should be imposed. (integer, default=`0`) * `DEFAULT_INVENTORY_UPDATE_TIMEOUT`: Maximum time in seconds to allow inventory updates to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual inventory source will override this. (integer, default=`0`) * `DEFAULT_PROJECT_UPDATE_TIMEOUT`: Maximum time in seconds to allow project updates to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual project will override this. (integer, default=`0`) * `ANSIBLE_FACT_CACHE_TIMEOUT`: Maximum time, in seconds, that stored Ansible facts are considered valid since the last time they were modified. Only valid, non-stale, facts will be accessible by a playbook. Note, this does not influence the deletion of ansible_facts from the database. Use a value of 0 to indicate that no timeout should be imposed. (integer, default=`0`) * `MAX_FORKS`: Saving a Job Template with more than this number of forks will result in an error. When set to 0, no limit is applied. (integer, default=`200`) * `LOG_AGGREGATOR_HOST`: Hostname/IP where external logs will be sent to. (string, default=`""`) * `LOG_AGGREGATOR_PORT`: Port on Logging Aggregator to send logs to (if required and not provided in Logging Aggregator). (integer, default=`None`) * `LOG_AGGREGATOR_TYPE`: Format messages for the chosen log aggregator. (choice) - `None`: --------- (default) - `logstash` - `splunk` - `loggly` - `sumologic` - `other` * `LOG_AGGREGATOR_USERNAME`: Username for external log aggregator (if required; HTTP/s only). (string, default=`""`) * `LOG_AGGREGATOR_PASSWORD`: Password or authentication token for external log aggregator (if required; HTTP/s only). (string, default=`""`) * `LOG_AGGREGATOR_LOGGERS`: List of loggers that will send HTTP logs to the collector, these can include any or all of: awx - service logs activity_stream - activity stream records job_events - callback data from Ansible job events system_tracking - facts gathered from scan jobs. (list, default=`[&#x27;awx&#x27;, &#x27;activity_stream&#x27;, &#x27;job_events&#x27;, &#x27;system_tracking&#x27;]`) * `LOG_AGGREGATOR_INDIVIDUAL_FACTS`: If set, system tracking facts will be sent for each package, service, or other item found in a scan, allowing for greater search query granularity. If unset, facts will be sent as a single dictionary, allowing for greater efficiency in fact processing. (boolean, default=`False`) * `LOG_AGGREGATOR_ENABLED`: Enable sending logs to external log aggregator. (boolean, default=`False`) * `LOG_AGGREGATOR_TOWER_UUID`: Useful to uniquely identify instances. (string, default=`""`) * `LOG_AGGREGATOR_PROTOCOL`: Protocol used to communicate with log aggregator.  HTTPS/HTTP assumes HTTPS unless http:// is explicitly used in the Logging Aggregator hostname. (choice) - `https`: HTTPS/HTTP (default) - `tcp`: TCP - `udp`: UDP * `LOG_AGGREGATOR_TCP_TIMEOUT`: Number of seconds for a TCP connection to external log aggregator to timeout. Applies to HTTPS and TCP log aggregator protocols. (integer, default=`5`) * `LOG_AGGREGATOR_VERIFY_CERT`: Flag to control enable/disable of certificate verification when LOG_AGGREGATOR_PROTOCOL is &quot;https&quot;. If enabled, the log handler will verify certificate sent by external log aggregator before establishing connection. (boolean, default=`True`) * `LOG_AGGREGATOR_LEVEL`: Level threshold used by log handler. Severities from lowest to highest are DEBUG, INFO, WARNING, ERROR, CRITICAL. Messages less severe than the threshold will be ignored by log handler. (messages under category awx.anlytics ignore this setting) (choice) - `DEBUG` - `INFO` (default) - `WARNING` - `ERROR` - `CRITICAL` * `LOG_AGGREGATOR_MAX_DISK_USAGE_GB`: Amount of data to store (in gigabytes) during an outage of the external log aggregator (defaults to 1). Equivalent to the rsyslogd queue.maxdiskspace setting. (integer, default=`1`) * `LOG_AGGREGATOR_MAX_DISK_USAGE_PATH`: Location to persist logs that should be retried after an outage of the external log aggregator (defaults to /var/lib/awx). Equivalent to the rsyslogd queue.spoolDirectory setting. (string, default=`"/var/lib/awx"`) * `LOG_AGGREGATOR_RSYSLOGD_DEBUG`: Enabled high verbosity debugging for rsyslogd.  Useful for debugging connection issues for external log aggregation. (boolean, default=`False`) * `API_400_ERROR_LOG_FORMAT`: The format of logged messages when an API 4XX error occurs, the following variables will be substituted: status_code - The HTTP status code of the error user_name - The user name attempting to use the API url_path - The URL path to the API endpoint called remote_addr - The remote address seen for the user error - The error set by the api endpoint Variables need to be in the format {&lt;variable name&gt;}. (string, default=`"status {status_code} received by user {user_name} attempting to access {url_path} from {remote_addr}"`) * `AUTOMATION_ANALYTICS_LAST_GATHER`:  (datetime, required) * `AUTOMATION_ANALYTICS_LAST_ENTRIES`:  (string, default=`""`) * `AUTOMATION_ANALYTICS_GATHER_INTERVAL`: Interval (in seconds) between data gathering. (integer, default=`14400`) * `SESSION_COOKIE_AGE`: Number of seconds that a user is inactive before they will need to login again. (integer, required) * `SESSIONS_PER_USER`: Maximum number of simultaneous logged in sessions a user may have. To disable enter -1. (integer, required) * `DISABLE_LOCAL_AUTH`: Controls whether users are prevented from using the built-in authentication system. You probably want to do this if you are using an LDAP or SAML integration. (boolean, required) * `AUTH_BASIC_ENABLED`: Enable HTTP Basic Auth for the API Browser. (boolean, required) * `OAUTH2_PROVIDER`: Dictionary for customizing OAuth 2 timeouts, available items are `ACCESS_TOKEN_EXPIRE_SECONDS`, the duration of access tokens in the number of seconds, `AUTHORIZATION_CODE_EXPIRE_SECONDS`, the duration of authorization codes in the number of seconds, and `REFRESH_TOKEN_EXPIRE_SECONDS`, the duration of refresh tokens, after expired access tokens, in the number of seconds. (nested object, default=`{&#x27;ACCESS_TOKEN_EXPIRE_SECONDS&#x27;: 31536000000, &#x27;AUTHORIZATION_CODE_EXPIRE_SECONDS&#x27;: 600, &#x27;REFRESH_TOKEN_EXPIRE_SECONDS&#x27;: 2628000}`) * `ALLOW_OAUTH2_FOR_EXTERNAL_USERS`: For security reasons, users from external auth providers (LDAP, SAML, SSO, Radius, and others) are not allowed to create OAuth2 tokens. To change this behavior, enable this setting. Existing tokens will not be deleted when this setting is toggled off. (boolean, default=`False`) * `LOGIN_REDIRECT_OVERRIDE`: URL to which unauthorized users will be redirected to log in.  If blank, users will be sent to the login page. (string, default=`""`) * `CUSTOM_LOGIN_INFO`: If needed, you can add specific information (such as a legal notice or a disclaimer) to a text box in the login modal using this setting. Any content added must be in plain text or an HTML fragment, as other markup languages are not supported. (string, default=`""`) * `CUSTOM_LOGO`: To set up a custom logo, provide a file that you create. For the custom logo to look its best, use a .png file with a transparent background. GIF, PNG and JPEG formats are supported. (string, default=`""`) * `MAX_UI_JOB_EVENTS`: Maximum number of job events for the UI to retrieve within a single request. (integer, required) * `UI_LIVE_UPDATES_ENABLED`: If disabled, the page will not refresh when events are received. Reloading the page will be required to get the latest details. (boolean, required) * `SOCIAL_AUTH_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_USER_FIELDS`: When set to an empty list `[]`, this setting prevents new user accounts from being created. Only users who have previously logged in using social auth or have a user account with a matching email address will be able to login. (list, default=`None`) * `AUTH_LDAP_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string, default=`""`) * `AUTH_LDAP_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string, default=`""`) * `AUTH_LDAP_BIND_PASSWORD`: Password used to bind LDAP user account. (string, default=`""`) * `AUTH_LDAP_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean, default=`False`) * `AUTH_LDAP_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object, default=`{&#x27;OPT_REFERRALS&#x27;: 0, &#x27;OPT_NETWORK_TIMEOUT&#x27;: 30}`) * `AUTH_LDAP_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list, default=`[]`) * `AUTH_LDAP_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string, default=`""`) * `AUTH_LDAP_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object, default=`{}`) * `AUTH_LDAP_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list, default=`[]`) * `AUTH_LDAP_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` (default) - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object, default=`OrderedDict([(&#x27;member_attr&#x27;, &#x27;member&#x27;), (&#x27;name_attr&#x27;, &#x27;cn&#x27;)])`) * `AUTH_LDAP_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string, default=`""`) * `AUTH_LDAP_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string, default=`""`) * `AUTH_LDAP_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object, default=`{}`) * `AUTH_LDAP_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_1_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string, default=`""`) * `AUTH_LDAP_1_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string, default=`""`) * `AUTH_LDAP_1_BIND_PASSWORD`: Password used to bind LDAP user account. (string, default=`""`) * `AUTH_LDAP_1_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean, default=`False`) * `AUTH_LDAP_1_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object, default=`{&#x27;OPT_REFERRALS&#x27;: 0, &#x27;OPT_NETWORK_TIMEOUT&#x27;: 30}`) * `AUTH_LDAP_1_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list, default=`[]`) * `AUTH_LDAP_1_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string, default=`""`) * `AUTH_LDAP_1_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object, default=`{}`) * `AUTH_LDAP_1_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list, default=`[]`) * `AUTH_LDAP_1_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` (default) - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_1_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object, default=`OrderedDict([(&#x27;member_attr&#x27;, &#x27;member&#x27;), (&#x27;name_attr&#x27;, &#x27;cn&#x27;)])`) * `AUTH_LDAP_1_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string, default=`""`) * `AUTH_LDAP_1_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string, default=`""`) * `AUTH_LDAP_1_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object, default=`{}`) * `AUTH_LDAP_1_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_1_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_2_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string, default=`""`) * `AUTH_LDAP_2_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string, default=`""`) * `AUTH_LDAP_2_BIND_PASSWORD`: Password used to bind LDAP user account. (string, default=`""`) * `AUTH_LDAP_2_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean, default=`False`) * `AUTH_LDAP_2_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object, default=`{&#x27;OPT_REFERRALS&#x27;: 0, &#x27;OPT_NETWORK_TIMEOUT&#x27;: 30}`) * `AUTH_LDAP_2_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list, default=`[]`) * `AUTH_LDAP_2_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string, default=`""`) * `AUTH_LDAP_2_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object, default=`{}`) * `AUTH_LDAP_2_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list, default=`[]`) * `AUTH_LDAP_2_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` (default) - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_2_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object, default=`OrderedDict([(&#x27;member_attr&#x27;, &#x27;member&#x27;), (&#x27;name_attr&#x27;, &#x27;cn&#x27;)])`) * `AUTH_LDAP_2_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string, default=`""`) * `AUTH_LDAP_2_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string, default=`""`) * `AUTH_LDAP_2_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object, default=`{}`) * `AUTH_LDAP_2_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_2_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_3_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string, default=`""`) * `AUTH_LDAP_3_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string, default=`""`) * `AUTH_LDAP_3_BIND_PASSWORD`: Password used to bind LDAP user account. (string, default=`""`) * `AUTH_LDAP_3_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean, default=`False`) * `AUTH_LDAP_3_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object, default=`{&#x27;OPT_REFERRALS&#x27;: 0, &#x27;OPT_NETWORK_TIMEOUT&#x27;: 30}`) * `AUTH_LDAP_3_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list, default=`[]`) * `AUTH_LDAP_3_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string, default=`""`) * `AUTH_LDAP_3_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object, default=`{}`) * `AUTH_LDAP_3_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list, default=`[]`) * `AUTH_LDAP_3_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` (default) - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_3_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object, default=`OrderedDict([(&#x27;member_attr&#x27;, &#x27;member&#x27;), (&#x27;name_attr&#x27;, &#x27;cn&#x27;)])`) * `AUTH_LDAP_3_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string, default=`""`) * `AUTH_LDAP_3_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string, default=`""`) * `AUTH_LDAP_3_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object, default=`{}`) * `AUTH_LDAP_3_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_3_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_4_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string, default=`""`) * `AUTH_LDAP_4_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string, default=`""`) * `AUTH_LDAP_4_BIND_PASSWORD`: Password used to bind LDAP user account. (string, default=`""`) * `AUTH_LDAP_4_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean, default=`False`) * `AUTH_LDAP_4_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object, default=`{&#x27;OPT_REFERRALS&#x27;: 0, &#x27;OPT_NETWORK_TIMEOUT&#x27;: 30}`) * `AUTH_LDAP_4_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list, default=`[]`) * `AUTH_LDAP_4_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string, default=`""`) * `AUTH_LDAP_4_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object, default=`{}`) * `AUTH_LDAP_4_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list, default=`[]`) * `AUTH_LDAP_4_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` (default) - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_4_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object, default=`OrderedDict([(&#x27;member_attr&#x27;, &#x27;member&#x27;), (&#x27;name_attr&#x27;, &#x27;cn&#x27;)])`) * `AUTH_LDAP_4_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string, default=`""`) * `AUTH_LDAP_4_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string, default=`""`) * `AUTH_LDAP_4_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object, default=`{}`) * `AUTH_LDAP_4_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_4_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_5_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string, default=`""`) * `AUTH_LDAP_5_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string, default=`""`) * `AUTH_LDAP_5_BIND_PASSWORD`: Password used to bind LDAP user account. (string, default=`""`) * `AUTH_LDAP_5_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean, default=`False`) * `AUTH_LDAP_5_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object, default=`{&#x27;OPT_REFERRALS&#x27;: 0, &#x27;OPT_NETWORK_TIMEOUT&#x27;: 30}`) * `AUTH_LDAP_5_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list, default=`[]`) * `AUTH_LDAP_5_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string, default=`""`) * `AUTH_LDAP_5_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object, default=`{}`) * `AUTH_LDAP_5_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list, default=`[]`) * `AUTH_LDAP_5_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` (default) - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_5_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object, default=`OrderedDict([(&#x27;member_attr&#x27;, &#x27;member&#x27;), (&#x27;name_attr&#x27;, &#x27;cn&#x27;)])`) * `AUTH_LDAP_5_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string, default=`""`) * `AUTH_LDAP_5_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string, default=`""`) * `AUTH_LDAP_5_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object, default=`{}`) * `AUTH_LDAP_5_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_5_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object, default=`{}`) * `RADIUS_SERVER`: Hostname/IP of RADIUS server. RADIUS authentication is disabled if this setting is empty. (string, default=`""`) * `RADIUS_PORT`: Port of RADIUS server. (integer, default=`1812`) * `RADIUS_SECRET`: Shared secret for authenticating to RADIUS server. (string, default=`""`) * `TACACSPLUS_HOST`: Hostname of TACACS+ server. (string, default=`""`) * `TACACSPLUS_PORT`: Port number of TACACS+ server. (integer, default=`49`) * `TACACSPLUS_SECRET`: Shared secret for authenticating to TACACS+ server. (string, default=`""`) * `TACACSPLUS_SESSION_TIMEOUT`: TACACS+ session timeout value in seconds, 0 disables timeout. (integer, default=`5`) * `TACACSPLUS_AUTH_PROTOCOL`: Choose the authentication protocol used by TACACS+ client. (choice) - `ascii` (default) - `pap` * `SOCIAL_AUTH_GOOGLE_OAUTH2_KEY`: The OAuth2 key from your web application. (string, default=`""`) * `SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET`: The OAuth2 secret from your web application. (string, default=`""`) * `SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS`: Update this setting to restrict the domains who are allowed to login using Google OAuth2. (list, default=`[]`) * `SOCIAL_AUTH_GOOGLE_OAUTH2_AUTH_EXTRA_ARGUMENTS`: Extra arguments for Google OAuth2 login. You can restrict it to only allow a single domain to authenticate, even if the user is logged in with multple Google accounts. Refer to the documentation for more detail. (nested object, default=`{}`) * `SOCIAL_AUTH_GOOGLE_OAUTH2_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GOOGLE_OAUTH2_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_KEY`: The OAuth2 key (Client ID) from your GitHub developer application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_SECRET`: The OAuth2 secret (Client Secret) from your GitHub developer application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ORG_KEY`: The OAuth2 key (Client ID) from your GitHub organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ORG_SECRET`: The OAuth2 secret (Client Secret) from your GitHub organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ORG_NAME`: The name of your GitHub organization, as used in your organization&#x27;s URL: https://github.com/&lt;yourorg&gt;/. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_TEAM_KEY`: The OAuth2 key (Client ID) from your GitHub organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_TEAM_SECRET`: The OAuth2 secret (Client Secret) from your GitHub organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_TEAM_ID`: Find the numeric team ID using the Github API: http://fabian-kostadinov.github.io/2015/01/16/how-to-find-a-github-team-id/. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_URL`: The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_API_URL`: The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_KEY`: The OAuth2 key (Client ID) from your GitHub Enterprise developer application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_SECRET`: The OAuth2 secret (Client Secret) from your GitHub Enterprise developer application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_URL`: The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_API_URL`: The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_KEY`: The OAuth2 key (Client ID) from your GitHub Enterprise organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_SECRET`: The OAuth2 secret (Client Secret) from your GitHub Enterprise organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_NAME`: The name of your GitHub Enterprise organization, as used in your organization&#x27;s URL: https://github.com/&lt;yourorg&gt;/. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_URL`: The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_API_URL`: The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_KEY`: The OAuth2 key (Client ID) from your GitHub Enterprise organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_SECRET`: The OAuth2 secret (Client Secret) from your GitHub Enterprise organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ID`: Find the numeric team ID using the Github Enterprise API: http://fabian-kostadinov.github.io/2015/01/16/how-to-find-a-github-team-id/. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_AZUREAD_OAUTH2_KEY`: The OAuth2 key (Client ID) from your Azure AD application. (string, default=`""`) * `SOCIAL_AUTH_AZUREAD_OAUTH2_SECRET`: The OAuth2 secret (Client Secret) from your Azure AD application. (string, default=`""`) * `SOCIAL_AUTH_AZUREAD_OAUTH2_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_AZUREAD_OAUTH2_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_OIDC_KEY`: The OIDC key (Client ID) from your IDP. (string, default=`""`) * `SOCIAL_AUTH_OIDC_SECRET`: The OIDC secret (Client Secret) from your IDP. (string, default=`""`) * `SOCIAL_AUTH_OIDC_OIDC_ENDPOINT`: The URL for your OIDC provider including the path up to /.well-known/openid-configuration (string, default=`""`) * `SOCIAL_AUTH_OIDC_VERIFY_SSL`: Verify the OIDV provider ssl certificate. (boolean, default=`True`) * `SAML_AUTO_CREATE_OBJECTS`: When enabled (the default), mapped Organizations and Teams will be created automatically on successful SAML login. (boolean, default=`True`) * `SOCIAL_AUTH_SAML_SP_ENTITY_ID`: The application-defined unique identifier used as the audience of the SAML service provider (SP) configuration. This is usually the URL for the service. (string, default=`""`) * `SOCIAL_AUTH_SAML_SP_PUBLIC_CERT`: Create a keypair to use as a service provider (SP) and include the certificate content here. (string, required) * `SOCIAL_AUTH_SAML_SP_PRIVATE_KEY`: Create a keypair to use as a service provider (SP) and include the private key content here. (string, required) * `SOCIAL_AUTH_SAML_ORG_INFO`: Provide the URL, display name, and the name of your app. Refer to the documentation for example syntax. (nested object, required) * `SOCIAL_AUTH_SAML_TECHNICAL_CONTACT`: Provide the name and email address of the technical contact for your service provider. Refer to the documentation for example syntax. (nested object, required) * `SOCIAL_AUTH_SAML_SUPPORT_CONTACT`: Provide the name and email address of the support contact for your service provider. Refer to the documentation for example syntax. (nested object, required) * `SOCIAL_AUTH_SAML_ENABLED_IDPS`: Configure the Entity ID, SSO URL and certificate for each identity provider (IdP) in use. Multiple SAML IdPs are supported. Some IdPs may provide user data using attribute names that differ from the default OIDs. Attribute names may be overridden for each IdP. Refer to the Ansible documentation for additional details and syntax. (nested object, default=`{}`) * `SOCIAL_AUTH_SAML_SECURITY_CONFIG`: A dict of key value pairs that are passed to the underlying python-saml security setting https://github.com/onelogin/python-saml#settings (nested object, default=`{&#x27;requestedAuthnContext&#x27;: False}`) * `SOCIAL_AUTH_SAML_SP_EXTRA`: A dict of key value pairs to be passed to the underlying python-saml Service Provider configuration setting. (nested object, default=`None`) * `SOCIAL_AUTH_SAML_EXTRA_DATA`: A list of tuples that maps IDP attributes to extra_attributes. Each attribute will be a list of values, even if only 1 value. (list, default=`None`) * `SOCIAL_AUTH_SAML_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_SAML_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_SAML_ORGANIZATION_ATTR`: Used to translate user organization membership. (nested object, default=`{}`) * `SOCIAL_AUTH_SAML_TEAM_ATTR`: Used to translate user team membership. (nested object, default=`{}`) * `SOCIAL_AUTH_SAML_USER_FLAGS_BY_ATTR`: Used to map super users and system auditors from SAML. (nested object, default=`{}`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Setting: Make a DELETE request to this resource to delete this setting.
     *
     * @tags api
     * @name ApiSettingsUpdate
     * @summary # Retrieve a Setting:
     * @request PUT:/api/{version}/settings/{category_slug}/
     * @secure
     */
    apiSettingsUpdate: (
      categorySlug: string,
      version: string,
      data: SettingSingleton,
      params: RequestParams = {}
    ) =>
      this.request<SettingSingleton, any>({
        path: `/api/${version}/settings/${categorySlug}/`,
        method: 'PUT',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single setting record containing the following fields: * `ACTIVITY_STREAM_ENABLED`: Enable capturing activity for the activity stream. (boolean) * `ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC`: Enable capturing activity for the activity stream when running inventory sync. (boolean) * `ORG_ADMINS_CAN_SEE_ALL_USERS`: Controls whether any Organization Admin can view all users and teams, even those not associated with their Organization. (boolean) * `MANAGE_ORGANIZATION_AUTH`: Controls whether any Organization Admin has the privileges to create and manage users and teams. You may want to disable this ability if you are using an LDAP or SAML integration. (boolean) * `TOWER_URL_BASE`: This setting is used by services like notifications to render a valid url to the service. (string) * `REMOTE_HOST_HEADERS`: HTTP headers and meta keys to search to determine remote host name or IP. Add additional items to this list, such as &quot;HTTP_X_FORWARDED_FOR&quot;, if behind a reverse proxy. See the &quot;Proxy Support&quot; section of the AAP Installation guide for more details. (list) * `PROXY_IP_ALLOWED_LIST`: If the service is behind a reverse proxy/load balancer, use this setting to configure the proxy IP addresses from which the service should trust custom REMOTE_HOST_HEADERS header values. If this setting is an empty list (the default), the headers specified by REMOTE_HOST_HEADERS will be trusted unconditionally&#x27;) (list) * `LICENSE`: The license controls which features and functionality are enabled. Use /api/v2/config/ to update or change the license. (nested object) * `REDHAT_USERNAME`: This username is used to send data to Automation Analytics (string) * `REDHAT_PASSWORD`: This password is used to send data to Automation Analytics (string) * `SUBSCRIPTIONS_USERNAME`: This username is used to retrieve subscription and content information (string) * `SUBSCRIPTIONS_PASSWORD`: This password is used to retrieve subscription and content information (string) * `AUTOMATION_ANALYTICS_URL`: This setting is used to to configure the upload URL for data collection for Automation Analytics. (string) * `INSTALL_UUID`:  (string) * `DEFAULT_CONTROL_PLANE_QUEUE_NAME`:  (string) * `DEFAULT_EXECUTION_QUEUE_NAME`:  (string) * `DEFAULT_EXECUTION_ENVIRONMENT`: The Execution Environment to be used when one has not been configured for a job template. (field) * `CUSTOM_VENV_PATHS`: Paths where Tower will look for custom virtual environments (in addition to /var/lib/awx/venv/). Enter one path per line. (list) * `AD_HOC_COMMANDS`: List of modules allowed to be used by ad-hoc jobs. (list) * `ALLOW_JINJA_IN_EXTRA_VARS`: Ansible allows variable substitution via the Jinja2 templating language for --extra-vars. This poses a potential security risk where users with the ability to specify extra vars at job launch time can use Jinja2 templates to run arbitrary Python.  It is recommended that this value be set to &quot;template&quot; or &quot;never&quot;. (choice) - `always`: Always - `never`: Never - `template`: Only On Job Template Definitions * `AWX_ISOLATION_BASE_PATH`: The directory in which the service will create new temporary directories for job execution and isolation (such as credential files). (string) * `AWX_ISOLATION_SHOW_PATHS`: List of paths that would otherwise be hidden to expose to isolated jobs. Enter one path per line. Volumes will be mounted from the execution node to the container. The supported format is HOST-DIR[:CONTAINER-DIR[:OPTIONS]].  (list) * `AWX_TASK_ENV`: Additional environment variables set for playbook runs, inventory updates, project updates, and notification sending. (nested object) * `GALAXY_TASK_ENV`: Additional environment variables set for invocations of ansible-galaxy within project updates. Useful if you must use a proxy server for ansible-galaxy but not git. (nested object) * `INSIGHTS_TRACKING_STATE`: Enables the service to gather data on automation and send it to Automation Analytics. (boolean) * `PROJECT_UPDATE_VVV`: Adds the CLI -vvv flag to ansible-playbook runs of project_update.yml used for project updates. (boolean) * `AWX_ROLES_ENABLED`: Allows roles to be dynamically downloaded from a requirements.yml file for SCM projects. (boolean) * `AWX_COLLECTIONS_ENABLED`: Allows collections to be dynamically downloaded from a requirements.yml file for SCM projects. (boolean) * `AWX_SHOW_PLAYBOOK_LINKS`: Follow symbolic links when scanning for playbooks. Be aware that setting this to True can lead to infinite recursion if a link points to a parent directory of itself. (boolean) * `AWX_MOUNT_ISOLATED_PATHS_ON_K8S`: Expose paths via hostPath for the Pods created by a Container Group. HostPath volumes present many security risks, and it is a best practice to avoid the use of HostPaths when possible.  (boolean) * `GALAXY_IGNORE_CERTS`: If set to true, certificate validation will not be done when installing content from any Galaxy server. (boolean) * `STDOUT_MAX_BYTES_DISPLAY`: Maximum Size of Standard Output in bytes to display before requiring the output be downloaded. (integer) * `EVENT_STDOUT_MAX_BYTES_DISPLAY`: Maximum Size of Standard Output in bytes to display for a single job or ad hoc command event. `stdout` will end with `…` when truncated. (integer) * `MAX_WEBSOCKET_EVENT_RATE`: Maximum number of messages to update the UI live job output with per second. Value of 0 means no limit. (integer) * `SCHEDULE_MAX_JOBS`: Maximum number of the same job template that can be waiting to run when launching from a schedule before no more are created. (integer) * `AWX_ANSIBLE_CALLBACK_PLUGINS`: List of paths to search for extra callback plugins to be used when running jobs. Enter one path per line. (list) * `DEFAULT_JOB_TIMEOUT`: Maximum time in seconds to allow jobs to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual job template will override this. (integer) * `DEFAULT_JOB_IDLE_TIMEOUT`: If no output is detected from ansible in this number of seconds the execution will be terminated. Use value of 0 to indicate that no idle timeout should be imposed. (integer) * `DEFAULT_INVENTORY_UPDATE_TIMEOUT`: Maximum time in seconds to allow inventory updates to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual inventory source will override this. (integer) * `DEFAULT_PROJECT_UPDATE_TIMEOUT`: Maximum time in seconds to allow project updates to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual project will override this. (integer) * `ANSIBLE_FACT_CACHE_TIMEOUT`: Maximum time, in seconds, that stored Ansible facts are considered valid since the last time they were modified. Only valid, non-stale, facts will be accessible by a playbook. Note, this does not influence the deletion of ansible_facts from the database. Use a value of 0 to indicate that no timeout should be imposed. (integer) * `MAX_FORKS`: Saving a Job Template with more than this number of forks will result in an error. When set to 0, no limit is applied. (integer) * `LOG_AGGREGATOR_HOST`: Hostname/IP where external logs will be sent to. (string) * `LOG_AGGREGATOR_PORT`: Port on Logging Aggregator to send logs to (if required and not provided in Logging Aggregator). (integer) * `LOG_AGGREGATOR_TYPE`: Format messages for the chosen log aggregator. (choice) - `None`: --------- - `logstash` - `splunk` - `loggly` - `sumologic` - `other` * `LOG_AGGREGATOR_USERNAME`: Username for external log aggregator (if required; HTTP/s only). (string) * `LOG_AGGREGATOR_PASSWORD`: Password or authentication token for external log aggregator (if required; HTTP/s only). (string) * `LOG_AGGREGATOR_LOGGERS`: List of loggers that will send HTTP logs to the collector, these can include any or all of: awx - service logs activity_stream - activity stream records job_events - callback data from Ansible job events system_tracking - facts gathered from scan jobs. (list) * `LOG_AGGREGATOR_INDIVIDUAL_FACTS`: If set, system tracking facts will be sent for each package, service, or other item found in a scan, allowing for greater search query granularity. If unset, facts will be sent as a single dictionary, allowing for greater efficiency in fact processing. (boolean) * `LOG_AGGREGATOR_ENABLED`: Enable sending logs to external log aggregator. (boolean) * `LOG_AGGREGATOR_TOWER_UUID`: Useful to uniquely identify instances. (string) * `LOG_AGGREGATOR_PROTOCOL`: Protocol used to communicate with log aggregator.  HTTPS/HTTP assumes HTTPS unless http:// is explicitly used in the Logging Aggregator hostname. (choice) - `https`: HTTPS/HTTP - `tcp`: TCP - `udp`: UDP * `LOG_AGGREGATOR_TCP_TIMEOUT`: Number of seconds for a TCP connection to external log aggregator to timeout. Applies to HTTPS and TCP log aggregator protocols. (integer) * `LOG_AGGREGATOR_VERIFY_CERT`: Flag to control enable/disable of certificate verification when LOG_AGGREGATOR_PROTOCOL is &quot;https&quot;. If enabled, the log handler will verify certificate sent by external log aggregator before establishing connection. (boolean) * `LOG_AGGREGATOR_LEVEL`: Level threshold used by log handler. Severities from lowest to highest are DEBUG, INFO, WARNING, ERROR, CRITICAL. Messages less severe than the threshold will be ignored by log handler. (messages under category awx.anlytics ignore this setting) (choice) - `DEBUG` - `INFO` - `WARNING` - `ERROR` - `CRITICAL` * `LOG_AGGREGATOR_MAX_DISK_USAGE_GB`: Amount of data to store (in gigabytes) during an outage of the external log aggregator (defaults to 1). Equivalent to the rsyslogd queue.maxdiskspace setting. (integer) * `LOG_AGGREGATOR_MAX_DISK_USAGE_PATH`: Location to persist logs that should be retried after an outage of the external log aggregator (defaults to /var/lib/awx). Equivalent to the rsyslogd queue.spoolDirectory setting. (string) * `LOG_AGGREGATOR_RSYSLOGD_DEBUG`: Enabled high verbosity debugging for rsyslogd.  Useful for debugging connection issues for external log aggregation. (boolean) * `API_400_ERROR_LOG_FORMAT`: The format of logged messages when an API 4XX error occurs, the following variables will be substituted: status_code - The HTTP status code of the error user_name - The user name attempting to use the API url_path - The URL path to the API endpoint called remote_addr - The remote address seen for the user error - The error set by the api endpoint Variables need to be in the format {&lt;variable name&gt;}. (string) * `AUTOMATION_ANALYTICS_LAST_GATHER`:  (datetime) * `AUTOMATION_ANALYTICS_LAST_ENTRIES`:  (string) * `AUTOMATION_ANALYTICS_GATHER_INTERVAL`: Interval (in seconds) between data gathering. (integer) * `IS_K8S`: Indicates whether the instance is part of a kubernetes-based deployment. (boolean) * `SESSION_COOKIE_AGE`: Number of seconds that a user is inactive before they will need to login again. (integer) * `SESSIONS_PER_USER`: Maximum number of simultaneous logged in sessions a user may have. To disable enter -1. (integer) * `DISABLE_LOCAL_AUTH`: Controls whether users are prevented from using the built-in authentication system. You probably want to do this if you are using an LDAP or SAML integration. (boolean) * `AUTH_BASIC_ENABLED`: Enable HTTP Basic Auth for the API Browser. (boolean) * `OAUTH2_PROVIDER`: Dictionary for customizing OAuth 2 timeouts, available items are `ACCESS_TOKEN_EXPIRE_SECONDS`, the duration of access tokens in the number of seconds, `AUTHORIZATION_CODE_EXPIRE_SECONDS`, the duration of authorization codes in the number of seconds, and `REFRESH_TOKEN_EXPIRE_SECONDS`, the duration of refresh tokens, after expired access tokens, in the number of seconds. (nested object) * `ALLOW_OAUTH2_FOR_EXTERNAL_USERS`: For security reasons, users from external auth providers (LDAP, SAML, SSO, Radius, and others) are not allowed to create OAuth2 tokens. To change this behavior, enable this setting. Existing tokens will not be deleted when this setting is toggled off. (boolean) * `LOGIN_REDIRECT_OVERRIDE`: URL to which unauthorized users will be redirected to log in.  If blank, users will be sent to the login page. (string) * `PENDO_TRACKING_STATE`: Enable or Disable User Analytics Tracking. (choice) - `off`: Off - `anonymous`: Anonymous - `detailed`: Detailed * `CUSTOM_LOGIN_INFO`: If needed, you can add specific information (such as a legal notice or a disclaimer) to a text box in the login modal using this setting. Any content added must be in plain text or an HTML fragment, as other markup languages are not supported. (string) * `CUSTOM_LOGO`: To set up a custom logo, provide a file that you create. For the custom logo to look its best, use a .png file with a transparent background. GIF, PNG and JPEG formats are supported. (string) * `MAX_UI_JOB_EVENTS`: Maximum number of job events for the UI to retrieve within a single request. (integer) * `UI_LIVE_UPDATES_ENABLED`: If disabled, the page will not refresh when events are received. Reloading the page will be required to get the latest details. (boolean) * `AUTHENTICATION_BACKENDS`: List of authentication backends that are enabled based on license features and other authentication settings. (list) * `SOCIAL_AUTH_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_USER_FIELDS`: When set to an empty list `[]`, this setting prevents new user accounts from being created. Only users who have previously logged in using social auth or have a user account with a matching email address will be able to login. (list) * `AUTH_LDAP_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string) * `AUTH_LDAP_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string) * `AUTH_LDAP_BIND_PASSWORD`: Password used to bind LDAP user account. (string) * `AUTH_LDAP_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean) * `AUTH_LDAP_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object) * `AUTH_LDAP_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list) * `AUTH_LDAP_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string) * `AUTH_LDAP_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object) * `AUTH_LDAP_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list) * `AUTH_LDAP_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object) * `AUTH_LDAP_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string) * `AUTH_LDAP_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string) * `AUTH_LDAP_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object) * `AUTH_LDAP_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_1_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string) * `AUTH_LDAP_1_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string) * `AUTH_LDAP_1_BIND_PASSWORD`: Password used to bind LDAP user account. (string) * `AUTH_LDAP_1_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean) * `AUTH_LDAP_1_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object) * `AUTH_LDAP_1_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list) * `AUTH_LDAP_1_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string) * `AUTH_LDAP_1_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object) * `AUTH_LDAP_1_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list) * `AUTH_LDAP_1_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_1_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object) * `AUTH_LDAP_1_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string) * `AUTH_LDAP_1_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string) * `AUTH_LDAP_1_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object) * `AUTH_LDAP_1_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_1_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_2_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string) * `AUTH_LDAP_2_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string) * `AUTH_LDAP_2_BIND_PASSWORD`: Password used to bind LDAP user account. (string) * `AUTH_LDAP_2_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean) * `AUTH_LDAP_2_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object) * `AUTH_LDAP_2_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list) * `AUTH_LDAP_2_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string) * `AUTH_LDAP_2_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object) * `AUTH_LDAP_2_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list) * `AUTH_LDAP_2_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_2_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object) * `AUTH_LDAP_2_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string) * `AUTH_LDAP_2_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string) * `AUTH_LDAP_2_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object) * `AUTH_LDAP_2_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_2_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_3_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string) * `AUTH_LDAP_3_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string) * `AUTH_LDAP_3_BIND_PASSWORD`: Password used to bind LDAP user account. (string) * `AUTH_LDAP_3_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean) * `AUTH_LDAP_3_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object) * `AUTH_LDAP_3_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list) * `AUTH_LDAP_3_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string) * `AUTH_LDAP_3_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object) * `AUTH_LDAP_3_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list) * `AUTH_LDAP_3_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_3_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object) * `AUTH_LDAP_3_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string) * `AUTH_LDAP_3_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string) * `AUTH_LDAP_3_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object) * `AUTH_LDAP_3_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_3_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_4_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string) * `AUTH_LDAP_4_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string) * `AUTH_LDAP_4_BIND_PASSWORD`: Password used to bind LDAP user account. (string) * `AUTH_LDAP_4_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean) * `AUTH_LDAP_4_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object) * `AUTH_LDAP_4_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list) * `AUTH_LDAP_4_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string) * `AUTH_LDAP_4_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object) * `AUTH_LDAP_4_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list) * `AUTH_LDAP_4_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_4_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object) * `AUTH_LDAP_4_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string) * `AUTH_LDAP_4_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string) * `AUTH_LDAP_4_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object) * `AUTH_LDAP_4_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_4_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_5_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string) * `AUTH_LDAP_5_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string) * `AUTH_LDAP_5_BIND_PASSWORD`: Password used to bind LDAP user account. (string) * `AUTH_LDAP_5_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean) * `AUTH_LDAP_5_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object) * `AUTH_LDAP_5_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list) * `AUTH_LDAP_5_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string) * `AUTH_LDAP_5_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object) * `AUTH_LDAP_5_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list) * `AUTH_LDAP_5_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_5_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object) * `AUTH_LDAP_5_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string) * `AUTH_LDAP_5_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string) * `AUTH_LDAP_5_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object) * `AUTH_LDAP_5_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_5_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object) * `RADIUS_SERVER`: Hostname/IP of RADIUS server. RADIUS authentication is disabled if this setting is empty. (string) * `RADIUS_PORT`: Port of RADIUS server. (integer) * `RADIUS_SECRET`: Shared secret for authenticating to RADIUS server. (string) * `TACACSPLUS_HOST`: Hostname of TACACS+ server. (string) * `TACACSPLUS_PORT`: Port number of TACACS+ server. (integer) * `TACACSPLUS_SECRET`: Shared secret for authenticating to TACACS+ server. (string) * `TACACSPLUS_SESSION_TIMEOUT`: TACACS+ session timeout value in seconds, 0 disables timeout. (integer) * `TACACSPLUS_AUTH_PROTOCOL`: Choose the authentication protocol used by TACACS+ client. (choice) - `ascii` - `pap` * `SOCIAL_AUTH_GOOGLE_OAUTH2_CALLBACK_URL`: Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail. (string) * `SOCIAL_AUTH_GOOGLE_OAUTH2_KEY`: The OAuth2 key from your web application. (string) * `SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET`: The OAuth2 secret from your web application. (string) * `SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS`: Update this setting to restrict the domains who are allowed to login using Google OAuth2. (list) * `SOCIAL_AUTH_GOOGLE_OAUTH2_AUTH_EXTRA_ARGUMENTS`: Extra arguments for Google OAuth2 login. You can restrict it to only allow a single domain to authenticate, even if the user is logged in with multple Google accounts. Refer to the documentation for more detail. (nested object) * `SOCIAL_AUTH_GOOGLE_OAUTH2_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GOOGLE_OAUTH2_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_CALLBACK_URL`: Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail. (string) * `SOCIAL_AUTH_GITHUB_KEY`: The OAuth2 key (Client ID) from your GitHub developer application. (string) * `SOCIAL_AUTH_GITHUB_SECRET`: The OAuth2 secret (Client Secret) from your GitHub developer application. (string) * `SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ORG_CALLBACK_URL`: Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail. (string) * `SOCIAL_AUTH_GITHUB_ORG_KEY`: The OAuth2 key (Client ID) from your GitHub organization application. (string) * `SOCIAL_AUTH_GITHUB_ORG_SECRET`: The OAuth2 secret (Client Secret) from your GitHub organization application. (string) * `SOCIAL_AUTH_GITHUB_ORG_NAME`: The name of your GitHub organization, as used in your organization&#x27;s URL: https://github.com/&lt;yourorg&gt;/. (string) * `SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_TEAM_CALLBACK_URL`: Create an organization-owned application at https://github.com/organizations/&lt;yourorg&gt;/settings/applications and obtain an OAuth2 key (Client ID) and secret (Client Secret). Provide this URL as the callback URL for your application. (string) * `SOCIAL_AUTH_GITHUB_TEAM_KEY`: The OAuth2 key (Client ID) from your GitHub organization application. (string) * `SOCIAL_AUTH_GITHUB_TEAM_SECRET`: The OAuth2 secret (Client Secret) from your GitHub organization application. (string) * `SOCIAL_AUTH_GITHUB_TEAM_ID`: Find the numeric team ID using the Github API: http://fabian-kostadinov.github.io/2015/01/16/how-to-find-a-github-team-id/. (string) * `SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_CALLBACK_URL`: Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_URL`: The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_API_URL`: The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_KEY`: The OAuth2 key (Client ID) from your GitHub Enterprise developer application. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_SECRET`: The OAuth2 secret (Client Secret) from your GitHub Enterprise developer application. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_CALLBACK_URL`: Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_URL`: The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_API_URL`: The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_KEY`: The OAuth2 key (Client ID) from your GitHub Enterprise organization application. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_SECRET`: The OAuth2 secret (Client Secret) from your GitHub Enterprise organization application. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_NAME`: The name of your GitHub Enterprise organization, as used in your organization&#x27;s URL: https://github.com/&lt;yourorg&gt;/. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_CALLBACK_URL`: Create an organization-owned application at https://github.com/organizations/&lt;yourorg&gt;/settings/applications and obtain an OAuth2 key (Client ID) and secret (Client Secret). Provide this URL as the callback URL for your application. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_URL`: The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_API_URL`: The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_KEY`: The OAuth2 key (Client ID) from your GitHub Enterprise organization application. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_SECRET`: The OAuth2 secret (Client Secret) from your GitHub Enterprise organization application. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ID`: Find the numeric team ID using the Github Enterprise API: http://fabian-kostadinov.github.io/2015/01/16/how-to-find-a-github-team-id/. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_AZUREAD_OAUTH2_CALLBACK_URL`: Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail.  (string) * `SOCIAL_AUTH_AZUREAD_OAUTH2_KEY`: The OAuth2 key (Client ID) from your Azure AD application. (string) * `SOCIAL_AUTH_AZUREAD_OAUTH2_SECRET`: The OAuth2 secret (Client Secret) from your Azure AD application. (string) * `SOCIAL_AUTH_AZUREAD_OAUTH2_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_AZUREAD_OAUTH2_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_OIDC_KEY`: The OIDC key (Client ID) from your IDP. (string) * `SOCIAL_AUTH_OIDC_SECRET`: The OIDC secret (Client Secret) from your IDP. (string) * `SOCIAL_AUTH_OIDC_OIDC_ENDPOINT`: The URL for your OIDC provider including the path up to /.well-known/openid-configuration (string) * `SOCIAL_AUTH_OIDC_VERIFY_SSL`: Verify the OIDV provider ssl certificate. (boolean) * `SAML_AUTO_CREATE_OBJECTS`: When enabled (the default), mapped Organizations and Teams will be created automatically on successful SAML login. (boolean) * `SOCIAL_AUTH_SAML_CALLBACK_URL`: Register the service as a service provider (SP) with each identity provider (IdP) you have configured. Provide your SP Entity ID and this ACS URL for your application. (string) * `SOCIAL_AUTH_SAML_METADATA_URL`: If your identity provider (IdP) allows uploading an XML metadata file, you can download one from this URL. (string) * `SOCIAL_AUTH_SAML_SP_ENTITY_ID`: The application-defined unique identifier used as the audience of the SAML service provider (SP) configuration. This is usually the URL for the service. (string) * `SOCIAL_AUTH_SAML_SP_PUBLIC_CERT`: Create a keypair to use as a service provider (SP) and include the certificate content here. (string) * `SOCIAL_AUTH_SAML_SP_PRIVATE_KEY`: Create a keypair to use as a service provider (SP) and include the private key content here. (string) * `SOCIAL_AUTH_SAML_ORG_INFO`: Provide the URL, display name, and the name of your app. Refer to the documentation for example syntax. (nested object) * `SOCIAL_AUTH_SAML_TECHNICAL_CONTACT`: Provide the name and email address of the technical contact for your service provider. Refer to the documentation for example syntax. (nested object) * `SOCIAL_AUTH_SAML_SUPPORT_CONTACT`: Provide the name and email address of the support contact for your service provider. Refer to the documentation for example syntax. (nested object) * `SOCIAL_AUTH_SAML_ENABLED_IDPS`: Configure the Entity ID, SSO URL and certificate for each identity provider (IdP) in use. Multiple SAML IdPs are supported. Some IdPs may provide user data using attribute names that differ from the default OIDs. Attribute names may be overridden for each IdP. Refer to the Ansible documentation for additional details and syntax. (nested object) * `SOCIAL_AUTH_SAML_SECURITY_CONFIG`: A dict of key value pairs that are passed to the underlying python-saml security setting https://github.com/onelogin/python-saml#settings (nested object) * `SOCIAL_AUTH_SAML_SP_EXTRA`: A dict of key value pairs to be passed to the underlying python-saml Service Provider configuration setting. (nested object) * `SOCIAL_AUTH_SAML_EXTRA_DATA`: A list of tuples that maps IDP attributes to extra_attributes. Each attribute will be a list of values, even if only 1 value. (list) * `SOCIAL_AUTH_SAML_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_SAML_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_SAML_ORGANIZATION_ATTR`: Used to translate user organization membership. (nested object) * `SOCIAL_AUTH_SAML_TEAM_ATTR`: Used to translate user team membership. (nested object) * `SOCIAL_AUTH_SAML_USER_FLAGS_BY_ATTR`: Used to map super users and system auditors from SAML. (nested object) * `NAMED_URL_FORMATS`: Read-only list of key-value pairs that shows the standard format of all available named URLs. (nested object) * `NAMED_URL_GRAPH_NODES`: Read-only list of key-value pairs that exposes named URL graph topology. Use this list to programmatically generate named URLs for resources (nested object) # Update a Setting: Make a PUT or PATCH request to this resource to update this setting.  The following fields may be modified: * `ACTIVITY_STREAM_ENABLED`: Enable capturing activity for the activity stream. (boolean, required) * `ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC`: Enable capturing activity for the activity stream when running inventory sync. (boolean, required) * `ORG_ADMINS_CAN_SEE_ALL_USERS`: Controls whether any Organization Admin can view all users and teams, even those not associated with their Organization. (boolean, required) * `MANAGE_ORGANIZATION_AUTH`: Controls whether any Organization Admin has the privileges to create and manage users and teams. You may want to disable this ability if you are using an LDAP or SAML integration. (boolean, required) * `TOWER_URL_BASE`: This setting is used by services like notifications to render a valid url to the service. (string, required) * `REMOTE_HOST_HEADERS`: HTTP headers and meta keys to search to determine remote host name or IP. Add additional items to this list, such as &quot;HTTP_X_FORWARDED_FOR&quot;, if behind a reverse proxy. See the &quot;Proxy Support&quot; section of the AAP Installation guide for more details. (list, required) * `PROXY_IP_ALLOWED_LIST`: If the service is behind a reverse proxy/load balancer, use this setting to configure the proxy IP addresses from which the service should trust custom REMOTE_HOST_HEADERS header values. If this setting is an empty list (the default), the headers specified by REMOTE_HOST_HEADERS will be trusted unconditionally&#x27;) (list, required) * `REDHAT_USERNAME`: This username is used to send data to Automation Analytics (string, default=`""`) * `REDHAT_PASSWORD`: This password is used to send data to Automation Analytics (string, default=`""`) * `SUBSCRIPTIONS_USERNAME`: This username is used to retrieve subscription and content information (string, default=`""`) * `SUBSCRIPTIONS_PASSWORD`: This password is used to retrieve subscription and content information (string, default=`""`) * `AUTOMATION_ANALYTICS_URL`: This setting is used to to configure the upload URL for data collection for Automation Analytics. (string, default=`"https://example.com"`) * `DEFAULT_EXECUTION_ENVIRONMENT`: The Execution Environment to be used when one has not been configured for a job template. (field, default=`None`) * `CUSTOM_VENV_PATHS`: Paths where Tower will look for custom virtual environments (in addition to /var/lib/awx/venv/). Enter one path per line. (list, default=`[]`) * `AD_HOC_COMMANDS`: List of modules allowed to be used by ad-hoc jobs. (list, default=`[&#x27;command&#x27;, &#x27;shell&#x27;, &#x27;yum&#x27;, &#x27;apt&#x27;, &#x27;apt_key&#x27;, &#x27;apt_repository&#x27;, &#x27;apt_rpm&#x27;, &#x27;service&#x27;, &#x27;group&#x27;, &#x27;user&#x27;, &#x27;mount&#x27;, &#x27;ping&#x27;, &#x27;selinux&#x27;, &#x27;setup&#x27;, &#x27;win_ping&#x27;, &#x27;win_service&#x27;, &#x27;win_updates&#x27;, &#x27;win_group&#x27;, &#x27;win_user&#x27;]`) * `ALLOW_JINJA_IN_EXTRA_VARS`: Ansible allows variable substitution via the Jinja2 templating language for --extra-vars. This poses a potential security risk where users with the ability to specify extra vars at job launch time can use Jinja2 templates to run arbitrary Python.  It is recommended that this value be set to &quot;template&quot; or &quot;never&quot;. (choice, required) - `always`: Always - `never`: Never - `template`: Only On Job Template Definitions (default) * `AWX_ISOLATION_BASE_PATH`: The directory in which the service will create new temporary directories for job execution and isolation (such as credential files). (string, required) * `AWX_ISOLATION_SHOW_PATHS`: List of paths that would otherwise be hidden to expose to isolated jobs. Enter one path per line. Volumes will be mounted from the execution node to the container. The supported format is HOST-DIR[:CONTAINER-DIR[:OPTIONS]].  (list, default=`[]`) * `AWX_TASK_ENV`: Additional environment variables set for playbook runs, inventory updates, project updates, and notification sending. (nested object, default=`{}`) * `GALAXY_TASK_ENV`: Additional environment variables set for invocations of ansible-galaxy within project updates. Useful if you must use a proxy server for ansible-galaxy but not git. (nested object, required) * `INSIGHTS_TRACKING_STATE`: Enables the service to gather data on automation and send it to Automation Analytics. (boolean, default=`False`) * `PROJECT_UPDATE_VVV`: Adds the CLI -vvv flag to ansible-playbook runs of project_update.yml used for project updates. (boolean, required) * `AWX_ROLES_ENABLED`: Allows roles to be dynamically downloaded from a requirements.yml file for SCM projects. (boolean, default=`True`) * `AWX_COLLECTIONS_ENABLED`: Allows collections to be dynamically downloaded from a requirements.yml file for SCM projects. (boolean, default=`True`) * `AWX_SHOW_PLAYBOOK_LINKS`: Follow symbolic links when scanning for playbooks. Be aware that setting this to True can lead to infinite recursion if a link points to a parent directory of itself. (boolean, default=`False`) * `AWX_MOUNT_ISOLATED_PATHS_ON_K8S`: Expose paths via hostPath for the Pods created by a Container Group. HostPath volumes present many security risks, and it is a best practice to avoid the use of HostPaths when possible.  (boolean, default=`False`) * `GALAXY_IGNORE_CERTS`: If set to true, certificate validation will not be done when installing content from any Galaxy server. (boolean, default=`False`) * `STDOUT_MAX_BYTES_DISPLAY`: Maximum Size of Standard Output in bytes to display before requiring the output be downloaded. (integer, required) * `EVENT_STDOUT_MAX_BYTES_DISPLAY`: Maximum Size of Standard Output in bytes to display for a single job or ad hoc command event. `stdout` will end with `…` when truncated. (integer, required) * `MAX_WEBSOCKET_EVENT_RATE`: Maximum number of messages to update the UI live job output with per second. Value of 0 means no limit. (integer, default=`30`) * `SCHEDULE_MAX_JOBS`: Maximum number of the same job template that can be waiting to run when launching from a schedule before no more are created. (integer, required) * `AWX_ANSIBLE_CALLBACK_PLUGINS`: List of paths to search for extra callback plugins to be used when running jobs. Enter one path per line. (list, default=`[]`) * `DEFAULT_JOB_TIMEOUT`: Maximum time in seconds to allow jobs to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual job template will override this. (integer, default=`0`) * `DEFAULT_JOB_IDLE_TIMEOUT`: If no output is detected from ansible in this number of seconds the execution will be terminated. Use value of 0 to indicate that no idle timeout should be imposed. (integer, default=`0`) * `DEFAULT_INVENTORY_UPDATE_TIMEOUT`: Maximum time in seconds to allow inventory updates to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual inventory source will override this. (integer, default=`0`) * `DEFAULT_PROJECT_UPDATE_TIMEOUT`: Maximum time in seconds to allow project updates to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual project will override this. (integer, default=`0`) * `ANSIBLE_FACT_CACHE_TIMEOUT`: Maximum time, in seconds, that stored Ansible facts are considered valid since the last time they were modified. Only valid, non-stale, facts will be accessible by a playbook. Note, this does not influence the deletion of ansible_facts from the database. Use a value of 0 to indicate that no timeout should be imposed. (integer, default=`0`) * `MAX_FORKS`: Saving a Job Template with more than this number of forks will result in an error. When set to 0, no limit is applied. (integer, default=`200`) * `LOG_AGGREGATOR_HOST`: Hostname/IP where external logs will be sent to. (string, default=`""`) * `LOG_AGGREGATOR_PORT`: Port on Logging Aggregator to send logs to (if required and not provided in Logging Aggregator). (integer, default=`None`) * `LOG_AGGREGATOR_TYPE`: Format messages for the chosen log aggregator. (choice) - `None`: --------- (default) - `logstash` - `splunk` - `loggly` - `sumologic` - `other` * `LOG_AGGREGATOR_USERNAME`: Username for external log aggregator (if required; HTTP/s only). (string, default=`""`) * `LOG_AGGREGATOR_PASSWORD`: Password or authentication token for external log aggregator (if required; HTTP/s only). (string, default=`""`) * `LOG_AGGREGATOR_LOGGERS`: List of loggers that will send HTTP logs to the collector, these can include any or all of: awx - service logs activity_stream - activity stream records job_events - callback data from Ansible job events system_tracking - facts gathered from scan jobs. (list, default=`[&#x27;awx&#x27;, &#x27;activity_stream&#x27;, &#x27;job_events&#x27;, &#x27;system_tracking&#x27;]`) * `LOG_AGGREGATOR_INDIVIDUAL_FACTS`: If set, system tracking facts will be sent for each package, service, or other item found in a scan, allowing for greater search query granularity. If unset, facts will be sent as a single dictionary, allowing for greater efficiency in fact processing. (boolean, default=`False`) * `LOG_AGGREGATOR_ENABLED`: Enable sending logs to external log aggregator. (boolean, default=`False`) * `LOG_AGGREGATOR_TOWER_UUID`: Useful to uniquely identify instances. (string, default=`""`) * `LOG_AGGREGATOR_PROTOCOL`: Protocol used to communicate with log aggregator.  HTTPS/HTTP assumes HTTPS unless http:// is explicitly used in the Logging Aggregator hostname. (choice) - `https`: HTTPS/HTTP (default) - `tcp`: TCP - `udp`: UDP * `LOG_AGGREGATOR_TCP_TIMEOUT`: Number of seconds for a TCP connection to external log aggregator to timeout. Applies to HTTPS and TCP log aggregator protocols. (integer, default=`5`) * `LOG_AGGREGATOR_VERIFY_CERT`: Flag to control enable/disable of certificate verification when LOG_AGGREGATOR_PROTOCOL is &quot;https&quot;. If enabled, the log handler will verify certificate sent by external log aggregator before establishing connection. (boolean, default=`True`) * `LOG_AGGREGATOR_LEVEL`: Level threshold used by log handler. Severities from lowest to highest are DEBUG, INFO, WARNING, ERROR, CRITICAL. Messages less severe than the threshold will be ignored by log handler. (messages under category awx.anlytics ignore this setting) (choice) - `DEBUG` - `INFO` (default) - `WARNING` - `ERROR` - `CRITICAL` * `LOG_AGGREGATOR_MAX_DISK_USAGE_GB`: Amount of data to store (in gigabytes) during an outage of the external log aggregator (defaults to 1). Equivalent to the rsyslogd queue.maxdiskspace setting. (integer, default=`1`) * `LOG_AGGREGATOR_MAX_DISK_USAGE_PATH`: Location to persist logs that should be retried after an outage of the external log aggregator (defaults to /var/lib/awx). Equivalent to the rsyslogd queue.spoolDirectory setting. (string, default=`"/var/lib/awx"`) * `LOG_AGGREGATOR_RSYSLOGD_DEBUG`: Enabled high verbosity debugging for rsyslogd.  Useful for debugging connection issues for external log aggregation. (boolean, default=`False`) * `API_400_ERROR_LOG_FORMAT`: The format of logged messages when an API 4XX error occurs, the following variables will be substituted: status_code - The HTTP status code of the error user_name - The user name attempting to use the API url_path - The URL path to the API endpoint called remote_addr - The remote address seen for the user error - The error set by the api endpoint Variables need to be in the format {&lt;variable name&gt;}. (string, default=`"status {status_code} received by user {user_name} attempting to access {url_path} from {remote_addr}"`) * `AUTOMATION_ANALYTICS_LAST_GATHER`:  (datetime, required) * `AUTOMATION_ANALYTICS_LAST_ENTRIES`:  (string, default=`""`) * `AUTOMATION_ANALYTICS_GATHER_INTERVAL`: Interval (in seconds) between data gathering. (integer, default=`14400`) * `SESSION_COOKIE_AGE`: Number of seconds that a user is inactive before they will need to login again. (integer, required) * `SESSIONS_PER_USER`: Maximum number of simultaneous logged in sessions a user may have. To disable enter -1. (integer, required) * `DISABLE_LOCAL_AUTH`: Controls whether users are prevented from using the built-in authentication system. You probably want to do this if you are using an LDAP or SAML integration. (boolean, required) * `AUTH_BASIC_ENABLED`: Enable HTTP Basic Auth for the API Browser. (boolean, required) * `OAUTH2_PROVIDER`: Dictionary for customizing OAuth 2 timeouts, available items are `ACCESS_TOKEN_EXPIRE_SECONDS`, the duration of access tokens in the number of seconds, `AUTHORIZATION_CODE_EXPIRE_SECONDS`, the duration of authorization codes in the number of seconds, and `REFRESH_TOKEN_EXPIRE_SECONDS`, the duration of refresh tokens, after expired access tokens, in the number of seconds. (nested object, default=`{&#x27;ACCESS_TOKEN_EXPIRE_SECONDS&#x27;: 31536000000, &#x27;AUTHORIZATION_CODE_EXPIRE_SECONDS&#x27;: 600, &#x27;REFRESH_TOKEN_EXPIRE_SECONDS&#x27;: 2628000}`) * `ALLOW_OAUTH2_FOR_EXTERNAL_USERS`: For security reasons, users from external auth providers (LDAP, SAML, SSO, Radius, and others) are not allowed to create OAuth2 tokens. To change this behavior, enable this setting. Existing tokens will not be deleted when this setting is toggled off. (boolean, default=`False`) * `LOGIN_REDIRECT_OVERRIDE`: URL to which unauthorized users will be redirected to log in.  If blank, users will be sent to the login page. (string, default=`""`) * `CUSTOM_LOGIN_INFO`: If needed, you can add specific information (such as a legal notice or a disclaimer) to a text box in the login modal using this setting. Any content added must be in plain text or an HTML fragment, as other markup languages are not supported. (string, default=`""`) * `CUSTOM_LOGO`: To set up a custom logo, provide a file that you create. For the custom logo to look its best, use a .png file with a transparent background. GIF, PNG and JPEG formats are supported. (string, default=`""`) * `MAX_UI_JOB_EVENTS`: Maximum number of job events for the UI to retrieve within a single request. (integer, required) * `UI_LIVE_UPDATES_ENABLED`: If disabled, the page will not refresh when events are received. Reloading the page will be required to get the latest details. (boolean, required) * `SOCIAL_AUTH_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_USER_FIELDS`: When set to an empty list `[]`, this setting prevents new user accounts from being created. Only users who have previously logged in using social auth or have a user account with a matching email address will be able to login. (list, default=`None`) * `AUTH_LDAP_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string, default=`""`) * `AUTH_LDAP_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string, default=`""`) * `AUTH_LDAP_BIND_PASSWORD`: Password used to bind LDAP user account. (string, default=`""`) * `AUTH_LDAP_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean, default=`False`) * `AUTH_LDAP_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object, default=`{&#x27;OPT_REFERRALS&#x27;: 0, &#x27;OPT_NETWORK_TIMEOUT&#x27;: 30}`) * `AUTH_LDAP_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list, default=`[]`) * `AUTH_LDAP_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string, default=`""`) * `AUTH_LDAP_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object, default=`{}`) * `AUTH_LDAP_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list, default=`[]`) * `AUTH_LDAP_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` (default) - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object, default=`OrderedDict([(&#x27;member_attr&#x27;, &#x27;member&#x27;), (&#x27;name_attr&#x27;, &#x27;cn&#x27;)])`) * `AUTH_LDAP_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string, default=`""`) * `AUTH_LDAP_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string, default=`""`) * `AUTH_LDAP_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object, default=`{}`) * `AUTH_LDAP_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_1_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string, default=`""`) * `AUTH_LDAP_1_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string, default=`""`) * `AUTH_LDAP_1_BIND_PASSWORD`: Password used to bind LDAP user account. (string, default=`""`) * `AUTH_LDAP_1_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean, default=`False`) * `AUTH_LDAP_1_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object, default=`{&#x27;OPT_REFERRALS&#x27;: 0, &#x27;OPT_NETWORK_TIMEOUT&#x27;: 30}`) * `AUTH_LDAP_1_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list, default=`[]`) * `AUTH_LDAP_1_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string, default=`""`) * `AUTH_LDAP_1_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object, default=`{}`) * `AUTH_LDAP_1_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list, default=`[]`) * `AUTH_LDAP_1_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` (default) - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_1_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object, default=`OrderedDict([(&#x27;member_attr&#x27;, &#x27;member&#x27;), (&#x27;name_attr&#x27;, &#x27;cn&#x27;)])`) * `AUTH_LDAP_1_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string, default=`""`) * `AUTH_LDAP_1_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string, default=`""`) * `AUTH_LDAP_1_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object, default=`{}`) * `AUTH_LDAP_1_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_1_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_2_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string, default=`""`) * `AUTH_LDAP_2_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string, default=`""`) * `AUTH_LDAP_2_BIND_PASSWORD`: Password used to bind LDAP user account. (string, default=`""`) * `AUTH_LDAP_2_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean, default=`False`) * `AUTH_LDAP_2_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object, default=`{&#x27;OPT_REFERRALS&#x27;: 0, &#x27;OPT_NETWORK_TIMEOUT&#x27;: 30}`) * `AUTH_LDAP_2_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list, default=`[]`) * `AUTH_LDAP_2_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string, default=`""`) * `AUTH_LDAP_2_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object, default=`{}`) * `AUTH_LDAP_2_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list, default=`[]`) * `AUTH_LDAP_2_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` (default) - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_2_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object, default=`OrderedDict([(&#x27;member_attr&#x27;, &#x27;member&#x27;), (&#x27;name_attr&#x27;, &#x27;cn&#x27;)])`) * `AUTH_LDAP_2_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string, default=`""`) * `AUTH_LDAP_2_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string, default=`""`) * `AUTH_LDAP_2_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object, default=`{}`) * `AUTH_LDAP_2_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_2_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_3_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string, default=`""`) * `AUTH_LDAP_3_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string, default=`""`) * `AUTH_LDAP_3_BIND_PASSWORD`: Password used to bind LDAP user account. (string, default=`""`) * `AUTH_LDAP_3_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean, default=`False`) * `AUTH_LDAP_3_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object, default=`{&#x27;OPT_REFERRALS&#x27;: 0, &#x27;OPT_NETWORK_TIMEOUT&#x27;: 30}`) * `AUTH_LDAP_3_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list, default=`[]`) * `AUTH_LDAP_3_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string, default=`""`) * `AUTH_LDAP_3_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object, default=`{}`) * `AUTH_LDAP_3_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list, default=`[]`) * `AUTH_LDAP_3_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` (default) - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_3_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object, default=`OrderedDict([(&#x27;member_attr&#x27;, &#x27;member&#x27;), (&#x27;name_attr&#x27;, &#x27;cn&#x27;)])`) * `AUTH_LDAP_3_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string, default=`""`) * `AUTH_LDAP_3_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string, default=`""`) * `AUTH_LDAP_3_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object, default=`{}`) * `AUTH_LDAP_3_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_3_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_4_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string, default=`""`) * `AUTH_LDAP_4_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string, default=`""`) * `AUTH_LDAP_4_BIND_PASSWORD`: Password used to bind LDAP user account. (string, default=`""`) * `AUTH_LDAP_4_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean, default=`False`) * `AUTH_LDAP_4_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object, default=`{&#x27;OPT_REFERRALS&#x27;: 0, &#x27;OPT_NETWORK_TIMEOUT&#x27;: 30}`) * `AUTH_LDAP_4_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list, default=`[]`) * `AUTH_LDAP_4_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string, default=`""`) * `AUTH_LDAP_4_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object, default=`{}`) * `AUTH_LDAP_4_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list, default=`[]`) * `AUTH_LDAP_4_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` (default) - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_4_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object, default=`OrderedDict([(&#x27;member_attr&#x27;, &#x27;member&#x27;), (&#x27;name_attr&#x27;, &#x27;cn&#x27;)])`) * `AUTH_LDAP_4_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string, default=`""`) * `AUTH_LDAP_4_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string, default=`""`) * `AUTH_LDAP_4_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object, default=`{}`) * `AUTH_LDAP_4_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_4_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_5_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string, default=`""`) * `AUTH_LDAP_5_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string, default=`""`) * `AUTH_LDAP_5_BIND_PASSWORD`: Password used to bind LDAP user account. (string, default=`""`) * `AUTH_LDAP_5_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean, default=`False`) * `AUTH_LDAP_5_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object, default=`{&#x27;OPT_REFERRALS&#x27;: 0, &#x27;OPT_NETWORK_TIMEOUT&#x27;: 30}`) * `AUTH_LDAP_5_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list, default=`[]`) * `AUTH_LDAP_5_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string, default=`""`) * `AUTH_LDAP_5_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object, default=`{}`) * `AUTH_LDAP_5_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list, default=`[]`) * `AUTH_LDAP_5_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` (default) - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_5_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object, default=`OrderedDict([(&#x27;member_attr&#x27;, &#x27;member&#x27;), (&#x27;name_attr&#x27;, &#x27;cn&#x27;)])`) * `AUTH_LDAP_5_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string, default=`""`) * `AUTH_LDAP_5_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string, default=`""`) * `AUTH_LDAP_5_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object, default=`{}`) * `AUTH_LDAP_5_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_5_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object, default=`{}`) * `RADIUS_SERVER`: Hostname/IP of RADIUS server. RADIUS authentication is disabled if this setting is empty. (string, default=`""`) * `RADIUS_PORT`: Port of RADIUS server. (integer, default=`1812`) * `RADIUS_SECRET`: Shared secret for authenticating to RADIUS server. (string, default=`""`) * `TACACSPLUS_HOST`: Hostname of TACACS+ server. (string, default=`""`) * `TACACSPLUS_PORT`: Port number of TACACS+ server. (integer, default=`49`) * `TACACSPLUS_SECRET`: Shared secret for authenticating to TACACS+ server. (string, default=`""`) * `TACACSPLUS_SESSION_TIMEOUT`: TACACS+ session timeout value in seconds, 0 disables timeout. (integer, default=`5`) * `TACACSPLUS_AUTH_PROTOCOL`: Choose the authentication protocol used by TACACS+ client. (choice) - `ascii` (default) - `pap` * `SOCIAL_AUTH_GOOGLE_OAUTH2_KEY`: The OAuth2 key from your web application. (string, default=`""`) * `SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET`: The OAuth2 secret from your web application. (string, default=`""`) * `SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS`: Update this setting to restrict the domains who are allowed to login using Google OAuth2. (list, default=`[]`) * `SOCIAL_AUTH_GOOGLE_OAUTH2_AUTH_EXTRA_ARGUMENTS`: Extra arguments for Google OAuth2 login. You can restrict it to only allow a single domain to authenticate, even if the user is logged in with multple Google accounts. Refer to the documentation for more detail. (nested object, default=`{}`) * `SOCIAL_AUTH_GOOGLE_OAUTH2_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GOOGLE_OAUTH2_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_KEY`: The OAuth2 key (Client ID) from your GitHub developer application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_SECRET`: The OAuth2 secret (Client Secret) from your GitHub developer application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ORG_KEY`: The OAuth2 key (Client ID) from your GitHub organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ORG_SECRET`: The OAuth2 secret (Client Secret) from your GitHub organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ORG_NAME`: The name of your GitHub organization, as used in your organization&#x27;s URL: https://github.com/&lt;yourorg&gt;/. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_TEAM_KEY`: The OAuth2 key (Client ID) from your GitHub organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_TEAM_SECRET`: The OAuth2 secret (Client Secret) from your GitHub organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_TEAM_ID`: Find the numeric team ID using the Github API: http://fabian-kostadinov.github.io/2015/01/16/how-to-find-a-github-team-id/. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_URL`: The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_API_URL`: The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_KEY`: The OAuth2 key (Client ID) from your GitHub Enterprise developer application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_SECRET`: The OAuth2 secret (Client Secret) from your GitHub Enterprise developer application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_URL`: The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_API_URL`: The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_KEY`: The OAuth2 key (Client ID) from your GitHub Enterprise organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_SECRET`: The OAuth2 secret (Client Secret) from your GitHub Enterprise organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_NAME`: The name of your GitHub Enterprise organization, as used in your organization&#x27;s URL: https://github.com/&lt;yourorg&gt;/. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_URL`: The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_API_URL`: The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_KEY`: The OAuth2 key (Client ID) from your GitHub Enterprise organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_SECRET`: The OAuth2 secret (Client Secret) from your GitHub Enterprise organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ID`: Find the numeric team ID using the Github Enterprise API: http://fabian-kostadinov.github.io/2015/01/16/how-to-find-a-github-team-id/. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_AZUREAD_OAUTH2_KEY`: The OAuth2 key (Client ID) from your Azure AD application. (string, default=`""`) * `SOCIAL_AUTH_AZUREAD_OAUTH2_SECRET`: The OAuth2 secret (Client Secret) from your Azure AD application. (string, default=`""`) * `SOCIAL_AUTH_AZUREAD_OAUTH2_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_AZUREAD_OAUTH2_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_OIDC_KEY`: The OIDC key (Client ID) from your IDP. (string, default=`""`) * `SOCIAL_AUTH_OIDC_SECRET`: The OIDC secret (Client Secret) from your IDP. (string, default=`""`) * `SOCIAL_AUTH_OIDC_OIDC_ENDPOINT`: The URL for your OIDC provider including the path up to /.well-known/openid-configuration (string, default=`""`) * `SOCIAL_AUTH_OIDC_VERIFY_SSL`: Verify the OIDV provider ssl certificate. (boolean, default=`True`) * `SAML_AUTO_CREATE_OBJECTS`: When enabled (the default), mapped Organizations and Teams will be created automatically on successful SAML login. (boolean, default=`True`) * `SOCIAL_AUTH_SAML_SP_ENTITY_ID`: The application-defined unique identifier used as the audience of the SAML service provider (SP) configuration. This is usually the URL for the service. (string, default=`""`) * `SOCIAL_AUTH_SAML_SP_PUBLIC_CERT`: Create a keypair to use as a service provider (SP) and include the certificate content here. (string, required) * `SOCIAL_AUTH_SAML_SP_PRIVATE_KEY`: Create a keypair to use as a service provider (SP) and include the private key content here. (string, required) * `SOCIAL_AUTH_SAML_ORG_INFO`: Provide the URL, display name, and the name of your app. Refer to the documentation for example syntax. (nested object, required) * `SOCIAL_AUTH_SAML_TECHNICAL_CONTACT`: Provide the name and email address of the technical contact for your service provider. Refer to the documentation for example syntax. (nested object, required) * `SOCIAL_AUTH_SAML_SUPPORT_CONTACT`: Provide the name and email address of the support contact for your service provider. Refer to the documentation for example syntax. (nested object, required) * `SOCIAL_AUTH_SAML_ENABLED_IDPS`: Configure the Entity ID, SSO URL and certificate for each identity provider (IdP) in use. Multiple SAML IdPs are supported. Some IdPs may provide user data using attribute names that differ from the default OIDs. Attribute names may be overridden for each IdP. Refer to the Ansible documentation for additional details and syntax. (nested object, default=`{}`) * `SOCIAL_AUTH_SAML_SECURITY_CONFIG`: A dict of key value pairs that are passed to the underlying python-saml security setting https://github.com/onelogin/python-saml#settings (nested object, default=`{&#x27;requestedAuthnContext&#x27;: False}`) * `SOCIAL_AUTH_SAML_SP_EXTRA`: A dict of key value pairs to be passed to the underlying python-saml Service Provider configuration setting. (nested object, default=`None`) * `SOCIAL_AUTH_SAML_EXTRA_DATA`: A list of tuples that maps IDP attributes to extra_attributes. Each attribute will be a list of values, even if only 1 value. (list, default=`None`) * `SOCIAL_AUTH_SAML_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_SAML_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_SAML_ORGANIZATION_ATTR`: Used to translate user organization membership. (nested object, default=`{}`) * `SOCIAL_AUTH_SAML_TEAM_ATTR`: Used to translate user team membership. (nested object, default=`{}`) * `SOCIAL_AUTH_SAML_USER_FLAGS_BY_ATTR`: Used to map super users and system auditors from SAML. (nested object, default=`{}`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Setting: Make a DELETE request to this resource to delete this setting.
     *
     * @tags api
     * @name ApiSettingsPartialUpdate
     * @summary # Retrieve a Setting:
     * @request PATCH:/api/{version}/settings/{category_slug}/
     * @secure
     */
    apiSettingsPartialUpdate: (
      categorySlug: string,
      version: string,
      data: SettingSingleton,
      params: RequestParams = {}
    ) =>
      this.request<SettingSingleton, any>({
        path: `/api/${version}/settings/${categorySlug}/`,
        method: 'PATCH',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single setting record containing the following fields: * `ACTIVITY_STREAM_ENABLED`: Enable capturing activity for the activity stream. (boolean) * `ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC`: Enable capturing activity for the activity stream when running inventory sync. (boolean) * `ORG_ADMINS_CAN_SEE_ALL_USERS`: Controls whether any Organization Admin can view all users and teams, even those not associated with their Organization. (boolean) * `MANAGE_ORGANIZATION_AUTH`: Controls whether any Organization Admin has the privileges to create and manage users and teams. You may want to disable this ability if you are using an LDAP or SAML integration. (boolean) * `TOWER_URL_BASE`: This setting is used by services like notifications to render a valid url to the service. (string) * `REMOTE_HOST_HEADERS`: HTTP headers and meta keys to search to determine remote host name or IP. Add additional items to this list, such as &quot;HTTP_X_FORWARDED_FOR&quot;, if behind a reverse proxy. See the &quot;Proxy Support&quot; section of the AAP Installation guide for more details. (list) * `PROXY_IP_ALLOWED_LIST`: If the service is behind a reverse proxy/load balancer, use this setting to configure the proxy IP addresses from which the service should trust custom REMOTE_HOST_HEADERS header values. If this setting is an empty list (the default), the headers specified by REMOTE_HOST_HEADERS will be trusted unconditionally&#x27;) (list) * `LICENSE`: The license controls which features and functionality are enabled. Use /api/v2/config/ to update or change the license. (nested object) * `REDHAT_USERNAME`: This username is used to send data to Automation Analytics (string) * `REDHAT_PASSWORD`: This password is used to send data to Automation Analytics (string) * `SUBSCRIPTIONS_USERNAME`: This username is used to retrieve subscription and content information (string) * `SUBSCRIPTIONS_PASSWORD`: This password is used to retrieve subscription and content information (string) * `AUTOMATION_ANALYTICS_URL`: This setting is used to to configure the upload URL for data collection for Automation Analytics. (string) * `INSTALL_UUID`:  (string) * `DEFAULT_CONTROL_PLANE_QUEUE_NAME`:  (string) * `DEFAULT_EXECUTION_QUEUE_NAME`:  (string) * `DEFAULT_EXECUTION_ENVIRONMENT`: The Execution Environment to be used when one has not been configured for a job template. (field) * `CUSTOM_VENV_PATHS`: Paths where Tower will look for custom virtual environments (in addition to /var/lib/awx/venv/). Enter one path per line. (list) * `AD_HOC_COMMANDS`: List of modules allowed to be used by ad-hoc jobs. (list) * `ALLOW_JINJA_IN_EXTRA_VARS`: Ansible allows variable substitution via the Jinja2 templating language for --extra-vars. This poses a potential security risk where users with the ability to specify extra vars at job launch time can use Jinja2 templates to run arbitrary Python.  It is recommended that this value be set to &quot;template&quot; or &quot;never&quot;. (choice) - `always`: Always - `never`: Never - `template`: Only On Job Template Definitions * `AWX_ISOLATION_BASE_PATH`: The directory in which the service will create new temporary directories for job execution and isolation (such as credential files). (string) * `AWX_ISOLATION_SHOW_PATHS`: List of paths that would otherwise be hidden to expose to isolated jobs. Enter one path per line. Volumes will be mounted from the execution node to the container. The supported format is HOST-DIR[:CONTAINER-DIR[:OPTIONS]].  (list) * `AWX_TASK_ENV`: Additional environment variables set for playbook runs, inventory updates, project updates, and notification sending. (nested object) * `GALAXY_TASK_ENV`: Additional environment variables set for invocations of ansible-galaxy within project updates. Useful if you must use a proxy server for ansible-galaxy but not git. (nested object) * `INSIGHTS_TRACKING_STATE`: Enables the service to gather data on automation and send it to Automation Analytics. (boolean) * `PROJECT_UPDATE_VVV`: Adds the CLI -vvv flag to ansible-playbook runs of project_update.yml used for project updates. (boolean) * `AWX_ROLES_ENABLED`: Allows roles to be dynamically downloaded from a requirements.yml file for SCM projects. (boolean) * `AWX_COLLECTIONS_ENABLED`: Allows collections to be dynamically downloaded from a requirements.yml file for SCM projects. (boolean) * `AWX_SHOW_PLAYBOOK_LINKS`: Follow symbolic links when scanning for playbooks. Be aware that setting this to True can lead to infinite recursion if a link points to a parent directory of itself. (boolean) * `AWX_MOUNT_ISOLATED_PATHS_ON_K8S`: Expose paths via hostPath for the Pods created by a Container Group. HostPath volumes present many security risks, and it is a best practice to avoid the use of HostPaths when possible.  (boolean) * `GALAXY_IGNORE_CERTS`: If set to true, certificate validation will not be done when installing content from any Galaxy server. (boolean) * `STDOUT_MAX_BYTES_DISPLAY`: Maximum Size of Standard Output in bytes to display before requiring the output be downloaded. (integer) * `EVENT_STDOUT_MAX_BYTES_DISPLAY`: Maximum Size of Standard Output in bytes to display for a single job or ad hoc command event. `stdout` will end with `…` when truncated. (integer) * `MAX_WEBSOCKET_EVENT_RATE`: Maximum number of messages to update the UI live job output with per second. Value of 0 means no limit. (integer) * `SCHEDULE_MAX_JOBS`: Maximum number of the same job template that can be waiting to run when launching from a schedule before no more are created. (integer) * `AWX_ANSIBLE_CALLBACK_PLUGINS`: List of paths to search for extra callback plugins to be used when running jobs. Enter one path per line. (list) * `DEFAULT_JOB_TIMEOUT`: Maximum time in seconds to allow jobs to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual job template will override this. (integer) * `DEFAULT_JOB_IDLE_TIMEOUT`: If no output is detected from ansible in this number of seconds the execution will be terminated. Use value of 0 to indicate that no idle timeout should be imposed. (integer) * `DEFAULT_INVENTORY_UPDATE_TIMEOUT`: Maximum time in seconds to allow inventory updates to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual inventory source will override this. (integer) * `DEFAULT_PROJECT_UPDATE_TIMEOUT`: Maximum time in seconds to allow project updates to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual project will override this. (integer) * `ANSIBLE_FACT_CACHE_TIMEOUT`: Maximum time, in seconds, that stored Ansible facts are considered valid since the last time they were modified. Only valid, non-stale, facts will be accessible by a playbook. Note, this does not influence the deletion of ansible_facts from the database. Use a value of 0 to indicate that no timeout should be imposed. (integer) * `MAX_FORKS`: Saving a Job Template with more than this number of forks will result in an error. When set to 0, no limit is applied. (integer) * `LOG_AGGREGATOR_HOST`: Hostname/IP where external logs will be sent to. (string) * `LOG_AGGREGATOR_PORT`: Port on Logging Aggregator to send logs to (if required and not provided in Logging Aggregator). (integer) * `LOG_AGGREGATOR_TYPE`: Format messages for the chosen log aggregator. (choice) - `None`: --------- - `logstash` - `splunk` - `loggly` - `sumologic` - `other` * `LOG_AGGREGATOR_USERNAME`: Username for external log aggregator (if required; HTTP/s only). (string) * `LOG_AGGREGATOR_PASSWORD`: Password or authentication token for external log aggregator (if required; HTTP/s only). (string) * `LOG_AGGREGATOR_LOGGERS`: List of loggers that will send HTTP logs to the collector, these can include any or all of: awx - service logs activity_stream - activity stream records job_events - callback data from Ansible job events system_tracking - facts gathered from scan jobs. (list) * `LOG_AGGREGATOR_INDIVIDUAL_FACTS`: If set, system tracking facts will be sent for each package, service, or other item found in a scan, allowing for greater search query granularity. If unset, facts will be sent as a single dictionary, allowing for greater efficiency in fact processing. (boolean) * `LOG_AGGREGATOR_ENABLED`: Enable sending logs to external log aggregator. (boolean) * `LOG_AGGREGATOR_TOWER_UUID`: Useful to uniquely identify instances. (string) * `LOG_AGGREGATOR_PROTOCOL`: Protocol used to communicate with log aggregator.  HTTPS/HTTP assumes HTTPS unless http:// is explicitly used in the Logging Aggregator hostname. (choice) - `https`: HTTPS/HTTP - `tcp`: TCP - `udp`: UDP * `LOG_AGGREGATOR_TCP_TIMEOUT`: Number of seconds for a TCP connection to external log aggregator to timeout. Applies to HTTPS and TCP log aggregator protocols. (integer) * `LOG_AGGREGATOR_VERIFY_CERT`: Flag to control enable/disable of certificate verification when LOG_AGGREGATOR_PROTOCOL is &quot;https&quot;. If enabled, the log handler will verify certificate sent by external log aggregator before establishing connection. (boolean) * `LOG_AGGREGATOR_LEVEL`: Level threshold used by log handler. Severities from lowest to highest are DEBUG, INFO, WARNING, ERROR, CRITICAL. Messages less severe than the threshold will be ignored by log handler. (messages under category awx.anlytics ignore this setting) (choice) - `DEBUG` - `INFO` - `WARNING` - `ERROR` - `CRITICAL` * `LOG_AGGREGATOR_MAX_DISK_USAGE_GB`: Amount of data to store (in gigabytes) during an outage of the external log aggregator (defaults to 1). Equivalent to the rsyslogd queue.maxdiskspace setting. (integer) * `LOG_AGGREGATOR_MAX_DISK_USAGE_PATH`: Location to persist logs that should be retried after an outage of the external log aggregator (defaults to /var/lib/awx). Equivalent to the rsyslogd queue.spoolDirectory setting. (string) * `LOG_AGGREGATOR_RSYSLOGD_DEBUG`: Enabled high verbosity debugging for rsyslogd.  Useful for debugging connection issues for external log aggregation. (boolean) * `API_400_ERROR_LOG_FORMAT`: The format of logged messages when an API 4XX error occurs, the following variables will be substituted: status_code - The HTTP status code of the error user_name - The user name attempting to use the API url_path - The URL path to the API endpoint called remote_addr - The remote address seen for the user error - The error set by the api endpoint Variables need to be in the format {&lt;variable name&gt;}. (string) * `AUTOMATION_ANALYTICS_LAST_GATHER`:  (datetime) * `AUTOMATION_ANALYTICS_LAST_ENTRIES`:  (string) * `AUTOMATION_ANALYTICS_GATHER_INTERVAL`: Interval (in seconds) between data gathering. (integer) * `IS_K8S`: Indicates whether the instance is part of a kubernetes-based deployment. (boolean) * `SESSION_COOKIE_AGE`: Number of seconds that a user is inactive before they will need to login again. (integer) * `SESSIONS_PER_USER`: Maximum number of simultaneous logged in sessions a user may have. To disable enter -1. (integer) * `DISABLE_LOCAL_AUTH`: Controls whether users are prevented from using the built-in authentication system. You probably want to do this if you are using an LDAP or SAML integration. (boolean) * `AUTH_BASIC_ENABLED`: Enable HTTP Basic Auth for the API Browser. (boolean) * `OAUTH2_PROVIDER`: Dictionary for customizing OAuth 2 timeouts, available items are `ACCESS_TOKEN_EXPIRE_SECONDS`, the duration of access tokens in the number of seconds, `AUTHORIZATION_CODE_EXPIRE_SECONDS`, the duration of authorization codes in the number of seconds, and `REFRESH_TOKEN_EXPIRE_SECONDS`, the duration of refresh tokens, after expired access tokens, in the number of seconds. (nested object) * `ALLOW_OAUTH2_FOR_EXTERNAL_USERS`: For security reasons, users from external auth providers (LDAP, SAML, SSO, Radius, and others) are not allowed to create OAuth2 tokens. To change this behavior, enable this setting. Existing tokens will not be deleted when this setting is toggled off. (boolean) * `LOGIN_REDIRECT_OVERRIDE`: URL to which unauthorized users will be redirected to log in.  If blank, users will be sent to the login page. (string) * `PENDO_TRACKING_STATE`: Enable or Disable User Analytics Tracking. (choice) - `off`: Off - `anonymous`: Anonymous - `detailed`: Detailed * `CUSTOM_LOGIN_INFO`: If needed, you can add specific information (such as a legal notice or a disclaimer) to a text box in the login modal using this setting. Any content added must be in plain text or an HTML fragment, as other markup languages are not supported. (string) * `CUSTOM_LOGO`: To set up a custom logo, provide a file that you create. For the custom logo to look its best, use a .png file with a transparent background. GIF, PNG and JPEG formats are supported. (string) * `MAX_UI_JOB_EVENTS`: Maximum number of job events for the UI to retrieve within a single request. (integer) * `UI_LIVE_UPDATES_ENABLED`: If disabled, the page will not refresh when events are received. Reloading the page will be required to get the latest details. (boolean) * `AUTHENTICATION_BACKENDS`: List of authentication backends that are enabled based on license features and other authentication settings. (list) * `SOCIAL_AUTH_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_USER_FIELDS`: When set to an empty list `[]`, this setting prevents new user accounts from being created. Only users who have previously logged in using social auth or have a user account with a matching email address will be able to login. (list) * `AUTH_LDAP_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string) * `AUTH_LDAP_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string) * `AUTH_LDAP_BIND_PASSWORD`: Password used to bind LDAP user account. (string) * `AUTH_LDAP_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean) * `AUTH_LDAP_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object) * `AUTH_LDAP_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list) * `AUTH_LDAP_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string) * `AUTH_LDAP_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object) * `AUTH_LDAP_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list) * `AUTH_LDAP_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object) * `AUTH_LDAP_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string) * `AUTH_LDAP_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string) * `AUTH_LDAP_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object) * `AUTH_LDAP_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_1_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string) * `AUTH_LDAP_1_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string) * `AUTH_LDAP_1_BIND_PASSWORD`: Password used to bind LDAP user account. (string) * `AUTH_LDAP_1_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean) * `AUTH_LDAP_1_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object) * `AUTH_LDAP_1_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list) * `AUTH_LDAP_1_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string) * `AUTH_LDAP_1_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object) * `AUTH_LDAP_1_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list) * `AUTH_LDAP_1_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_1_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object) * `AUTH_LDAP_1_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string) * `AUTH_LDAP_1_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string) * `AUTH_LDAP_1_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object) * `AUTH_LDAP_1_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_1_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_2_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string) * `AUTH_LDAP_2_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string) * `AUTH_LDAP_2_BIND_PASSWORD`: Password used to bind LDAP user account. (string) * `AUTH_LDAP_2_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean) * `AUTH_LDAP_2_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object) * `AUTH_LDAP_2_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list) * `AUTH_LDAP_2_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string) * `AUTH_LDAP_2_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object) * `AUTH_LDAP_2_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list) * `AUTH_LDAP_2_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_2_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object) * `AUTH_LDAP_2_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string) * `AUTH_LDAP_2_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string) * `AUTH_LDAP_2_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object) * `AUTH_LDAP_2_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_2_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_3_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string) * `AUTH_LDAP_3_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string) * `AUTH_LDAP_3_BIND_PASSWORD`: Password used to bind LDAP user account. (string) * `AUTH_LDAP_3_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean) * `AUTH_LDAP_3_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object) * `AUTH_LDAP_3_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list) * `AUTH_LDAP_3_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string) * `AUTH_LDAP_3_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object) * `AUTH_LDAP_3_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list) * `AUTH_LDAP_3_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_3_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object) * `AUTH_LDAP_3_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string) * `AUTH_LDAP_3_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string) * `AUTH_LDAP_3_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object) * `AUTH_LDAP_3_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_3_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_4_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string) * `AUTH_LDAP_4_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string) * `AUTH_LDAP_4_BIND_PASSWORD`: Password used to bind LDAP user account. (string) * `AUTH_LDAP_4_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean) * `AUTH_LDAP_4_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object) * `AUTH_LDAP_4_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list) * `AUTH_LDAP_4_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string) * `AUTH_LDAP_4_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object) * `AUTH_LDAP_4_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list) * `AUTH_LDAP_4_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_4_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object) * `AUTH_LDAP_4_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string) * `AUTH_LDAP_4_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string) * `AUTH_LDAP_4_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object) * `AUTH_LDAP_4_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_4_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_5_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string) * `AUTH_LDAP_5_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string) * `AUTH_LDAP_5_BIND_PASSWORD`: Password used to bind LDAP user account. (string) * `AUTH_LDAP_5_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean) * `AUTH_LDAP_5_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object) * `AUTH_LDAP_5_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list) * `AUTH_LDAP_5_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string) * `AUTH_LDAP_5_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object) * `AUTH_LDAP_5_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list) * `AUTH_LDAP_5_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_5_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object) * `AUTH_LDAP_5_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string) * `AUTH_LDAP_5_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string) * `AUTH_LDAP_5_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object) * `AUTH_LDAP_5_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object) * `AUTH_LDAP_5_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object) * `RADIUS_SERVER`: Hostname/IP of RADIUS server. RADIUS authentication is disabled if this setting is empty. (string) * `RADIUS_PORT`: Port of RADIUS server. (integer) * `RADIUS_SECRET`: Shared secret for authenticating to RADIUS server. (string) * `TACACSPLUS_HOST`: Hostname of TACACS+ server. (string) * `TACACSPLUS_PORT`: Port number of TACACS+ server. (integer) * `TACACSPLUS_SECRET`: Shared secret for authenticating to TACACS+ server. (string) * `TACACSPLUS_SESSION_TIMEOUT`: TACACS+ session timeout value in seconds, 0 disables timeout. (integer) * `TACACSPLUS_AUTH_PROTOCOL`: Choose the authentication protocol used by TACACS+ client. (choice) - `ascii` - `pap` * `SOCIAL_AUTH_GOOGLE_OAUTH2_CALLBACK_URL`: Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail. (string) * `SOCIAL_AUTH_GOOGLE_OAUTH2_KEY`: The OAuth2 key from your web application. (string) * `SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET`: The OAuth2 secret from your web application. (string) * `SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS`: Update this setting to restrict the domains who are allowed to login using Google OAuth2. (list) * `SOCIAL_AUTH_GOOGLE_OAUTH2_AUTH_EXTRA_ARGUMENTS`: Extra arguments for Google OAuth2 login. You can restrict it to only allow a single domain to authenticate, even if the user is logged in with multple Google accounts. Refer to the documentation for more detail. (nested object) * `SOCIAL_AUTH_GOOGLE_OAUTH2_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GOOGLE_OAUTH2_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_CALLBACK_URL`: Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail. (string) * `SOCIAL_AUTH_GITHUB_KEY`: The OAuth2 key (Client ID) from your GitHub developer application. (string) * `SOCIAL_AUTH_GITHUB_SECRET`: The OAuth2 secret (Client Secret) from your GitHub developer application. (string) * `SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ORG_CALLBACK_URL`: Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail. (string) * `SOCIAL_AUTH_GITHUB_ORG_KEY`: The OAuth2 key (Client ID) from your GitHub organization application. (string) * `SOCIAL_AUTH_GITHUB_ORG_SECRET`: The OAuth2 secret (Client Secret) from your GitHub organization application. (string) * `SOCIAL_AUTH_GITHUB_ORG_NAME`: The name of your GitHub organization, as used in your organization&#x27;s URL: https://github.com/&lt;yourorg&gt;/. (string) * `SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_TEAM_CALLBACK_URL`: Create an organization-owned application at https://github.com/organizations/&lt;yourorg&gt;/settings/applications and obtain an OAuth2 key (Client ID) and secret (Client Secret). Provide this URL as the callback URL for your application. (string) * `SOCIAL_AUTH_GITHUB_TEAM_KEY`: The OAuth2 key (Client ID) from your GitHub organization application. (string) * `SOCIAL_AUTH_GITHUB_TEAM_SECRET`: The OAuth2 secret (Client Secret) from your GitHub organization application. (string) * `SOCIAL_AUTH_GITHUB_TEAM_ID`: Find the numeric team ID using the Github API: http://fabian-kostadinov.github.io/2015/01/16/how-to-find-a-github-team-id/. (string) * `SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_CALLBACK_URL`: Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_URL`: The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_API_URL`: The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_KEY`: The OAuth2 key (Client ID) from your GitHub Enterprise developer application. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_SECRET`: The OAuth2 secret (Client Secret) from your GitHub Enterprise developer application. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_CALLBACK_URL`: Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_URL`: The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_API_URL`: The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_KEY`: The OAuth2 key (Client ID) from your GitHub Enterprise organization application. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_SECRET`: The OAuth2 secret (Client Secret) from your GitHub Enterprise organization application. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_NAME`: The name of your GitHub Enterprise organization, as used in your organization&#x27;s URL: https://github.com/&lt;yourorg&gt;/. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_CALLBACK_URL`: Create an organization-owned application at https://github.com/organizations/&lt;yourorg&gt;/settings/applications and obtain an OAuth2 key (Client ID) and secret (Client Secret). Provide this URL as the callback URL for your application. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_URL`: The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_API_URL`: The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_KEY`: The OAuth2 key (Client ID) from your GitHub Enterprise organization application. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_SECRET`: The OAuth2 secret (Client Secret) from your GitHub Enterprise organization application. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ID`: Find the numeric team ID using the Github Enterprise API: http://fabian-kostadinov.github.io/2015/01/16/how-to-find-a-github-team-id/. (string) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_AZUREAD_OAUTH2_CALLBACK_URL`: Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail.  (string) * `SOCIAL_AUTH_AZUREAD_OAUTH2_KEY`: The OAuth2 key (Client ID) from your Azure AD application. (string) * `SOCIAL_AUTH_AZUREAD_OAUTH2_SECRET`: The OAuth2 secret (Client Secret) from your Azure AD application. (string) * `SOCIAL_AUTH_AZUREAD_OAUTH2_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_AZUREAD_OAUTH2_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_OIDC_KEY`: The OIDC key (Client ID) from your IDP. (string) * `SOCIAL_AUTH_OIDC_SECRET`: The OIDC secret (Client Secret) from your IDP. (string) * `SOCIAL_AUTH_OIDC_OIDC_ENDPOINT`: The URL for your OIDC provider including the path up to /.well-known/openid-configuration (string) * `SOCIAL_AUTH_OIDC_VERIFY_SSL`: Verify the OIDV provider ssl certificate. (boolean) * `SAML_AUTO_CREATE_OBJECTS`: When enabled (the default), mapped Organizations and Teams will be created automatically on successful SAML login. (boolean) * `SOCIAL_AUTH_SAML_CALLBACK_URL`: Register the service as a service provider (SP) with each identity provider (IdP) you have configured. Provide your SP Entity ID and this ACS URL for your application. (string) * `SOCIAL_AUTH_SAML_METADATA_URL`: If your identity provider (IdP) allows uploading an XML metadata file, you can download one from this URL. (string) * `SOCIAL_AUTH_SAML_SP_ENTITY_ID`: The application-defined unique identifier used as the audience of the SAML service provider (SP) configuration. This is usually the URL for the service. (string) * `SOCIAL_AUTH_SAML_SP_PUBLIC_CERT`: Create a keypair to use as a service provider (SP) and include the certificate content here. (string) * `SOCIAL_AUTH_SAML_SP_PRIVATE_KEY`: Create a keypair to use as a service provider (SP) and include the private key content here. (string) * `SOCIAL_AUTH_SAML_ORG_INFO`: Provide the URL, display name, and the name of your app. Refer to the documentation for example syntax. (nested object) * `SOCIAL_AUTH_SAML_TECHNICAL_CONTACT`: Provide the name and email address of the technical contact for your service provider. Refer to the documentation for example syntax. (nested object) * `SOCIAL_AUTH_SAML_SUPPORT_CONTACT`: Provide the name and email address of the support contact for your service provider. Refer to the documentation for example syntax. (nested object) * `SOCIAL_AUTH_SAML_ENABLED_IDPS`: Configure the Entity ID, SSO URL and certificate for each identity provider (IdP) in use. Multiple SAML IdPs are supported. Some IdPs may provide user data using attribute names that differ from the default OIDs. Attribute names may be overridden for each IdP. Refer to the Ansible documentation for additional details and syntax. (nested object) * `SOCIAL_AUTH_SAML_SECURITY_CONFIG`: A dict of key value pairs that are passed to the underlying python-saml security setting https://github.com/onelogin/python-saml#settings (nested object) * `SOCIAL_AUTH_SAML_SP_EXTRA`: A dict of key value pairs to be passed to the underlying python-saml Service Provider configuration setting. (nested object) * `SOCIAL_AUTH_SAML_EXTRA_DATA`: A list of tuples that maps IDP attributes to extra_attributes. Each attribute will be a list of values, even if only 1 value. (list) * `SOCIAL_AUTH_SAML_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_SAML_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object) * `SOCIAL_AUTH_SAML_ORGANIZATION_ATTR`: Used to translate user organization membership. (nested object) * `SOCIAL_AUTH_SAML_TEAM_ATTR`: Used to translate user team membership. (nested object) * `SOCIAL_AUTH_SAML_USER_FLAGS_BY_ATTR`: Used to map super users and system auditors from SAML. (nested object) * `NAMED_URL_FORMATS`: Read-only list of key-value pairs that shows the standard format of all available named URLs. (nested object) * `NAMED_URL_GRAPH_NODES`: Read-only list of key-value pairs that exposes named URL graph topology. Use this list to programmatically generate named URLs for resources (nested object) # Update a Setting: Make a PUT or PATCH request to this resource to update this setting.  The following fields may be modified: * `ACTIVITY_STREAM_ENABLED`: Enable capturing activity for the activity stream. (boolean, required) * `ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC`: Enable capturing activity for the activity stream when running inventory sync. (boolean, required) * `ORG_ADMINS_CAN_SEE_ALL_USERS`: Controls whether any Organization Admin can view all users and teams, even those not associated with their Organization. (boolean, required) * `MANAGE_ORGANIZATION_AUTH`: Controls whether any Organization Admin has the privileges to create and manage users and teams. You may want to disable this ability if you are using an LDAP or SAML integration. (boolean, required) * `TOWER_URL_BASE`: This setting is used by services like notifications to render a valid url to the service. (string, required) * `REMOTE_HOST_HEADERS`: HTTP headers and meta keys to search to determine remote host name or IP. Add additional items to this list, such as &quot;HTTP_X_FORWARDED_FOR&quot;, if behind a reverse proxy. See the &quot;Proxy Support&quot; section of the AAP Installation guide for more details. (list, required) * `PROXY_IP_ALLOWED_LIST`: If the service is behind a reverse proxy/load balancer, use this setting to configure the proxy IP addresses from which the service should trust custom REMOTE_HOST_HEADERS header values. If this setting is an empty list (the default), the headers specified by REMOTE_HOST_HEADERS will be trusted unconditionally&#x27;) (list, required) * `REDHAT_USERNAME`: This username is used to send data to Automation Analytics (string, default=`""`) * `REDHAT_PASSWORD`: This password is used to send data to Automation Analytics (string, default=`""`) * `SUBSCRIPTIONS_USERNAME`: This username is used to retrieve subscription and content information (string, default=`""`) * `SUBSCRIPTIONS_PASSWORD`: This password is used to retrieve subscription and content information (string, default=`""`) * `AUTOMATION_ANALYTICS_URL`: This setting is used to to configure the upload URL for data collection for Automation Analytics. (string, default=`"https://example.com"`) * `DEFAULT_EXECUTION_ENVIRONMENT`: The Execution Environment to be used when one has not been configured for a job template. (field, default=`None`) * `CUSTOM_VENV_PATHS`: Paths where Tower will look for custom virtual environments (in addition to /var/lib/awx/venv/). Enter one path per line. (list, default=`[]`) * `AD_HOC_COMMANDS`: List of modules allowed to be used by ad-hoc jobs. (list, default=`[&#x27;command&#x27;, &#x27;shell&#x27;, &#x27;yum&#x27;, &#x27;apt&#x27;, &#x27;apt_key&#x27;, &#x27;apt_repository&#x27;, &#x27;apt_rpm&#x27;, &#x27;service&#x27;, &#x27;group&#x27;, &#x27;user&#x27;, &#x27;mount&#x27;, &#x27;ping&#x27;, &#x27;selinux&#x27;, &#x27;setup&#x27;, &#x27;win_ping&#x27;, &#x27;win_service&#x27;, &#x27;win_updates&#x27;, &#x27;win_group&#x27;, &#x27;win_user&#x27;]`) * `ALLOW_JINJA_IN_EXTRA_VARS`: Ansible allows variable substitution via the Jinja2 templating language for --extra-vars. This poses a potential security risk where users with the ability to specify extra vars at job launch time can use Jinja2 templates to run arbitrary Python.  It is recommended that this value be set to &quot;template&quot; or &quot;never&quot;. (choice, required) - `always`: Always - `never`: Never - `template`: Only On Job Template Definitions (default) * `AWX_ISOLATION_BASE_PATH`: The directory in which the service will create new temporary directories for job execution and isolation (such as credential files). (string, required) * `AWX_ISOLATION_SHOW_PATHS`: List of paths that would otherwise be hidden to expose to isolated jobs. Enter one path per line. Volumes will be mounted from the execution node to the container. The supported format is HOST-DIR[:CONTAINER-DIR[:OPTIONS]].  (list, default=`[]`) * `AWX_TASK_ENV`: Additional environment variables set for playbook runs, inventory updates, project updates, and notification sending. (nested object, default=`{}`) * `GALAXY_TASK_ENV`: Additional environment variables set for invocations of ansible-galaxy within project updates. Useful if you must use a proxy server for ansible-galaxy but not git. (nested object, required) * `INSIGHTS_TRACKING_STATE`: Enables the service to gather data on automation and send it to Automation Analytics. (boolean, default=`False`) * `PROJECT_UPDATE_VVV`: Adds the CLI -vvv flag to ansible-playbook runs of project_update.yml used for project updates. (boolean, required) * `AWX_ROLES_ENABLED`: Allows roles to be dynamically downloaded from a requirements.yml file for SCM projects. (boolean, default=`True`) * `AWX_COLLECTIONS_ENABLED`: Allows collections to be dynamically downloaded from a requirements.yml file for SCM projects. (boolean, default=`True`) * `AWX_SHOW_PLAYBOOK_LINKS`: Follow symbolic links when scanning for playbooks. Be aware that setting this to True can lead to infinite recursion if a link points to a parent directory of itself. (boolean, default=`False`) * `AWX_MOUNT_ISOLATED_PATHS_ON_K8S`: Expose paths via hostPath for the Pods created by a Container Group. HostPath volumes present many security risks, and it is a best practice to avoid the use of HostPaths when possible.  (boolean, default=`False`) * `GALAXY_IGNORE_CERTS`: If set to true, certificate validation will not be done when installing content from any Galaxy server. (boolean, default=`False`) * `STDOUT_MAX_BYTES_DISPLAY`: Maximum Size of Standard Output in bytes to display before requiring the output be downloaded. (integer, required) * `EVENT_STDOUT_MAX_BYTES_DISPLAY`: Maximum Size of Standard Output in bytes to display for a single job or ad hoc command event. `stdout` will end with `…` when truncated. (integer, required) * `MAX_WEBSOCKET_EVENT_RATE`: Maximum number of messages to update the UI live job output with per second. Value of 0 means no limit. (integer, default=`30`) * `SCHEDULE_MAX_JOBS`: Maximum number of the same job template that can be waiting to run when launching from a schedule before no more are created. (integer, required) * `AWX_ANSIBLE_CALLBACK_PLUGINS`: List of paths to search for extra callback plugins to be used when running jobs. Enter one path per line. (list, default=`[]`) * `DEFAULT_JOB_TIMEOUT`: Maximum time in seconds to allow jobs to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual job template will override this. (integer, default=`0`) * `DEFAULT_JOB_IDLE_TIMEOUT`: If no output is detected from ansible in this number of seconds the execution will be terminated. Use value of 0 to indicate that no idle timeout should be imposed. (integer, default=`0`) * `DEFAULT_INVENTORY_UPDATE_TIMEOUT`: Maximum time in seconds to allow inventory updates to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual inventory source will override this. (integer, default=`0`) * `DEFAULT_PROJECT_UPDATE_TIMEOUT`: Maximum time in seconds to allow project updates to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual project will override this. (integer, default=`0`) * `ANSIBLE_FACT_CACHE_TIMEOUT`: Maximum time, in seconds, that stored Ansible facts are considered valid since the last time they were modified. Only valid, non-stale, facts will be accessible by a playbook. Note, this does not influence the deletion of ansible_facts from the database. Use a value of 0 to indicate that no timeout should be imposed. (integer, default=`0`) * `MAX_FORKS`: Saving a Job Template with more than this number of forks will result in an error. When set to 0, no limit is applied. (integer, default=`200`) * `LOG_AGGREGATOR_HOST`: Hostname/IP where external logs will be sent to. (string, default=`""`) * `LOG_AGGREGATOR_PORT`: Port on Logging Aggregator to send logs to (if required and not provided in Logging Aggregator). (integer, default=`None`) * `LOG_AGGREGATOR_TYPE`: Format messages for the chosen log aggregator. (choice) - `None`: --------- (default) - `logstash` - `splunk` - `loggly` - `sumologic` - `other` * `LOG_AGGREGATOR_USERNAME`: Username for external log aggregator (if required; HTTP/s only). (string, default=`""`) * `LOG_AGGREGATOR_PASSWORD`: Password or authentication token for external log aggregator (if required; HTTP/s only). (string, default=`""`) * `LOG_AGGREGATOR_LOGGERS`: List of loggers that will send HTTP logs to the collector, these can include any or all of: awx - service logs activity_stream - activity stream records job_events - callback data from Ansible job events system_tracking - facts gathered from scan jobs. (list, default=`[&#x27;awx&#x27;, &#x27;activity_stream&#x27;, &#x27;job_events&#x27;, &#x27;system_tracking&#x27;]`) * `LOG_AGGREGATOR_INDIVIDUAL_FACTS`: If set, system tracking facts will be sent for each package, service, or other item found in a scan, allowing for greater search query granularity. If unset, facts will be sent as a single dictionary, allowing for greater efficiency in fact processing. (boolean, default=`False`) * `LOG_AGGREGATOR_ENABLED`: Enable sending logs to external log aggregator. (boolean, default=`False`) * `LOG_AGGREGATOR_TOWER_UUID`: Useful to uniquely identify instances. (string, default=`""`) * `LOG_AGGREGATOR_PROTOCOL`: Protocol used to communicate with log aggregator.  HTTPS/HTTP assumes HTTPS unless http:// is explicitly used in the Logging Aggregator hostname. (choice) - `https`: HTTPS/HTTP (default) - `tcp`: TCP - `udp`: UDP * `LOG_AGGREGATOR_TCP_TIMEOUT`: Number of seconds for a TCP connection to external log aggregator to timeout. Applies to HTTPS and TCP log aggregator protocols. (integer, default=`5`) * `LOG_AGGREGATOR_VERIFY_CERT`: Flag to control enable/disable of certificate verification when LOG_AGGREGATOR_PROTOCOL is &quot;https&quot;. If enabled, the log handler will verify certificate sent by external log aggregator before establishing connection. (boolean, default=`True`) * `LOG_AGGREGATOR_LEVEL`: Level threshold used by log handler. Severities from lowest to highest are DEBUG, INFO, WARNING, ERROR, CRITICAL. Messages less severe than the threshold will be ignored by log handler. (messages under category awx.anlytics ignore this setting) (choice) - `DEBUG` - `INFO` (default) - `WARNING` - `ERROR` - `CRITICAL` * `LOG_AGGREGATOR_MAX_DISK_USAGE_GB`: Amount of data to store (in gigabytes) during an outage of the external log aggregator (defaults to 1). Equivalent to the rsyslogd queue.maxdiskspace setting. (integer, default=`1`) * `LOG_AGGREGATOR_MAX_DISK_USAGE_PATH`: Location to persist logs that should be retried after an outage of the external log aggregator (defaults to /var/lib/awx). Equivalent to the rsyslogd queue.spoolDirectory setting. (string, default=`"/var/lib/awx"`) * `LOG_AGGREGATOR_RSYSLOGD_DEBUG`: Enabled high verbosity debugging for rsyslogd.  Useful for debugging connection issues for external log aggregation. (boolean, default=`False`) * `API_400_ERROR_LOG_FORMAT`: The format of logged messages when an API 4XX error occurs, the following variables will be substituted: status_code - The HTTP status code of the error user_name - The user name attempting to use the API url_path - The URL path to the API endpoint called remote_addr - The remote address seen for the user error - The error set by the api endpoint Variables need to be in the format {&lt;variable name&gt;}. (string, default=`"status {status_code} received by user {user_name} attempting to access {url_path} from {remote_addr}"`) * `AUTOMATION_ANALYTICS_LAST_GATHER`:  (datetime, required) * `AUTOMATION_ANALYTICS_LAST_ENTRIES`:  (string, default=`""`) * `AUTOMATION_ANALYTICS_GATHER_INTERVAL`: Interval (in seconds) between data gathering. (integer, default=`14400`) * `SESSION_COOKIE_AGE`: Number of seconds that a user is inactive before they will need to login again. (integer, required) * `SESSIONS_PER_USER`: Maximum number of simultaneous logged in sessions a user may have. To disable enter -1. (integer, required) * `DISABLE_LOCAL_AUTH`: Controls whether users are prevented from using the built-in authentication system. You probably want to do this if you are using an LDAP or SAML integration. (boolean, required) * `AUTH_BASIC_ENABLED`: Enable HTTP Basic Auth for the API Browser. (boolean, required) * `OAUTH2_PROVIDER`: Dictionary for customizing OAuth 2 timeouts, available items are `ACCESS_TOKEN_EXPIRE_SECONDS`, the duration of access tokens in the number of seconds, `AUTHORIZATION_CODE_EXPIRE_SECONDS`, the duration of authorization codes in the number of seconds, and `REFRESH_TOKEN_EXPIRE_SECONDS`, the duration of refresh tokens, after expired access tokens, in the number of seconds. (nested object, default=`{&#x27;ACCESS_TOKEN_EXPIRE_SECONDS&#x27;: 31536000000, &#x27;AUTHORIZATION_CODE_EXPIRE_SECONDS&#x27;: 600, &#x27;REFRESH_TOKEN_EXPIRE_SECONDS&#x27;: 2628000}`) * `ALLOW_OAUTH2_FOR_EXTERNAL_USERS`: For security reasons, users from external auth providers (LDAP, SAML, SSO, Radius, and others) are not allowed to create OAuth2 tokens. To change this behavior, enable this setting. Existing tokens will not be deleted when this setting is toggled off. (boolean, default=`False`) * `LOGIN_REDIRECT_OVERRIDE`: URL to which unauthorized users will be redirected to log in.  If blank, users will be sent to the login page. (string, default=`""`) * `CUSTOM_LOGIN_INFO`: If needed, you can add specific information (such as a legal notice or a disclaimer) to a text box in the login modal using this setting. Any content added must be in plain text or an HTML fragment, as other markup languages are not supported. (string, default=`""`) * `CUSTOM_LOGO`: To set up a custom logo, provide a file that you create. For the custom logo to look its best, use a .png file with a transparent background. GIF, PNG and JPEG formats are supported. (string, default=`""`) * `MAX_UI_JOB_EVENTS`: Maximum number of job events for the UI to retrieve within a single request. (integer, required) * `UI_LIVE_UPDATES_ENABLED`: If disabled, the page will not refresh when events are received. Reloading the page will be required to get the latest details. (boolean, required) * `SOCIAL_AUTH_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_USER_FIELDS`: When set to an empty list `[]`, this setting prevents new user accounts from being created. Only users who have previously logged in using social auth or have a user account with a matching email address will be able to login. (list, default=`None`) * `AUTH_LDAP_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string, default=`""`) * `AUTH_LDAP_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string, default=`""`) * `AUTH_LDAP_BIND_PASSWORD`: Password used to bind LDAP user account. (string, default=`""`) * `AUTH_LDAP_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean, default=`False`) * `AUTH_LDAP_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object, default=`{&#x27;OPT_REFERRALS&#x27;: 0, &#x27;OPT_NETWORK_TIMEOUT&#x27;: 30}`) * `AUTH_LDAP_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list, default=`[]`) * `AUTH_LDAP_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string, default=`""`) * `AUTH_LDAP_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object, default=`{}`) * `AUTH_LDAP_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list, default=`[]`) * `AUTH_LDAP_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` (default) - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object, default=`OrderedDict([(&#x27;member_attr&#x27;, &#x27;member&#x27;), (&#x27;name_attr&#x27;, &#x27;cn&#x27;)])`) * `AUTH_LDAP_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string, default=`""`) * `AUTH_LDAP_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string, default=`""`) * `AUTH_LDAP_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object, default=`{}`) * `AUTH_LDAP_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_1_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string, default=`""`) * `AUTH_LDAP_1_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string, default=`""`) * `AUTH_LDAP_1_BIND_PASSWORD`: Password used to bind LDAP user account. (string, default=`""`) * `AUTH_LDAP_1_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean, default=`False`) * `AUTH_LDAP_1_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object, default=`{&#x27;OPT_REFERRALS&#x27;: 0, &#x27;OPT_NETWORK_TIMEOUT&#x27;: 30}`) * `AUTH_LDAP_1_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list, default=`[]`) * `AUTH_LDAP_1_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string, default=`""`) * `AUTH_LDAP_1_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object, default=`{}`) * `AUTH_LDAP_1_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list, default=`[]`) * `AUTH_LDAP_1_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` (default) - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_1_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object, default=`OrderedDict([(&#x27;member_attr&#x27;, &#x27;member&#x27;), (&#x27;name_attr&#x27;, &#x27;cn&#x27;)])`) * `AUTH_LDAP_1_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string, default=`""`) * `AUTH_LDAP_1_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string, default=`""`) * `AUTH_LDAP_1_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object, default=`{}`) * `AUTH_LDAP_1_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_1_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_2_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string, default=`""`) * `AUTH_LDAP_2_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string, default=`""`) * `AUTH_LDAP_2_BIND_PASSWORD`: Password used to bind LDAP user account. (string, default=`""`) * `AUTH_LDAP_2_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean, default=`False`) * `AUTH_LDAP_2_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object, default=`{&#x27;OPT_REFERRALS&#x27;: 0, &#x27;OPT_NETWORK_TIMEOUT&#x27;: 30}`) * `AUTH_LDAP_2_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list, default=`[]`) * `AUTH_LDAP_2_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string, default=`""`) * `AUTH_LDAP_2_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object, default=`{}`) * `AUTH_LDAP_2_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list, default=`[]`) * `AUTH_LDAP_2_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` (default) - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_2_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object, default=`OrderedDict([(&#x27;member_attr&#x27;, &#x27;member&#x27;), (&#x27;name_attr&#x27;, &#x27;cn&#x27;)])`) * `AUTH_LDAP_2_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string, default=`""`) * `AUTH_LDAP_2_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string, default=`""`) * `AUTH_LDAP_2_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object, default=`{}`) * `AUTH_LDAP_2_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_2_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_3_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string, default=`""`) * `AUTH_LDAP_3_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string, default=`""`) * `AUTH_LDAP_3_BIND_PASSWORD`: Password used to bind LDAP user account. (string, default=`""`) * `AUTH_LDAP_3_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean, default=`False`) * `AUTH_LDAP_3_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object, default=`{&#x27;OPT_REFERRALS&#x27;: 0, &#x27;OPT_NETWORK_TIMEOUT&#x27;: 30}`) * `AUTH_LDAP_3_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list, default=`[]`) * `AUTH_LDAP_3_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string, default=`""`) * `AUTH_LDAP_3_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object, default=`{}`) * `AUTH_LDAP_3_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list, default=`[]`) * `AUTH_LDAP_3_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` (default) - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_3_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object, default=`OrderedDict([(&#x27;member_attr&#x27;, &#x27;member&#x27;), (&#x27;name_attr&#x27;, &#x27;cn&#x27;)])`) * `AUTH_LDAP_3_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string, default=`""`) * `AUTH_LDAP_3_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string, default=`""`) * `AUTH_LDAP_3_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object, default=`{}`) * `AUTH_LDAP_3_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_3_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_4_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string, default=`""`) * `AUTH_LDAP_4_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string, default=`""`) * `AUTH_LDAP_4_BIND_PASSWORD`: Password used to bind LDAP user account. (string, default=`""`) * `AUTH_LDAP_4_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean, default=`False`) * `AUTH_LDAP_4_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object, default=`{&#x27;OPT_REFERRALS&#x27;: 0, &#x27;OPT_NETWORK_TIMEOUT&#x27;: 30}`) * `AUTH_LDAP_4_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list, default=`[]`) * `AUTH_LDAP_4_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string, default=`""`) * `AUTH_LDAP_4_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object, default=`{}`) * `AUTH_LDAP_4_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list, default=`[]`) * `AUTH_LDAP_4_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` (default) - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_4_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object, default=`OrderedDict([(&#x27;member_attr&#x27;, &#x27;member&#x27;), (&#x27;name_attr&#x27;, &#x27;cn&#x27;)])`) * `AUTH_LDAP_4_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string, default=`""`) * `AUTH_LDAP_4_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string, default=`""`) * `AUTH_LDAP_4_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object, default=`{}`) * `AUTH_LDAP_4_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_4_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_5_SERVER_URI`: URI to connect to LDAP server, such as &quot;ldap://ldap.example.com:389&quot; (non-SSL) or &quot;ldaps://ldap.example.com:636&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty. (string, default=`""`) * `AUTH_LDAP_5_BIND_DN`: DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax. (string, default=`""`) * `AUTH_LDAP_5_BIND_PASSWORD`: Password used to bind LDAP user account. (string, default=`""`) * `AUTH_LDAP_5_START_TLS`: Whether to enable TLS when the LDAP connection is not using SSL. (boolean, default=`False`) * `AUTH_LDAP_5_CONNECTION_OPTIONS`: Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. &quot;OPT_REFERRALS&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set. (nested object, default=`{&#x27;OPT_REFERRALS&#x27;: 0, &#x27;OPT_NETWORK_TIMEOUT&#x27;: 30}`) * `AUTH_LDAP_5_USER_SEARCH`: LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of &quot;LDAPUnion&quot; is possible. See the documentation for details. (list, default=`[]`) * `AUTH_LDAP_5_USER_DN_TEMPLATE`: Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH. (string, default=`""`) * `AUTH_LDAP_5_USER_ATTR_MAP`: Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details. (nested object, default=`{}`) * `AUTH_LDAP_5_GROUP_SEARCH`: Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion. (list, default=`[]`) * `AUTH_LDAP_5_GROUP_TYPE`: The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups (choice) - `PosixGroupType` - `GroupOfNamesType` - `GroupOfUniqueNamesType` - `ActiveDirectoryGroupType` - `OrganizationalRoleGroupType` - `MemberDNGroupType` (default) - `NestedGroupOfNamesType` - `NestedGroupOfUniqueNamesType` - `NestedActiveDirectoryGroupType` - `NestedOrganizationalRoleGroupType` - `NestedMemberDNGroupType` - `PosixUIDGroupType` * `AUTH_LDAP_5_GROUP_TYPE_PARAMS`: Key value parameters to send the chosen group type init method. (nested object, default=`OrderedDict([(&#x27;member_attr&#x27;, &#x27;member&#x27;), (&#x27;name_attr&#x27;, &#x27;cn&#x27;)])`) * `AUTH_LDAP_5_REQUIRE_GROUP`: Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported. (string, default=`""`) * `AUTH_LDAP_5_DENY_GROUP`: Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported. (string, default=`""`) * `AUTH_LDAP_5_USER_FLAGS_BY_GROUP`: Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail. (nested object, default=`{}`) * `AUTH_LDAP_5_ORGANIZATION_MAP`: Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation. (nested object, default=`{}`) * `AUTH_LDAP_5_TEAM_MAP`: Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation. (nested object, default=`{}`) * `RADIUS_SERVER`: Hostname/IP of RADIUS server. RADIUS authentication is disabled if this setting is empty. (string, default=`""`) * `RADIUS_PORT`: Port of RADIUS server. (integer, default=`1812`) * `RADIUS_SECRET`: Shared secret for authenticating to RADIUS server. (string, default=`""`) * `TACACSPLUS_HOST`: Hostname of TACACS+ server. (string, default=`""`) * `TACACSPLUS_PORT`: Port number of TACACS+ server. (integer, default=`49`) * `TACACSPLUS_SECRET`: Shared secret for authenticating to TACACS+ server. (string, default=`""`) * `TACACSPLUS_SESSION_TIMEOUT`: TACACS+ session timeout value in seconds, 0 disables timeout. (integer, default=`5`) * `TACACSPLUS_AUTH_PROTOCOL`: Choose the authentication protocol used by TACACS+ client. (choice) - `ascii` (default) - `pap` * `SOCIAL_AUTH_GOOGLE_OAUTH2_KEY`: The OAuth2 key from your web application. (string, default=`""`) * `SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET`: The OAuth2 secret from your web application. (string, default=`""`) * `SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS`: Update this setting to restrict the domains who are allowed to login using Google OAuth2. (list, default=`[]`) * `SOCIAL_AUTH_GOOGLE_OAUTH2_AUTH_EXTRA_ARGUMENTS`: Extra arguments for Google OAuth2 login. You can restrict it to only allow a single domain to authenticate, even if the user is logged in with multple Google accounts. Refer to the documentation for more detail. (nested object, default=`{}`) * `SOCIAL_AUTH_GOOGLE_OAUTH2_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GOOGLE_OAUTH2_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_KEY`: The OAuth2 key (Client ID) from your GitHub developer application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_SECRET`: The OAuth2 secret (Client Secret) from your GitHub developer application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ORG_KEY`: The OAuth2 key (Client ID) from your GitHub organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ORG_SECRET`: The OAuth2 secret (Client Secret) from your GitHub organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ORG_NAME`: The name of your GitHub organization, as used in your organization&#x27;s URL: https://github.com/&lt;yourorg&gt;/. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_TEAM_KEY`: The OAuth2 key (Client ID) from your GitHub organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_TEAM_SECRET`: The OAuth2 secret (Client Secret) from your GitHub organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_TEAM_ID`: Find the numeric team ID using the Github API: http://fabian-kostadinov.github.io/2015/01/16/how-to-find-a-github-team-id/. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_URL`: The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_API_URL`: The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_KEY`: The OAuth2 key (Client ID) from your GitHub Enterprise developer application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_SECRET`: The OAuth2 secret (Client Secret) from your GitHub Enterprise developer application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_URL`: The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_API_URL`: The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_KEY`: The OAuth2 key (Client ID) from your GitHub Enterprise organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_SECRET`: The OAuth2 secret (Client Secret) from your GitHub Enterprise organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_NAME`: The name of your GitHub Enterprise organization, as used in your organization&#x27;s URL: https://github.com/&lt;yourorg&gt;/. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_URL`: The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_API_URL`: The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_KEY`: The OAuth2 key (Client ID) from your GitHub Enterprise organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_SECRET`: The OAuth2 secret (Client Secret) from your GitHub Enterprise organization application. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ID`: Find the numeric team ID using the Github Enterprise API: http://fabian-kostadinov.github.io/2015/01/16/how-to-find-a-github-team-id/. (string, default=`""`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_AZUREAD_OAUTH2_KEY`: The OAuth2 key (Client ID) from your Azure AD application. (string, default=`""`) * `SOCIAL_AUTH_AZUREAD_OAUTH2_SECRET`: The OAuth2 secret (Client Secret) from your Azure AD application. (string, default=`""`) * `SOCIAL_AUTH_AZUREAD_OAUTH2_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_AZUREAD_OAUTH2_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_OIDC_KEY`: The OIDC key (Client ID) from your IDP. (string, default=`""`) * `SOCIAL_AUTH_OIDC_SECRET`: The OIDC secret (Client Secret) from your IDP. (string, default=`""`) * `SOCIAL_AUTH_OIDC_OIDC_ENDPOINT`: The URL for your OIDC provider including the path up to /.well-known/openid-configuration (string, default=`""`) * `SOCIAL_AUTH_OIDC_VERIFY_SSL`: Verify the OIDV provider ssl certificate. (boolean, default=`True`) * `SAML_AUTO_CREATE_OBJECTS`: When enabled (the default), mapped Organizations and Teams will be created automatically on successful SAML login. (boolean, default=`True`) * `SOCIAL_AUTH_SAML_SP_ENTITY_ID`: The application-defined unique identifier used as the audience of the SAML service provider (SP) configuration. This is usually the URL for the service. (string, default=`""`) * `SOCIAL_AUTH_SAML_SP_PUBLIC_CERT`: Create a keypair to use as a service provider (SP) and include the certificate content here. (string, required) * `SOCIAL_AUTH_SAML_SP_PRIVATE_KEY`: Create a keypair to use as a service provider (SP) and include the private key content here. (string, required) * `SOCIAL_AUTH_SAML_ORG_INFO`: Provide the URL, display name, and the name of your app. Refer to the documentation for example syntax. (nested object, required) * `SOCIAL_AUTH_SAML_TECHNICAL_CONTACT`: Provide the name and email address of the technical contact for your service provider. Refer to the documentation for example syntax. (nested object, required) * `SOCIAL_AUTH_SAML_SUPPORT_CONTACT`: Provide the name and email address of the support contact for your service provider. Refer to the documentation for example syntax. (nested object, required) * `SOCIAL_AUTH_SAML_ENABLED_IDPS`: Configure the Entity ID, SSO URL and certificate for each identity provider (IdP) in use. Multiple SAML IdPs are supported. Some IdPs may provide user data using attribute names that differ from the default OIDs. Attribute names may be overridden for each IdP. Refer to the Ansible documentation for additional details and syntax. (nested object, default=`{}`) * `SOCIAL_AUTH_SAML_SECURITY_CONFIG`: A dict of key value pairs that are passed to the underlying python-saml security setting https://github.com/onelogin/python-saml#settings (nested object, default=`{&#x27;requestedAuthnContext&#x27;: False}`) * `SOCIAL_AUTH_SAML_SP_EXTRA`: A dict of key value pairs to be passed to the underlying python-saml Service Provider configuration setting. (nested object, default=`None`) * `SOCIAL_AUTH_SAML_EXTRA_DATA`: A list of tuples that maps IDP attributes to extra_attributes. Each attribute will be a list of values, even if only 1 value. (list, default=`None`) * `SOCIAL_AUTH_SAML_ORGANIZATION_MAP`: Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_SAML_TEAM_MAP`: Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation. (nested object, default=`None`) * `SOCIAL_AUTH_SAML_ORGANIZATION_ATTR`: Used to translate user organization membership. (nested object, default=`{}`) * `SOCIAL_AUTH_SAML_TEAM_ATTR`: Used to translate user team membership. (nested object, default=`{}`) * `SOCIAL_AUTH_SAML_USER_FLAGS_BY_ATTR`: Used to map super users and system auditors from SAML. (nested object, default=`{}`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Setting: Make a DELETE request to this resource to delete this setting.
     *
     * @tags api
     * @name ApiSettingsDelete
     * @summary # Retrieve a Setting:
     * @request DELETE:/api/{version}/settings/{category_slug}/
     * @secure
     */
    apiSettingsDelete: (categorySlug: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/settings/${categorySlug}/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of system job templates. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of system job templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more system job template records. ## Results Each system job template data structure includes the following fields: * `id`: Database ID for this system job template. (integer) * `type`: Data type for this system job template. (choice) * `url`: URL for this system job template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this system job template was created. (datetime) * `modified`: Timestamp when this system job template was last modified. (datetime) * `name`: Name of this system job template. (string) * `description`: Optional description of this system job template. (string) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `ok`: OK - `missing`: Missing - `none`: No External Source - `updating`: Updating * `execution_environment`: The container image to be used for execution. (id) * `job_type`:  (choice) - `""`: --------- - `cleanup_jobs`: Remove jobs older than a certain number of days - `cleanup_activitystream`: Remove activity stream entries older than a certain number of days - `cleanup_sessions`: Removes expired browser sessions from the database - `cleanup_tokens`: Removes expired OAuth 2 access tokens and refresh tokens ## Sorting To specify that system job templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiSystemJobTemplatesList
     * @summary # List System Job Templates:
     * @request GET:/api/{version}/system_job_templates/
     * @secure
     */
    apiSystemJobTemplatesList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: SystemJobTemplate[]
        },
        any
      >({
        path: `/api/${version}/system_job_templates/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single system job template record containing the following fields: * `id`: Database ID for this system job template. (integer) * `type`: Data type for this system job template. (choice) * `url`: URL for this system job template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this system job template was created. (datetime) * `modified`: Timestamp when this system job template was last modified. (datetime) * `name`: Name of this system job template. (string) * `description`: Optional description of this system job template. (string) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `ok`: OK - `missing`: Missing - `none`: No External Source - `updating`: Updating * `execution_environment`: The container image to be used for execution. (id) * `job_type`:  (choice) - `""`: --------- - `cleanup_jobs`: Remove jobs older than a certain number of days - `cleanup_activitystream`: Remove activity stream entries older than a certain number of days - `cleanup_sessions`: Removes expired browser sessions from the database - `cleanup_tokens`: Removes expired OAuth 2 access tokens and refresh tokens
     *
     * @tags api
     * @name ApiSystemJobTemplatesRead
     * @summary # Retrieve a System Job Template:
     * @request GET:/api/{version}/system_job_templates/{id}/
     * @secure
     */
    apiSystemJobTemplatesRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<SystemJobTemplate, any>({
        path: `/api/${version}/system_job_templates/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of system jobs associated with the selected system job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of system jobs found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more system job records. ## Results Each system job data structure includes the following fields: * `id`: Database ID for this system job. (integer) * `type`: Data type for this system job. (choice) * `url`: URL for this system job. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this system job was created. (datetime) * `modified`: Timestamp when this system job was last modified. (datetime) * `name`: Name of this system job. (string) * `description`: Optional description of this system job. (string) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `execution_node`: The node the job executed on. (string) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `system_job_template`:  (id) * `job_type`:  (choice) - `""`: --------- - `cleanup_jobs`: Remove jobs older than a certain number of days - `cleanup_activitystream`: Remove activity stream entries older than a certain number of days - `cleanup_sessions`: Removes expired browser sessions from the database - `cleanup_tokens`: Removes expired OAuth 2 access tokens and refresh tokens * `extra_vars`:  (string) * `result_stdout`:  (field) ## Sorting To specify that system jobs are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiSystemJobTemplatesJobsList
     * @summary # List System Jobs for a System Job Template:
     * @request GET:/api/{version}/system_job_templates/{id}/jobs/
     * @secure
     */
    apiSystemJobTemplatesJobsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: SystemJobList[]
        },
        any
      >({
        path: `/api/${version}/system_job_templates/${id}/jobs/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a POST request to this resource to launch the system job template. Variables specified inside of the parameter `extra_vars` are passed to the system job task as command line parameters. These tasks can be run manually on the host system via the `awx-manage` command. For example on `cleanup_jobs` and `cleanup_activitystream`: `{"extra_vars": {"days": 30}}` Which will act on data older than 30 days. For `cleanup_activitystream` and `cleanup_jobs` commands, providing `"dry_run": true` inside of `extra_vars` will show items that will be removed without deleting them. Each individual system job task has its own default values, which are applicable either when running it from the command line or launching its system job template with empty `extra_vars`. - Defaults for `cleanup_activitystream`: days=90 - Defaults for `cleanup_jobs`: days=90 If successful, the response status code will be 202.  If the job cannot be launched, a 405 status code will be returned.
     *
     * @tags api
     * @name ApiSystemJobTemplatesLaunchList
     * @summary Launch a Job Template:
     * @request GET:/api/{version}/system_job_templates/{id}/launch/
     * @secure
     */
    apiSystemJobTemplatesLaunchList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Empty[]
        },
        any
      >({
        path: `/api/${version}/system_job_templates/${id}/launch/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a POST request to this resource to launch the system job template. Variables specified inside of the parameter `extra_vars` are passed to the system job task as command line parameters. These tasks can be run manually on the host system via the `awx-manage` command. For example on `cleanup_jobs` and `cleanup_activitystream`: `{"extra_vars": {"days": 30}}` Which will act on data older than 30 days. For `cleanup_activitystream` and `cleanup_jobs` commands, providing `"dry_run": true` inside of `extra_vars` will show items that will be removed without deleting them. Each individual system job task has its own default values, which are applicable either when running it from the command line or launching its system job template with empty `extra_vars`. - Defaults for `cleanup_activitystream`: days=90 - Defaults for `cleanup_jobs`: days=90 If successful, the response status code will be 202.  If the job cannot be launched, a 405 status code will be returned.
     *
     * @tags api
     * @name ApiSystemJobTemplatesLaunchCreate
     * @summary Launch a Job Template:
     * @request POST:/api/{version}/system_job_templates/{id}/launch/
     * @secure
     */
    apiSystemJobTemplatesLaunchCreate: (
      id: string,
      version: string,
      data: Empty,
      params: RequestParams = {}
    ) =>
      this.request<Empty, any>({
        path: `/api/${version}/system_job_templates/${id}/launch/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected system job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiSystemJobTemplatesNotificationTemplatesErrorList
     * @summary # List Notification Templates for a System Job Template:
     * @request GET:/api/{version}/system_job_templates/{id}/notification_templates_error/
     * @secure
     */
    apiSystemJobTemplatesNotificationTemplatesErrorList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: NotificationTemplate[]
        },
        any
      >({
        path: `/api/${version}/system_job_templates/${id}/notification_templates_error/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected system job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiSystemJobTemplatesNotificationTemplatesErrorCreate
     * @summary # List Notification Templates for a System Job Template:
     * @request POST:/api/{version}/system_job_templates/{id}/notification_templates_error/
     * @secure
     */
    apiSystemJobTemplatesNotificationTemplatesErrorCreate: (
      id: string,
      version: string,
      data: NotificationTemplate,
      params: RequestParams = {}
    ) =>
      this.request<NotificationTemplate, any>({
        path: `/api/${version}/system_job_templates/${id}/notification_templates_error/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected system job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiSystemJobTemplatesNotificationTemplatesStartedList
     * @summary # List Notification Templates for a System Job Template:
     * @request GET:/api/{version}/system_job_templates/{id}/notification_templates_started/
     * @secure
     */
    apiSystemJobTemplatesNotificationTemplatesStartedList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: NotificationTemplate[]
        },
        any
      >({
        path: `/api/${version}/system_job_templates/${id}/notification_templates_started/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected system job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiSystemJobTemplatesNotificationTemplatesStartedCreate
     * @summary # List Notification Templates for a System Job Template:
     * @request POST:/api/{version}/system_job_templates/{id}/notification_templates_started/
     * @secure
     */
    apiSystemJobTemplatesNotificationTemplatesStartedCreate: (
      id: string,
      version: string,
      data: NotificationTemplate,
      params: RequestParams = {}
    ) =>
      this.request<NotificationTemplate, any>({
        path: `/api/${version}/system_job_templates/${id}/notification_templates_started/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected system job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiSystemJobTemplatesNotificationTemplatesSuccessList
     * @summary # List Notification Templates for a System Job Template:
     * @request GET:/api/{version}/system_job_templates/{id}/notification_templates_success/
     * @secure
     */
    apiSystemJobTemplatesNotificationTemplatesSuccessList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: NotificationTemplate[]
        },
        any
      >({
        path: `/api/${version}/system_job_templates/${id}/notification_templates_success/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected system job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiSystemJobTemplatesNotificationTemplatesSuccessCreate
     * @summary # List Notification Templates for a System Job Template:
     * @request POST:/api/{version}/system_job_templates/{id}/notification_templates_success/
     * @secure
     */
    apiSystemJobTemplatesNotificationTemplatesSuccessCreate: (
      id: string,
      version: string,
      data: NotificationTemplate,
      params: RequestParams = {}
    ) =>
      this.request<NotificationTemplate, any>({
        path: `/api/${version}/system_job_templates/${id}/notification_templates_success/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of schedules associated with the selected system job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of schedules found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more schedule records. ## Results Each schedule data structure includes the following fields: * `rrule`: A value representing the schedules iCal recurrence rule. (string) * `id`: Database ID for this schedule. (integer) * `type`: Data type for this schedule. (choice) * `url`: URL for this schedule. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this schedule was created. (datetime) * `modified`: Timestamp when this schedule was last modified. (datetime) * `name`: Name of this schedule. (string) * `description`: Optional description of this schedule. (string) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `unified_job_template`:  (id) * `enabled`: Enables processing of this schedule. (boolean) * `dtstart`: The first occurrence of the schedule occurs on or after this time. (datetime) * `dtend`: The last occurrence of the schedule occurs before this time, aftewards the schedule expires. (datetime) * `next_run`: The next time that the scheduled action will run. (datetime) * `timezone`: The timezone this schedule runs in. This field is extracted from the RRULE. If the timezone in the RRULE is a link to another timezone, the link will be reflected in this field. (field) * `until`: The date this schedule will end. This field is computed from the RRULE. If the schedule does not end an emptry string will be returned (field) ## Sorting To specify that schedules are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiSystemJobTemplatesSchedulesList
     * @summary # List Schedules for a System Job Template:
     * @request GET:/api/{version}/system_job_templates/{id}/schedules/
     * @secure
     */
    apiSystemJobTemplatesSchedulesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Schedule[]
        },
        any
      >({
        path: `/api/${version}/system_job_templates/${id}/schedules/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of schedules associated with the selected system job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of schedules found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more schedule records. ## Results Each schedule data structure includes the following fields: * `rrule`: A value representing the schedules iCal recurrence rule. (string) * `id`: Database ID for this schedule. (integer) * `type`: Data type for this schedule. (choice) * `url`: URL for this schedule. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this schedule was created. (datetime) * `modified`: Timestamp when this schedule was last modified. (datetime) * `name`: Name of this schedule. (string) * `description`: Optional description of this schedule. (string) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `unified_job_template`:  (id) * `enabled`: Enables processing of this schedule. (boolean) * `dtstart`: The first occurrence of the schedule occurs on or after this time. (datetime) * `dtend`: The last occurrence of the schedule occurs before this time, aftewards the schedule expires. (datetime) * `next_run`: The next time that the scheduled action will run. (datetime) * `timezone`: The timezone this schedule runs in. This field is extracted from the RRULE. If the timezone in the RRULE is a link to another timezone, the link will be reflected in this field. (field) * `until`: The date this schedule will end. This field is computed from the RRULE. If the schedule does not end an emptry string will be returned (field) ## Sorting To specify that schedules are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiSystemJobTemplatesSchedulesCreate
     * @summary # List Schedules for a System Job Template:
     * @request POST:/api/{version}/system_job_templates/{id}/schedules/
     * @secure
     */
    apiSystemJobTemplatesSchedulesCreate: (
      id: string,
      version: string,
      data: Schedule,
      params: RequestParams = {}
    ) =>
      this.request<Schedule, any>({
        path: `/api/${version}/system_job_templates/${id}/schedules/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of system jobs. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of system jobs found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more system job records. ## Results Each system job data structure includes the following fields: * `id`: Database ID for this system job. (integer) * `type`: Data type for this system job. (choice) * `url`: URL for this system job. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this system job was created. (datetime) * `modified`: Timestamp when this system job was last modified. (datetime) * `name`: Name of this system job. (string) * `description`: Optional description of this system job. (string) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `execution_node`: The node the job executed on. (string) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `system_job_template`:  (id) * `job_type`:  (choice) - `""`: --------- - `cleanup_jobs`: Remove jobs older than a certain number of days - `cleanup_activitystream`: Remove activity stream entries older than a certain number of days - `cleanup_sessions`: Removes expired browser sessions from the database - `cleanup_tokens`: Removes expired OAuth 2 access tokens and refresh tokens * `extra_vars`:  (string) * `result_stdout`:  (field) ## Sorting To specify that system jobs are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiSystemJobsList
     * @summary # List System Jobs:
     * @request GET:/api/{version}/system_jobs/
     * @secure
     */
    apiSystemJobsList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: SystemJobList[]
        },
        any
      >({
        path: `/api/${version}/system_jobs/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single system job record containing the following fields: * `id`: Database ID for this system job. (integer) * `type`: Data type for this system job. (choice) * `url`: URL for this system job. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this system job was created. (datetime) * `modified`: Timestamp when this system job was last modified. (datetime) * `name`: Name of this system job. (string) * `description`: Optional description of this system job. (string) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_args`:  (string) * `job_cwd`:  (string) * `job_env`:  (json) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `execution_node`: The node the job executed on. (string) * `result_traceback`:  (string) * `event_processing_finished`: Indicates whether all of the events generated by this unified job have been saved to the database. (boolean) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `system_job_template`:  (id) * `job_type`:  (choice) - `""`: --------- - `cleanup_jobs`: Remove jobs older than a certain number of days - `cleanup_activitystream`: Remove activity stream entries older than a certain number of days - `cleanup_sessions`: Removes expired browser sessions from the database - `cleanup_tokens`: Removes expired OAuth 2 access tokens and refresh tokens * `extra_vars`:  (string) * `result_stdout`:  (field) # Delete a System Job: Make a DELETE request to this resource to delete this system job.
     *
     * @tags api
     * @name ApiSystemJobsRead
     * @summary # Retrieve a System Job:
     * @request GET:/api/{version}/system_jobs/{id}/
     * @secure
     */
    apiSystemJobsRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<SystemJob, any>({
        path: `/api/${version}/system_jobs/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single system job record containing the following fields: * `id`: Database ID for this system job. (integer) * `type`: Data type for this system job. (choice) * `url`: URL for this system job. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this system job was created. (datetime) * `modified`: Timestamp when this system job was last modified. (datetime) * `name`: Name of this system job. (string) * `description`: Optional description of this system job. (string) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_args`:  (string) * `job_cwd`:  (string) * `job_env`:  (json) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `execution_node`: The node the job executed on. (string) * `result_traceback`:  (string) * `event_processing_finished`: Indicates whether all of the events generated by this unified job have been saved to the database. (boolean) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `system_job_template`:  (id) * `job_type`:  (choice) - `""`: --------- - `cleanup_jobs`: Remove jobs older than a certain number of days - `cleanup_activitystream`: Remove activity stream entries older than a certain number of days - `cleanup_sessions`: Removes expired browser sessions from the database - `cleanup_tokens`: Removes expired OAuth 2 access tokens and refresh tokens * `extra_vars`:  (string) * `result_stdout`:  (field) # Delete a System Job: Make a DELETE request to this resource to delete this system job.
     *
     * @tags api
     * @name ApiSystemJobsDelete
     * @summary # Retrieve a System Job:
     * @request DELETE:/api/{version}/system_jobs/{id}/
     * @secure
     */
    apiSystemJobsDelete: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/system_jobs/${id}/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single system job record containing the following fields: * `can_cancel`:  (boolean)
     *
     * @tags api
     * @name ApiSystemJobsCancelRead
     * @summary # Retrieve a System Job:
     * @request GET:/api/{version}/system_jobs/{id}/cancel/
     * @secure
     */
    apiSystemJobsCancelRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<SystemJobCancel, any>({
        path: `/api/${version}/system_jobs/${id}/cancel/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single system job record containing the following fields: * `can_cancel`:  (boolean)
     *
     * @tags api
     * @name ApiSystemJobsCancelCreate
     * @summary # Retrieve a System Job:
     * @request POST:/api/{version}/system_jobs/{id}/cancel/
     * @secure
     */
    apiSystemJobsCancelCreate: (
      id: string,
      version: string,
      data: SystemJobCancel,
      params: RequestParams = {}
    ) =>
      this.request<SystemJobCancel, any>({
        path: `/api/${version}/system_jobs/${id}/cancel/`,
        method: 'POST',
        body: data,
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of system job events associated with the selected system job. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of system job events found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more system job event records. ## Results Each system job event data structure includes the following fields: * `id`: Database ID for this system job event. (integer) * `type`: Data type for this system job event. (choice) * `url`: URL for this system job event. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this system job event was created. (datetime) * `modified`: Timestamp when this system job event was last modified. (datetime) * `event`:  (field) * `counter`:  (integer) * `event_display`:  (string) * `event_data`:  (json) * `failed`:  (field) * `changed`:  (field) * `uuid`:  (string) * `stdout`:  (string) * `start_line`:  (integer) * `end_line`:  (integer) * `verbosity`:  (integer) * `system_job`:  (id) ## Sorting To specify that system job events are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiSystemJobsEventsList
     * @summary # List System Job Events for a System Job:
     * @request GET:/api/{version}/system_jobs/{id}/events/
     * @secure
     */
    apiSystemJobsEventsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: SystemJobEvent[]
        },
        any
      >({
        path: `/api/${version}/system_jobs/${id}/events/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notifications associated with the selected system job. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notifications found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification records. ## Results Each notification data structure includes the following fields: * `id`: Database ID for this notification. (integer) * `type`: Data type for this notification. (choice) * `url`: URL for this notification. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification was created. (datetime) * `modified`: Timestamp when this notification was last modified. (datetime) * `notification_template`:  (id) * `error`:  (string) * `status`:  (choice) - `pending`: Pending - `successful`: Successful - `failed`: Failed * `notifications_sent`:  (integer) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `recipients`:  (string) * `subject`:  (string) * `body`: Notification body (json) ## Sorting To specify that notifications are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiSystemJobsNotificationsList
     * @summary # List Notifications for a System Job:
     * @request GET:/api/{version}/system_jobs/{id}/notifications/
     * @secure
     */
    apiSystemJobsNotificationsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Notification[]
        },
        any
      >({
        path: `/api/${version}/system_jobs/${id}/notifications/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of teams. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of teams found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more team records. ## Results Each team data structure includes the following fields: * `id`: Database ID for this team. (integer) * `type`: Data type for this team. (choice) * `url`: URL for this team. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this team was created. (datetime) * `modified`: Timestamp when this team was last modified. (datetime) * `name`: Name of this team. (string) * `description`: Optional description of this team. (string) * `organization`:  (id) ## Sorting To specify that teams are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiTeamsList
     * @summary # List Teams:
     * @request GET:/api/{version}/teams/
     * @secure
     */
    apiTeamsList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Team[]
        },
        any
      >({
        path: `/api/${version}/teams/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of teams. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of teams found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more team records. ## Results Each team data structure includes the following fields: * `id`: Database ID for this team. (integer) * `type`: Data type for this team. (choice) * `url`: URL for this team. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this team was created. (datetime) * `modified`: Timestamp when this team was last modified. (datetime) * `name`: Name of this team. (string) * `description`: Optional description of this team. (string) * `organization`:  (id) ## Sorting To specify that teams are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiTeamsCreate
     * @summary # List Teams:
     * @request POST:/api/{version}/teams/
     * @secure
     */
    apiTeamsCreate: (version: string, data: Team, params: RequestParams = {}) =>
      this.request<Team, any>({
        path: `/api/${version}/teams/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single team record containing the following fields: * `id`: Database ID for this team. (integer) * `type`: Data type for this team. (choice) * `url`: URL for this team. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this team was created. (datetime) * `modified`: Timestamp when this team was last modified. (datetime) * `name`: Name of this team. (string) * `description`: Optional description of this team. (string) * `organization`:  (id) # Update a Team: Make a PUT or PATCH request to this resource to update this team.  The following fields may be modified: * `name`: Name of this team. (string, required) * `description`: Optional description of this team. (string, default=`""`) * `organization`:  (id, required) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Team: Make a DELETE request to this resource to delete this team.
     *
     * @tags api
     * @name ApiTeamsRead
     * @summary # Retrieve a Team:
     * @request GET:/api/{version}/teams/{id}/
     * @secure
     */
    apiTeamsRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<Team, any>({
        path: `/api/${version}/teams/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single team record containing the following fields: * `id`: Database ID for this team. (integer) * `type`: Data type for this team. (choice) * `url`: URL for this team. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this team was created. (datetime) * `modified`: Timestamp when this team was last modified. (datetime) * `name`: Name of this team. (string) * `description`: Optional description of this team. (string) * `organization`:  (id) # Update a Team: Make a PUT or PATCH request to this resource to update this team.  The following fields may be modified: * `name`: Name of this team. (string, required) * `description`: Optional description of this team. (string, default=`""`) * `organization`:  (id, required) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Team: Make a DELETE request to this resource to delete this team.
     *
     * @tags api
     * @name ApiTeamsUpdate
     * @summary # Retrieve a Team:
     * @request PUT:/api/{version}/teams/{id}/
     * @secure
     */
    apiTeamsUpdate: (id: string, version: string, data: Team, params: RequestParams = {}) =>
      this.request<Team, any>({
        path: `/api/${version}/teams/${id}/`,
        method: 'PUT',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single team record containing the following fields: * `id`: Database ID for this team. (integer) * `type`: Data type for this team. (choice) * `url`: URL for this team. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this team was created. (datetime) * `modified`: Timestamp when this team was last modified. (datetime) * `name`: Name of this team. (string) * `description`: Optional description of this team. (string) * `organization`:  (id) # Update a Team: Make a PUT or PATCH request to this resource to update this team.  The following fields may be modified: * `name`: Name of this team. (string, required) * `description`: Optional description of this team. (string, default=`""`) * `organization`:  (id, required) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Team: Make a DELETE request to this resource to delete this team.
     *
     * @tags api
     * @name ApiTeamsPartialUpdate
     * @summary # Retrieve a Team:
     * @request PATCH:/api/{version}/teams/{id}/
     * @secure
     */
    apiTeamsPartialUpdate: (id: string, version: string, data: Team, params: RequestParams = {}) =>
      this.request<Team, any>({
        path: `/api/${version}/teams/${id}/`,
        method: 'PATCH',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single team record containing the following fields: * `id`: Database ID for this team. (integer) * `type`: Data type for this team. (choice) * `url`: URL for this team. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this team was created. (datetime) * `modified`: Timestamp when this team was last modified. (datetime) * `name`: Name of this team. (string) * `description`: Optional description of this team. (string) * `organization`:  (id) # Update a Team: Make a PUT or PATCH request to this resource to update this team.  The following fields may be modified: * `name`: Name of this team. (string, required) * `description`: Optional description of this team. (string, default=`""`) * `organization`:  (id, required) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Team: Make a DELETE request to this resource to delete this team.
     *
     * @tags api
     * @name ApiTeamsDelete
     * @summary # Retrieve a Team:
     * @request DELETE:/api/{version}/teams/{id}/
     * @secure
     */
    apiTeamsDelete: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/teams/${id}/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of users. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of users found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more user records. ## Results Each user data structure includes the following fields: * `id`: Database ID for this user. (integer) * `type`: Data type for this user. (choice) * `url`: URL for this user. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this user was created. (datetime) * `modified`: Timestamp when this user was last modified. (datetime) * `username`: Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (string) * `first_name`:  (string) * `last_name`:  (string) * `email`:  (string) * `is_superuser`: Designates that this user has all permissions without explicitly assigning them. (boolean) * `is_system_auditor`:  (boolean) * `ldap_dn`:  (string) * `last_login`:  (datetime) * `external_account`: Set if the account is managed by an external service (field) ## Sorting To specify that users are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=username Prefix the field name with a dash `-` to sort in reverse: ?order_by=-username Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=username,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiTeamsAccessListList
     * @summary # List Users:
     * @request GET:/api/{version}/teams/{id}/access_list/
     * @secure
     */
    apiTeamsAccessListList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ResourceAccessListElement[]
        },
        any
      >({
        path: `/api/${version}/teams/${id}/access_list/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of activity streams associated with the selected team. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of activity streams found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more activity stream records. ## Results Each activity stream data structure includes the following fields: * `id`: Database ID for this activity stream. (integer) * `type`: Data type for this activity stream. (choice) * `url`: URL for this activity stream. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `timestamp`:  (datetime) * `operation`: The action taken with respect to the given object(s). (choice) - `create`: Entity Created - `update`: Entity Updated - `delete`: Entity Deleted - `associate`: Entity Associated with another Entity - `disassociate`: Entity was Disassociated with another Entity * `changes`: A summary of the new and changed values when an object is created, updated, or deleted (json) * `object1`: For create, update, and delete events this is the object type that was affected. For associate and disassociate events this is the object type associated or disassociated with object2. (string) * `object2`: Unpopulated for create, update, and delete events. For associate and disassociate events this is the object type that object1 is being associated with. (string) * `object_association`: When present, shows the field name of the role or relationship that changed. (field) * `action_node`: The cluster node the activity took place on. (string) * `object_type`: When present, shows the model on which the role or relationship was defined. (field) ## Sorting To specify that activity streams are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiTeamsActivityStreamList
     * @summary # List Activity Streams for a Team:
     * @request GET:/api/{version}/teams/{id}/activity_stream/
     * @secure
     */
    apiTeamsActivityStreamList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ActivityStream[]
        },
        any
      >({
        path: `/api/${version}/teams/${id}/activity_stream/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of credentials associated with the selected team. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of credentials found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more credential records. ## Results Each credential data structure includes the following fields: * `id`: Database ID for this credential. (integer) * `type`: Data type for this credential. (choice) * `url`: URL for this credential. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential was created. (datetime) * `modified`: Timestamp when this credential was last modified. (datetime) * `name`: Name of this credential. (string) * `description`: Optional description of this credential. (string) * `credential_type`: Specify the type of credential you want to create. Refer to the documentation for details on each type. (id) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `kind`:  (field) * `cloud`:  (field) * `kubernetes`:  (field) ## Sorting To specify that credentials are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiTeamsCredentialsList
     * @summary # List Credentials for a Team:
     * @request GET:/api/{version}/teams/{id}/credentials/
     * @secure
     */
    apiTeamsCredentialsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: TeamCredentialSerializerCreate[]
        },
        any
      >({
        path: `/api/${version}/teams/${id}/credentials/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of credentials associated with the selected team. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of credentials found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more credential records. ## Results Each credential data structure includes the following fields: * `id`: Database ID for this credential. (integer) * `type`: Data type for this credential. (choice) * `url`: URL for this credential. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential was created. (datetime) * `modified`: Timestamp when this credential was last modified. (datetime) * `name`: Name of this credential. (string) * `description`: Optional description of this credential. (string) * `credential_type`: Specify the type of credential you want to create. Refer to the documentation for details on each type. (id) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `kind`:  (field) * `cloud`:  (field) * `kubernetes`:  (field) ## Sorting To specify that credentials are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiTeamsCredentialsCreate
     * @summary # List Credentials for a Team:
     * @request POST:/api/{version}/teams/{id}/credentials/
     * @secure
     */
    apiTeamsCredentialsCreate: (
      id: string,
      version: string,
      data: TeamCredentialSerializerCreate,
      params: RequestParams = {}
    ) =>
      this.request<TeamCredentialSerializerCreate, any>({
        path: `/api/${version}/teams/${id}/credentials/`,
        method: 'POST',
        body: data,
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of roles associated with the selected team. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of roles found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more role records. ## Results Each role data structure includes the following fields: * `id`: Database ID for this role. (integer) * `type`: Data type for this role. (choice) * `url`: URL for this role. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `name`: Name of this role. (field) * `description`: Optional description of this role. (field) ## Sorting To specify that roles are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiTeamsObjectRolesList
     * @summary # List Roles for a Team:
     * @request GET:/api/{version}/teams/{id}/object_roles/
     * @secure
     */
    apiTeamsObjectRolesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Role[]
        },
        any
      >({
        path: `/api/${version}/teams/${id}/object_roles/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of projects associated with the selected team. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of projects found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more project records. ## Results Each project data structure includes the following fields: * `id`: Database ID for this project. (integer) * `type`: Data type for this project. (choice) * `url`: URL for this project. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this project was created. (datetime) * `modified`: Timestamp when this project was last modified. (datetime) * `name`: Name of this project. (string) * `description`: Optional description of this project. (string) * `local_path`: Local path (relative to PROJECTS_ROOT) containing playbooks and related files for this project. (string) * `scm_type`: Specifies the source control system used to store the project. (choice) - `""`: Manual - `git`: Git - `svn`: Subversion - `insights`: Red Hat Insights - `archive`: Remote Archive * `scm_url`: The location where the project is stored. (string) * `scm_branch`: Specific branch, tag or commit to checkout. (string) * `scm_refspec`: For git projects, an additional refspec to fetch. (string) * `scm_clean`: Discard any local changes before syncing the project. (boolean) * `scm_track_submodules`: Track submodules latest commits on defined branch. (boolean) * `scm_delete_on_update`: Delete the project before syncing. (boolean) * `credential`:  (id) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `scm_revision`: The last revision fetched by a project update (string) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `ok`: OK - `missing`: Missing * `organization`: The organization used to determine access to this template. (id) * `scm_update_on_launch`: Update the project when a job is launched that uses the project. (boolean) * `scm_update_cache_timeout`: The number of seconds after the last project update ran that a new project update will be launched as a job dependency. (integer) * `allow_override`: Allow changing the SCM branch or revision in a job template that uses this project. (boolean) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `default_environment`: The default execution environment for jobs run using this project. (id) * `signature_validation_credential`: An optional credential used for validating files in the project against unexpected changes. (id) * `last_update_failed`:  (boolean) * `last_updated`:  (datetime) ## Sorting To specify that projects are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiTeamsProjectsList
     * @summary # List Projects for a Team:
     * @request GET:/api/{version}/teams/{id}/projects/
     * @secure
     */
    apiTeamsProjectsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Project[]
        },
        any
      >({
        path: `/api/${version}/teams/${id}/projects/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of roles associated with the selected team. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of roles found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more role records. ## Results Each role data structure includes the following fields: * `id`: Database ID for this role. (integer) * `type`: Data type for this role. (choice) * `url`: URL for this role. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `name`: Name of this role. (field) * `description`: Optional description of this role. (field) ## Sorting To specify that roles are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiTeamsRolesList
     * @summary # List Roles for a Team:
     * @request GET:/api/{version}/teams/{id}/roles/
     * @secure
     */
    apiTeamsRolesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: RoleSerializerWithParentAccess[]
        },
        any
      >({
        path: `/api/${version}/teams/${id}/roles/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of roles associated with the selected team. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of roles found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more role records. ## Results Each role data structure includes the following fields: * `id`: Database ID for this role. (integer) * `type`: Data type for this role. (choice) * `url`: URL for this role. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `name`: Name of this role. (field) * `description`: Optional description of this role. (field) ## Sorting To specify that roles are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiTeamsRolesCreate
     * @summary # List Roles for a Team:
     * @request POST:/api/{version}/teams/{id}/roles/
     * @secure
     */
    apiTeamsRolesCreate: (
      id: string,
      version: string,
      data: RoleSerializerWithParentAccess,
      params: RequestParams = {}
    ) =>
      this.request<RoleSerializerWithParentAccess, any>({
        path: `/api/${version}/teams/${id}/roles/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of users associated with the selected team. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of users found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more user records. ## Results Each user data structure includes the following fields: * `id`: Database ID for this user. (integer) * `type`: Data type for this user. (choice) * `url`: URL for this user. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this user was created. (datetime) * `modified`: Timestamp when this user was last modified. (datetime) * `username`: Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (string) * `first_name`:  (string) * `last_name`:  (string) * `email`:  (string) * `is_superuser`: Designates that this user has all permissions without explicitly assigning them. (boolean) * `is_system_auditor`:  (boolean) * `ldap_dn`:  (string) * `last_login`:  (datetime) * `external_account`: Set if the account is managed by an external service (field) ## Sorting To specify that users are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=username Prefix the field name with a dash `-` to sort in reverse: ?order_by=-username Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=username,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiTeamsUsersList
     * @summary # List Users for a Team:
     * @request GET:/api/{version}/teams/{id}/users/
     * @secure
     */
    apiTeamsUsersList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: User[]
        },
        any
      >({
        path: `/api/${version}/teams/${id}/users/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of users associated with the selected team. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of users found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more user records. ## Results Each user data structure includes the following fields: * `id`: Database ID for this user. (integer) * `type`: Data type for this user. (choice) * `url`: URL for this user. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this user was created. (datetime) * `modified`: Timestamp when this user was last modified. (datetime) * `username`: Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (string) * `first_name`:  (string) * `last_name`:  (string) * `email`:  (string) * `is_superuser`: Designates that this user has all permissions without explicitly assigning them. (boolean) * `is_system_auditor`:  (boolean) * `ldap_dn`:  (string) * `last_login`:  (datetime) * `external_account`: Set if the account is managed by an external service (field) ## Sorting To specify that users are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=username Prefix the field name with a dash `-` to sort in reverse: ?order_by=-username Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=username,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiTeamsUsersCreate
     * @summary # List Users for a Team:
     * @request POST:/api/{version}/teams/{id}/users/
     * @secure
     */
    apiTeamsUsersCreate: (id: string, version: string, data: User, params: RequestParams = {}) =>
      this.request<User, any>({
        path: `/api/${version}/teams/${id}/users/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of access tokens. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of access tokens found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more access token records. ## Results Each access token data structure includes the following fields: * `id`: Database ID for this access token. (integer) * `type`: Data type for this access token. (choice) * `url`: URL for this access token. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this access token was created. (datetime) * `modified`: Timestamp when this access token was last modified. (datetime) * `description`: Optional description of this access token. (string) * `user`: The user representing the token owner (id) * `token`:  (string) * `refresh_token`:  (field) * `application`:  (id) * `expires`:  (datetime) * `scope`: Allowed scopes, further restricts user&#x27;s permissions. Must be a simple space-separated string with allowed scopes [&#x27;read&#x27;, &#x27;write&#x27;]. (string) ## Sorting To specify that access tokens are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiTokensList
     * @summary # List Access Tokens:
     * @request GET:/api/{version}/tokens/
     * @secure
     */
    apiTokensList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: OAuth2Token[]
        },
        any
      >({
        path: `/api/${version}/tokens/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of access tokens. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of access tokens found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more access token records. ## Results Each access token data structure includes the following fields: * `id`: Database ID for this access token. (integer) * `type`: Data type for this access token. (choice) * `url`: URL for this access token. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this access token was created. (datetime) * `modified`: Timestamp when this access token was last modified. (datetime) * `description`: Optional description of this access token. (string) * `user`: The user representing the token owner (id) * `token`:  (string) * `refresh_token`:  (field) * `application`:  (id) * `expires`:  (datetime) * `scope`: Allowed scopes, further restricts user&#x27;s permissions. Must be a simple space-separated string with allowed scopes [&#x27;read&#x27;, &#x27;write&#x27;]. (string) ## Sorting To specify that access tokens are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiTokensCreate
     * @summary # List Access Tokens:
     * @request POST:/api/{version}/tokens/
     * @secure
     */
    apiTokensCreate: (version: string, data: OAuth2Token, params: RequestParams = {}) =>
      this.request<OAuth2Token, any>({
        path: `/api/${version}/tokens/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single access token record containing the following fields: * `id`: Database ID for this access token. (integer) * `type`: Data type for this access token. (choice) * `url`: URL for this access token. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this access token was created. (datetime) * `modified`: Timestamp when this access token was last modified. (datetime) * `description`: Optional description of this access token. (string) * `user`: The user representing the token owner (id) * `token`:  (string) * `refresh_token`:  (field) * `application`:  (id) * `expires`:  (datetime) * `scope`: Allowed scopes, further restricts user&#x27;s permissions. Must be a simple space-separated string with allowed scopes [&#x27;read&#x27;, &#x27;write&#x27;]. (string) # Update an Access Token: Make a PUT or PATCH request to this resource to update this access token.  The following fields may be modified: * `description`: Optional description of this access token. (string, default=`""`) * `scope`: Allowed scopes, further restricts user&#x27;s permissions. Must be a simple space-separated string with allowed scopes [&#x27;read&#x27;, &#x27;write&#x27;]. (string, default=`"write"`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete an Access Token: Make a DELETE request to this resource to delete this access token.
     *
     * @tags api
     * @name ApiTokensRead
     * @summary # Retrieve an Access Token:
     * @request GET:/api/{version}/tokens/{id}/
     * @secure
     */
    apiTokensRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<OAuth2TokenDetail, any>({
        path: `/api/${version}/tokens/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single access token record containing the following fields: * `id`: Database ID for this access token. (integer) * `type`: Data type for this access token. (choice) * `url`: URL for this access token. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this access token was created. (datetime) * `modified`: Timestamp when this access token was last modified. (datetime) * `description`: Optional description of this access token. (string) * `user`: The user representing the token owner (id) * `token`:  (string) * `refresh_token`:  (field) * `application`:  (id) * `expires`:  (datetime) * `scope`: Allowed scopes, further restricts user&#x27;s permissions. Must be a simple space-separated string with allowed scopes [&#x27;read&#x27;, &#x27;write&#x27;]. (string) # Update an Access Token: Make a PUT or PATCH request to this resource to update this access token.  The following fields may be modified: * `description`: Optional description of this access token. (string, default=`""`) * `scope`: Allowed scopes, further restricts user&#x27;s permissions. Must be a simple space-separated string with allowed scopes [&#x27;read&#x27;, &#x27;write&#x27;]. (string, default=`"write"`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete an Access Token: Make a DELETE request to this resource to delete this access token.
     *
     * @tags api
     * @name ApiTokensUpdate
     * @summary # Retrieve an Access Token:
     * @request PUT:/api/{version}/tokens/{id}/
     * @secure
     */
    apiTokensUpdate: (
      id: string,
      version: string,
      data: OAuth2TokenDetail,
      params: RequestParams = {}
    ) =>
      this.request<OAuth2TokenDetail, any>({
        path: `/api/${version}/tokens/${id}/`,
        method: 'PUT',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single access token record containing the following fields: * `id`: Database ID for this access token. (integer) * `type`: Data type for this access token. (choice) * `url`: URL for this access token. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this access token was created. (datetime) * `modified`: Timestamp when this access token was last modified. (datetime) * `description`: Optional description of this access token. (string) * `user`: The user representing the token owner (id) * `token`:  (string) * `refresh_token`:  (field) * `application`:  (id) * `expires`:  (datetime) * `scope`: Allowed scopes, further restricts user&#x27;s permissions. Must be a simple space-separated string with allowed scopes [&#x27;read&#x27;, &#x27;write&#x27;]. (string) # Update an Access Token: Make a PUT or PATCH request to this resource to update this access token.  The following fields may be modified: * `description`: Optional description of this access token. (string, default=`""`) * `scope`: Allowed scopes, further restricts user&#x27;s permissions. Must be a simple space-separated string with allowed scopes [&#x27;read&#x27;, &#x27;write&#x27;]. (string, default=`"write"`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete an Access Token: Make a DELETE request to this resource to delete this access token.
     *
     * @tags api
     * @name ApiTokensPartialUpdate
     * @summary # Retrieve an Access Token:
     * @request PATCH:/api/{version}/tokens/{id}/
     * @secure
     */
    apiTokensPartialUpdate: (
      id: string,
      version: string,
      data: OAuth2TokenDetail,
      params: RequestParams = {}
    ) =>
      this.request<OAuth2TokenDetail, any>({
        path: `/api/${version}/tokens/${id}/`,
        method: 'PATCH',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single access token record containing the following fields: * `id`: Database ID for this access token. (integer) * `type`: Data type for this access token. (choice) * `url`: URL for this access token. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this access token was created. (datetime) * `modified`: Timestamp when this access token was last modified. (datetime) * `description`: Optional description of this access token. (string) * `user`: The user representing the token owner (id) * `token`:  (string) * `refresh_token`:  (field) * `application`:  (id) * `expires`:  (datetime) * `scope`: Allowed scopes, further restricts user&#x27;s permissions. Must be a simple space-separated string with allowed scopes [&#x27;read&#x27;, &#x27;write&#x27;]. (string) # Update an Access Token: Make a PUT or PATCH request to this resource to update this access token.  The following fields may be modified: * `description`: Optional description of this access token. (string, default=`""`) * `scope`: Allowed scopes, further restricts user&#x27;s permissions. Must be a simple space-separated string with allowed scopes [&#x27;read&#x27;, &#x27;write&#x27;]. (string, default=`"write"`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete an Access Token: Make a DELETE request to this resource to delete this access token.
     *
     * @tags api
     * @name ApiTokensDelete
     * @summary # Retrieve an Access Token:
     * @request DELETE:/api/{version}/tokens/{id}/
     * @secure
     */
    apiTokensDelete: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/tokens/${id}/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of activity streams associated with the selected access token. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of activity streams found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more activity stream records. ## Results Each activity stream data structure includes the following fields: * `id`: Database ID for this activity stream. (integer) * `type`: Data type for this activity stream. (choice) * `url`: URL for this activity stream. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `timestamp`:  (datetime) * `operation`: The action taken with respect to the given object(s). (choice) - `create`: Entity Created - `update`: Entity Updated - `delete`: Entity Deleted - `associate`: Entity Associated with another Entity - `disassociate`: Entity was Disassociated with another Entity * `changes`: A summary of the new and changed values when an object is created, updated, or deleted (json) * `object1`: For create, update, and delete events this is the object type that was affected. For associate and disassociate events this is the object type associated or disassociated with object2. (string) * `object2`: Unpopulated for create, update, and delete events. For associate and disassociate events this is the object type that object1 is being associated with. (string) * `object_association`: When present, shows the field name of the role or relationship that changed. (field) * `action_node`: The cluster node the activity took place on. (string) * `object_type`: When present, shows the model on which the role or relationship was defined. (field) ## Sorting To specify that activity streams are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiTokensActivityStreamList
     * @summary # List Activity Streams for an Access Token:
     * @request GET:/api/{version}/tokens/{id}/activity_stream/
     * @secure
     */
    apiTokensActivityStreamList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ActivityStream[]
        },
        any
      >({
        path: `/api/${version}/tokens/${id}/activity_stream/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of unified job templates. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of unified job templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more unified job template records. ## Results Each unified job template data structure includes the following fields: * `id`: Database ID for this unified job template. (integer) * `type`: Data type for this unified job template. (choice) * `url`: URL for this unified job template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this unified job template was created. (datetime) * `modified`: Timestamp when this unified job template was last modified. (datetime) * `name`: Name of this unified job template. (string) * `description`: Optional description of this unified job template. (string) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `ok`: OK - `missing`: Missing - `none`: No External Source - `updating`: Updating * `execution_environment`: The container image to be used for execution. (id) ## Sorting To specify that unified job templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiUnifiedJobTemplatesList
     * @summary # List Unified Job Templates:
     * @request GET:/api/{version}/unified_job_templates/
     * @secure
     */
    apiUnifiedJobTemplatesList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: UnifiedJobTemplate[]
        },
        any
      >({
        path: `/api/${version}/unified_job_templates/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of unified jobs. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of unified jobs found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more unified job records. ## Results Each unified job data structure includes the following fields: * `id`: Database ID for this unified job. (integer) * `type`: Data type for this unified job. (choice) * `url`: URL for this unified job. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this unified job was created. (datetime) * `modified`: Timestamp when this unified job was last modified. (datetime) * `name`: Name of this unified job. (string) * `description`: Optional description of this unified job. (string) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `execution_node`: The node the job executed on. (string) * `controller_node`: The instance that managed the execution environment. (string) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) ## Sorting To specify that unified jobs are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiUnifiedJobsList
     * @summary # List Unified Jobs:
     * @request GET:/api/{version}/unified_jobs/
     * @secure
     */
    apiUnifiedJobsList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: UnifiedJobList[]
        },
        any
      >({
        path: `/api/${version}/unified_jobs/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of users. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of users found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more user records. ## Results Each user data structure includes the following fields: * `id`: Database ID for this user. (integer) * `type`: Data type for this user. (choice) * `url`: URL for this user. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this user was created. (datetime) * `modified`: Timestamp when this user was last modified. (datetime) * `username`: Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (string) * `first_name`:  (string) * `last_name`:  (string) * `email`:  (string) * `is_superuser`: Designates that this user has all permissions without explicitly assigning them. (boolean) * `is_system_auditor`:  (boolean) * `ldap_dn`:  (string) * `last_login`:  (datetime) * `external_account`: Set if the account is managed by an external service (field) ## Sorting To specify that users are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=username Prefix the field name with a dash `-` to sort in reverse: ?order_by=-username Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=username,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiUsersList
     * @summary # List Users:
     * @request GET:/api/{version}/users/
     * @secure
     */
    apiUsersList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: User[]
        },
        any
      >({
        path: `/api/${version}/users/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of users. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of users found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more user records. ## Results Each user data structure includes the following fields: * `id`: Database ID for this user. (integer) * `type`: Data type for this user. (choice) * `url`: URL for this user. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this user was created. (datetime) * `modified`: Timestamp when this user was last modified. (datetime) * `username`: Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (string) * `first_name`:  (string) * `last_name`:  (string) * `email`:  (string) * `is_superuser`: Designates that this user has all permissions without explicitly assigning them. (boolean) * `is_system_auditor`:  (boolean) * `ldap_dn`:  (string) * `last_login`:  (datetime) * `external_account`: Set if the account is managed by an external service (field) ## Sorting To specify that users are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=username Prefix the field name with a dash `-` to sort in reverse: ?order_by=-username Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=username,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiUsersCreate
     * @summary # List Users:
     * @request POST:/api/{version}/users/
     * @secure
     */
    apiUsersCreate: (version: string, data: User, params: RequestParams = {}) =>
      this.request<User, any>({
        path: `/api/${version}/users/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single user record containing the following fields: * `id`: Database ID for this user. (integer) * `type`: Data type for this user. (choice) * `url`: URL for this user. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this user was created. (datetime) * `modified`: Timestamp when this user was last modified. (datetime) * `username`: Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (string) * `first_name`:  (string) * `last_name`:  (string) * `email`:  (string) * `is_superuser`: Designates that this user has all permissions without explicitly assigning them. (boolean) * `is_system_auditor`:  (boolean) * `ldap_dn`:  (string) * `last_login`:  (datetime) * `external_account`: Set if the account is managed by an external service (field) # Update a User: Make a PUT or PATCH request to this resource to update this user.  The following fields may be modified: * `username`: Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (string, required) * `first_name`:  (string, default=`""`) * `last_name`:  (string, default=`""`) * `email`:  (string, default=`""`) * `is_superuser`: Designates that this user has all permissions without explicitly assigning them. (boolean, default=`False`) * `is_system_auditor`:  (boolean, default=`False`) * `password`: Write-only field used to change the password. (string, default=`""`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a User: Make a DELETE request to this resource to delete this user.
     *
     * @tags api
     * @name ApiUsersRead
     * @summary # Retrieve a User:
     * @request GET:/api/{version}/users/{id}/
     * @secure
     */
    apiUsersRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<User, any>({
        path: `/api/${version}/users/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single user record containing the following fields: * `id`: Database ID for this user. (integer) * `type`: Data type for this user. (choice) * `url`: URL for this user. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this user was created. (datetime) * `modified`: Timestamp when this user was last modified. (datetime) * `username`: Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (string) * `first_name`:  (string) * `last_name`:  (string) * `email`:  (string) * `is_superuser`: Designates that this user has all permissions without explicitly assigning them. (boolean) * `is_system_auditor`:  (boolean) * `ldap_dn`:  (string) * `last_login`:  (datetime) * `external_account`: Set if the account is managed by an external service (field) # Update a User: Make a PUT or PATCH request to this resource to update this user.  The following fields may be modified: * `username`: Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (string, required) * `first_name`:  (string, default=`""`) * `last_name`:  (string, default=`""`) * `email`:  (string, default=`""`) * `is_superuser`: Designates that this user has all permissions without explicitly assigning them. (boolean, default=`False`) * `is_system_auditor`:  (boolean, default=`False`) * `password`: Write-only field used to change the password. (string, default=`""`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a User: Make a DELETE request to this resource to delete this user.
     *
     * @tags api
     * @name ApiUsersUpdate
     * @summary # Retrieve a User:
     * @request PUT:/api/{version}/users/{id}/
     * @secure
     */
    apiUsersUpdate: (id: string, version: string, data: User, params: RequestParams = {}) =>
      this.request<User, any>({
        path: `/api/${version}/users/${id}/`,
        method: 'PUT',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single user record containing the following fields: * `id`: Database ID for this user. (integer) * `type`: Data type for this user. (choice) * `url`: URL for this user. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this user was created. (datetime) * `modified`: Timestamp when this user was last modified. (datetime) * `username`: Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (string) * `first_name`:  (string) * `last_name`:  (string) * `email`:  (string) * `is_superuser`: Designates that this user has all permissions without explicitly assigning them. (boolean) * `is_system_auditor`:  (boolean) * `ldap_dn`:  (string) * `last_login`:  (datetime) * `external_account`: Set if the account is managed by an external service (field) # Update a User: Make a PUT or PATCH request to this resource to update this user.  The following fields may be modified: * `username`: Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (string, required) * `first_name`:  (string, default=`""`) * `last_name`:  (string, default=`""`) * `email`:  (string, default=`""`) * `is_superuser`: Designates that this user has all permissions without explicitly assigning them. (boolean, default=`False`) * `is_system_auditor`:  (boolean, default=`False`) * `password`: Write-only field used to change the password. (string, default=`""`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a User: Make a DELETE request to this resource to delete this user.
     *
     * @tags api
     * @name ApiUsersPartialUpdate
     * @summary # Retrieve a User:
     * @request PATCH:/api/{version}/users/{id}/
     * @secure
     */
    apiUsersPartialUpdate: (id: string, version: string, data: User, params: RequestParams = {}) =>
      this.request<User, any>({
        path: `/api/${version}/users/${id}/`,
        method: 'PATCH',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single user record containing the following fields: * `id`: Database ID for this user. (integer) * `type`: Data type for this user. (choice) * `url`: URL for this user. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this user was created. (datetime) * `modified`: Timestamp when this user was last modified. (datetime) * `username`: Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (string) * `first_name`:  (string) * `last_name`:  (string) * `email`:  (string) * `is_superuser`: Designates that this user has all permissions without explicitly assigning them. (boolean) * `is_system_auditor`:  (boolean) * `ldap_dn`:  (string) * `last_login`:  (datetime) * `external_account`: Set if the account is managed by an external service (field) # Update a User: Make a PUT or PATCH request to this resource to update this user.  The following fields may be modified: * `username`: Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (string, required) * `first_name`:  (string, default=`""`) * `last_name`:  (string, default=`""`) * `email`:  (string, default=`""`) * `is_superuser`: Designates that this user has all permissions without explicitly assigning them. (boolean, default=`False`) * `is_system_auditor`:  (boolean, default=`False`) * `password`: Write-only field used to change the password. (string, default=`""`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a User: Make a DELETE request to this resource to delete this user.
     *
     * @tags api
     * @name ApiUsersDelete
     * @summary # Retrieve a User:
     * @request DELETE:/api/{version}/users/{id}/
     * @secure
     */
    apiUsersDelete: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/users/${id}/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of users. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of users found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more user records. ## Results Each user data structure includes the following fields: * `id`: Database ID for this user. (integer) * `type`: Data type for this user. (choice) * `url`: URL for this user. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this user was created. (datetime) * `modified`: Timestamp when this user was last modified. (datetime) * `username`: Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (string) * `first_name`:  (string) * `last_name`:  (string) * `email`:  (string) * `is_superuser`: Designates that this user has all permissions without explicitly assigning them. (boolean) * `is_system_auditor`:  (boolean) * `ldap_dn`:  (string) * `last_login`:  (datetime) * `external_account`: Set if the account is managed by an external service (field) ## Sorting To specify that users are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=username Prefix the field name with a dash `-` to sort in reverse: ?order_by=-username Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=username,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiUsersAccessListList
     * @summary # List Users:
     * @request GET:/api/{version}/users/{id}/access_list/
     * @secure
     */
    apiUsersAccessListList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ResourceAccessListElement[]
        },
        any
      >({
        path: `/api/${version}/users/${id}/access_list/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of activity streams associated with the selected user. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of activity streams found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more activity stream records. ## Results Each activity stream data structure includes the following fields: * `id`: Database ID for this activity stream. (integer) * `type`: Data type for this activity stream. (choice) * `url`: URL for this activity stream. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `timestamp`:  (datetime) * `operation`: The action taken with respect to the given object(s). (choice) - `create`: Entity Created - `update`: Entity Updated - `delete`: Entity Deleted - `associate`: Entity Associated with another Entity - `disassociate`: Entity was Disassociated with another Entity * `changes`: A summary of the new and changed values when an object is created, updated, or deleted (json) * `object1`: For create, update, and delete events this is the object type that was affected. For associate and disassociate events this is the object type associated or disassociated with object2. (string) * `object2`: Unpopulated for create, update, and delete events. For associate and disassociate events this is the object type that object1 is being associated with. (string) * `object_association`: When present, shows the field name of the role or relationship that changed. (field) * `action_node`: The cluster node the activity took place on. (string) * `object_type`: When present, shows the model on which the role or relationship was defined. (field) ## Sorting To specify that activity streams are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiUsersActivityStreamList
     * @summary # List Activity Streams for a User:
     * @request GET:/api/{version}/users/{id}/activity_stream/
     * @secure
     */
    apiUsersActivityStreamList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ActivityStream[]
        },
        any
      >({
        path: `/api/${version}/users/${id}/activity_stream/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiUsersAdminOfOrganizationsList
     * @request GET:/api/{version}/users/{id}/admin_of_organizations/
     * @secure
     */
    apiUsersAdminOfOrganizationsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<void, any>({
        path: `/api/${version}/users/${id}/admin_of_organizations/`,
        method: 'GET',
        query: query,
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of applications. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of applications found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more application records. ## Results Each application data structure includes the following fields: * `id`: Database ID for this application. (integer) * `type`: Data type for this application. (choice) * `url`: URL for this application. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this application was created. (datetime) * `modified`: Timestamp when this application was last modified. (datetime) * `name`: Name of this application. (string) * `description`: Optional description of this application. (string) * `client_id`:  (string) * `client_secret`: Used for more stringent verification of access to an application when creating a token. (string) * `client_type`: Set to Public or Confidential depending on how secure the client device is. (choice) - `confidential`: Confidential - `public`: Public * `redirect_uris`: Allowed URIs list, space separated (string) * `authorization_grant_type`: The Grant type the user must use for acquire tokens for this application. (choice) - `authorization-code`: Authorization code - `password`: Resource owner password-based * `skip_authorization`: Set True to skip authorization step for completely trusted applications. (boolean) * `organization`: Organization containing this application. (id) ## Sorting To specify that applications are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiUsersApplicationsList
     * @summary # List Applications:
     * @request GET:/api/{version}/users/{id}/applications/
     * @secure
     */
    apiUsersApplicationsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: OAuth2Application[]
        },
        any
      >({
        path: `/api/${version}/users/${id}/applications/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of applications. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of applications found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more application records. ## Results Each application data structure includes the following fields: * `id`: Database ID for this application. (integer) * `type`: Data type for this application. (choice) * `url`: URL for this application. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this application was created. (datetime) * `modified`: Timestamp when this application was last modified. (datetime) * `name`: Name of this application. (string) * `description`: Optional description of this application. (string) * `client_id`:  (string) * `client_secret`: Used for more stringent verification of access to an application when creating a token. (string) * `client_type`: Set to Public or Confidential depending on how secure the client device is. (choice) - `confidential`: Confidential - `public`: Public * `redirect_uris`: Allowed URIs list, space separated (string) * `authorization_grant_type`: The Grant type the user must use for acquire tokens for this application. (choice) - `authorization-code`: Authorization code - `password`: Resource owner password-based * `skip_authorization`: Set True to skip authorization step for completely trusted applications. (boolean) * `organization`: Organization containing this application. (id) ## Sorting To specify that applications are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiUsersApplicationsCreate
     * @summary # List Applications:
     * @request POST:/api/{version}/users/{id}/applications/
     * @secure
     */
    apiUsersApplicationsCreate: (
      id: string,
      version: string,
      data: OAuth2Application,
      params: RequestParams = {}
    ) =>
      this.request<OAuth2Application, any>({
        path: `/api/${version}/users/${id}/applications/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of access tokens associated with the selected user. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of access tokens found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more access token records. ## Results Each access token data structure includes the following fields: * `id`: Database ID for this access token. (integer) * `type`: Data type for this access token. (choice) * `url`: URL for this access token. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this access token was created. (datetime) * `modified`: Timestamp when this access token was last modified. (datetime) * `description`: Optional description of this access token. (string) * `user`: The user representing the token owner (id) * `token`:  (string) * `refresh_token`:  (field) * `application`:  (id) * `expires`:  (datetime) * `scope`: Allowed scopes, further restricts user&#x27;s permissions. Must be a simple space-separated string with allowed scopes [&#x27;read&#x27;, &#x27;write&#x27;]. (string) ## Sorting To specify that access tokens are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiUsersAuthorizedTokensList
     * @summary # List Access Tokens for a User:
     * @request GET:/api/{version}/users/{id}/authorized_tokens/
     * @secure
     */
    apiUsersAuthorizedTokensList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: UserAuthorizedToken[]
        },
        any
      >({
        path: `/api/${version}/users/${id}/authorized_tokens/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of access tokens associated with the selected user. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of access tokens found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more access token records. ## Results Each access token data structure includes the following fields: * `id`: Database ID for this access token. (integer) * `type`: Data type for this access token. (choice) * `url`: URL for this access token. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this access token was created. (datetime) * `modified`: Timestamp when this access token was last modified. (datetime) * `description`: Optional description of this access token. (string) * `user`: The user representing the token owner (id) * `token`:  (string) * `refresh_token`:  (field) * `application`:  (id) * `expires`:  (datetime) * `scope`: Allowed scopes, further restricts user&#x27;s permissions. Must be a simple space-separated string with allowed scopes [&#x27;read&#x27;, &#x27;write&#x27;]. (string) ## Sorting To specify that access tokens are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiUsersAuthorizedTokensCreate
     * @summary # List Access Tokens for a User:
     * @request POST:/api/{version}/users/{id}/authorized_tokens/
     * @secure
     */
    apiUsersAuthorizedTokensCreate: (
      id: string,
      version: string,
      data: UserAuthorizedToken,
      params: RequestParams = {}
    ) =>
      this.request<UserAuthorizedToken, any>({
        path: `/api/${version}/users/${id}/authorized_tokens/`,
        method: 'POST',
        body: data,
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of credentials associated with the selected user. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of credentials found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more credential records. ## Results Each credential data structure includes the following fields: * `id`: Database ID for this credential. (integer) * `type`: Data type for this credential. (choice) * `url`: URL for this credential. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential was created. (datetime) * `modified`: Timestamp when this credential was last modified. (datetime) * `name`: Name of this credential. (string) * `description`: Optional description of this credential. (string) * `credential_type`: Specify the type of credential you want to create. Refer to the documentation for details on each type. (id) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `kind`:  (field) * `cloud`:  (field) * `kubernetes`:  (field) ## Sorting To specify that credentials are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiUsersCredentialsList
     * @summary # List Credentials for a User:
     * @request GET:/api/{version}/users/{id}/credentials/
     * @secure
     */
    apiUsersCredentialsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: UserCredentialSerializerCreate[]
        },
        any
      >({
        path: `/api/${version}/users/${id}/credentials/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of credentials associated with the selected user. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of credentials found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more credential records. ## Results Each credential data structure includes the following fields: * `id`: Database ID for this credential. (integer) * `type`: Data type for this credential. (choice) * `url`: URL for this credential. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential was created. (datetime) * `modified`: Timestamp when this credential was last modified. (datetime) * `name`: Name of this credential. (string) * `description`: Optional description of this credential. (string) * `credential_type`: Specify the type of credential you want to create. Refer to the documentation for details on each type. (id) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `kind`:  (field) * `cloud`:  (field) * `kubernetes`:  (field) ## Sorting To specify that credentials are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiUsersCredentialsCreate
     * @summary # List Credentials for a User:
     * @request POST:/api/{version}/users/{id}/credentials/
     * @secure
     */
    apiUsersCredentialsCreate: (
      id: string,
      version: string,
      data: UserCredentialSerializerCreate,
      params: RequestParams = {}
    ) =>
      this.request<UserCredentialSerializerCreate, any>({
        path: `/api/${version}/users/${id}/credentials/`,
        method: 'POST',
        body: data,
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiUsersOrganizationsList
     * @request GET:/api/{version}/users/{id}/organizations/
     * @secure
     */
    apiUsersOrganizationsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<void, any>({
        path: `/api/${version}/users/${id}/organizations/`,
        method: 'GET',
        query: query,
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of access tokens associated with the selected user. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of access tokens found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more access token records. ## Results Each access token data structure includes the following fields: * `id`: Database ID for this access token. (integer) * `type`: Data type for this access token. (choice) * `url`: URL for this access token. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this access token was created. (datetime) * `modified`: Timestamp when this access token was last modified. (datetime) * `description`: Optional description of this access token. (string) * `user`: The user representing the token owner (id) * `token`:  (string) * `refresh_token`:  (field) * `application`:  (id) * `expires`:  (datetime) * `scope`: Allowed scopes, further restricts user&#x27;s permissions. Must be a simple space-separated string with allowed scopes [&#x27;read&#x27;, &#x27;write&#x27;]. (string) ## Sorting To specify that access tokens are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiUsersPersonalTokensList
     * @summary # List Access Tokens for a User:
     * @request GET:/api/{version}/users/{id}/personal_tokens/
     * @secure
     */
    apiUsersPersonalTokensList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: UserPersonalToken[]
        },
        any
      >({
        path: `/api/${version}/users/${id}/personal_tokens/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of access tokens associated with the selected user. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of access tokens found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more access token records. ## Results Each access token data structure includes the following fields: * `id`: Database ID for this access token. (integer) * `type`: Data type for this access token. (choice) * `url`: URL for this access token. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this access token was created. (datetime) * `modified`: Timestamp when this access token was last modified. (datetime) * `description`: Optional description of this access token. (string) * `user`: The user representing the token owner (id) * `token`:  (string) * `refresh_token`:  (field) * `application`:  (id) * `expires`:  (datetime) * `scope`: Allowed scopes, further restricts user&#x27;s permissions. Must be a simple space-separated string with allowed scopes [&#x27;read&#x27;, &#x27;write&#x27;]. (string) ## Sorting To specify that access tokens are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiUsersPersonalTokensCreate
     * @summary # List Access Tokens for a User:
     * @request POST:/api/{version}/users/{id}/personal_tokens/
     * @secure
     */
    apiUsersPersonalTokensCreate: (
      id: string,
      version: string,
      data: UserPersonalToken,
      params: RequestParams = {}
    ) =>
      this.request<UserPersonalToken, any>({
        path: `/api/${version}/users/${id}/personal_tokens/`,
        method: 'POST',
        body: data,
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of projects associated with the selected user. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of projects found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more project records. ## Results Each project data structure includes the following fields: * `id`: Database ID for this project. (integer) * `type`: Data type for this project. (choice) * `url`: URL for this project. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this project was created. (datetime) * `modified`: Timestamp when this project was last modified. (datetime) * `name`: Name of this project. (string) * `description`: Optional description of this project. (string) * `local_path`: Local path (relative to PROJECTS_ROOT) containing playbooks and related files for this project. (string) * `scm_type`: Specifies the source control system used to store the project. (choice) - `""`: Manual - `git`: Git - `svn`: Subversion - `insights`: Red Hat Insights - `archive`: Remote Archive * `scm_url`: The location where the project is stored. (string) * `scm_branch`: Specific branch, tag or commit to checkout. (string) * `scm_refspec`: For git projects, an additional refspec to fetch. (string) * `scm_clean`: Discard any local changes before syncing the project. (boolean) * `scm_track_submodules`: Track submodules latest commits on defined branch. (boolean) * `scm_delete_on_update`: Delete the project before syncing. (boolean) * `credential`:  (id) * `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer) * `scm_revision`: The last revision fetched by a project update (string) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `ok`: OK - `missing`: Missing * `organization`: The organization used to determine access to this template. (id) * `scm_update_on_launch`: Update the project when a job is launched that uses the project. (boolean) * `scm_update_cache_timeout`: The number of seconds after the last project update ran that a new project update will be launched as a job dependency. (integer) * `allow_override`: Allow changing the SCM branch or revision in a job template that uses this project. (boolean) * `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string) * `default_environment`: The default execution environment for jobs run using this project. (id) * `signature_validation_credential`: An optional credential used for validating files in the project against unexpected changes. (id) * `last_update_failed`:  (boolean) * `last_updated`:  (datetime) ## Sorting To specify that projects are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiUsersProjectsList
     * @summary # List Projects for a User:
     * @request GET:/api/{version}/users/{id}/projects/
     * @secure
     */
    apiUsersProjectsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Project[]
        },
        any
      >({
        path: `/api/${version}/users/${id}/projects/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of roles associated with the selected user. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of roles found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more role records. ## Results Each role data structure includes the following fields: * `id`: Database ID for this role. (integer) * `type`: Data type for this role. (choice) * `url`: URL for this role. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `name`: Name of this role. (field) * `description`: Optional description of this role. (field) ## Sorting To specify that roles are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiUsersRolesList
     * @summary # List Roles for a User:
     * @request GET:/api/{version}/users/{id}/roles/
     * @secure
     */
    apiUsersRolesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: RoleSerializerWithParentAccess[]
        },
        any
      >({
        path: `/api/${version}/users/${id}/roles/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of roles associated with the selected user. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of roles found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more role records. ## Results Each role data structure includes the following fields: * `id`: Database ID for this role. (integer) * `type`: Data type for this role. (choice) * `url`: URL for this role. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `name`: Name of this role. (field) * `description`: Optional description of this role. (field) ## Sorting To specify that roles are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiUsersRolesCreate
     * @summary # List Roles for a User:
     * @request POST:/api/{version}/users/{id}/roles/
     * @secure
     */
    apiUsersRolesCreate: (
      id: string,
      version: string,
      data: RoleSerializerWithParentAccess,
      params: RequestParams = {}
    ) =>
      this.request<RoleSerializerWithParentAccess, any>({
        path: `/api/${version}/users/${id}/roles/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of teams associated with the selected user. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of teams found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more team records. ## Results Each team data structure includes the following fields: * `id`: Database ID for this team. (integer) * `type`: Data type for this team. (choice) * `url`: URL for this team. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this team was created. (datetime) * `modified`: Timestamp when this team was last modified. (datetime) * `name`: Name of this team. (string) * `description`: Optional description of this team. (string) * `organization`:  (id) ## Sorting To specify that teams are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiUsersTeamsList
     * @summary # List Teams for a User:
     * @request GET:/api/{version}/users/{id}/teams/
     * @secure
     */
    apiUsersTeamsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Team[]
        },
        any
      >({
        path: `/api/${version}/users/${id}/teams/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of access tokens associated with the selected user. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of access tokens found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more access token records. ## Results Each access token data structure includes the following fields: * `id`: Database ID for this access token. (integer) * `type`: Data type for this access token. (choice) * `url`: URL for this access token. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this access token was created. (datetime) * `modified`: Timestamp when this access token was last modified. (datetime) * `description`: Optional description of this access token. (string) * `user`: The user representing the token owner (id) * `token`:  (string) * `refresh_token`:  (field) * `application`:  (id) * `expires`:  (datetime) * `scope`: Allowed scopes, further restricts user&#x27;s permissions. Must be a simple space-separated string with allowed scopes [&#x27;read&#x27;, &#x27;write&#x27;]. (string) ## Sorting To specify that access tokens are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiUsersTokensList
     * @summary # List Access Tokens for a User:
     * @request GET:/api/{version}/users/{id}/tokens/
     * @secure
     */
    apiUsersTokensList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: OAuth2Token[]
        },
        any
      >({
        path: `/api/${version}/users/${id}/tokens/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of access tokens associated with the selected user. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of access tokens found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more access token records. ## Results Each access token data structure includes the following fields: * `id`: Database ID for this access token. (integer) * `type`: Data type for this access token. (choice) * `url`: URL for this access token. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this access token was created. (datetime) * `modified`: Timestamp when this access token was last modified. (datetime) * `description`: Optional description of this access token. (string) * `user`: The user representing the token owner (id) * `token`:  (string) * `refresh_token`:  (field) * `application`:  (id) * `expires`:  (datetime) * `scope`: Allowed scopes, further restricts user&#x27;s permissions. Must be a simple space-separated string with allowed scopes [&#x27;read&#x27;, &#x27;write&#x27;]. (string) ## Sorting To specify that access tokens are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiUsersTokensCreate
     * @summary # List Access Tokens for a User:
     * @request POST:/api/{version}/users/{id}/tokens/
     * @secure
     */
    apiUsersTokensCreate: (
      id: string,
      version: string,
      data: OAuth2Token,
      params: RequestParams = {}
    ) =>
      this.request<OAuth2Token, any>({
        path: `/api/${version}/users/${id}/tokens/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single workflow approval template record containing the following fields: * `id`: Database ID for this workflow approval template. (integer) * `type`: Data type for this workflow approval template. (choice) * `url`: URL for this workflow approval template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow approval template was created. (datetime) * `modified`: Timestamp when this workflow approval template was last modified. (datetime) * `name`: Name of this workflow approval template. (string) * `description`: Optional description of this workflow approval template. (string) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `ok`: OK - `missing`: Missing - `none`: No External Source - `updating`: Updating * `execution_environment`: The container image to be used for execution. (id) * `timeout`: The amount of time (in seconds) before the approval node expires and fails. (integer) # Update a Workflow Approval Template: Make a PUT or PATCH request to this resource to update this workflow approval template.  The following fields may be modified: * `name`: Name of this workflow approval template. (string, required) * `description`: Optional description of this workflow approval template. (string, default=`""`) * `execution_environment`: The container image to be used for execution. (id, default=``) * `timeout`: The amount of time (in seconds) before the approval node expires and fails. (integer, default=`0`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Workflow Approval Template: Make a DELETE request to this resource to delete this workflow approval template.
     *
     * @tags api
     * @name ApiWorkflowApprovalTemplatesRead
     * @summary # Retrieve a Workflow Approval Template:
     * @request GET:/api/{version}/workflow_approval_templates/{id}/
     * @secure
     */
    apiWorkflowApprovalTemplatesRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<WorkflowApprovalTemplate, any>({
        path: `/api/${version}/workflow_approval_templates/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single workflow approval template record containing the following fields: * `id`: Database ID for this workflow approval template. (integer) * `type`: Data type for this workflow approval template. (choice) * `url`: URL for this workflow approval template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow approval template was created. (datetime) * `modified`: Timestamp when this workflow approval template was last modified. (datetime) * `name`: Name of this workflow approval template. (string) * `description`: Optional description of this workflow approval template. (string) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `ok`: OK - `missing`: Missing - `none`: No External Source - `updating`: Updating * `execution_environment`: The container image to be used for execution. (id) * `timeout`: The amount of time (in seconds) before the approval node expires and fails. (integer) # Update a Workflow Approval Template: Make a PUT or PATCH request to this resource to update this workflow approval template.  The following fields may be modified: * `name`: Name of this workflow approval template. (string, required) * `description`: Optional description of this workflow approval template. (string, default=`""`) * `execution_environment`: The container image to be used for execution. (id, default=``) * `timeout`: The amount of time (in seconds) before the approval node expires and fails. (integer, default=`0`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Workflow Approval Template: Make a DELETE request to this resource to delete this workflow approval template.
     *
     * @tags api
     * @name ApiWorkflowApprovalTemplatesUpdate
     * @summary # Retrieve a Workflow Approval Template:
     * @request PUT:/api/{version}/workflow_approval_templates/{id}/
     * @secure
     */
    apiWorkflowApprovalTemplatesUpdate: (
      id: string,
      version: string,
      data: WorkflowApprovalTemplate,
      params: RequestParams = {}
    ) =>
      this.request<WorkflowApprovalTemplate, any>({
        path: `/api/${version}/workflow_approval_templates/${id}/`,
        method: 'PUT',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single workflow approval template record containing the following fields: * `id`: Database ID for this workflow approval template. (integer) * `type`: Data type for this workflow approval template. (choice) * `url`: URL for this workflow approval template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow approval template was created. (datetime) * `modified`: Timestamp when this workflow approval template was last modified. (datetime) * `name`: Name of this workflow approval template. (string) * `description`: Optional description of this workflow approval template. (string) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `ok`: OK - `missing`: Missing - `none`: No External Source - `updating`: Updating * `execution_environment`: The container image to be used for execution. (id) * `timeout`: The amount of time (in seconds) before the approval node expires and fails. (integer) # Update a Workflow Approval Template: Make a PUT or PATCH request to this resource to update this workflow approval template.  The following fields may be modified: * `name`: Name of this workflow approval template. (string, required) * `description`: Optional description of this workflow approval template. (string, default=`""`) * `execution_environment`: The container image to be used for execution. (id, default=``) * `timeout`: The amount of time (in seconds) before the approval node expires and fails. (integer, default=`0`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Workflow Approval Template: Make a DELETE request to this resource to delete this workflow approval template.
     *
     * @tags api
     * @name ApiWorkflowApprovalTemplatesPartialUpdate
     * @summary # Retrieve a Workflow Approval Template:
     * @request PATCH:/api/{version}/workflow_approval_templates/{id}/
     * @secure
     */
    apiWorkflowApprovalTemplatesPartialUpdate: (
      id: string,
      version: string,
      data: WorkflowApprovalTemplate,
      params: RequestParams = {}
    ) =>
      this.request<WorkflowApprovalTemplate, any>({
        path: `/api/${version}/workflow_approval_templates/${id}/`,
        method: 'PATCH',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single workflow approval template record containing the following fields: * `id`: Database ID for this workflow approval template. (integer) * `type`: Data type for this workflow approval template. (choice) * `url`: URL for this workflow approval template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow approval template was created. (datetime) * `modified`: Timestamp when this workflow approval template was last modified. (datetime) * `name`: Name of this workflow approval template. (string) * `description`: Optional description of this workflow approval template. (string) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `ok`: OK - `missing`: Missing - `none`: No External Source - `updating`: Updating * `execution_environment`: The container image to be used for execution. (id) * `timeout`: The amount of time (in seconds) before the approval node expires and fails. (integer) # Update a Workflow Approval Template: Make a PUT or PATCH request to this resource to update this workflow approval template.  The following fields may be modified: * `name`: Name of this workflow approval template. (string, required) * `description`: Optional description of this workflow approval template. (string, default=`""`) * `execution_environment`: The container image to be used for execution. (id, default=``) * `timeout`: The amount of time (in seconds) before the approval node expires and fails. (integer, default=`0`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Workflow Approval Template: Make a DELETE request to this resource to delete this workflow approval template.
     *
     * @tags api
     * @name ApiWorkflowApprovalTemplatesDelete
     * @summary # Retrieve a Workflow Approval Template:
     * @request DELETE:/api/{version}/workflow_approval_templates/{id}/
     * @secure
     */
    apiWorkflowApprovalTemplatesDelete: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/workflow_approval_templates/${id}/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of workflow approvals associated with the selected workflow approval template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of workflow approvals found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more workflow approval records. ## Results Each workflow approval data structure includes the following fields: * `id`: Database ID for this workflow approval. (integer) * `type`: Data type for this workflow approval. (choice) * `url`: URL for this workflow approval. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow approval was created. (datetime) * `modified`: Timestamp when this workflow approval was last modified. (datetime) * `name`: Name of this workflow approval. (string) * `description`: Optional description of this workflow approval. (string) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `can_approve_or_deny`:  (field) * `approval_expiration`:  (field) * `timed_out`:  (boolean) ## Sorting To specify that workflow approvals are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowApprovalTemplatesApprovalsList
     * @summary # List Workflow Approvals for a Workflow Approval Template:
     * @request GET:/api/{version}/workflow_approval_templates/{id}/approvals/
     * @secure
     */
    apiWorkflowApprovalTemplatesApprovalsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: WorkflowApprovalList[]
        },
        any
      >({
        path: `/api/${version}/workflow_approval_templates/${id}/approvals/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of workflow approvals. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of workflow approvals found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more workflow approval records. ## Results Each workflow approval data structure includes the following fields: * `id`: Database ID for this workflow approval. (integer) * `type`: Data type for this workflow approval. (choice) * `url`: URL for this workflow approval. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow approval was created. (datetime) * `modified`: Timestamp when this workflow approval was last modified. (datetime) * `name`: Name of this workflow approval. (string) * `description`: Optional description of this workflow approval. (string) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `can_approve_or_deny`:  (field) * `approval_expiration`:  (field) * `timed_out`:  (boolean) ## Sorting To specify that workflow approvals are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowApprovalsList
     * @summary # List Workflow Approvals:
     * @request GET:/api/{version}/workflow_approvals/
     * @secure
     */
    apiWorkflowApprovalsList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: WorkflowApprovalList[]
        },
        any
      >({
        path: `/api/${version}/workflow_approvals/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of workflow approvals. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of workflow approvals found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more workflow approval records. ## Results Each workflow approval data structure includes the following fields: * `id`: Database ID for this workflow approval. (integer) * `type`: Data type for this workflow approval. (choice) * `url`: URL for this workflow approval. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow approval was created. (datetime) * `modified`: Timestamp when this workflow approval was last modified. (datetime) * `name`: Name of this workflow approval. (string) * `description`: Optional description of this workflow approval. (string) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `can_approve_or_deny`:  (field) * `approval_expiration`:  (field) * `timed_out`:  (boolean) ## Sorting To specify that workflow approvals are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowApprovalsCreate
     * @summary # List Workflow Approvals:
     * @request POST:/api/{version}/workflow_approvals/
     * @secure
     */
    apiWorkflowApprovalsCreate: (
      version: string,
      data: WorkflowApprovalList,
      params: RequestParams = {}
    ) =>
      this.request<WorkflowApprovalList, any>({
        path: `/api/${version}/workflow_approvals/`,
        method: 'POST',
        body: data,
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single workflow approval record containing the following fields: * `id`: Database ID for this workflow approval. (integer) * `type`: Data type for this workflow approval. (choice) * `url`: URL for this workflow approval. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow approval was created. (datetime) * `modified`: Timestamp when this workflow approval was last modified. (datetime) * `name`: Name of this workflow approval. (string) * `description`: Optional description of this workflow approval. (string) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_args`:  (string) * `job_cwd`:  (string) * `job_env`:  (json) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `result_traceback`:  (string) * `event_processing_finished`: Indicates whether all of the events generated by this unified job have been saved to the database. (boolean) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `can_approve_or_deny`:  (field) * `approval_expiration`:  (field) * `timed_out`:  (boolean) # Delete a Workflow Approval: Make a DELETE request to this resource to delete this workflow approval.
     *
     * @tags api
     * @name ApiWorkflowApprovalsRead
     * @summary # Retrieve a Workflow Approval:
     * @request GET:/api/{version}/workflow_approvals/{id}/
     * @secure
     */
    apiWorkflowApprovalsRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<WorkflowApproval, any>({
        path: `/api/${version}/workflow_approvals/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single workflow approval record containing the following fields: * `id`: Database ID for this workflow approval. (integer) * `type`: Data type for this workflow approval. (choice) * `url`: URL for this workflow approval. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow approval was created. (datetime) * `modified`: Timestamp when this workflow approval was last modified. (datetime) * `name`: Name of this workflow approval. (string) * `description`: Optional description of this workflow approval. (string) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `execution_environment`: The container image to be used for execution. (id) * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_args`:  (string) * `job_cwd`:  (string) * `job_env`:  (json) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `result_traceback`:  (string) * `event_processing_finished`: Indicates whether all of the events generated by this unified job have been saved to the database. (boolean) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `can_approve_or_deny`:  (field) * `approval_expiration`:  (field) * `timed_out`:  (boolean) # Delete a Workflow Approval: Make a DELETE request to this resource to delete this workflow approval.
     *
     * @tags api
     * @name ApiWorkflowApprovalsDelete
     * @summary # Retrieve a Workflow Approval:
     * @request DELETE:/api/{version}/workflow_approvals/{id}/
     * @secure
     */
    apiWorkflowApprovalsDelete: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/workflow_approvals/${id}/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single workflow approval record containing the following fields:
     *
     * @tags api
     * @name ApiWorkflowApprovalsApproveRead
     * @summary # Retrieve a Workflow Approval:
     * @request GET:/api/{version}/workflow_approvals/{id}/approve/
     * @secure
     */
    apiWorkflowApprovalsApproveRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<WorkflowApprovalView, any>({
        path: `/api/${version}/workflow_approvals/${id}/approve/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single workflow approval record containing the following fields:
     *
     * @tags api
     * @name ApiWorkflowApprovalsApproveCreate
     * @summary # Retrieve a Workflow Approval:
     * @request POST:/api/{version}/workflow_approvals/{id}/approve/
     * @secure
     */
    apiWorkflowApprovalsApproveCreate: (
      id: string,
      version: string,
      data: WorkflowApprovalView,
      params: RequestParams = {}
    ) =>
      this.request<WorkflowApprovalView, any>({
        path: `/api/${version}/workflow_approvals/${id}/approve/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single workflow approval record containing the following fields:
     *
     * @tags api
     * @name ApiWorkflowApprovalsDenyRead
     * @summary # Retrieve a Workflow Approval:
     * @request GET:/api/{version}/workflow_approvals/{id}/deny/
     * @secure
     */
    apiWorkflowApprovalsDenyRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<WorkflowApprovalView, any>({
        path: `/api/${version}/workflow_approvals/${id}/deny/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single workflow approval record containing the following fields:
     *
     * @tags api
     * @name ApiWorkflowApprovalsDenyCreate
     * @summary # Retrieve a Workflow Approval:
     * @request POST:/api/{version}/workflow_approvals/{id}/deny/
     * @secure
     */
    apiWorkflowApprovalsDenyCreate: (
      id: string,
      version: string,
      data: WorkflowApprovalView,
      params: RequestParams = {}
    ) =>
      this.request<WorkflowApprovalView, any>({
        path: `/api/${version}/workflow_approvals/${id}/deny/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of workflow job nodes. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of workflow job nodes found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more workflow job node records. ## Results Each workflow job node data structure includes the following fields: * `id`: Database ID for this workflow job node. (integer) * `type`: Data type for this workflow job node. (choice) * `url`: URL for this workflow job node. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job node was created. (datetime) * `modified`: Timestamp when this workflow job node was last modified. (datetime) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `job`:  (id) * `workflow_job`:  (id) * `unified_job_template`:  (id) * `success_nodes`:  (field) * `failure_nodes`:  (field) * `always_nodes`:  (field) * `all_parents_must_converge`: If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node (boolean) * `do_not_run`: Indicates that a job will not be created when True. Workflow runtime semantics will mark this True if the node is in a path that will decidedly not be ran. A value of False means the node may not run. (boolean) * `identifier`: An identifier coresponding to the workflow job template node that this node was created from. (string) ## Sorting To specify that workflow job nodes are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobNodesList
     * @summary # List Workflow Job Nodes:
     * @request GET:/api/{version}/workflow_job_nodes/
     * @secure
     */
    apiWorkflowJobNodesList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: WorkflowJobNodeList[]
        },
        any
      >({
        path: `/api/${version}/workflow_job_nodes/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single workflow job node record containing the following fields: * `id`: Database ID for this workflow job node. (integer) * `type`: Data type for this workflow job node. (choice) * `url`: URL for this workflow job node. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job node was created. (datetime) * `modified`: Timestamp when this workflow job node was last modified. (datetime) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `job`:  (id) * `workflow_job`:  (id) * `unified_job_template`:  (id) * `success_nodes`:  (field) * `failure_nodes`:  (field) * `always_nodes`:  (field) * `all_parents_must_converge`: If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node (boolean) * `do_not_run`: Indicates that a job will not be created when True. Workflow runtime semantics will mark this True if the node is in a path that will decidedly not be ran. A value of False means the node may not run. (boolean) * `identifier`: An identifier coresponding to the workflow job template node that this node was created from. (string)
     *
     * @tags api
     * @name ApiWorkflowJobNodesRead
     * @summary # Retrieve a Workflow Job Node:
     * @request GET:/api/{version}/workflow_job_nodes/{id}/
     * @secure
     */
    apiWorkflowJobNodesRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<WorkflowJobNodeDetail, any>({
        path: `/api/${version}/workflow_job_nodes/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of workflow job nodes associated with the selected workflow job node. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of workflow job nodes found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more workflow job node records. ## Results Each workflow job node data structure includes the following fields: * `id`: Database ID for this workflow job node. (integer) * `type`: Data type for this workflow job node. (choice) * `url`: URL for this workflow job node. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job node was created. (datetime) * `modified`: Timestamp when this workflow job node was last modified. (datetime) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `job`:  (id) * `workflow_job`:  (id) * `unified_job_template`:  (id) * `success_nodes`:  (field) * `failure_nodes`:  (field) * `always_nodes`:  (field) * `all_parents_must_converge`: If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node (boolean) * `do_not_run`: Indicates that a job will not be created when True. Workflow runtime semantics will mark this True if the node is in a path that will decidedly not be ran. A value of False means the node may not run. (boolean) * `identifier`: An identifier coresponding to the workflow job template node that this node was created from. (string) ## Sorting To specify that workflow job nodes are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobNodesAlwaysNodesList
     * @summary # List Workflow Job Nodes for a Workflow Job Node:
     * @request GET:/api/{version}/workflow_job_nodes/{id}/always_nodes/
     * @secure
     */
    apiWorkflowJobNodesAlwaysNodesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: WorkflowJobNodeList[]
        },
        any
      >({
        path: `/api/${version}/workflow_job_nodes/${id}/always_nodes/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of credentials associated with the selected workflow job node. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of credentials found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more credential records. ## Results Each credential data structure includes the following fields: * `id`: Database ID for this credential. (integer) * `type`: Data type for this credential. (choice) * `url`: URL for this credential. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential was created. (datetime) * `modified`: Timestamp when this credential was last modified. (datetime) * `name`: Name of this credential. (string) * `description`: Optional description of this credential. (string) * `organization`:  (id) * `credential_type`: Specify the type of credential you want to create. Refer to the documentation for details on each type. (id) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `kind`:  (field) * `cloud`:  (field) * `kubernetes`:  (field) ## Sorting To specify that credentials are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobNodesCredentialsList
     * @summary # List Credentials for a Workflow Job Node:
     * @request GET:/api/{version}/workflow_job_nodes/{id}/credentials/
     * @secure
     */
    apiWorkflowJobNodesCredentialsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Credential[]
        },
        any
      >({
        path: `/api/${version}/workflow_job_nodes/${id}/credentials/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of workflow job nodes associated with the selected workflow job node. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of workflow job nodes found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more workflow job node records. ## Results Each workflow job node data structure includes the following fields: * `id`: Database ID for this workflow job node. (integer) * `type`: Data type for this workflow job node. (choice) * `url`: URL for this workflow job node. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job node was created. (datetime) * `modified`: Timestamp when this workflow job node was last modified. (datetime) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `job`:  (id) * `workflow_job`:  (id) * `unified_job_template`:  (id) * `success_nodes`:  (field) * `failure_nodes`:  (field) * `always_nodes`:  (field) * `all_parents_must_converge`: If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node (boolean) * `do_not_run`: Indicates that a job will not be created when True. Workflow runtime semantics will mark this True if the node is in a path that will decidedly not be ran. A value of False means the node may not run. (boolean) * `identifier`: An identifier coresponding to the workflow job template node that this node was created from. (string) ## Sorting To specify that workflow job nodes are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobNodesFailureNodesList
     * @summary # List Workflow Job Nodes for a Workflow Job Node:
     * @request GET:/api/{version}/workflow_job_nodes/{id}/failure_nodes/
     * @secure
     */
    apiWorkflowJobNodesFailureNodesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: WorkflowJobNodeList[]
        },
        any
      >({
        path: `/api/${version}/workflow_job_nodes/${id}/failure_nodes/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of instance groups associated with the selected workflow job node. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of instance groups found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more instance group records. ## Results Each instance group data structure includes the following fields: * `id`: Database ID for this instance group. (integer) * `type`: Data type for this instance group. (choice) * `url`: URL for this instance group. (string) * `related`: Data structure with URLs of related resources. (object) * `name`: Name of this instance group. (string) * `created`: Timestamp when this instance group was created. (datetime) * `modified`: Timestamp when this instance group was last modified. (datetime) * `capacity`:  (field) * `consumed_capacity`:  (field) * `percent_capacity_remaining`:  (field) * `jobs_running`: Count of jobs in the running or waiting state that are targeted for this instance group (integer) * `jobs_total`: Count of all jobs that target this instance group (integer) * `instances`:  (field) * `is_container_group`: Indicates whether instances in this group are containerized.Containerized groups have a designated Openshift or Kubernetes cluster. (boolean) * `credential`:  (id) * `policy_instance_percentage`: Minimum percentage of all instances that will be automatically assigned to this group when new instances come online. (integer) * `policy_instance_minimum`: Static minimum number of Instances that will be automatically assign to this group when new instances come online. (integer) * `policy_instance_list`: List of exact-match Instances that will be assigned to this group (json) * `pod_spec_override`:  (string) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) ## Sorting To specify that instance groups are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobNodesInstanceGroupsList
     * @summary # List Instance Groups for a Workflow Job Node:
     * @request GET:/api/{version}/workflow_job_nodes/{id}/instance_groups/
     * @secure
     */
    apiWorkflowJobNodesInstanceGroupsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: InstanceGroup[]
        },
        any
      >({
        path: `/api/${version}/workflow_job_nodes/${id}/instance_groups/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of instance groups associated with the selected workflow job node. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of instance groups found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more instance group records. ## Results Each instance group data structure includes the following fields: * `id`: Database ID for this instance group. (integer) * `type`: Data type for this instance group. (choice) * `url`: URL for this instance group. (string) * `related`: Data structure with URLs of related resources. (object) * `name`: Name of this instance group. (string) * `created`: Timestamp when this instance group was created. (datetime) * `modified`: Timestamp when this instance group was last modified. (datetime) * `capacity`:  (field) * `consumed_capacity`:  (field) * `percent_capacity_remaining`:  (field) * `jobs_running`: Count of jobs in the running or waiting state that are targeted for this instance group (integer) * `jobs_total`: Count of all jobs that target this instance group (integer) * `instances`:  (field) * `is_container_group`: Indicates whether instances in this group are containerized.Containerized groups have a designated Openshift or Kubernetes cluster. (boolean) * `credential`:  (id) * `policy_instance_percentage`: Minimum percentage of all instances that will be automatically assigned to this group when new instances come online. (integer) * `policy_instance_minimum`: Static minimum number of Instances that will be automatically assign to this group when new instances come online. (integer) * `policy_instance_list`: List of exact-match Instances that will be assigned to this group (json) * `pod_spec_override`:  (string) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) ## Sorting To specify that instance groups are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobNodesInstanceGroupsCreate
     * @summary # List Instance Groups for a Workflow Job Node:
     * @request POST:/api/{version}/workflow_job_nodes/{id}/instance_groups/
     * @secure
     */
    apiWorkflowJobNodesInstanceGroupsCreate: (
      id: string,
      version: string,
      data: InstanceGroup,
      params: RequestParams = {}
    ) =>
      this.request<InstanceGroup, any>({
        path: `/api/${version}/workflow_job_nodes/${id}/instance_groups/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of labels associated with the selected workflow job node. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of labels found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more label records. ## Results Each label data structure includes the following fields: * `id`: Database ID for this label. (integer) * `type`: Data type for this label. (choice) * `url`: URL for this label. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this label was created. (datetime) * `modified`: Timestamp when this label was last modified. (datetime) * `name`: Name of this label. (string) * `organization`: Organization this label belongs to. (id) ## Sorting To specify that labels are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobNodesLabelsList
     * @summary # List Labels for a Workflow Job Node:
     * @request GET:/api/{version}/workflow_job_nodes/{id}/labels/
     * @secure
     */
    apiWorkflowJobNodesLabelsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Label[]
        },
        any
      >({
        path: `/api/${version}/workflow_job_nodes/${id}/labels/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of workflow job nodes associated with the selected workflow job node. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of workflow job nodes found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more workflow job node records. ## Results Each workflow job node data structure includes the following fields: * `id`: Database ID for this workflow job node. (integer) * `type`: Data type for this workflow job node. (choice) * `url`: URL for this workflow job node. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job node was created. (datetime) * `modified`: Timestamp when this workflow job node was last modified. (datetime) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `job`:  (id) * `workflow_job`:  (id) * `unified_job_template`:  (id) * `success_nodes`:  (field) * `failure_nodes`:  (field) * `always_nodes`:  (field) * `all_parents_must_converge`: If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node (boolean) * `do_not_run`: Indicates that a job will not be created when True. Workflow runtime semantics will mark this True if the node is in a path that will decidedly not be ran. A value of False means the node may not run. (boolean) * `identifier`: An identifier coresponding to the workflow job template node that this node was created from. (string) ## Sorting To specify that workflow job nodes are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobNodesSuccessNodesList
     * @summary # List Workflow Job Nodes for a Workflow Job Node:
     * @request GET:/api/{version}/workflow_job_nodes/{id}/success_nodes/
     * @secure
     */
    apiWorkflowJobNodesSuccessNodesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: WorkflowJobNodeList[]
        },
        any
      >({
        path: `/api/${version}/workflow_job_nodes/${id}/success_nodes/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of workflow job template nodes. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of workflow job template nodes found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more workflow job template node records. ## Results Each workflow job template node data structure includes the following fields: * `id`: Database ID for this workflow job template node. (integer) * `type`: Data type for this workflow job template node. (choice) * `url`: URL for this workflow job template node. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job template node was created. (datetime) * `modified`: Timestamp when this workflow job template node was last modified. (datetime) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `workflow_job_template`:  (id) * `unified_job_template`:  (id) * `success_nodes`:  (field) * `failure_nodes`:  (field) * `always_nodes`:  (field) * `all_parents_must_converge`: If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node (boolean) * `identifier`: An identifier for this node that is unique within its workflow. It is copied to workflow job nodes corresponding to this node. (string) ## Sorting To specify that workflow job template nodes are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplateNodesList
     * @summary # List Workflow Job Template Nodes:
     * @request GET:/api/{version}/workflow_job_template_nodes/
     * @secure
     */
    apiWorkflowJobTemplateNodesList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: WorkflowJobTemplateNode[]
        },
        any
      >({
        path: `/api/${version}/workflow_job_template_nodes/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of workflow job template nodes. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of workflow job template nodes found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more workflow job template node records. ## Results Each workflow job template node data structure includes the following fields: * `id`: Database ID for this workflow job template node. (integer) * `type`: Data type for this workflow job template node. (choice) * `url`: URL for this workflow job template node. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job template node was created. (datetime) * `modified`: Timestamp when this workflow job template node was last modified. (datetime) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `workflow_job_template`:  (id) * `unified_job_template`:  (id) * `success_nodes`:  (field) * `failure_nodes`:  (field) * `always_nodes`:  (field) * `all_parents_must_converge`: If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node (boolean) * `identifier`: An identifier for this node that is unique within its workflow. It is copied to workflow job nodes corresponding to this node. (string) ## Sorting To specify that workflow job template nodes are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplateNodesCreate
     * @summary # List Workflow Job Template Nodes:
     * @request POST:/api/{version}/workflow_job_template_nodes/
     * @secure
     */
    apiWorkflowJobTemplateNodesCreate: (
      version: string,
      data: WorkflowJobTemplateNode,
      params: RequestParams = {}
    ) =>
      this.request<WorkflowJobTemplateNode, any>({
        path: `/api/${version}/workflow_job_template_nodes/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single workflow job template node record containing the following fields: * `id`: Database ID for this workflow job template node. (integer) * `type`: Data type for this workflow job template node. (choice) * `url`: URL for this workflow job template node. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job template node was created. (datetime) * `modified`: Timestamp when this workflow job template node was last modified. (datetime) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `workflow_job_template`:  (id) * `unified_job_template`:  (id) * `success_nodes`:  (field) * `failure_nodes`:  (field) * `always_nodes`:  (field) * `all_parents_must_converge`: If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node (boolean) * `identifier`: An identifier for this node that is unique within its workflow. It is copied to workflow job nodes corresponding to this node. (string) # Update a Workflow Job Template Node: Make a PUT or PATCH request to this resource to update this workflow job template node.  The following fields may be modified: * `extra_data`:  (json, default=`{}`) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id, default=``) * `scm_branch`:  (string, default=`""`) * `job_type`:  (choice) - `None`: --------- (default) - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string, default=`""`) * `skip_tags`:  (string, default=`""`) * `limit`:  (string, default=`""`) * `diff_mode`:  (boolean, default=`None`) * `verbosity`:  (choice) - `None`: --------- (default) - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id, default=``) * `forks`:  (integer, default=`None`) * `job_slice_count`:  (integer, default=`None`) * `timeout`:  (integer, default=`None`) * `workflow_job_template`:  (id, required) * `unified_job_template`:  (id, default=``) * `all_parents_must_converge`: If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node (boolean, default=`False`) * `identifier`: An identifier for this node that is unique within its workflow. It is copied to workflow job nodes corresponding to this node. (string, default=`"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Workflow Job Template Node: Make a DELETE request to this resource to delete this workflow job template node.
     *
     * @tags api
     * @name ApiWorkflowJobTemplateNodesRead
     * @summary # Retrieve a Workflow Job Template Node:
     * @request GET:/api/{version}/workflow_job_template_nodes/{id}/
     * @secure
     */
    apiWorkflowJobTemplateNodesRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<WorkflowJobTemplateNodeDetail, any>({
        path: `/api/${version}/workflow_job_template_nodes/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single workflow job template node record containing the following fields: * `id`: Database ID for this workflow job template node. (integer) * `type`: Data type for this workflow job template node. (choice) * `url`: URL for this workflow job template node. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job template node was created. (datetime) * `modified`: Timestamp when this workflow job template node was last modified. (datetime) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `workflow_job_template`:  (id) * `unified_job_template`:  (id) * `success_nodes`:  (field) * `failure_nodes`:  (field) * `always_nodes`:  (field) * `all_parents_must_converge`: If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node (boolean) * `identifier`: An identifier for this node that is unique within its workflow. It is copied to workflow job nodes corresponding to this node. (string) # Update a Workflow Job Template Node: Make a PUT or PATCH request to this resource to update this workflow job template node.  The following fields may be modified: * `extra_data`:  (json, default=`{}`) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id, default=``) * `scm_branch`:  (string, default=`""`) * `job_type`:  (choice) - `None`: --------- (default) - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string, default=`""`) * `skip_tags`:  (string, default=`""`) * `limit`:  (string, default=`""`) * `diff_mode`:  (boolean, default=`None`) * `verbosity`:  (choice) - `None`: --------- (default) - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id, default=``) * `forks`:  (integer, default=`None`) * `job_slice_count`:  (integer, default=`None`) * `timeout`:  (integer, default=`None`) * `workflow_job_template`:  (id, required) * `unified_job_template`:  (id, default=``) * `all_parents_must_converge`: If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node (boolean, default=`False`) * `identifier`: An identifier for this node that is unique within its workflow. It is copied to workflow job nodes corresponding to this node. (string, default=`"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Workflow Job Template Node: Make a DELETE request to this resource to delete this workflow job template node.
     *
     * @tags api
     * @name ApiWorkflowJobTemplateNodesUpdate
     * @summary # Retrieve a Workflow Job Template Node:
     * @request PUT:/api/{version}/workflow_job_template_nodes/{id}/
     * @secure
     */
    apiWorkflowJobTemplateNodesUpdate: (
      id: string,
      version: string,
      data: WorkflowJobTemplateNodeDetail,
      params: RequestParams = {}
    ) =>
      this.request<WorkflowJobTemplateNodeDetail, any>({
        path: `/api/${version}/workflow_job_template_nodes/${id}/`,
        method: 'PUT',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single workflow job template node record containing the following fields: * `id`: Database ID for this workflow job template node. (integer) * `type`: Data type for this workflow job template node. (choice) * `url`: URL for this workflow job template node. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job template node was created. (datetime) * `modified`: Timestamp when this workflow job template node was last modified. (datetime) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `workflow_job_template`:  (id) * `unified_job_template`:  (id) * `success_nodes`:  (field) * `failure_nodes`:  (field) * `always_nodes`:  (field) * `all_parents_must_converge`: If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node (boolean) * `identifier`: An identifier for this node that is unique within its workflow. It is copied to workflow job nodes corresponding to this node. (string) # Update a Workflow Job Template Node: Make a PUT or PATCH request to this resource to update this workflow job template node.  The following fields may be modified: * `extra_data`:  (json, default=`{}`) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id, default=``) * `scm_branch`:  (string, default=`""`) * `job_type`:  (choice) - `None`: --------- (default) - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string, default=`""`) * `skip_tags`:  (string, default=`""`) * `limit`:  (string, default=`""`) * `diff_mode`:  (boolean, default=`None`) * `verbosity`:  (choice) - `None`: --------- (default) - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id, default=``) * `forks`:  (integer, default=`None`) * `job_slice_count`:  (integer, default=`None`) * `timeout`:  (integer, default=`None`) * `workflow_job_template`:  (id, required) * `unified_job_template`:  (id, default=``) * `all_parents_must_converge`: If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node (boolean, default=`False`) * `identifier`: An identifier for this node that is unique within its workflow. It is copied to workflow job nodes corresponding to this node. (string, default=`"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Workflow Job Template Node: Make a DELETE request to this resource to delete this workflow job template node.
     *
     * @tags api
     * @name ApiWorkflowJobTemplateNodesPartialUpdate
     * @summary # Retrieve a Workflow Job Template Node:
     * @request PATCH:/api/{version}/workflow_job_template_nodes/{id}/
     * @secure
     */
    apiWorkflowJobTemplateNodesPartialUpdate: (
      id: string,
      version: string,
      data: WorkflowJobTemplateNodeDetail,
      params: RequestParams = {}
    ) =>
      this.request<WorkflowJobTemplateNodeDetail, any>({
        path: `/api/${version}/workflow_job_template_nodes/${id}/`,
        method: 'PATCH',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single workflow job template node record containing the following fields: * `id`: Database ID for this workflow job template node. (integer) * `type`: Data type for this workflow job template node. (choice) * `url`: URL for this workflow job template node. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job template node was created. (datetime) * `modified`: Timestamp when this workflow job template node was last modified. (datetime) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `workflow_job_template`:  (id) * `unified_job_template`:  (id) * `success_nodes`:  (field) * `failure_nodes`:  (field) * `always_nodes`:  (field) * `all_parents_must_converge`: If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node (boolean) * `identifier`: An identifier for this node that is unique within its workflow. It is copied to workflow job nodes corresponding to this node. (string) # Update a Workflow Job Template Node: Make a PUT or PATCH request to this resource to update this workflow job template node.  The following fields may be modified: * `extra_data`:  (json, default=`{}`) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id, default=``) * `scm_branch`:  (string, default=`""`) * `job_type`:  (choice) - `None`: --------- (default) - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string, default=`""`) * `skip_tags`:  (string, default=`""`) * `limit`:  (string, default=`""`) * `diff_mode`:  (boolean, default=`None`) * `verbosity`:  (choice) - `None`: --------- (default) - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id, default=``) * `forks`:  (integer, default=`None`) * `job_slice_count`:  (integer, default=`None`) * `timeout`:  (integer, default=`None`) * `workflow_job_template`:  (id, required) * `unified_job_template`:  (id, default=``) * `all_parents_must_converge`: If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node (boolean, default=`False`) * `identifier`: An identifier for this node that is unique within its workflow. It is copied to workflow job nodes corresponding to this node. (string, default=`"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Workflow Job Template Node: Make a DELETE request to this resource to delete this workflow job template node.
     *
     * @tags api
     * @name ApiWorkflowJobTemplateNodesDelete
     * @summary # Retrieve a Workflow Job Template Node:
     * @request DELETE:/api/{version}/workflow_job_template_nodes/{id}/
     * @secure
     */
    apiWorkflowJobTemplateNodesDelete: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/workflow_job_template_nodes/${id}/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of workflow job template nodes associated with the selected workflow job template node. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of workflow job template nodes found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more workflow job template node records. ## Results Each workflow job template node data structure includes the following fields: * `id`: Database ID for this workflow job template node. (integer) * `type`: Data type for this workflow job template node. (choice) * `url`: URL for this workflow job template node. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job template node was created. (datetime) * `modified`: Timestamp when this workflow job template node was last modified. (datetime) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `workflow_job_template`:  (id) * `unified_job_template`:  (id) * `success_nodes`:  (field) * `failure_nodes`:  (field) * `always_nodes`:  (field) * `all_parents_must_converge`: If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node (boolean) * `identifier`: An identifier for this node that is unique within its workflow. It is copied to workflow job nodes corresponding to this node. (string) ## Sorting To specify that workflow job template nodes are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplateNodesAlwaysNodesList
     * @summary # List Workflow Job Template Nodes for a Workflow Job Template Node:
     * @request GET:/api/{version}/workflow_job_template_nodes/{id}/always_nodes/
     * @secure
     */
    apiWorkflowJobTemplateNodesAlwaysNodesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: WorkflowJobTemplateNode[]
        },
        any
      >({
        path: `/api/${version}/workflow_job_template_nodes/${id}/always_nodes/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of workflow job template nodes associated with the selected workflow job template node. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of workflow job template nodes found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more workflow job template node records. ## Results Each workflow job template node data structure includes the following fields: * `id`: Database ID for this workflow job template node. (integer) * `type`: Data type for this workflow job template node. (choice) * `url`: URL for this workflow job template node. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job template node was created. (datetime) * `modified`: Timestamp when this workflow job template node was last modified. (datetime) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `workflow_job_template`:  (id) * `unified_job_template`:  (id) * `success_nodes`:  (field) * `failure_nodes`:  (field) * `always_nodes`:  (field) * `all_parents_must_converge`: If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node (boolean) * `identifier`: An identifier for this node that is unique within its workflow. It is copied to workflow job nodes corresponding to this node. (string) ## Sorting To specify that workflow job template nodes are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplateNodesAlwaysNodesCreate
     * @summary # List Workflow Job Template Nodes for a Workflow Job Template Node:
     * @request POST:/api/{version}/workflow_job_template_nodes/{id}/always_nodes/
     * @secure
     */
    apiWorkflowJobTemplateNodesAlwaysNodesCreate: (
      id: string,
      version: string,
      data: WorkflowJobTemplateNode,
      params: RequestParams = {}
    ) =>
      this.request<WorkflowJobTemplateNode, any>({
        path: `/api/${version}/workflow_job_template_nodes/${id}/always_nodes/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single workflow job template node record containing the following fields: * `timeout`: The amount of time (in seconds) before the approval node expires and fails. (integer) * `name`: Name of this workflow approval template. (string) * `description`: Optional description of this workflow approval template. (string)
     *
     * @tags api
     * @name ApiWorkflowJobTemplateNodesCreateApprovalTemplateRead
     * @summary # Retrieve a Workflow Job Template Node:
     * @request GET:/api/{version}/workflow_job_template_nodes/{id}/create_approval_template/
     * @secure
     */
    apiWorkflowJobTemplateNodesCreateApprovalTemplateRead: (
      id: string,
      version: string,
      params: RequestParams = {}
    ) =>
      this.request<WorkflowJobTemplateNodeCreateApproval, any>({
        path: `/api/${version}/workflow_job_template_nodes/${id}/create_approval_template/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single workflow job template node record containing the following fields: * `timeout`: The amount of time (in seconds) before the approval node expires and fails. (integer) * `name`: Name of this workflow approval template. (string) * `description`: Optional description of this workflow approval template. (string)
     *
     * @tags api
     * @name ApiWorkflowJobTemplateNodesCreateApprovalTemplateCreate
     * @summary # Retrieve a Workflow Job Template Node:
     * @request POST:/api/{version}/workflow_job_template_nodes/{id}/create_approval_template/
     * @secure
     */
    apiWorkflowJobTemplateNodesCreateApprovalTemplateCreate: (
      id: string,
      version: string,
      data: WorkflowJobTemplateNodeCreateApproval,
      params: RequestParams = {}
    ) =>
      this.request<WorkflowJobTemplateNodeCreateApproval, any>({
        path: `/api/${version}/workflow_job_template_nodes/${id}/create_approval_template/`,
        method: 'POST',
        body: data,
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of credentials associated with the selected workflow job template node. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of credentials found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more credential records. ## Results Each credential data structure includes the following fields: * `id`: Database ID for this credential. (integer) * `type`: Data type for this credential. (choice) * `url`: URL for this credential. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential was created. (datetime) * `modified`: Timestamp when this credential was last modified. (datetime) * `name`: Name of this credential. (string) * `description`: Optional description of this credential. (string) * `organization`:  (id) * `credential_type`: Specify the type of credential you want to create. Refer to the documentation for details on each type. (id) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `kind`:  (field) * `cloud`:  (field) * `kubernetes`:  (field) ## Sorting To specify that credentials are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplateNodesCredentialsList
     * @summary # List Credentials for a Workflow Job Template Node:
     * @request GET:/api/{version}/workflow_job_template_nodes/{id}/credentials/
     * @secure
     */
    apiWorkflowJobTemplateNodesCredentialsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Credential[]
        },
        any
      >({
        path: `/api/${version}/workflow_job_template_nodes/${id}/credentials/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of credentials associated with the selected workflow job template node. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of credentials found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more credential records. ## Results Each credential data structure includes the following fields: * `id`: Database ID for this credential. (integer) * `type`: Data type for this credential. (choice) * `url`: URL for this credential. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this credential was created. (datetime) * `modified`: Timestamp when this credential was last modified. (datetime) * `name`: Name of this credential. (string) * `description`: Optional description of this credential. (string) * `organization`:  (id) * `credential_type`: Specify the type of credential you want to create. Refer to the documentation for details on each type. (id) * `managed`:  (boolean) * `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the documentation for example syntax. (json) * `kind`:  (field) * `cloud`:  (field) * `kubernetes`:  (field) ## Sorting To specify that credentials are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplateNodesCredentialsCreate
     * @summary # List Credentials for a Workflow Job Template Node:
     * @request POST:/api/{version}/workflow_job_template_nodes/{id}/credentials/
     * @secure
     */
    apiWorkflowJobTemplateNodesCredentialsCreate: (
      id: string,
      version: string,
      data: Credential,
      params: RequestParams = {}
    ) =>
      this.request<Credential, any>({
        path: `/api/${version}/workflow_job_template_nodes/${id}/credentials/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of workflow job template nodes associated with the selected workflow job template node. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of workflow job template nodes found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more workflow job template node records. ## Results Each workflow job template node data structure includes the following fields: * `id`: Database ID for this workflow job template node. (integer) * `type`: Data type for this workflow job template node. (choice) * `url`: URL for this workflow job template node. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job template node was created. (datetime) * `modified`: Timestamp when this workflow job template node was last modified. (datetime) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `workflow_job_template`:  (id) * `unified_job_template`:  (id) * `success_nodes`:  (field) * `failure_nodes`:  (field) * `always_nodes`:  (field) * `all_parents_must_converge`: If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node (boolean) * `identifier`: An identifier for this node that is unique within its workflow. It is copied to workflow job nodes corresponding to this node. (string) ## Sorting To specify that workflow job template nodes are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplateNodesFailureNodesList
     * @summary # List Workflow Job Template Nodes for a Workflow Job Template Node:
     * @request GET:/api/{version}/workflow_job_template_nodes/{id}/failure_nodes/
     * @secure
     */
    apiWorkflowJobTemplateNodesFailureNodesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: WorkflowJobTemplateNode[]
        },
        any
      >({
        path: `/api/${version}/workflow_job_template_nodes/${id}/failure_nodes/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of workflow job template nodes associated with the selected workflow job template node. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of workflow job template nodes found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more workflow job template node records. ## Results Each workflow job template node data structure includes the following fields: * `id`: Database ID for this workflow job template node. (integer) * `type`: Data type for this workflow job template node. (choice) * `url`: URL for this workflow job template node. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job template node was created. (datetime) * `modified`: Timestamp when this workflow job template node was last modified. (datetime) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `workflow_job_template`:  (id) * `unified_job_template`:  (id) * `success_nodes`:  (field) * `failure_nodes`:  (field) * `always_nodes`:  (field) * `all_parents_must_converge`: If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node (boolean) * `identifier`: An identifier for this node that is unique within its workflow. It is copied to workflow job nodes corresponding to this node. (string) ## Sorting To specify that workflow job template nodes are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplateNodesFailureNodesCreate
     * @summary # List Workflow Job Template Nodes for a Workflow Job Template Node:
     * @request POST:/api/{version}/workflow_job_template_nodes/{id}/failure_nodes/
     * @secure
     */
    apiWorkflowJobTemplateNodesFailureNodesCreate: (
      id: string,
      version: string,
      data: WorkflowJobTemplateNode,
      params: RequestParams = {}
    ) =>
      this.request<WorkflowJobTemplateNode, any>({
        path: `/api/${version}/workflow_job_template_nodes/${id}/failure_nodes/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of instance groups associated with the selected workflow job template node. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of instance groups found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more instance group records. ## Results Each instance group data structure includes the following fields: * `id`: Database ID for this instance group. (integer) * `type`: Data type for this instance group. (choice) * `url`: URL for this instance group. (string) * `related`: Data structure with URLs of related resources. (object) * `name`: Name of this instance group. (string) * `created`: Timestamp when this instance group was created. (datetime) * `modified`: Timestamp when this instance group was last modified. (datetime) * `capacity`:  (field) * `consumed_capacity`:  (field) * `percent_capacity_remaining`:  (field) * `jobs_running`: Count of jobs in the running or waiting state that are targeted for this instance group (integer) * `jobs_total`: Count of all jobs that target this instance group (integer) * `instances`:  (field) * `is_container_group`: Indicates whether instances in this group are containerized.Containerized groups have a designated Openshift or Kubernetes cluster. (boolean) * `credential`:  (id) * `policy_instance_percentage`: Minimum percentage of all instances that will be automatically assigned to this group when new instances come online. (integer) * `policy_instance_minimum`: Static minimum number of Instances that will be automatically assign to this group when new instances come online. (integer) * `policy_instance_list`: List of exact-match Instances that will be assigned to this group (json) * `pod_spec_override`:  (string) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) ## Sorting To specify that instance groups are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplateNodesInstanceGroupsList
     * @summary # List Instance Groups for a Workflow Job Template Node:
     * @request GET:/api/{version}/workflow_job_template_nodes/{id}/instance_groups/
     * @secure
     */
    apiWorkflowJobTemplateNodesInstanceGroupsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: InstanceGroup[]
        },
        any
      >({
        path: `/api/${version}/workflow_job_template_nodes/${id}/instance_groups/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of instance groups associated with the selected workflow job template node. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of instance groups found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more instance group records. ## Results Each instance group data structure includes the following fields: * `id`: Database ID for this instance group. (integer) * `type`: Data type for this instance group. (choice) * `url`: URL for this instance group. (string) * `related`: Data structure with URLs of related resources. (object) * `name`: Name of this instance group. (string) * `created`: Timestamp when this instance group was created. (datetime) * `modified`: Timestamp when this instance group was last modified. (datetime) * `capacity`:  (field) * `consumed_capacity`:  (field) * `percent_capacity_remaining`:  (field) * `jobs_running`: Count of jobs in the running or waiting state that are targeted for this instance group (integer) * `jobs_total`: Count of all jobs that target this instance group (integer) * `instances`:  (field) * `is_container_group`: Indicates whether instances in this group are containerized.Containerized groups have a designated Openshift or Kubernetes cluster. (boolean) * `credential`:  (id) * `policy_instance_percentage`: Minimum percentage of all instances that will be automatically assigned to this group when new instances come online. (integer) * `policy_instance_minimum`: Static minimum number of Instances that will be automatically assign to this group when new instances come online. (integer) * `policy_instance_list`: List of exact-match Instances that will be assigned to this group (json) * `pod_spec_override`:  (string) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) ## Sorting To specify that instance groups are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplateNodesInstanceGroupsCreate
     * @summary # List Instance Groups for a Workflow Job Template Node:
     * @request POST:/api/{version}/workflow_job_template_nodes/{id}/instance_groups/
     * @secure
     */
    apiWorkflowJobTemplateNodesInstanceGroupsCreate: (
      id: string,
      version: string,
      data: InstanceGroup,
      params: RequestParams = {}
    ) =>
      this.request<InstanceGroup, any>({
        path: `/api/${version}/workflow_job_template_nodes/${id}/instance_groups/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of labels associated with the selected workflow job template node. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of labels found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more label records. ## Results Each label data structure includes the following fields: * `id`: Database ID for this label. (integer) * `type`: Data type for this label. (choice) * `url`: URL for this label. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this label was created. (datetime) * `modified`: Timestamp when this label was last modified. (datetime) * `name`: Name of this label. (string) * `organization`: Organization this label belongs to. (id) ## Sorting To specify that labels are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplateNodesLabelsList
     * @summary # List Labels for a Workflow Job Template Node:
     * @request GET:/api/{version}/workflow_job_template_nodes/{id}/labels/
     * @secure
     */
    apiWorkflowJobTemplateNodesLabelsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Label[]
        },
        any
      >({
        path: `/api/${version}/workflow_job_template_nodes/${id}/labels/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of labels associated with the selected workflow job template node. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of labels found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more label records. ## Results Each label data structure includes the following fields: * `id`: Database ID for this label. (integer) * `type`: Data type for this label. (choice) * `url`: URL for this label. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this label was created. (datetime) * `modified`: Timestamp when this label was last modified. (datetime) * `name`: Name of this label. (string) * `organization`: Organization this label belongs to. (id) ## Sorting To specify that labels are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplateNodesLabelsCreate
     * @summary # List Labels for a Workflow Job Template Node:
     * @request POST:/api/{version}/workflow_job_template_nodes/{id}/labels/
     * @secure
     */
    apiWorkflowJobTemplateNodesLabelsCreate: (
      id: string,
      version: string,
      data: Label,
      params: RequestParams = {}
    ) =>
      this.request<Label, any>({
        path: `/api/${version}/workflow_job_template_nodes/${id}/labels/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of workflow job template nodes associated with the selected workflow job template node. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of workflow job template nodes found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more workflow job template node records. ## Results Each workflow job template node data structure includes the following fields: * `id`: Database ID for this workflow job template node. (integer) * `type`: Data type for this workflow job template node. (choice) * `url`: URL for this workflow job template node. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job template node was created. (datetime) * `modified`: Timestamp when this workflow job template node was last modified. (datetime) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `workflow_job_template`:  (id) * `unified_job_template`:  (id) * `success_nodes`:  (field) * `failure_nodes`:  (field) * `always_nodes`:  (field) * `all_parents_must_converge`: If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node (boolean) * `identifier`: An identifier for this node that is unique within its workflow. It is copied to workflow job nodes corresponding to this node. (string) ## Sorting To specify that workflow job template nodes are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplateNodesSuccessNodesList
     * @summary # List Workflow Job Template Nodes for a Workflow Job Template Node:
     * @request GET:/api/{version}/workflow_job_template_nodes/{id}/success_nodes/
     * @secure
     */
    apiWorkflowJobTemplateNodesSuccessNodesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: WorkflowJobTemplateNode[]
        },
        any
      >({
        path: `/api/${version}/workflow_job_template_nodes/${id}/success_nodes/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of workflow job template nodes associated with the selected workflow job template node. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of workflow job template nodes found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more workflow job template node records. ## Results Each workflow job template node data structure includes the following fields: * `id`: Database ID for this workflow job template node. (integer) * `type`: Data type for this workflow job template node. (choice) * `url`: URL for this workflow job template node. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job template node was created. (datetime) * `modified`: Timestamp when this workflow job template node was last modified. (datetime) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `workflow_job_template`:  (id) * `unified_job_template`:  (id) * `success_nodes`:  (field) * `failure_nodes`:  (field) * `always_nodes`:  (field) * `all_parents_must_converge`: If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node (boolean) * `identifier`: An identifier for this node that is unique within its workflow. It is copied to workflow job nodes corresponding to this node. (string) ## Sorting To specify that workflow job template nodes are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplateNodesSuccessNodesCreate
     * @summary # List Workflow Job Template Nodes for a Workflow Job Template Node:
     * @request POST:/api/{version}/workflow_job_template_nodes/{id}/success_nodes/
     * @secure
     */
    apiWorkflowJobTemplateNodesSuccessNodesCreate: (
      id: string,
      version: string,
      data: WorkflowJobTemplateNode,
      params: RequestParams = {}
    ) =>
      this.request<WorkflowJobTemplateNode, any>({
        path: `/api/${version}/workflow_job_template_nodes/${id}/success_nodes/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of workflow job templates. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of workflow job templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more workflow job template records. ## Results Each workflow job template data structure includes the following fields: * `id`: Database ID for this workflow job template. (integer) * `type`: Data type for this workflow job template. (choice) * `url`: URL for this workflow job template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job template was created. (datetime) * `modified`: Timestamp when this workflow job template was last modified. (datetime) * `name`: Name of this workflow job template. (string) * `description`: Optional description of this workflow job template. (string) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `ok`: OK - `missing`: Missing - `none`: No External Source - `updating`: Updating * `extra_vars`:  (json) * `organization`: The organization used to determine access to this template. (id) * `survey_enabled`:  (boolean) * `allow_simultaneous`:  (boolean) * `ask_variables_on_launch`:  (boolean) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `limit`:  (string) * `scm_branch`:  (string) * `ask_inventory_on_launch`:  (boolean) * `ask_scm_branch_on_launch`:  (boolean) * `ask_limit_on_launch`:  (boolean) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id) * `ask_labels_on_launch`:  (boolean) * `ask_skip_tags_on_launch`:  (boolean) * `ask_tags_on_launch`:  (boolean) * `skip_tags`:  (string) * `job_tags`:  (string) ## Sorting To specify that workflow job templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesList
     * @summary # List Workflow Job Templates:
     * @request GET:/api/{version}/workflow_job_templates/
     * @secure
     */
    apiWorkflowJobTemplatesList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: WorkflowJobTemplate[]
        },
        any
      >({
        path: `/api/${version}/workflow_job_templates/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of workflow job templates. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of workflow job templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more workflow job template records. ## Results Each workflow job template data structure includes the following fields: * `id`: Database ID for this workflow job template. (integer) * `type`: Data type for this workflow job template. (choice) * `url`: URL for this workflow job template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job template was created. (datetime) * `modified`: Timestamp when this workflow job template was last modified. (datetime) * `name`: Name of this workflow job template. (string) * `description`: Optional description of this workflow job template. (string) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `ok`: OK - `missing`: Missing - `none`: No External Source - `updating`: Updating * `extra_vars`:  (json) * `organization`: The organization used to determine access to this template. (id) * `survey_enabled`:  (boolean) * `allow_simultaneous`:  (boolean) * `ask_variables_on_launch`:  (boolean) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `limit`:  (string) * `scm_branch`:  (string) * `ask_inventory_on_launch`:  (boolean) * `ask_scm_branch_on_launch`:  (boolean) * `ask_limit_on_launch`:  (boolean) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id) * `ask_labels_on_launch`:  (boolean) * `ask_skip_tags_on_launch`:  (boolean) * `ask_tags_on_launch`:  (boolean) * `skip_tags`:  (string) * `job_tags`:  (string) ## Sorting To specify that workflow job templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesCreate
     * @summary # List Workflow Job Templates:
     * @request POST:/api/{version}/workflow_job_templates/
     * @secure
     */
    apiWorkflowJobTemplatesCreate: (
      version: string,
      data: WorkflowJobTemplate,
      params: RequestParams = {}
    ) =>
      this.request<WorkflowJobTemplate, any>({
        path: `/api/${version}/workflow_job_templates/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single workflow job template record containing the following fields: * `id`: Database ID for this workflow job template. (integer) * `type`: Data type for this workflow job template. (choice) * `url`: URL for this workflow job template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job template was created. (datetime) * `modified`: Timestamp when this workflow job template was last modified. (datetime) * `name`: Name of this workflow job template. (string) * `description`: Optional description of this workflow job template. (string) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `ok`: OK - `missing`: Missing - `none`: No External Source - `updating`: Updating * `extra_vars`:  (json) * `organization`: The organization used to determine access to this template. (id) * `survey_enabled`:  (boolean) * `allow_simultaneous`:  (boolean) * `ask_variables_on_launch`:  (boolean) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `limit`:  (string) * `scm_branch`:  (string) * `ask_inventory_on_launch`:  (boolean) * `ask_scm_branch_on_launch`:  (boolean) * `ask_limit_on_launch`:  (boolean) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id) * `ask_labels_on_launch`:  (boolean) * `ask_skip_tags_on_launch`:  (boolean) * `ask_tags_on_launch`:  (boolean) * `skip_tags`:  (string) * `job_tags`:  (string) # Update a Workflow Job Template: Make a PUT or PATCH request to this resource to update this workflow job template.  The following fields may be modified: * `name`: Name of this workflow job template. (string, required) * `description`: Optional description of this workflow job template. (string, default=`""`) * `extra_vars`:  (json, default=``) * `organization`: The organization used to determine access to this template. (id, default=``) * `survey_enabled`:  (boolean, default=`False`) * `allow_simultaneous`:  (boolean, default=`False`) * `ask_variables_on_launch`:  (boolean, default=`False`) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id, default=``) * `limit`:  (string, default=`""`) * `scm_branch`:  (string, default=`""`) * `ask_inventory_on_launch`:  (boolean, default=`False`) * `ask_scm_branch_on_launch`:  (boolean, default=`False`) * `ask_limit_on_launch`:  (boolean, default=`False`) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id, default=``) * `ask_labels_on_launch`:  (boolean, default=`False`) * `ask_skip_tags_on_launch`:  (boolean, default=`False`) * `ask_tags_on_launch`:  (boolean, default=`False`) * `skip_tags`:  (string, default=`""`) * `job_tags`:  (string, default=`""`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Workflow Job Template: Make a DELETE request to this resource to delete this workflow job template.
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesRead
     * @summary # Retrieve a Workflow Job Template:
     * @request GET:/api/{version}/workflow_job_templates/{id}/
     * @secure
     */
    apiWorkflowJobTemplatesRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<WorkflowJobTemplate, any>({
        path: `/api/${version}/workflow_job_templates/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single workflow job template record containing the following fields: * `id`: Database ID for this workflow job template. (integer) * `type`: Data type for this workflow job template. (choice) * `url`: URL for this workflow job template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job template was created. (datetime) * `modified`: Timestamp when this workflow job template was last modified. (datetime) * `name`: Name of this workflow job template. (string) * `description`: Optional description of this workflow job template. (string) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `ok`: OK - `missing`: Missing - `none`: No External Source - `updating`: Updating * `extra_vars`:  (json) * `organization`: The organization used to determine access to this template. (id) * `survey_enabled`:  (boolean) * `allow_simultaneous`:  (boolean) * `ask_variables_on_launch`:  (boolean) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `limit`:  (string) * `scm_branch`:  (string) * `ask_inventory_on_launch`:  (boolean) * `ask_scm_branch_on_launch`:  (boolean) * `ask_limit_on_launch`:  (boolean) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id) * `ask_labels_on_launch`:  (boolean) * `ask_skip_tags_on_launch`:  (boolean) * `ask_tags_on_launch`:  (boolean) * `skip_tags`:  (string) * `job_tags`:  (string) # Update a Workflow Job Template: Make a PUT or PATCH request to this resource to update this workflow job template.  The following fields may be modified: * `name`: Name of this workflow job template. (string, required) * `description`: Optional description of this workflow job template. (string, default=`""`) * `extra_vars`:  (json, default=``) * `organization`: The organization used to determine access to this template. (id, default=``) * `survey_enabled`:  (boolean, default=`False`) * `allow_simultaneous`:  (boolean, default=`False`) * `ask_variables_on_launch`:  (boolean, default=`False`) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id, default=``) * `limit`:  (string, default=`""`) * `scm_branch`:  (string, default=`""`) * `ask_inventory_on_launch`:  (boolean, default=`False`) * `ask_scm_branch_on_launch`:  (boolean, default=`False`) * `ask_limit_on_launch`:  (boolean, default=`False`) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id, default=``) * `ask_labels_on_launch`:  (boolean, default=`False`) * `ask_skip_tags_on_launch`:  (boolean, default=`False`) * `ask_tags_on_launch`:  (boolean, default=`False`) * `skip_tags`:  (string, default=`""`) * `job_tags`:  (string, default=`""`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Workflow Job Template: Make a DELETE request to this resource to delete this workflow job template.
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesUpdate
     * @summary # Retrieve a Workflow Job Template:
     * @request PUT:/api/{version}/workflow_job_templates/{id}/
     * @secure
     */
    apiWorkflowJobTemplatesUpdate: (
      id: string,
      version: string,
      data: WorkflowJobTemplate,
      params: RequestParams = {}
    ) =>
      this.request<WorkflowJobTemplate, any>({
        path: `/api/${version}/workflow_job_templates/${id}/`,
        method: 'PUT',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single workflow job template record containing the following fields: * `id`: Database ID for this workflow job template. (integer) * `type`: Data type for this workflow job template. (choice) * `url`: URL for this workflow job template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job template was created. (datetime) * `modified`: Timestamp when this workflow job template was last modified. (datetime) * `name`: Name of this workflow job template. (string) * `description`: Optional description of this workflow job template. (string) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `ok`: OK - `missing`: Missing - `none`: No External Source - `updating`: Updating * `extra_vars`:  (json) * `organization`: The organization used to determine access to this template. (id) * `survey_enabled`:  (boolean) * `allow_simultaneous`:  (boolean) * `ask_variables_on_launch`:  (boolean) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `limit`:  (string) * `scm_branch`:  (string) * `ask_inventory_on_launch`:  (boolean) * `ask_scm_branch_on_launch`:  (boolean) * `ask_limit_on_launch`:  (boolean) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id) * `ask_labels_on_launch`:  (boolean) * `ask_skip_tags_on_launch`:  (boolean) * `ask_tags_on_launch`:  (boolean) * `skip_tags`:  (string) * `job_tags`:  (string) # Update a Workflow Job Template: Make a PUT or PATCH request to this resource to update this workflow job template.  The following fields may be modified: * `name`: Name of this workflow job template. (string, required) * `description`: Optional description of this workflow job template. (string, default=`""`) * `extra_vars`:  (json, default=``) * `organization`: The organization used to determine access to this template. (id, default=``) * `survey_enabled`:  (boolean, default=`False`) * `allow_simultaneous`:  (boolean, default=`False`) * `ask_variables_on_launch`:  (boolean, default=`False`) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id, default=``) * `limit`:  (string, default=`""`) * `scm_branch`:  (string, default=`""`) * `ask_inventory_on_launch`:  (boolean, default=`False`) * `ask_scm_branch_on_launch`:  (boolean, default=`False`) * `ask_limit_on_launch`:  (boolean, default=`False`) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id, default=``) * `ask_labels_on_launch`:  (boolean, default=`False`) * `ask_skip_tags_on_launch`:  (boolean, default=`False`) * `ask_tags_on_launch`:  (boolean, default=`False`) * `skip_tags`:  (string, default=`""`) * `job_tags`:  (string, default=`""`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Workflow Job Template: Make a DELETE request to this resource to delete this workflow job template.
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesPartialUpdate
     * @summary # Retrieve a Workflow Job Template:
     * @request PATCH:/api/{version}/workflow_job_templates/{id}/
     * @secure
     */
    apiWorkflowJobTemplatesPartialUpdate: (
      id: string,
      version: string,
      data: WorkflowJobTemplate,
      params: RequestParams = {}
    ) =>
      this.request<WorkflowJobTemplate, any>({
        path: `/api/${version}/workflow_job_templates/${id}/`,
        method: 'PATCH',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single workflow job template record containing the following fields: * `id`: Database ID for this workflow job template. (integer) * `type`: Data type for this workflow job template. (choice) * `url`: URL for this workflow job template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job template was created. (datetime) * `modified`: Timestamp when this workflow job template was last modified. (datetime) * `name`: Name of this workflow job template. (string) * `description`: Optional description of this workflow job template. (string) * `last_job_run`:  (datetime) * `last_job_failed`:  (boolean) * `next_job_run`:  (datetime) * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled - `never updated`: Never Updated - `ok`: OK - `missing`: Missing - `none`: No External Source - `updating`: Updating * `extra_vars`:  (json) * `organization`: The organization used to determine access to this template. (id) * `survey_enabled`:  (boolean) * `allow_simultaneous`:  (boolean) * `ask_variables_on_launch`:  (boolean) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `limit`:  (string) * `scm_branch`:  (string) * `ask_inventory_on_launch`:  (boolean) * `ask_scm_branch_on_launch`:  (boolean) * `ask_limit_on_launch`:  (boolean) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id) * `ask_labels_on_launch`:  (boolean) * `ask_skip_tags_on_launch`:  (boolean) * `ask_tags_on_launch`:  (boolean) * `skip_tags`:  (string) * `job_tags`:  (string) # Update a Workflow Job Template: Make a PUT or PATCH request to this resource to update this workflow job template.  The following fields may be modified: * `name`: Name of this workflow job template. (string, required) * `description`: Optional description of this workflow job template. (string, default=`""`) * `extra_vars`:  (json, default=``) * `organization`: The organization used to determine access to this template. (id, default=``) * `survey_enabled`:  (boolean, default=`False`) * `allow_simultaneous`:  (boolean, default=`False`) * `ask_variables_on_launch`:  (boolean, default=`False`) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id, default=``) * `limit`:  (string, default=`""`) * `scm_branch`:  (string, default=`""`) * `ask_inventory_on_launch`:  (boolean, default=`False`) * `ask_scm_branch_on_launch`:  (boolean, default=`False`) * `ask_limit_on_launch`:  (boolean, default=`False`) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id, default=``) * `ask_labels_on_launch`:  (boolean, default=`False`) * `ask_skip_tags_on_launch`:  (boolean, default=`False`) * `ask_tags_on_launch`:  (boolean, default=`False`) * `skip_tags`:  (string, default=`""`) * `job_tags`:  (string, default=`""`) For a PUT request, include **all** fields in the request. For a PATCH request, include only the fields that are being modified. # Delete a Workflow Job Template: Make a DELETE request to this resource to delete this workflow job template.
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesDelete
     * @summary # Retrieve a Workflow Job Template:
     * @request DELETE:/api/{version}/workflow_job_templates/{id}/
     * @secure
     */
    apiWorkflowJobTemplatesDelete: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/workflow_job_templates/${id}/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of users. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of users found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more user records. ## Results Each user data structure includes the following fields: * `id`: Database ID for this user. (integer) * `type`: Data type for this user. (choice) * `url`: URL for this user. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this user was created. (datetime) * `modified`: Timestamp when this user was last modified. (datetime) * `username`: Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (string) * `first_name`:  (string) * `last_name`:  (string) * `email`:  (string) * `is_superuser`: Designates that this user has all permissions without explicitly assigning them. (boolean) * `is_system_auditor`:  (boolean) * `ldap_dn`:  (string) * `last_login`:  (datetime) * `external_account`: Set if the account is managed by an external service (field) ## Sorting To specify that users are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=username Prefix the field name with a dash `-` to sort in reverse: ?order_by=-username Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=username,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesAccessListList
     * @summary # List Users:
     * @request GET:/api/{version}/workflow_job_templates/{id}/access_list/
     * @secure
     */
    apiWorkflowJobTemplatesAccessListList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ResourceAccessListElement[]
        },
        any
      >({
        path: `/api/${version}/workflow_job_templates/${id}/access_list/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of activity streams associated with the selected workflow job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of activity streams found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more activity stream records. ## Results Each activity stream data structure includes the following fields: * `id`: Database ID for this activity stream. (integer) * `type`: Data type for this activity stream. (choice) * `url`: URL for this activity stream. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `timestamp`:  (datetime) * `operation`: The action taken with respect to the given object(s). (choice) - `create`: Entity Created - `update`: Entity Updated - `delete`: Entity Deleted - `associate`: Entity Associated with another Entity - `disassociate`: Entity was Disassociated with another Entity * `changes`: A summary of the new and changed values when an object is created, updated, or deleted (json) * `object1`: For create, update, and delete events this is the object type that was affected. For associate and disassociate events this is the object type associated or disassociated with object2. (string) * `object2`: Unpopulated for create, update, and delete events. For associate and disassociate events this is the object type that object1 is being associated with. (string) * `object_association`: When present, shows the field name of the role or relationship that changed. (field) * `action_node`: The cluster node the activity took place on. (string) * `object_type`: When present, shows the model on which the role or relationship was defined. (field) ## Sorting To specify that activity streams are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesActivityStreamList
     * @summary # List Activity Streams for a Workflow Job Template:
     * @request GET:/api/{version}/workflow_job_templates/{id}/activity_stream/
     * @secure
     */
    apiWorkflowJobTemplatesActivityStreamList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ActivityStream[]
        },
        any
      >({
        path: `/api/${version}/workflow_job_templates/${id}/activity_stream/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to determine if the current user has permission to copy the workflow job template and whether any linked templates or prompted fields will be ignored due to permissions problems. The response will include the following fields: * `can_copy`: Flag indicating whether the active user has permission to make a copy of this workflow job template, provides same content as the workflow job template detail view summary_fields.user_capabilities.copy (boolean, read-only) * `can_copy_without_user_input`: Flag indicating if the user should be prompted for confirmation before the copy is executed (boolean, read-only) * `templates_unable_to_copy`: List of node ids of nodes that have a related job template, project, or inventory that the current user lacks permission to use and will be missing in workflow nodes of the copy (array, read-only) * `inventories_unable_to_copy`: List of node ids of nodes that have a related prompted inventory that the current user lacks permission to use and will be missing in workflow nodes of the copy (array, read-only) * `credentials_unable_to_copy`: List of node ids of nodes that have a related prompted credential that the current user lacks permission to use and will be missing in workflow nodes of the copy (array, read-only) Make a POST request to this endpoint to save a copy of this workflow job template. No POST data is accepted for this action. If successful, the response status code will be 201. The response body will contain serialized data about the new workflow job template, which will be similar to the original workflow job template, but with an additional `@` and a timestamp in the name. All workflow nodes and connections in the original will also exist in the copy. The nodes will be missing related resources if the user did not have access to use them.
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesCopyList
     * @summary Copy a Workflow Job Template:
     * @request GET:/api/{version}/workflow_job_templates/{id}/copy/
     * @secure
     */
    apiWorkflowJobTemplatesCopyList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Copy[]
        },
        any
      >({
        path: `/api/${version}/workflow_job_templates/${id}/copy/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to determine if the current user has permission to copy the workflow job template and whether any linked templates or prompted fields will be ignored due to permissions problems. The response will include the following fields: * `can_copy`: Flag indicating whether the active user has permission to make a copy of this workflow job template, provides same content as the workflow job template detail view summary_fields.user_capabilities.copy (boolean, read-only) * `can_copy_without_user_input`: Flag indicating if the user should be prompted for confirmation before the copy is executed (boolean, read-only) * `templates_unable_to_copy`: List of node ids of nodes that have a related job template, project, or inventory that the current user lacks permission to use and will be missing in workflow nodes of the copy (array, read-only) * `inventories_unable_to_copy`: List of node ids of nodes that have a related prompted inventory that the current user lacks permission to use and will be missing in workflow nodes of the copy (array, read-only) * `credentials_unable_to_copy`: List of node ids of nodes that have a related prompted credential that the current user lacks permission to use and will be missing in workflow nodes of the copy (array, read-only) Make a POST request to this endpoint to save a copy of this workflow job template. No POST data is accepted for this action. If successful, the response status code will be 201. The response body will contain serialized data about the new workflow job template, which will be similar to the original workflow job template, but with an additional `@` and a timestamp in the name. All workflow nodes and connections in the original will also exist in the copy. The nodes will be missing related resources if the user did not have access to use them.
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesCopyCreate
     * @summary Copy a Workflow Job Template:
     * @request POST:/api/{version}/workflow_job_templates/{id}/copy/
     * @secure
     */
    apiWorkflowJobTemplatesCopyCreate: (
      id: string,
      version: string,
      data: Copy,
      params: RequestParams = {}
    ) =>
      this.request<Copy, any>({
        path: `/api/${version}/workflow_job_templates/${id}/copy/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesGithubCreate
     * @request POST:/api/{version}/workflow_job_templates/{id}/github/
     * @secure
     */
    apiWorkflowJobTemplatesGithubCreate: (
      id: string,
      version: string,
      params: RequestParams = {}
    ) =>
      this.request<void, any>({
        path: `/api/${version}/workflow_job_templates/${id}/github/`,
        method: 'POST',
        secure: true,
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesGitlabCreate
     * @request POST:/api/{version}/workflow_job_templates/{id}/gitlab/
     * @secure
     */
    apiWorkflowJobTemplatesGitlabCreate: (
      id: string,
      version: string,
      params: RequestParams = {}
    ) =>
      this.request<void, any>({
        path: `/api/${version}/workflow_job_templates/${id}/gitlab/`,
        method: 'POST',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of labels associated with the selected workflow job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of labels found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more label records. ## Results Each label data structure includes the following fields: * `id`: Database ID for this label. (integer) * `type`: Data type for this label. (choice) * `url`: URL for this label. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this label was created. (datetime) * `modified`: Timestamp when this label was last modified. (datetime) * `name`: Name of this label. (string) * `organization`: Organization this label belongs to. (id) ## Sorting To specify that labels are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesLabelsList
     * @summary # List Labels for a Workflow Job Template:
     * @request GET:/api/{version}/workflow_job_templates/{id}/labels/
     * @secure
     */
    apiWorkflowJobTemplatesLabelsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Label[]
        },
        any
      >({
        path: `/api/${version}/workflow_job_templates/${id}/labels/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of labels associated with the selected workflow job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of labels found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more label records. ## Results Each label data structure includes the following fields: * `id`: Database ID for this label. (integer) * `type`: Data type for this label. (choice) * `url`: URL for this label. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this label was created. (datetime) * `modified`: Timestamp when this label was last modified. (datetime) * `name`: Name of this label. (string) * `organization`: Organization this label belongs to. (id) ## Sorting To specify that labels are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesLabelsCreate
     * @summary # List Labels for a Workflow Job Template:
     * @request POST:/api/{version}/workflow_job_templates/{id}/labels/
     * @secure
     */
    apiWorkflowJobTemplatesLabelsCreate: (
      id: string,
      version: string,
      data: Label,
      params: RequestParams = {}
    ) =>
      this.request<Label, any>({
        path: `/api/${version}/workflow_job_templates/${id}/labels/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to determine if the workflow_job_template can be launched and whether any passwords are required to launch the workflow_job_template. The response will include the following fields: * `can_start_without_user_input`: Flag indicating if the workflow_job_template can be launched without user-input (boolean, read-only) * `variables_needed_to_start`: Required variable names required to launch the workflow_job_template (array, read-only) * `survey_enabled`: Flag indicating whether the workflow_job_template has an enabled survey (boolean, read-only) * `extra_vars`: Text which is the `extra_vars` field of this workflow_job_template (text, read-only) * `node_templates_missing`: List of node ids of all nodes that have a null `unified_job_template`, which will cause their branches to stop execution (list, read-only) * `node_prompts_rejected`: List of node ids of all nodes that have specified a field that will be rejected because its  `unified_job_template` does not allow prompting for this field, this will not halt execution of the branch but the field will be ignored (list, read-only) * `workflow_job_template_data`: JSON object listing general information of this workflow_job_template (JSON object, read-only) Make a POST request to this resource to launch the workflow_job_template. If any credential, inventory, project or extra variables (extra_vars) are required, they must be passed via POST data, with extra_vars given as a YAML or JSON string and escaped parentheses. If successful, the response status code will be 201.  If any required passwords are not provided, a 400 status code will be returned.  If the workflow job cannot be launched, a 405 status code will be returned. If the provided credential or inventory are not allowed to be used by the user, then a 403 status code will be returned.
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesLaunchRead
     * @summary Launch a Workflow Job Template:
     * @request GET:/api/{version}/workflow_job_templates/{id}/launch/
     * @secure
     */
    apiWorkflowJobTemplatesLaunchRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<WorkflowJobLaunch, any>({
        path: `/api/${version}/workflow_job_templates/${id}/launch/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to determine if the workflow_job_template can be launched and whether any passwords are required to launch the workflow_job_template. The response will include the following fields: * `can_start_without_user_input`: Flag indicating if the workflow_job_template can be launched without user-input (boolean, read-only) * `variables_needed_to_start`: Required variable names required to launch the workflow_job_template (array, read-only) * `survey_enabled`: Flag indicating whether the workflow_job_template has an enabled survey (boolean, read-only) * `extra_vars`: Text which is the `extra_vars` field of this workflow_job_template (text, read-only) * `node_templates_missing`: List of node ids of all nodes that have a null `unified_job_template`, which will cause their branches to stop execution (list, read-only) * `node_prompts_rejected`: List of node ids of all nodes that have specified a field that will be rejected because its  `unified_job_template` does not allow prompting for this field, this will not halt execution of the branch but the field will be ignored (list, read-only) * `workflow_job_template_data`: JSON object listing general information of this workflow_job_template (JSON object, read-only) Make a POST request to this resource to launch the workflow_job_template. If any credential, inventory, project or extra variables (extra_vars) are required, they must be passed via POST data, with extra_vars given as a YAML or JSON string and escaped parentheses. If successful, the response status code will be 201.  If any required passwords are not provided, a 400 status code will be returned.  If the workflow job cannot be launched, a 405 status code will be returned. If the provided credential or inventory are not allowed to be used by the user, then a 403 status code will be returned.
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesLaunchCreate
     * @summary Launch a Workflow Job Template:
     * @request POST:/api/{version}/workflow_job_templates/{id}/launch/
     * @secure
     */
    apiWorkflowJobTemplatesLaunchCreate: (
      id: string,
      version: string,
      data: WorkflowJobLaunch,
      params: RequestParams = {}
    ) =>
      this.request<WorkflowJobLaunch, any>({
        path: `/api/${version}/workflow_job_templates/${id}/launch/`,
        method: 'POST',
        body: data,
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected workflow job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesNotificationTemplatesApprovalsList
     * @summary # List Notification Templates for a Workflow Job Template:
     * @request GET:/api/{version}/workflow_job_templates/{id}/notification_templates_approvals/
     * @secure
     */
    apiWorkflowJobTemplatesNotificationTemplatesApprovalsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: NotificationTemplate[]
        },
        any
      >({
        path: `/api/${version}/workflow_job_templates/${id}/notification_templates_approvals/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected workflow job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesNotificationTemplatesApprovalsCreate
     * @summary # List Notification Templates for a Workflow Job Template:
     * @request POST:/api/{version}/workflow_job_templates/{id}/notification_templates_approvals/
     * @secure
     */
    apiWorkflowJobTemplatesNotificationTemplatesApprovalsCreate: (
      id: string,
      version: string,
      data: NotificationTemplate,
      params: RequestParams = {}
    ) =>
      this.request<NotificationTemplate, any>({
        path: `/api/${version}/workflow_job_templates/${id}/notification_templates_approvals/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected workflow job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesNotificationTemplatesErrorList
     * @summary # List Notification Templates for a Workflow Job Template:
     * @request GET:/api/{version}/workflow_job_templates/{id}/notification_templates_error/
     * @secure
     */
    apiWorkflowJobTemplatesNotificationTemplatesErrorList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: NotificationTemplate[]
        },
        any
      >({
        path: `/api/${version}/workflow_job_templates/${id}/notification_templates_error/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected workflow job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesNotificationTemplatesErrorCreate
     * @summary # List Notification Templates for a Workflow Job Template:
     * @request POST:/api/{version}/workflow_job_templates/{id}/notification_templates_error/
     * @secure
     */
    apiWorkflowJobTemplatesNotificationTemplatesErrorCreate: (
      id: string,
      version: string,
      data: NotificationTemplate,
      params: RequestParams = {}
    ) =>
      this.request<NotificationTemplate, any>({
        path: `/api/${version}/workflow_job_templates/${id}/notification_templates_error/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected workflow job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesNotificationTemplatesStartedList
     * @summary # List Notification Templates for a Workflow Job Template:
     * @request GET:/api/{version}/workflow_job_templates/{id}/notification_templates_started/
     * @secure
     */
    apiWorkflowJobTemplatesNotificationTemplatesStartedList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: NotificationTemplate[]
        },
        any
      >({
        path: `/api/${version}/workflow_job_templates/${id}/notification_templates_started/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected workflow job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesNotificationTemplatesStartedCreate
     * @summary # List Notification Templates for a Workflow Job Template:
     * @request POST:/api/{version}/workflow_job_templates/{id}/notification_templates_started/
     * @secure
     */
    apiWorkflowJobTemplatesNotificationTemplatesStartedCreate: (
      id: string,
      version: string,
      data: NotificationTemplate,
      params: RequestParams = {}
    ) =>
      this.request<NotificationTemplate, any>({
        path: `/api/${version}/workflow_job_templates/${id}/notification_templates_started/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected workflow job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesNotificationTemplatesSuccessList
     * @summary # List Notification Templates for a Workflow Job Template:
     * @request GET:/api/{version}/workflow_job_templates/{id}/notification_templates_success/
     * @secure
     */
    apiWorkflowJobTemplatesNotificationTemplatesSuccessList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: NotificationTemplate[]
        },
        any
      >({
        path: `/api/${version}/workflow_job_templates/${id}/notification_templates_success/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notification templates associated with the selected workflow job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notification templates found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification template records. ## Results Each notification template data structure includes the following fields: * `id`: Database ID for this notification template. (integer) * `type`: Data type for this notification template. (choice) * `url`: URL for this notification template. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification template was created. (datetime) * `modified`: Timestamp when this notification template was last modified. (datetime) * `name`: Name of this notification template. (string) * `description`: Optional description of this notification template. (string) * `organization`:  (id) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `notification_configuration`:  (json) * `messages`: Optional custom messages for notification template. (json) ## Sorting To specify that notification templates are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesNotificationTemplatesSuccessCreate
     * @summary # List Notification Templates for a Workflow Job Template:
     * @request POST:/api/{version}/workflow_job_templates/{id}/notification_templates_success/
     * @secure
     */
    apiWorkflowJobTemplatesNotificationTemplatesSuccessCreate: (
      id: string,
      version: string,
      data: NotificationTemplate,
      params: RequestParams = {}
    ) =>
      this.request<NotificationTemplate, any>({
        path: `/api/${version}/workflow_job_templates/${id}/notification_templates_success/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of roles associated with the selected workflow job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of roles found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more role records. ## Results Each role data structure includes the following fields: * `id`: Database ID for this role. (integer) * `type`: Data type for this role. (choice) * `url`: URL for this role. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `name`: Name of this role. (field) * `description`: Optional description of this role. (field) ## Sorting To specify that roles are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesObjectRolesList
     * @summary # List Roles for a Workflow Job Template:
     * @request GET:/api/{version}/workflow_job_templates/{id}/object_roles/
     * @secure
     */
    apiWorkflowJobTemplatesObjectRolesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Role[]
        },
        any
      >({
        path: `/api/${version}/workflow_job_templates/${id}/object_roles/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of schedules associated with the selected workflow job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of schedules found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more schedule records. ## Results Each schedule data structure includes the following fields: * `rrule`: A value representing the schedules iCal recurrence rule. (string) * `id`: Database ID for this schedule. (integer) * `type`: Data type for this schedule. (choice) * `url`: URL for this schedule. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this schedule was created. (datetime) * `modified`: Timestamp when this schedule was last modified. (datetime) * `name`: Name of this schedule. (string) * `description`: Optional description of this schedule. (string) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `unified_job_template`:  (id) * `enabled`: Enables processing of this schedule. (boolean) * `dtstart`: The first occurrence of the schedule occurs on or after this time. (datetime) * `dtend`: The last occurrence of the schedule occurs before this time, aftewards the schedule expires. (datetime) * `next_run`: The next time that the scheduled action will run. (datetime) * `timezone`: The timezone this schedule runs in. This field is extracted from the RRULE. If the timezone in the RRULE is a link to another timezone, the link will be reflected in this field. (field) * `until`: The date this schedule will end. This field is computed from the RRULE. If the schedule does not end an emptry string will be returned (field) ## Sorting To specify that schedules are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesSchedulesList
     * @summary # List Schedules for a Workflow Job Template:
     * @request GET:/api/{version}/workflow_job_templates/{id}/schedules/
     * @secure
     */
    apiWorkflowJobTemplatesSchedulesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Schedule[]
        },
        any
      >({
        path: `/api/${version}/workflow_job_templates/${id}/schedules/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of schedules associated with the selected workflow job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of schedules found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more schedule records. ## Results Each schedule data structure includes the following fields: * `rrule`: A value representing the schedules iCal recurrence rule. (string) * `id`: Database ID for this schedule. (integer) * `type`: Data type for this schedule. (choice) * `url`: URL for this schedule. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this schedule was created. (datetime) * `modified`: Timestamp when this schedule was last modified. (datetime) * `name`: Name of this schedule. (string) * `description`: Optional description of this schedule. (string) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `unified_job_template`:  (id) * `enabled`: Enables processing of this schedule. (boolean) * `dtstart`: The first occurrence of the schedule occurs on or after this time. (datetime) * `dtend`: The last occurrence of the schedule occurs before this time, aftewards the schedule expires. (datetime) * `next_run`: The next time that the scheduled action will run. (datetime) * `timezone`: The timezone this schedule runs in. This field is extracted from the RRULE. If the timezone in the RRULE is a link to another timezone, the link will be reflected in this field. (field) * `until`: The date this schedule will end. This field is computed from the RRULE. If the schedule does not end an emptry string will be returned (field) ## Sorting To specify that schedules are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesSchedulesCreate
     * @summary # List Schedules for a Workflow Job Template:
     * @request POST:/api/{version}/workflow_job_templates/{id}/schedules/
     * @secure
     */
    apiWorkflowJobTemplatesSchedulesCreate: (
      id: string,
      version: string,
      data: Schedule,
      params: RequestParams = {}
    ) =>
      this.request<Schedule, any>({
        path: `/api/${version}/workflow_job_templates/${id}/schedules/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Here is an example survey specification: { "name": "Simple Survey", "description": "Description of the simple survey", "spec": [ { "type": "text", "question_name": "example question", "question_description": "What is your favorite color?", "variable": "favorite_color", "required": false, "default": "blue" } ] } `name` and `description` are required elements at the beginning of the survey specification. `spec` must be a list of survey items. Within each survey item `type` must be one of: * text: For survey questions expecting a textual answer * password: For survey questions expecting a password or other sensitive information * integer: For survey questions expecting a whole number answer * float: For survey questions expecting a decimal number * multiplechoice: For survey questions where one option from a list is required * multiselect: For survey questions where multiple items from a presented list can be selected Each item must contain a `question_name` and `question_description` field that describes the survey question itself. The `variable` elements of each survey items represents the key that will be given to the playbook when the workflow job template is launched.  It will contain the value as a result of the survey. Here is a more comprehensive example showing the various question types and their acceptable parameters: { "name": "Simple", "description": "Description", "spec": [ { "type": "text", "question_name": "cantbeshort", "question_description": "What is a long answer", "variable": "long_answer", "choices": "", "min": 5, "max": "", "required": false, "default": "Leeloo Minai Lekarariba-Laminai-Tchai Ekbat De Sebat" }, { "type": "text", "question_name": "cantbelong", "question_description": "What is a short answer", "variable": "short_answer", "choices": "", "min": "", "max": 7, "required": false, "default": "leeloo" }, { "type": "text", "question_name": "reqd", "question_description": "I should be required", "variable": "reqd_answer", "choices": "", "min": "", "max": "", "required": true, "default": "NOT OPTIONAL" }, { "type": "multiplechoice", "question_name": "achoice", "question_description": "Need one of these", "variable": "single_choice", "choices": ["one", "two"], "min": "", "max": "", "required": false, "default": "one" }, { "type": "multiselect", "question_name": "mchoice", "question_description": "Can have multiples of these", "variable": "multi_choice", "choices": ["one", "two", "three"], "min": "", "max": "", "required": false, "default": "one\nthree" }, { "type": "integer", "question_name": "integerchoice", "question_description": "I need an int here", "variable": "int_answer", "choices": "", "min": 1, "max": 5, "required": false, "default": "" }, { "type": "float", "question_name": "float", "question_description": "I need a float here", "variable": "float_answer", "choices": "", "min": 2, "max": 5, "required": false, "default": "" } ] }
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesSurveySpecList
     * @summary POST requests to this resource should include the full specification for a Workflow Job Template's Survey
     * @request GET:/api/{version}/workflow_job_templates/{id}/survey_spec/
     * @secure
     */
    apiWorkflowJobTemplatesSurveySpecList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Empty[]
        },
        any
      >({
        path: `/api/${version}/workflow_job_templates/${id}/survey_spec/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Here is an example survey specification: { "name": "Simple Survey", "description": "Description of the simple survey", "spec": [ { "type": "text", "question_name": "example question", "question_description": "What is your favorite color?", "variable": "favorite_color", "required": false, "default": "blue" } ] } `name` and `description` are required elements at the beginning of the survey specification. `spec` must be a list of survey items. Within each survey item `type` must be one of: * text: For survey questions expecting a textual answer * password: For survey questions expecting a password or other sensitive information * integer: For survey questions expecting a whole number answer * float: For survey questions expecting a decimal number * multiplechoice: For survey questions where one option from a list is required * multiselect: For survey questions where multiple items from a presented list can be selected Each item must contain a `question_name` and `question_description` field that describes the survey question itself. The `variable` elements of each survey items represents the key that will be given to the playbook when the workflow job template is launched.  It will contain the value as a result of the survey. Here is a more comprehensive example showing the various question types and their acceptable parameters: { "name": "Simple", "description": "Description", "spec": [ { "type": "text", "question_name": "cantbeshort", "question_description": "What is a long answer", "variable": "long_answer", "choices": "", "min": 5, "max": "", "required": false, "default": "Leeloo Minai Lekarariba-Laminai-Tchai Ekbat De Sebat" }, { "type": "text", "question_name": "cantbelong", "question_description": "What is a short answer", "variable": "short_answer", "choices": "", "min": "", "max": 7, "required": false, "default": "leeloo" }, { "type": "text", "question_name": "reqd", "question_description": "I should be required", "variable": "reqd_answer", "choices": "", "min": "", "max": "", "required": true, "default": "NOT OPTIONAL" }, { "type": "multiplechoice", "question_name": "achoice", "question_description": "Need one of these", "variable": "single_choice", "choices": ["one", "two"], "min": "", "max": "", "required": false, "default": "one" }, { "type": "multiselect", "question_name": "mchoice", "question_description": "Can have multiples of these", "variable": "multi_choice", "choices": ["one", "two", "three"], "min": "", "max": "", "required": false, "default": "one\nthree" }, { "type": "integer", "question_name": "integerchoice", "question_description": "I need an int here", "variable": "int_answer", "choices": "", "min": 1, "max": 5, "required": false, "default": "" }, { "type": "float", "question_name": "float", "question_description": "I need a float here", "variable": "float_answer", "choices": "", "min": 2, "max": 5, "required": false, "default": "" } ] }
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesSurveySpecCreate
     * @summary POST requests to this resource should include the full specification for a Workflow Job Template's Survey
     * @request POST:/api/{version}/workflow_job_templates/{id}/survey_spec/
     * @secure
     */
    apiWorkflowJobTemplatesSurveySpecCreate: (
      id: string,
      version: string,
      data: Empty,
      params: RequestParams = {}
    ) =>
      this.request<Empty, any>({
        path: `/api/${version}/workflow_job_templates/${id}/survey_spec/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Here is an example survey specification: { "name": "Simple Survey", "description": "Description of the simple survey", "spec": [ { "type": "text", "question_name": "example question", "question_description": "What is your favorite color?", "variable": "favorite_color", "required": false, "default": "blue" } ] } `name` and `description` are required elements at the beginning of the survey specification. `spec` must be a list of survey items. Within each survey item `type` must be one of: * text: For survey questions expecting a textual answer * password: For survey questions expecting a password or other sensitive information * integer: For survey questions expecting a whole number answer * float: For survey questions expecting a decimal number * multiplechoice: For survey questions where one option from a list is required * multiselect: For survey questions where multiple items from a presented list can be selected Each item must contain a `question_name` and `question_description` field that describes the survey question itself. The `variable` elements of each survey items represents the key that will be given to the playbook when the workflow job template is launched.  It will contain the value as a result of the survey. Here is a more comprehensive example showing the various question types and their acceptable parameters: { "name": "Simple", "description": "Description", "spec": [ { "type": "text", "question_name": "cantbeshort", "question_description": "What is a long answer", "variable": "long_answer", "choices": "", "min": 5, "max": "", "required": false, "default": "Leeloo Minai Lekarariba-Laminai-Tchai Ekbat De Sebat" }, { "type": "text", "question_name": "cantbelong", "question_description": "What is a short answer", "variable": "short_answer", "choices": "", "min": "", "max": 7, "required": false, "default": "leeloo" }, { "type": "text", "question_name": "reqd", "question_description": "I should be required", "variable": "reqd_answer", "choices": "", "min": "", "max": "", "required": true, "default": "NOT OPTIONAL" }, { "type": "multiplechoice", "question_name": "achoice", "question_description": "Need one of these", "variable": "single_choice", "choices": ["one", "two"], "min": "", "max": "", "required": false, "default": "one" }, { "type": "multiselect", "question_name": "mchoice", "question_description": "Can have multiples of these", "variable": "multi_choice", "choices": ["one", "two", "three"], "min": "", "max": "", "required": false, "default": "one\nthree" }, { "type": "integer", "question_name": "integerchoice", "question_description": "I need an int here", "variable": "int_answer", "choices": "", "min": 1, "max": 5, "required": false, "default": "" }, { "type": "float", "question_name": "float", "question_description": "I need a float here", "variable": "float_answer", "choices": "", "min": 2, "max": 5, "required": false, "default": "" } ] }
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesSurveySpecDelete
     * @summary POST requests to this resource should include the full specification for a Workflow Job Template's Survey
     * @request DELETE:/api/{version}/workflow_job_templates/{id}/survey_spec/
     * @secure
     */
    apiWorkflowJobTemplatesSurveySpecDelete: (
      id: string,
      version: string,
      params: RequestParams = {}
    ) =>
      this.request<void, any>({
        path: `/api/${version}/workflow_job_templates/${id}/survey_spec/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesWebhookKeyList
     * @request GET:/api/{version}/workflow_job_templates/{id}/webhook_key/
     * @secure
     */
    apiWorkflowJobTemplatesWebhookKeyList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Empty[]
        },
        any
      >({
        path: `/api/${version}/workflow_job_templates/${id}/webhook_key/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * No description
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesWebhookKeyCreate
     * @request POST:/api/{version}/workflow_job_templates/{id}/webhook_key/
     * @secure
     */
    apiWorkflowJobTemplatesWebhookKeyCreate: (
      id: string,
      version: string,
      data: Empty,
      params: RequestParams = {}
    ) =>
      this.request<Empty, any>({
        path: `/api/${version}/workflow_job_templates/${id}/webhook_key/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of workflow jobs associated with the selected workflow job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of workflow jobs found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more workflow job records. ## Results Each workflow job data structure includes the following fields: * `id`: Database ID for this workflow job. (integer) * `type`: Data type for this workflow job. (choice) * `url`: URL for this workflow job. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job was created. (datetime) * `modified`: Timestamp when this workflow job was last modified. (datetime) * `name`: Name of this workflow job. (string) * `description`: Optional description of this workflow job. (string) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `workflow_job_template`:  (id) * `extra_vars`:  (json) * `allow_simultaneous`:  (boolean) * `job_template`: If automatically created for a sliced job run, the job template the workflow job was created from. (id) * `is_sliced_job`:  (boolean) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `limit`:  (string) * `scm_branch`:  (string) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id) * `webhook_guid`: Unique identifier of the event that triggered this webhook (string) * `skip_tags`:  (string) * `job_tags`:  (string) ## Sorting To specify that workflow jobs are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesWorkflowJobsList
     * @summary # List Workflow Jobs for a Workflow Job Template:
     * @request GET:/api/{version}/workflow_job_templates/{id}/workflow_jobs/
     * @secure
     */
    apiWorkflowJobTemplatesWorkflowJobsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: WorkflowJobList[]
        },
        any
      >({
        path: `/api/${version}/workflow_job_templates/${id}/workflow_jobs/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Workflow nodes reference templates to execute and define the ordering in which to execute them. After a job in this workflow finishes, the subsequent actions are to: - run nodes contained in "failure_nodes" or "always_nodes" if job failed - run nodes contained in "success_nodes" or "always_nodes" if job succeeded The workflow job is marked as `successful` if all of the jobs running as a part of the workflow job have completed, and the workflow job has not been canceled. Even if a job within the workflow has failed, the workflow job will not be marked as failed. # List Workflow Job Template Nodes for a Workflow Job Template: Make a GET request to this resource to retrieve a list of workflow job template nodes associated with the selected workflow job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of workflow job template nodes found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more workflow job template node records. ## Results Each workflow job template node data structure includes the following fields: * `id`: Database ID for this workflow job template node. (integer) * `type`: Data type for this workflow job template node. (choice) * `url`: URL for this workflow job template node. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job template node was created. (datetime) * `modified`: Timestamp when this workflow job template node was last modified. (datetime) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `workflow_job_template`:  (id) * `unified_job_template`:  (id) * `success_nodes`:  (field) * `failure_nodes`:  (field) * `always_nodes`:  (field) * `all_parents_must_converge`: If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node (boolean) * `identifier`: An identifier for this node that is unique within its workflow. It is copied to workflow job nodes corresponding to this node. (string) ## Sorting To specify that workflow job template nodes are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesWorkflowNodesList
     * @summary # Workflow Job Template Workflow Node List
     * @request GET:/api/{version}/workflow_job_templates/{id}/workflow_nodes/
     * @secure
     */
    apiWorkflowJobTemplatesWorkflowNodesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: WorkflowJobTemplateNode[]
        },
        any
      >({
        path: `/api/${version}/workflow_job_templates/${id}/workflow_nodes/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Workflow nodes reference templates to execute and define the ordering in which to execute them. After a job in this workflow finishes, the subsequent actions are to: - run nodes contained in "failure_nodes" or "always_nodes" if job failed - run nodes contained in "success_nodes" or "always_nodes" if job succeeded The workflow job is marked as `successful` if all of the jobs running as a part of the workflow job have completed, and the workflow job has not been canceled. Even if a job within the workflow has failed, the workflow job will not be marked as failed. # List Workflow Job Template Nodes for a Workflow Job Template: Make a GET request to this resource to retrieve a list of workflow job template nodes associated with the selected workflow job template. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of workflow job template nodes found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more workflow job template node records. ## Results Each workflow job template node data structure includes the following fields: * `id`: Database ID for this workflow job template node. (integer) * `type`: Data type for this workflow job template node. (choice) * `url`: URL for this workflow job template node. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job template node was created. (datetime) * `modified`: Timestamp when this workflow job template node was last modified. (datetime) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `workflow_job_template`:  (id) * `unified_job_template`:  (id) * `success_nodes`:  (field) * `failure_nodes`:  (field) * `always_nodes`:  (field) * `all_parents_must_converge`: If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node (boolean) * `identifier`: An identifier for this node that is unique within its workflow. It is copied to workflow job nodes corresponding to this node. (string) ## Sorting To specify that workflow job template nodes are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobTemplatesWorkflowNodesCreate
     * @summary # Workflow Job Template Workflow Node List
     * @request POST:/api/{version}/workflow_job_templates/{id}/workflow_nodes/
     * @secure
     */
    apiWorkflowJobTemplatesWorkflowNodesCreate: (
      id: string,
      version: string,
      data: WorkflowJobTemplateNode,
      params: RequestParams = {}
    ) =>
      this.request<WorkflowJobTemplateNode, any>({
        path: `/api/${version}/workflow_job_templates/${id}/workflow_nodes/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve the list of workflow jobs. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of workflow jobs found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more workflow job records. ## Results Each workflow job data structure includes the following fields: * `id`: Database ID for this workflow job. (integer) * `type`: Data type for this workflow job. (choice) * `url`: URL for this workflow job. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job was created. (datetime) * `modified`: Timestamp when this workflow job was last modified. (datetime) * `name`: Name of this workflow job. (string) * `description`: Optional description of this workflow job. (string) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `workflow_job_template`:  (id) * `extra_vars`:  (json) * `allow_simultaneous`:  (boolean) * `job_template`: If automatically created for a sliced job run, the job template the workflow job was created from. (id) * `is_sliced_job`:  (boolean) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `limit`:  (string) * `scm_branch`:  (string) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id) * `webhook_guid`: Unique identifier of the event that triggered this webhook (string) * `skip_tags`:  (string) * `job_tags`:  (string) ## Sorting To specify that workflow jobs are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobsList
     * @summary # List Workflow Jobs:
     * @request GET:/api/{version}/workflow_jobs/
     * @secure
     */
    apiWorkflowJobsList: (
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: WorkflowJobList[]
        },
        any
      >({
        path: `/api/${version}/workflow_jobs/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single workflow job record containing the following fields: * `id`: Database ID for this workflow job. (integer) * `type`: Data type for this workflow job. (choice) * `url`: URL for this workflow job. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job was created. (datetime) * `modified`: Timestamp when this workflow job was last modified. (datetime) * `name`: Name of this workflow job. (string) * `description`: Optional description of this workflow job. (string) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_args`:  (string) * `job_cwd`:  (string) * `job_env`:  (json) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `result_traceback`:  (string) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `workflow_job_template`:  (id) * `extra_vars`:  (json) * `allow_simultaneous`:  (boolean) * `job_template`: If automatically created for a sliced job run, the job template the workflow job was created from. (id) * `is_sliced_job`:  (boolean) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `limit`:  (string) * `scm_branch`:  (string) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id) * `webhook_guid`: Unique identifier of the event that triggered this webhook (string) * `skip_tags`:  (string) * `job_tags`:  (string) # Delete a Workflow Job: Make a DELETE request to this resource to delete this workflow job.
     *
     * @tags api
     * @name ApiWorkflowJobsRead
     * @summary # Retrieve a Workflow Job:
     * @request GET:/api/{version}/workflow_jobs/{id}/
     * @secure
     */
    apiWorkflowJobsRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<WorkflowJob, any>({
        path: `/api/${version}/workflow_jobs/${id}/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make GET request to this resource to retrieve a single workflow job record containing the following fields: * `id`: Database ID for this workflow job. (integer) * `type`: Data type for this workflow job. (choice) * `url`: URL for this workflow job. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job was created. (datetime) * `modified`: Timestamp when this workflow job was last modified. (datetime) * `name`: Name of this workflow job. (string) * `description`: Optional description of this workflow job. (string) * `unified_job_template`:  (id) * `launch_type`:  (choice) - `manual`: Manual - `relaunch`: Relaunch - `callback`: Callback - `scheduled`: Scheduled - `dependency`: Dependency - `workflow`: Workflow - `webhook`: Webhook - `sync`: Sync - `scm`: SCM Update * `status`:  (choice) - `new`: New - `pending`: Pending - `waiting`: Waiting - `running`: Running - `successful`: Successful - `failed`: Failed - `error`: Error - `canceled`: Canceled * `failed`:  (boolean) * `started`: The date and time the job was queued for starting. (datetime) * `finished`: The date and time the job finished execution. (datetime) * `canceled_on`: The date and time when the cancel request was sent. (datetime) * `elapsed`: Elapsed time in seconds that the job ran. (decimal) * `job_args`:  (string) * `job_cwd`:  (string) * `job_env`:  (json) * `job_explanation`: A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout (string) * `result_traceback`:  (string) * `launched_by`:  (field) * `work_unit_id`: The Receptor work unit ID associated with this job. (string) * `workflow_job_template`:  (id) * `extra_vars`:  (json) * `allow_simultaneous`:  (boolean) * `job_template`: If automatically created for a sliced job run, the job template the workflow job was created from. (id) * `is_sliced_job`:  (boolean) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `limit`:  (string) * `scm_branch`:  (string) * `webhook_service`: Service that webhook requests will be accepted from (choice) - `""`: --------- - `github`: GitHub - `gitlab`: GitLab * `webhook_credential`: Personal Access Token for posting back the status to the service API (id) * `webhook_guid`: Unique identifier of the event that triggered this webhook (string) * `skip_tags`:  (string) * `job_tags`:  (string) # Delete a Workflow Job: Make a DELETE request to this resource to delete this workflow job.
     *
     * @tags api
     * @name ApiWorkflowJobsDelete
     * @summary # Retrieve a Workflow Job:
     * @request DELETE:/api/{version}/workflow_jobs/{id}/
     * @secure
     */
    apiWorkflowJobsDelete: (id: string, version: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/api/${version}/workflow_jobs/${id}/`,
        method: 'DELETE',
        secure: true,
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of activity streams associated with the selected workflow job. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of activity streams found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more activity stream records. ## Results Each activity stream data structure includes the following fields: * `id`: Database ID for this activity stream. (integer) * `type`: Data type for this activity stream. (choice) * `url`: URL for this activity stream. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `timestamp`:  (datetime) * `operation`: The action taken with respect to the given object(s). (choice) - `create`: Entity Created - `update`: Entity Updated - `delete`: Entity Deleted - `associate`: Entity Associated with another Entity - `disassociate`: Entity was Disassociated with another Entity * `changes`: A summary of the new and changed values when an object is created, updated, or deleted (json) * `object1`: For create, update, and delete events this is the object type that was affected. For associate and disassociate events this is the object type associated or disassociated with object2. (string) * `object2`: Unpopulated for create, update, and delete events. For associate and disassociate events this is the object type that object1 is being associated with. (string) * `object_association`: When present, shows the field name of the role or relationship that changed. (field) * `action_node`: The cluster node the activity took place on. (string) * `object_type`: When present, shows the model on which the role or relationship was defined. (field) ## Sorting To specify that activity streams are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobsActivityStreamList
     * @summary # List Activity Streams for a Workflow Job:
     * @request GET:/api/{version}/workflow_jobs/{id}/activity_stream/
     * @secure
     */
    apiWorkflowJobsActivityStreamList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: ActivityStream[]
        },
        any
      >({
        path: `/api/${version}/workflow_jobs/${id}/activity_stream/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to determine if the workflow job can be canceled. The response will include the following field: * `can_cancel`: Indicates whether this workflow job is in a state that can be canceled (boolean, read-only) Make a POST request to this endpoint to submit a request to cancel a pending or running workflow job.  The response status code will be 202 if the request to cancel was successfully submitted, or 405 if the workflow job cannot be canceled.
     *
     * @tags api
     * @name ApiWorkflowJobsCancelRead
     * @summary # Cancel Workflow Job
     * @request GET:/api/{version}/workflow_jobs/{id}/cancel/
     * @secure
     */
    apiWorkflowJobsCancelRead: (id: string, version: string, params: RequestParams = {}) =>
      this.request<WorkflowJobCancel, any>({
        path: `/api/${version}/workflow_jobs/${id}/cancel/`,
        method: 'GET',
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to determine if the workflow job can be canceled. The response will include the following field: * `can_cancel`: Indicates whether this workflow job is in a state that can be canceled (boolean, read-only) Make a POST request to this endpoint to submit a request to cancel a pending or running workflow job.  The response status code will be 202 if the request to cancel was successfully submitted, or 405 if the workflow job cannot be canceled.
     *
     * @tags api
     * @name ApiWorkflowJobsCancelCreate
     * @summary # Cancel Workflow Job
     * @request POST:/api/{version}/workflow_jobs/{id}/cancel/
     * @secure
     */
    apiWorkflowJobsCancelCreate: (
      id: string,
      version: string,
      data: WorkflowJobCancel,
      params: RequestParams = {}
    ) =>
      this.request<WorkflowJobCancel, any>({
        path: `/api/${version}/workflow_jobs/${id}/cancel/`,
        method: 'POST',
        body: data,
        secure: true,
        type: ContentType.Json,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of labels associated with the selected workflow job. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of labels found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more label records. ## Results Each label data structure includes the following fields: * `id`: Database ID for this label. (integer) * `type`: Data type for this label. (choice) * `url`: URL for this label. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this label was created. (datetime) * `modified`: Timestamp when this label was last modified. (datetime) * `name`: Name of this label. (string) * `organization`: Organization this label belongs to. (id) ## Sorting To specify that labels are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobsLabelsList
     * @summary # List Labels for a Workflow Job:
     * @request GET:/api/{version}/workflow_jobs/{id}/labels/
     * @secure
     */
    apiWorkflowJobsLabelsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Label[]
        },
        any
      >({
        path: `/api/${version}/workflow_jobs/${id}/labels/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of notifications associated with the selected workflow job. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of notifications found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more notification records. ## Results Each notification data structure includes the following fields: * `id`: Database ID for this notification. (integer) * `type`: Data type for this notification. (choice) * `url`: URL for this notification. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this notification was created. (datetime) * `modified`: Timestamp when this notification was last modified. (datetime) * `notification_template`:  (id) * `error`:  (string) * `status`:  (choice) - `pending`: Pending - `successful`: Successful - `failed`: Failed * `notifications_sent`:  (integer) * `notification_type`:  (choice) - `email`: Email - `grafana`: Grafana - `irc`: IRC - `mattermost`: Mattermost - `pagerduty`: Pagerduty - `rocketchat`: Rocket.Chat - `slack`: Slack - `twilio`: Twilio - `webhook`: Webhook * `recipients`:  (string) * `subject`:  (string) * `body`: Notification body (json) ## Sorting To specify that notifications are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobsNotificationsList
     * @summary # List Notifications for a Workflow Job:
     * @request GET:/api/{version}/workflow_jobs/{id}/notifications/
     * @secure
     */
    apiWorkflowJobsNotificationsList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Notification[]
        },
        any
      >({
        path: `/api/${version}/workflow_jobs/${id}/notifications/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a POST request to this endpoint to launch a workflow job identical to the parent workflow job. This will spawn jobs, project updates, or inventory updates based on the unified job templates referenced in the workflow nodes in the workflow job. No POST data is accepted for this action. If successful, the response status code will be 201 and serialized data of the new workflow job will be returned.
     *
     * @tags api
     * @name ApiWorkflowJobsRelaunchList
     * @summary Relaunch a workflow job:
     * @request GET:/api/{version}/workflow_jobs/{id}/relaunch/
     * @secure
     */
    apiWorkflowJobsRelaunchList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: Empty[]
        },
        any
      >({
        path: `/api/${version}/workflow_jobs/${id}/relaunch/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a POST request to this endpoint to launch a workflow job identical to the parent workflow job. This will spawn jobs, project updates, or inventory updates based on the unified job templates referenced in the workflow nodes in the workflow job. No POST data is accepted for this action. If successful, the response status code will be 201 and serialized data of the new workflow job will be returned.
     *
     * @tags api
     * @name ApiWorkflowJobsRelaunchCreate
     * @summary Relaunch a workflow job:
     * @request POST:/api/{version}/workflow_jobs/{id}/relaunch/
     * @secure
     */
    apiWorkflowJobsRelaunchCreate: (
      id: string,
      version: string,
      data: Empty,
      params: RequestParams = {}
    ) =>
      this.request<Empty, any>({
        path: `/api/${version}/workflow_jobs/${id}/relaunch/`,
        method: 'POST',
        body: data,
        secure: true,
        format: 'json',
        ...params,
      }),

    /**
     * @description Make a GET request to this resource to retrieve a list of workflow job nodes associated with the selected workflow job. The resulting data structure contains: { "count": 99, "next": null, "previous": null, "results": [ ... ] } The `count` field indicates the total number of workflow job nodes found for the given query.  The `next` and `previous` fields provides links to additional results if there are more than will fit on a single page.  The `results` list contains zero or more workflow job node records. ## Results Each workflow job node data structure includes the following fields: * `id`: Database ID for this workflow job node. (integer) * `type`: Data type for this workflow job node. (choice) * `url`: URL for this workflow job node. (string) * `related`: Data structure with URLs of related resources. (object) * `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object) * `created`: Timestamp when this workflow job node was created. (datetime) * `modified`: Timestamp when this workflow job node was last modified. (datetime) * `extra_data`:  (json) * `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id) * `scm_branch`:  (string) * `job_type`:  (choice) - `None`: --------- - `""`: --------- - `run`: Run - `check`: Check * `job_tags`:  (string) * `skip_tags`:  (string) * `limit`:  (string) * `diff_mode`:  (boolean) * `verbosity`:  (choice) - `None`: --------- - `0`: 0 (Normal) - `1`: 1 (Verbose) - `2`: 2 (More Verbose) - `3`: 3 (Debug) - `4`: 4 (Connection Debug) - `5`: 5 (WinRM Debug) * `execution_environment`: The container image to be used for execution. (id) * `forks`:  (integer) * `job_slice_count`:  (integer) * `timeout`:  (integer) * `job`:  (id) * `workflow_job`:  (id) * `unified_job_template`:  (id) * `success_nodes`:  (field) * `failure_nodes`:  (field) * `always_nodes`:  (field) * `all_parents_must_converge`: If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node (boolean) * `do_not_run`: Indicates that a job will not be created when True. Workflow runtime semantics will mark this True if the node is in a path that will decidedly not be ran. A value of False means the node may not run. (boolean) * `identifier`: An identifier coresponding to the workflow job template node that this node was created from. (string) ## Sorting To specify that workflow job nodes are returned in a particular order, use the `order_by` query string parameter on the GET request. ?order_by=name Prefix the field name with a dash `-` to sort in reverse: ?order_by=-name Multiple sorting fields may be specified by separating the field names with a comma `,`: ?order_by=name,some_other_field ## Pagination Use the `page_size` query string parameter to change the number of results returned for each request.  Use the `page` query string parameter to retrieve a particular page of results. ?page_size=100&page=2 The `previous` and `next` links returned with the results will set these query string parameters automatically. ## Searching Use the `search` query string parameter to perform a case-insensitive search within all designated text fields of a model. ?search=findme (_Added in Ansible Tower 3.1.0_) Search across related fields: ?related__search=findme
     *
     * @tags api
     * @name ApiWorkflowJobsWorkflowNodesList
     * @summary # List Workflow Job Nodes for a Workflow Job:
     * @request GET:/api/{version}/workflow_jobs/{id}/workflow_nodes/
     * @secure
     */
    apiWorkflowJobsWorkflowNodesList: (
      id: string,
      version: string,
      query?: {
        /** A search term. */
        search?: string
        /** A page number within the paginated result set. */
        page?: number
        /** Number of results to return per page. */
        page_size?: number
      },
      params: RequestParams = {}
    ) =>
      this.request<
        {
          count: number
          /** @format uri */
          next?: string | null
          /** @format uri */
          previous?: string | null
          results: WorkflowJobNodeList[]
        },
        any
      >({
        path: `/api/${version}/workflow_jobs/${id}/workflow_nodes/`,
        method: 'GET',
        query: query,
        secure: true,
        format: 'json',
        ...params,
      }),
  }
}
