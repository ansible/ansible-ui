name: Main

on:
  push:
    branches:
      - main

concurrency: main

jobs:
  tag:
    name: Tag Release
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.version.outputs.VERSION }}
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - id: version
        run: |
          VERSION=`npm version patch --no-git-tag-version`
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: ${{ env.VERSION }} [skip ci]
          tagging_message: ${{ env.VERSION }}

  publish-framework:
    name: Publish Framework
    needs: tag
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.tag.outputs.VERSION }}

      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: PreCache
        run: cat package-lock.json | jq '.version = "0.0.0"' | jq '.packages."".version = "0.0.0"' > package-lock-copy.json

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ./node_modules
            /home/runner/.cache/Cypress
          key: modules-${{ hashFiles('package-lock-copy.json') }}

      - name: PostCache
        run: rm package-lock-copy.json

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Publish Framework
        run: |
          ./node_modules/.bin/vite build
          ./node_modules/.bin/tsc --emitDeclarationOnly
          cp -f LICENSE.md publish
          cp -fR build/framework/ publish/
          cp -f framework/README.md publish/README.md
          cd publish
          VERSION=`cat ../package.json | jq -r '.version'` && cat ../framework/package.json | jq --arg version $VERSION '. +{version: $version}' > package.json
          npm publish --verbose
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  docker:
    name: Docker Build and Push
    needs: tag
    runs-on: ubuntu-latest
    timeout-minutes: 10

    env:
      REGISTRY: quay.io
      IMAGE_NAME: ${{ github.repository }}

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.tag.outputs.VERSION }}

      - name: Login to Quay
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}

      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: PreCache
        run: npm version 0.0.0 --no-git-tag-version

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: dependencies.tar
          key: dependencies-${{ hashFiles('package-lock.json') }}

      - if: steps.cache.outputs.cache-hit == 'true'
        run: |
          docker load --input dependencies.tar
          rm -f dependencies.tar

      - if: steps.cache.outputs.cache-hit != 'true'
        run: |
          DOCKER_BUILDKIT=1 docker build --build-arg BUILDKIT_INLINE_CACHE=1 --target dependencies --tag dependencies .
          docker save --output dependencies.tar dependencies

      - run: DOCKER_BUILDKIT=1 docker build --cache-from dependencies --tag quay.io/ansible/ansible-ui:latest --tag quay.io/ansible/ansible-ui:${{ needs.tag.outputs.VERSION }} .

      - run: docker push quay.io/ansible/ansible-ui --all-tags
