name: On Pull Request - Run Tests

on:
  pull_request:

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  packages:
    name: Packages
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      awx: ${{ steps.changed-awx.outputs.changed == 'true' }}
      hub: ${{ steps.changed-hub.outputs.changed == 'true' }}
      eda: ${{ steps.changed-eda.outputs.changed == 'true' }}
      afw: ${{ steps.changed-afw.outputs.changed == 'true' }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 100
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: PreCache
        run: npm version 0.0.0 --no-git-tag-version
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ./node_modules
            /home/runner/.cache/Cypress
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - uses: marceloprado/has-changed-path@v1.0.1
        id: changed-awx
        with:
          paths: frontend/awx frontend/common cypress/e2e/awx framework cypress/support
      - uses: marceloprado/has-changed-path@v1.0.1
        id: changed-hub
        with:
          paths: frontend/hub frontend/common cypress/e2e/hub framework cypress/support
      - uses: marceloprado/has-changed-path@v1.0.1
        id: changed-eda
        with:
          paths: frontend/eda frontend/common cypress/e2e/eda framework cypress/support
      - uses: marceloprado/has-changed-path@v1.0.1
        id: changed-afw
        with:
          paths: framework

  checks:
    name: ESLint - Prettier - TSC
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: packages
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: PreCache
        run: npm version 0.0.0 --no-git-tag-version
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ./node_modules
            /home/runner/.cache/Cypress
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - run: npm run checks

  awx-cct:
    name: AWX CCT
    runs-on: ubuntu-latest
    timeout-minutes: 14
    needs: packages
    strategy:
      fail-fast: false
      matrix:
        containers: [1, 2]
    steps:
      - name: Checkout
        if: needs.packages.outputs.awx == 'true'
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Setup Node
        if: needs.packages.outputs.awx == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: PreCache
        if: needs.packages.outputs.awx == 'true'
        run: npm version 0.0.0 --no-git-tag-version
      - name: Cache dependencies
        if: needs.packages.outputs.awx == 'true'
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ./node_modules
            /home/runner/.cache/Cypress
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' && needs.packages.outputs.awx == 'true'
        run: npm ci
      - name: Cypress
        if: needs.packages.outputs.awx == 'true'
        uses: cypress-io/github-action@v5
        with:
          component: true
          install: false
          record: true
          parallel: true
          auto-cancel-after-failures: 1
          config-file: cypress.awx.config.ts
        env:
          CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_AUI_AWX_CCT_PROJECT_ID }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_AUI_AWX_CCT_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  eda-cct:
    name: EDA CCT
    runs-on: ubuntu-latest
    timeout-minutes: 14
    needs: packages
    strategy:
      fail-fast: false
      matrix:
        containers: [1]
    steps:
      - name: Checkout
        if: needs.packages.outputs.eda == 'true'
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Setup Node
        if: needs.packages.outputs.eda == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: PreCache
        if: needs.packages.outputs.eda == 'true'
        run: npm version 0.0.0 --no-git-tag-version
      - name: Cache dependencies
        if: needs.packages.outputs.eda == 'true'
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ./node_modules
            /home/runner/.cache/Cypress
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' && needs.packages.outputs.eda == 'true'
        run: npm ci
      - name: Cypress
        if: needs.packages.outputs.eda == 'true'
        uses: cypress-io/github-action@v5
        with:
          component: true
          install: false
          record: true
          parallel: true
          auto-cancel-after-failures: 1
          config-file: cypress.eda.config.ts
        env:
          CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_AUI_EDA_CCT_PROJECT_ID }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_AUI_EDA_CCT_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  hub-cct:
    name: HUB CCT
    runs-on: ubuntu-latest
    timeout-minutes: 14
    needs: packages
    strategy:
      fail-fast: false
      matrix:
        containers: [1]
    steps:
      - name: Checkout
        if: needs.packages.outputs.hub == 'true'
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Setup node
        if: needs.packages.outputs.hub == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: PreCache
        if: needs.packages.outputs.hub == 'true'
        run: npm version 0.0.0 --no-git-tag-version
      - name: Cache dependencies
        if: needs.packages.outputs.hub == 'true'
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ./node_modules
            /home/runner/.cache/Cypress
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' && needs.packages.outputs.hub == 'true'
        run: npm ci
      - name: Cypress
        if: needs.packages.outputs.hub == 'true'
        uses: cypress-io/github-action@v5
        with:
          component: true
          install: false
          record: true
          parallel: true
          auto-cancel-after-failures: 1
          config-file: cypress.hub.config.ts
        env:
          CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_AUI_HUB_CCT_PROJECT_ID }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_AUI_HUB_CCT_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  afw-cct:
    name: AFW CCT
    runs-on: ubuntu-latest
    timeout-minutes: 14
    needs: packages
    strategy:
      fail-fast: false
      matrix:
        containers: [1]
    steps:
      - name: Checkout
        if: needs.packages.outputs.afw == 'true'
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Setup Node
        if: needs.packages.outputs.afw == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: PreCache
        if: needs.packages.outputs.afw == 'true'
        run: npm version 0.0.0 --no-git-tag-version
      - name: Cache dependencies
        if: needs.packages.outputs.afw == 'true'
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ./node_modules
            /home/runner/.cache/Cypress
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' && needs.packages.outputs.afw == 'true'
        run: npm ci
      - name: Cypress
        if: needs.packages.outputs.afw == 'true'
        uses: cypress-io/github-action@v5
        with:
          component: true
          install: false
          record: true
          parallel: true
          auto-cancel-after-failures: 1
          config-file: cypress.afw.config.ts
        env:
          CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_AUI_AFW_CCT_PROJECT_ID }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_AUI_AFW_CCT_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  awx-ui-image:
    name: AWX UI Image
    runs-on: ubuntu-latest
    needs: packages
    timeout-minutes: 10
    outputs:
      awx: ${{ needs.packages.outputs.awx == 'true' }}
    steps:
      - uses: actions/checkout@v3
        if: needs.packages.outputs.awx == 'true'
        with:
          fetch-depth: 1
      - name: PreCache
        if: needs.packages.outputs.awx == 'true'
        run: npm version 0.0.0 --no-git-tag-version
      - name: Cache dependencies
        if: needs.packages.outputs.awx == 'true'
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ./node_modules
            /home/runner/.cache/Cypress
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' && needs.packages.outputs.awx == 'true'
        run: npm ci
      - name: NPM Build
        if: needs.packages.outputs.awx == 'true'
        run: npm run build:awx
      - name: Build Image
        if: needs.packages.outputs.awx == 'true'
        run: npm run docker:build:awx
      - name: Save Image
        if: needs.packages.outputs.awx == 'true'
        run: docker save awx-ui > awx-ui.tar
      - name: Upload Image
        if: needs.packages.outputs.awx == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: awx-ui.tar
          path: awx-ui.tar

  awx-e2e:
    name: AWX E2E
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: awx-ui-image
    strategy:
      fail-fast: false
      matrix:
        containers: [1, 2, 3]
    steps:
      - name: Download container image
        if: needs.awx-ui-image.outputs.awx == 'true'
        uses: actions/download-artifact@v3
        with:
          name: awx-ui.tar
      - name: Load container image
        if: needs.awx-ui-image.outputs.awx == 'true'
        run: docker load --input awx-ui.tar
      - name: Checkout
        if: needs.awx-ui-image.outputs.awx == 'true'
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Setup node
        if: needs.awx-ui-image.outputs.awx == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: PreCache
        if: needs.awx-ui-image.outputs.awx == 'true'
        run: npm version 0.0.0 --no-git-tag-version
      - name: Cache dependencies
        if: needs.awx-ui-image.outputs.awx == 'true'
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ./node_modules
            /home/runner/.cache/Cypress
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' && needs.awx-ui-image.outputs.awx == 'true'
        run: npm ci
      - name: Cypress
        if: needs.awx-ui-image.outputs.awx == 'true'
        uses: cypress-io/github-action@v5
        with:
          install: false
          start: npm run docker:run:awx
          wait-on: 'http://localhost:4101'
          record: true
          parallel: true
          auto-cancel-after-failures: 1
          config-file: cypress.awx.config.ts
        env:
          AWX_HOST: ${{ secrets.AWX_HOST }}
          AWX_PROTOCOL: ${{ secrets.AWX_PROTOCOL }}
          CYPRESS_AWX_SERVER: ${{ secrets.CYPRESS_AWX_SERVER }}
          CYPRESS_AWX_USERNAME: ${{ secrets.CYPRESS_AWX_USERNAME }}
          CYPRESS_AWX_PASSWORD: ${{ secrets.CYPRESS_AWX_PASSWORD }}
          CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_AUI_AWX_E2E_PROJECT_ID }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_AUI_AWX_E2E_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_TLS_REJECT_UNAUTHORIZED: 0

  hub-ui-image:
    name: HUB UI Image
    runs-on: ubuntu-latest
    needs: packages
    timeout-minutes: 10
    outputs:
      hub: ${{ needs.packages.outputs.hub == 'true' }}
    steps:
      - uses: actions/checkout@v3
        if: needs.packages.outputs.hub == 'true'
        with:
          fetch-depth: 1
      - name: PreCache
        if: needs.packages.outputs.hub == 'true'
        run: npm version 0.0.0 --no-git-tag-version
      - name: Cache dependencies
        if: needs.packages.outputs.hub == 'true'
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ./node_modules
            /home/runner/.cache/Cypress
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' && needs.package.outputs.hub == 'true'
        run: npm ci
      - name: NPM Build
        if: needs.packages.outputs.hub == 'true'
        run: npm run build:hub
      - name: Build Image
        if: needs.packages.outputs.hub == 'true'
        run: npm run docker:build:hub
      - name: Save Image
        if: needs.packages.outputs.hub == 'true'
        run: docker save hub-ui > hub-ui.tar
      - name: Upload Image
        if: needs.packages.outputs.hub == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: hub-ui.tar
          path: hub-ui.tar

  hub-e2e:
    name: HUB E2E
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: hub-ui-image
    strategy:
      fail-fast: false
      matrix:
        containers: [1]
    steps:
      - name: Checkout
        if: needs.hub-ui-image.outputs.hub == 'true'
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Download container image
        if: needs.hub-ui-image.outputs.hub == 'true'
        uses: actions/download-artifact@v3
        with:
          name: hub-ui.tar
      - name: Load container image
        if: needs.hub-ui-image.outputs.hub == 'true'
        run: docker load --input hub-ui.tar
      - name: Setup Node
        if: needs.hub-ui-image.outputs.hub == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: PreCache
        if: needs.hub-ui-image.outputs.hub == 'true'
        run: npm version 0.0.0 --no-git-tag-version
      - name: Cache dependencies
        if: needs.hub-ui-image.outputs.hub == 'true'
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ./node_modules
            /home/runner/.cache/Cypress
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' && needs.hub-ui-image.outputs.hub == 'true'
        run: npm ci
      # - name: Cypress
      #   if: needs.hub-ui-image.outputs.hub == 'true'
      #   uses: cypress-io/github-action@v5
      #   with:
      #     install: false
      #     start: npm run docker:run:hub
      #     wait-on: 'https://localhost:4102'
      #     record: true
      #     parallel: true
      # auto-cancel-after-failures: 1
      #     config-file: cypress.hub.config.ts
      #   env:
      #     HUB_HOST: ${{ secrets.HUB_HOST }}
      #     HUB_PROTOCOL: ${{ secrets.HUB_PROTOCOL }}
      #     CYPRESS_HUB_SERVER: http://localhost:5001
      #     CYPRESS_HUB_USERNAME: admin
      #     CYPRESS_HUB_PASSWORD: password
      #     CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_AUI_HUB_E2E_PROJECT_ID }}
      #     CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_AUI_HUB_E2E_RECORD_KEY }}
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     NODE_TLS_REJECT_UNAUTHORIZED: 0

  eda-ui-image:
    name: EDA UI Image
    runs-on: ubuntu-latest
    needs: packages
    timeout-minutes: 10
    outputs:
      eda: ${{ needs.packages.outputs.eda == 'true' }}
    steps:
      - uses: actions/checkout@v3
        if: needs.packages.outputs.eda == 'true'
        with:
          fetch-depth: 1
      - name: PreCache
        if: needs.packages.outputs.eda == 'true'
        run: npm version 0.0.0 --no-git-tag-version
      - name: Cache dependencies
        if: needs.packages.outputs.eda == 'true'
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ./node_modules
            /home/runner/.cache/Cypress
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' && needs.packages.outputs.eda == 'true'
        run: npm ci
      - name: NPM Build
        if: needs.packages.outputs.eda == 'true'
        run: npm run build:eda
      - name: Build Image
        if: needs.packages.outputs.eda == 'true'
        run: npm run docker:build:eda
      - name: Save Image
        if: needs.packages.outputs.eda == 'true'
        run: docker save eda-ui > eda-ui.tar
      - name: Upload Image
        if: needs.packages.outputs.eda == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: eda-ui.tar
          path: eda-ui.tar

  eda-e2e:
    name: EDA E2E
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: eda-ui-image
    strategy:
      fail-fast: false
      matrix:
        containers: [1, 2]
    steps:
      - name: Checkout
        if: needs.eda-ui-image.outputs.eda == 'true'
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Download container image
        if: needs.eda-ui-image.outputs.eda == 'true'
        uses: actions/download-artifact@v3
        with:
          name: eda-ui.tar
      - name: Load container image
        if: needs.eda-ui-image.outputs.eda == 'true'
        run: docker load --input eda-ui.tar
      - name: Setup Node
        if: needs.eda-ui-image.outputs.eda == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: PreCache
        if: needs.eda-ui-image.outputs.eda == 'true'
        run: npm version 0.0.0 --no-git-tag-version
      - name: Cache dependencies
        if: needs.eda-ui-image.outputs.eda == 'true'
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ./node_modules
            /home/runner/.cache/Cypress
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' && needs.eda-ui-image.outputs.eda == 'true'
        run: npm ci
      - name: Cypress
        if: needs.eda-ui-image.outputs.eda == 'true'
        uses: cypress-io/github-action@v5
        with:
          install: false
          start: npm run docker:run:eda
          wait-on: 'http://localhost:4103'
          record: true
          parallel: true
          auto-cancel-after-failures: 1
          config-file: cypress.eda.config.ts
        env:
          EDA_HOST: ${{ secrets.EDA_HOST }}
          EDA_PROTOCOL: ${{ secrets.EDA_PROTOCOL }}
          CYPRESS_AWX_SERVER: ${{ secrets.CYPRESS_AWX_SERVER }}
          CYPRESS_AWX_USERNAME: ${{ secrets.CYPRESS_AWX_USERNAME }}
          CYPRESS_AWX_PASSWORD: ${{ secrets.CYPRESS_AWX_PASSWORD }}
          CYPRESS_EDA_SERVER: ${{ secrets.CYPRESS_EDA_SERVER }}
          CYPRESS_EDA_USERNAME: ${{ secrets.CYPRESS_EDA_USERNAME }}
          CYPRESS_EDA_PASSWORD: ${{ secrets.CYPRESS_EDA_PASSWORD }}
          CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_AUI_EDA_E2E_PROJECT_ID }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_AUI_EDA_E2E_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_TLS_REJECT_UNAUTHORIZED: 0
