{
  "openapi": "3.0.3",
  "info": {
    "title": "Event Driven Ansible API",
    "version": "1.0.0"
  },
  "paths": {
    "/activation-instances/": {
      "get": {
        "operationId": "activation_instances_list",
        "description": "List all the Activation Instances",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by activation instance name."
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "description": "Filter by activation instance status."
          }
        ],
        "tags": ["activation-instances"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedActivationInstanceList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/activation-instances/{id}/": {
      "get": {
        "operationId": "activation_instances_retrieve",
        "description": "Get the Activation Instance by its id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this activation instance.",
            "required": true
          }
        ],
        "tags": ["activation-instances"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivationInstance"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "activation_instances_destroy",
        "description": "Delete an existing Activation Instance",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this activation instance.",
            "required": true
          }
        ],
        "tags": ["activation-instances"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "The Activation Instance has been deleted."
          }
        }
      }
    },
    "/activation-instances/{id}/logs/": {
      "get": {
        "operationId": "activation_instances_logs_list",
        "description": "List all logs for the Activation Instance",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this activation instance.",
            "required": true
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by activation instance name."
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "description": "Filter by activation instance status."
          }
        ],
        "tags": ["activation-instances"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedActivationInstanceLogList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/activations/": {
      "get": {
        "operationId": "activations_list",
        "description": "List all Activations",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by activation name."
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["activations"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedActivationListList"
                }
              }
            },
            "description": "Return a list of Activations."
          }
        }
      },
      "post": {
        "operationId": "activations_create",
        "tags": ["activations"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivationCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ActivationCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ActivationCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivationRead"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/activations/{id}/": {
      "get": {
        "operationId": "activations_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this activation.",
            "required": true
          }
        ],
        "tags": ["activations"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivationRead"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "activations_destroy",
        "description": "Delete an existing Activation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this activation.",
            "required": true
          }
        ],
        "tags": ["activations"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "The Activation has been deleted."
          }
        }
      }
    },
    "/activations/{id}/disable/": {
      "post": {
        "operationId": "activations_disable_create",
        "description": "Disable the Activation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this activation.",
            "required": true
          }
        ],
        "tags": ["activations"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Activation has been disabled."
          }
        }
      }
    },
    "/activations/{id}/enable/": {
      "post": {
        "operationId": "activations_enable_create",
        "description": "Enable the Activation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this activation.",
            "required": true
          }
        ],
        "tags": ["activations"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Activation has been enabled."
          },
          "409": {
            "description": "Activation not enabled do to current activation status"
          }
        }
      }
    },
    "/activations/{id}/instances/": {
      "get": {
        "operationId": "activations_instances_retrieve",
        "description": "List all instances for the Activation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this activation.",
            "required": true
          }
        ],
        "tags": ["activations"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedActivationInstanceList"
                }
              }
            },
            "description": "Return a list of Activation Instances."
          }
        }
      }
    },
    "/activations/{id}/restart/": {
      "post": {
        "operationId": "activations_restart_create",
        "description": "Restart the Activation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this activation.",
            "required": true
          }
        ],
        "tags": ["activations"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Activation restart was successful."
          }
        }
      }
    },
    "/audit-events/": {
      "get": {
        "operationId": "audit_events_list",
        "description": "List all audit events",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "source_name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by rule audit event source name."
          }
        ],
        "tags": ["audit-events"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAuditEventList"
                }
              }
            },
            "description": "Return a list of audit events."
          }
        }
      }
    },
    "/audit-events/{id}/": {
      "get": {
        "operationId": "audit_events_retrieve",
        "description": "Get the audit event by its id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this audit event.",
            "required": true
          }
        ],
        "tags": ["audit-events"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditEvent"
                }
              }
            },
            "description": "Return the audit event by its id."
          }
        }
      }
    },
    "/audit-rules/": {
      "get": {
        "operationId": "audit_rules_list",
        "description": "List all fired rules",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by rule audit name."
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["audit-rules"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAuditRuleListList"
                }
              }
            },
            "description": "Return a list of fired rules."
          }
        }
      }
    },
    "/audit-rules/{id}/actions/": {
      "get": {
        "operationId": "audit_rules_actions_list",
        "description": "Action list of a fired rule by its id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this rule audit.",
            "required": true
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by rule audit action name."
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["audit-rules"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAuditActionList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/audit-rules/{id}/events/": {
      "get": {
        "operationId": "audit_rules_events_list",
        "description": "Event list of a fired rule by its id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Audit Rule.",
            "required": true
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "source_name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by rule audit event source name."
          }
        ],
        "tags": ["audit-rules"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAuditEventList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/audit-rules/{id}/": {
      "get": {
        "operationId": "audit_rules_retrieve",
        "description": "Get the fired rule by its id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this audit rule.",
            "required": true
          }
        ],
        "tags": ["audit-rules"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditRuleDetail"
                }
              }
            },
            "description": "Return the fired rule by its id."
          }
        }
      }
    },
    "/auth/session/login/": {
      "get": {
        "operationId": "auth_session_preflight",
        "description": "Use this method to set a CSRF cookie.",
        "tags": ["auth"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      },
      "post": {
        "operationId": "auth_session_login",
        "description": "Session cookie login",
        "tags": ["auth"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "403": {
            "description": "Invalid credentials or user is disabled."
          },
          "204": {
            "description": "Login successful."
          }
        }
      }
    },
    "/auth/session/logout/": {
      "post": {
        "operationId": "auth_session_logout",
        "description": "Session logout.",
        "tags": ["auth"],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Logout successful."
          }
        }
      }
    },
    "/credentials/": {
      "get": {
        "operationId": "credentials_list",
        "description": "List all credentials",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by credential name."
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["credentials"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCredentialList"
                }
              }
            },
            "description": "Return a list of credential."
          }
        }
      },
      "post": {
        "operationId": "credentials_create",
        "description": "Create a new credential.",
        "tags": ["credentials"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CredentialCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CredentialCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Credential"
                }
              }
            },
            "description": "Return the new credential."
          }
        }
      }
    },
    "/credentials/{id}/": {
      "get": {
        "operationId": "credentials_retrieve",
        "description": "Get credential by id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this credential.",
            "required": true
          }
        ],
        "tags": ["credentials"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Credential"
                }
              }
            },
            "description": "Return a credential by id."
          }
        }
      },
      "patch": {
        "operationId": "credentials_partial_update",
        "description": "Partial update of a credential",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this credential.",
            "required": true
          }
        ],
        "tags": ["credentials"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCredentialCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCredentialCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCredentialCreate"
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Credential"
                }
              }
            },
            "description": "Update successful. Return an updated credential."
          }
        }
      },
      "delete": {
        "operationId": "credentials_destroy",
        "description": "Delete a credential by id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this credential.",
            "required": true
          }
        ],
        "tags": ["credentials"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successful."
          }
        }
      }
    },
    "/decision-environments/": {
      "get": {
        "operationId": "decision_environments_list",
        "description": "List all decision environments",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by decision environment name."
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["decision-environments"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedDecisionEnvironmentList"
                }
              }
            },
            "description": "Return a list of decision environment."
          }
        }
      },
      "post": {
        "operationId": "decision_environments_create",
        "description": "Create a new decision environment.",
        "tags": ["decision-environments"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DecisionEnvironmentCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DecisionEnvironmentCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DecisionEnvironmentCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecisionEnvironment"
                }
              }
            },
            "description": "Return the new decision environment."
          }
        }
      }
    },
    "/decision-environments/{id}/": {
      "get": {
        "operationId": "decision_environments_retrieve",
        "description": "Get a decision environment by id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this decision environment.",
            "required": true
          }
        ],
        "tags": ["decision-environments"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecisionEnvironmentRead"
                }
              }
            },
            "description": "Return a decision environment by id."
          }
        }
      },
      "patch": {
        "operationId": "decision_environments_partial_update",
        "description": "Partially update a decision environment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this decision environment.",
            "required": true
          }
        ],
        "tags": ["decision-environments"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedDecisionEnvironmentCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedDecisionEnvironmentCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedDecisionEnvironmentCreate"
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecisionEnvironment"
                }
              }
            },
            "description": "Update successful. Return an updated decision environment."
          }
        }
      },
      "delete": {
        "operationId": "decision_environments_destroy",
        "description": "Delete a decision environment by id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this decision environment.",
            "required": true
          }
        ],
        "tags": ["decision-environments"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successful."
          }
        }
      }
    },
    "/extra-vars/": {
      "get": {
        "operationId": "extra_vars_list",
        "description": "List all extra_vars",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["extra-vars"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedExtraVarList"
                }
              }
            },
            "description": "Return a list of extra_vars."
          }
        }
      },
      "post": {
        "operationId": "extra_vars_create",
        "description": "Create an extra_var",
        "tags": ["extra-vars"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtraVarCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ExtraVarCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ExtraVarCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtraVar"
                }
              }
            },
            "description": "Return the created extra_var."
          }
        }
      }
    },
    "/extra-vars/{id}/": {
      "get": {
        "operationId": "extra_vars_retrieve",
        "description": "Get the extra_var by its id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this extra var.",
            "required": true
          }
        ],
        "tags": ["extra-vars"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtraVar"
                }
              }
            },
            "description": "Return the extra_var by its id."
          }
        }
      }
    },
    "/playbooks/": {
      "get": {
        "operationId": "playbooks_list",
        "description": "List all playbooks",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["playbooks"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPlaybookList"
                }
              }
            },
            "description": "Return a list of playbooks."
          }
        }
      }
    },
    "/playbooks/{id}/": {
      "get": {
        "operationId": "playbooks_retrieve",
        "description": "Get the playbook by its id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this playbook.",
            "required": true
          }
        ],
        "tags": ["playbooks"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Playbook"
                }
              }
            },
            "description": "Return the playbook by its id."
          }
        }
      }
    },
    "/projects/": {
      "get": {
        "operationId": "projects_list",
        "description": "List all projects",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by project name."
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "url",
            "schema": {
              "type": "string"
            },
            "description": "Filter by project url."
          }
        ],
        "tags": ["projects"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedProjectList"
                }
              }
            },
            "description": "Return a list of projects."
          }
        }
      },
      "post": {
        "operationId": "projects_create",
        "description": "Import a project.",
        "tags": ["projects"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreateRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreateRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreateRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": "Return a created project."
          }
        }
      }
    },
    "/projects/{id}/": {
      "get": {
        "operationId": "projects_retrieve",
        "description": "Get a project by id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this project.",
            "required": true
          }
        ],
        "tags": ["projects"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectRead"
                }
              }
            },
            "description": "Return a project by id."
          }
        }
      },
      "patch": {
        "operationId": "projects_partial_update",
        "description": "Partial update of a project",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this project.",
            "required": true
          }
        ],
        "tags": ["projects"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedProjectUpdateRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedProjectUpdateRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedProjectUpdateRequest"
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": "Update successful. Return an updated project."
          },
          "400": {
            "description": "Update failed with bad request."
          },
          "409": {
            "description": "Update failed with integrity checking."
          }
        }
      },
      "delete": {
        "operationId": "projects_destroy",
        "description": "Delete a project by id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this project.",
            "required": true
          }
        ],
        "tags": ["projects"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successful."
          }
        }
      }
    },
    "/projects/{id}/sync/": {
      "post": {
        "operationId": "projects_sync_create",
        "description": "Provide default implementation to get_response_serializer_class.\n\nThe view class should override this method if the response body format\nis different from the request.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this project.",
            "required": true
          }
        ],
        "tags": ["projects"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Project"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Project"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Project"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskRef"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/roles/": {
      "get": {
        "operationId": "roles_list",
        "description": "List all roles",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["roles"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRoleListList"
                }
              }
            },
            "description": "Return a list of roles."
          }
        }
      }
    },
    "/roles/{id}/": {
      "get": {
        "operationId": "roles_retrieve",
        "description": "Retrieve a role by id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this role.",
            "required": true
          }
        ],
        "tags": ["roles"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDetail"
                }
              }
            },
            "description": "Return a role."
          }
        }
      }
    },
    "/rulebooks/": {
      "get": {
        "operationId": "rulebooks_list",
        "description": "List all rulebooks",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by rulebook name."
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "project_id",
            "schema": {
              "type": "number"
            },
            "description": "Filter by rulebook's project id."
          }
        ],
        "tags": ["rulebooks"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRulebookList"
                }
              }
            },
            "description": "Return a list of rulebooks."
          }
        }
      }
    },
    "/rulebooks/{id}/rulesets/": {
      "get": {
        "operationId": "rulebooks_rulesets_list",
        "description": "Ruleset list of a rulebook by its id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this rulebook.",
            "required": true
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by ruleset name."
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["rulebooks"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRulesetOutList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/rulebooks/{id}/": {
      "get": {
        "operationId": "rulebooks_retrieve",
        "description": "Get the rulebook by its id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this rulebook.",
            "required": true
          }
        ],
        "tags": ["rulebooks"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rulebook"
                }
              }
            },
            "description": "Return the rulebook by its id."
          }
        }
      }
    },
    "/rulebooks/{id}/json/": {
      "get": {
        "operationId": "rulebooks_json_retrieve",
        "description": "Get the JSON format of a rulebook by its id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this rulebook.",
            "required": true
          }
        ],
        "tags": ["rulebooks"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rulebook"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/rules/": {
      "get": {
        "operationId": "rules_list",
        "description": "List all rules",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["rules"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRuleOutList"
                }
              }
            },
            "description": "Return a list of rules."
          }
        }
      }
    },
    "/rules/{id}/": {
      "get": {
        "operationId": "rules_retrieve",
        "description": "Get the rule by its id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this rule.",
            "required": true
          }
        ],
        "tags": ["rules"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleOut"
                }
              }
            },
            "description": "Return the rule by its id."
          }
        }
      }
    },
    "/rulesets/": {
      "get": {
        "operationId": "rulesets_list",
        "description": "List all rulesets",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by ruleset name."
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["rulesets"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRulesetOutList"
                }
              }
            },
            "description": "Return a list of rulesets."
          }
        }
      }
    },
    "/rulesets/{id}/": {
      "get": {
        "operationId": "rulesets_retrieve",
        "description": "Get the ruleset by its id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this ruleset.",
            "required": true
          }
        ],
        "tags": ["rulesets"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RulesetOut"
                }
              }
            },
            "description": "Return the ruleset by its id."
          }
        }
      }
    },
    "/rulesets/{id}/rules/": {
      "get": {
        "operationId": "rulesets_rules_list",
        "description": "Rule list of a ruleset by its id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this ruleset.",
            "required": true
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by ruleset name."
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["rulesets"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRuleList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/tasks/": {
      "get": {
        "operationId": "tasks_list",
        "tags": ["tasks"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/tasks/{id}/": {
      "get": {
        "operationId": "tasks_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "tags": ["tasks"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/users/": {
      "get": {
        "operationId": "users_list",
        "description": "List all users",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["users"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUserListList"
                }
              }
            },
            "description": "Return a list of users."
          }
        }
      },
      "post": {
        "operationId": "users_create",
        "description": "Create a user",
        "tags": ["users"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateUpdate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateUpdate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateUpdate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetail"
                }
              }
            },
            "description": "Return the created user."
          }
        }
      }
    },
    "/users/{id}/": {
      "get": {
        "operationId": "users_retrieve",
        "description": "Retrieve a user by their id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this user.",
            "required": true
          }
        ],
        "tags": ["users"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetail"
                }
              }
            },
            "description": "Return a user."
          }
        }
      },
      "patch": {
        "operationId": "users_partial_update",
        "description": "Partial update of a user.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this user.",
            "required": true
          }
        ],
        "tags": ["users"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUserCreateUpdate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUserCreateUpdate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUserCreateUpdate"
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetail"
                }
              }
            },
            "description": "Update successful. Return an updated user."
          }
        }
      },
      "delete": {
        "operationId": "users_destroy",
        "description": "Delete a user by id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this user.",
            "required": true
          }
        ],
        "tags": ["users"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "The user has been deleted successful."
          }
        }
      }
    },
    "/users/me/": {
      "get": {
        "operationId": "get_current_user",
        "description": "Get current user.",
        "tags": ["users"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetail"
                }
              }
            },
            "description": "Return current user."
          }
        }
      },
      "patch": {
        "operationId": "update_current_user",
        "description": "Update current user.",
        "tags": ["users"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCurrentUserUpdate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCurrentUserUpdate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCurrentUserUpdate"
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetail"
                }
              }
            },
            "description": "Return current user."
          }
        }
      }
    },
    "/users/me/awx-tokens/": {
      "get": {
        "operationId": "users_me_awx_tokens_list",
        "description": "List current user AWX tokens.",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["users"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAwxTokenList"
                }
              }
            },
            "description": "Return a list of AWX tokens."
          }
        }
      },
      "post": {
        "operationId": "users_me_awx_tokens_create",
        "description": "Create a AWX token for a current user.",
        "tags": ["users"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AwxTokenCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AwxTokenCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AwxTokenCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwxToken"
                }
              }
            },
            "description": "Return the created AWX token."
          }
        }
      }
    },
    "/users/me/awx-tokens/{id}/": {
      "get": {
        "operationId": "users_me_awx_tokens_retrieve",
        "description": "Get current user AWX token by ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this token.",
            "required": true
          }
        ],
        "tags": ["users"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwxToken"
                }
              }
            },
            "description": "Return a AWX tokens."
          }
        }
      },
      "delete": {
        "operationId": "users_me_awx_tokens_destroy",
        "description": "Delete AWX token of a current user by ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this token.",
            "required": true
          }
        ],
        "tags": ["users"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "The AWX token has been deleted."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActionEnum": {
        "enum": ["create", "read", "update", "delete", "enable", "disable", "restart"],
        "type": "string",
        "description": "* `create` - create\n* `read` - read\n* `update` - update\n* `delete` - delete\n* `enable` - enable\n* `disable` - disable\n* `restart` - restart"
      },
      "ActivationCreate": {
        "type": "object",
        "description": "Serializer for creating the Activation.",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "is_enabled": {
            "type": "boolean"
          },
          "decision_environment_id": {
            "type": "integer"
          },
          "project_id": {
            "type": "integer",
            "nullable": true
          },
          "rulebook_id": {
            "type": "integer"
          },
          "extra_var_id": {
            "type": "integer",
            "nullable": true
          },
          "restart_policy": {
            "$ref": "#/components/schemas/RestartPolicyEnum"
          }
        },
        "required": ["decision_environment_id", "name", "rulebook_id"]
      },
      "ActivationInstance": {
        "type": "object",
        "description": "Serializer for the Activation Instance model.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/StatusB37Enum"
          },
          "activation_id": {
            "type": "integer",
            "readOnly": true
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "ended_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          }
        },
        "required": ["activation_id", "ended_at", "id", "started_at"]
      },
      "ActivationInstanceLog": {
        "type": "object",
        "description": "Serializer for the Activation Instance Log model.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "line_number": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "log": {
            "type": "string"
          },
          "activation_instance": {
            "type": "integer"
          }
        },
        "required": ["activation_instance", "id", "line_number", "log"]
      },
      "ActivationList": {
        "type": "object",
        "description": "Serializer for listing the Activation model objects.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "is_enabled": {
            "type": "boolean"
          },
          "status": {
            "$ref": "#/components/schemas/StatusB37Enum"
          },
          "decision_environment_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "project_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "rulebook_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "extra_var_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "restart_policy": {
            "$ref": "#/components/schemas/RestartPolicyEnum"
          },
          "restart_count": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "rulebook_name": {
            "type": "string",
            "description": "Name of the referenced rulebook"
          },
          "rules_count": {
            "type": "integer"
          },
          "rules_fired_count": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "created_at",
          "decision_environment_id",
          "extra_var_id",
          "id",
          "modified_at",
          "name",
          "project_id",
          "rulebook_id",
          "rulebook_name",
          "rules_count",
          "rules_fired_count",
          "status"
        ]
      },
      "ActivationRead": {
        "type": "object",
        "description": "Serializer for reading the Activation with related objects info.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "is_enabled": {
            "type": "boolean"
          },
          "decision_environment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DecisionEnvironmentRef"
              }
            ],
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/StatusB37Enum"
          },
          "project": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectRef"
              }
            ],
            "nullable": true
          },
          "rulebook": {
            "$ref": "#/components/schemas/RulebookRef"
          },
          "extra_var": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExtraVarRef"
              }
            ],
            "nullable": true
          },
          "instances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivationInstance"
            }
          },
          "restart_policy": {
            "$ref": "#/components/schemas/RestartPolicyEnum"
          },
          "restart_count": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "rulebook_name": {
            "type": "string",
            "description": "Name of the referenced rulebook"
          },
          "rules_count": {
            "type": "integer"
          },
          "rules_fired_count": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "restarted_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": [
          "created_at",
          "id",
          "instances",
          "modified_at",
          "name",
          "rulebook",
          "rulebook_name",
          "rules_count",
          "rules_fired_count",
          "status"
        ]
      },
      "AuditAction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the triggered action"
          },
          "name": {
            "type": "string",
            "description": "Name of the action"
          },
          "status": {
            "type": "string",
            "description": "Status of the action"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "The URL in the action"
          },
          "fired_at": {
            "type": "string",
            "format": "date-time",
            "description": "The fired timestamp of the action"
          },
          "rule_fired_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "audit_rule_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          }
        },
        "required": ["audit_rule_id", "fired_at", "id", "name"]
      },
      "AuditEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the triggered event"
          },
          "source_name": {
            "type": "string",
            "description": "Name of the source"
          },
          "source_type": {
            "type": "string",
            "description": "Type of the source"
          },
          "received_at": {
            "type": "string",
            "format": "date-time",
            "description": "The received timestamp of the event"
          },
          "payload": {
            "type": "object",
            "additionalProperties": {},
            "description": "The payload in the event"
          },
          "rule_fired_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "audit_actions": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "required": ["audit_actions", "id", "received_at", "source_name", "source_type"]
      },
      "AuditRuleDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the fired rule"
          },
          "name": {
            "type": "string",
            "description": "Name of the fired rule"
          },
          "description": {
            "type": "string",
            "description": "Description of the fired rule"
          },
          "status": {
            "type": "string",
            "description": "Status of the fired rule"
          },
          "activation_instance": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "nullable": true
              },
              "name": {
                "type": "string"
              }
            },
            "example": {
              "id": 0,
              "name": "string"
            },
            "readOnly": true
          },
          "ruleset_name": {
            "type": "string",
            "description": "Name of the related ruleset"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The created timestamp of the action"
          },
          "fired_at": {
            "type": "string",
            "format": "date-time",
            "description": "The fired timestamp of the rule"
          },
          "definition": {
            "type": "object",
            "additionalProperties": {},
            "description": "The action definition in the rule"
          }
        },
        "required": ["activation_instance", "created_at", "description", "fired_at", "id", "name"]
      },
      "AuditRuleList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the fired rule"
          },
          "name": {
            "type": "string",
            "description": "Name of the fired rule"
          },
          "status": {
            "type": "string",
            "description": "Status of the fired rule"
          },
          "activation_instance": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "nullable": true
              },
              "name": {
                "type": "string"
              }
            },
            "example": {
              "id": 0,
              "name": "string"
            },
            "readOnly": true
          },
          "fired_at": {
            "type": "string",
            "format": "date-time",
            "description": "The fired timestamp of the rule"
          }
        },
        "required": ["activation_instance", "fired_at", "id", "name"]
      },
      "AwxToken": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": ["created_at", "id", "modified_at", "name", "user_id"]
      },
      "AwxTokenCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "required": ["name", "token"]
      },
      "Credential": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "credential_type": {
            "$ref": "#/components/schemas/CredentialTypeEnum"
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": ["created_at", "id", "modified_at", "name"]
      },
      "CredentialCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "credential_type": {
            "$ref": "#/components/schemas/CredentialTypeEnum"
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "secret": {
            "type": "string",
            "nullable": true
          }
        },
        "required": ["name"]
      },
      "CredentialRef": {
        "type": "object",
        "description": "Serializer for Credential reference.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "credential_type": {
            "$ref": "#/components/schemas/CredentialTypeEnum"
          },
          "username": {
            "type": "string",
            "nullable": true
          }
        },
        "required": ["id", "name"]
      },
      "CredentialTypeEnum": {
        "enum": [
          "Container Registry",
          "GitHub Personal Access Token",
          "GitLab Personal Access Token"
        ],
        "type": "string",
        "description": "* `Container Registry` - Container Registry\n* `GitHub Personal Access Token` - GitHub Personal Access Token\n* `GitLab Personal Access Token` - GitLab Personal Access Token"
      },
      "DecisionEnvironment": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "image_url": {
            "type": "string"
          },
          "credential_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": ["created_at", "credential_id", "id", "image_url", "modified_at", "name"]
      },
      "DecisionEnvironmentCreate": {
        "type": "object",
        "description": "Serializer for creating the DecisionEnvironment.",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "image_url": {
            "type": "string"
          },
          "credential_id": {
            "type": "integer",
            "nullable": true
          }
        },
        "required": ["image_url", "name"]
      },
      "DecisionEnvironmentRead": {
        "type": "object",
        "description": "Serializer for reading the DecisionEnvironment with embedded objects.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "image_url": {
            "type": "string"
          },
          "credential": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CredentialRef"
              }
            ],
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": ["created_at", "id", "image_url", "modified_at", "name"]
      },
      "DecisionEnvironmentRef": {
        "type": "object",
        "description": "Serializer for DecisionEnvironment reference.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "image_url": {
            "type": "string"
          }
        },
        "required": ["id", "image_url", "name"]
      },
      "ExtraVar": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "extra_var": {
            "type": "string",
            "description": "Content of the extra_var"
          }
        },
        "required": ["extra_var", "id"]
      },
      "ExtraVarCreate": {
        "type": "object",
        "properties": {
          "extra_var": {
            "type": "string",
            "description": "Content of the extra_var"
          }
        },
        "required": ["extra_var"]
      },
      "ExtraVarRef": {
        "type": "object",
        "description": "Serializer for Extra Var reference.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          }
        },
        "required": ["id"]
      },
      "ImportStateEnum": {
        "enum": ["pending", "running", "failed", "completed"],
        "type": "string",
        "description": "* `pending` - Pending\n* `running` - Running\n* `failed` - Failed\n* `completed` - Completed"
      },
      "Login": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": ["password", "username"]
      },
      "PaginatedActivationInstanceList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivationInstance"
            }
          }
        }
      },
      "PaginatedActivationInstanceLogList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivationInstanceLog"
            }
          }
        }
      },
      "PaginatedActivationListList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivationList"
            }
          }
        }
      },
      "PaginatedAuditActionList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditAction"
            }
          }
        }
      },
      "PaginatedAuditEventList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditEvent"
            }
          }
        }
      },
      "PaginatedAuditRuleListList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditRuleList"
            }
          }
        }
      },
      "PaginatedAwxTokenList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AwxToken"
            }
          }
        }
      },
      "PaginatedCredentialList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Credential"
            }
          }
        }
      },
      "PaginatedDecisionEnvironmentList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DecisionEnvironment"
            }
          }
        }
      },
      "PaginatedExtraVarList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtraVar"
            }
          }
        }
      },
      "PaginatedPlaybookList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Playbook"
            }
          }
        }
      },
      "PaginatedProjectList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project"
            }
          }
        }
      },
      "PaginatedRoleListList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleList"
            }
          }
        }
      },
      "PaginatedRuleList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rule"
            }
          }
        }
      },
      "PaginatedRuleOutList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleOut"
            }
          }
        }
      },
      "PaginatedRulebookList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rulebook"
            }
          }
        }
      },
      "PaginatedRulesetOutList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RulesetOut"
            }
          }
        }
      },
      "PaginatedUserListList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=51&page_size=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "/eda/api/v1/example/?page=49&page_size=100"
          },
          "page_size": {
            "type": "integer",
            "nullable": true,
            "example": 100
          },
          "page": {
            "type": "integer",
            "nullable": true,
            "example": 50
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserList"
            }
          }
        }
      },
      "PatchedCredentialCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "credential_type": {
            "$ref": "#/components/schemas/CredentialTypeEnum"
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "secret": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PatchedCurrentUserUpdate": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "maxLength": 150
          },
          "last_name": {
            "type": "string",
            "maxLength": 150
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email address",
            "maxLength": 254
          },
          "password": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "PatchedDecisionEnvironmentCreate": {
        "type": "object",
        "description": "Serializer for creating the DecisionEnvironment.",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "image_url": {
            "type": "string"
          },
          "credential_id": {
            "type": "integer",
            "nullable": true
          }
        }
      },
      "PatchedProjectUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "description": "Name of the project"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Description of the project"
          },
          "credential_id": {
            "type": "integer",
            "nullable": true,
            "description": "Credential id of the project"
          }
        }
      },
      "PatchedUserCreateUpdate": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The user's log in name."
          },
          "first_name": {
            "type": "string",
            "maxLength": 150
          },
          "last_name": {
            "type": "string",
            "maxLength": 150
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email address",
            "maxLength": 254
          },
          "password": {
            "type": "string",
            "writeOnly": true
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "PermissionRef": {
        "type": "object",
        "properties": {
          "resource_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceTypeEnum"
              }
            ],
            "readOnly": true
          },
          "action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionEnum"
              }
            ],
            "readOnly": true
          }
        },
        "required": ["action", "resource_type"]
      },
      "Playbook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of the playbook"
          },
          "playbook": {
            "type": "string",
            "description": "Content of the playbook"
          },
          "project_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          }
        },
        "required": ["id", "name", "playbook", "project_id"]
      },
      "Project": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "credential_id": {
            "type": "integer",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "git_hash": {
            "type": "string",
            "readOnly": true
          },
          "import_state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ImportStateEnum"
              }
            ],
            "readOnly": true
          },
          "import_error": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "import_task_id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "created_at",
          "git_hash",
          "id",
          "import_error",
          "import_state",
          "import_task_id",
          "modified_at",
          "name",
          "url"
        ]
      },
      "ProjectCreateRequest": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "credential_id": {
            "type": "integer",
            "nullable": true
          }
        },
        "required": ["name", "url"]
      },
      "ProjectRead": {
        "type": "object",
        "description": "Serializer for reading the Project with embedded objects.",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "credential": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CredentialRef"
              }
            ],
            "nullable": true
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "git_hash": {
            "type": "string",
            "readOnly": true
          },
          "import_state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ImportStateEnum"
              }
            ],
            "readOnly": true
          },
          "import_error": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "import_task_id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "created_at",
          "git_hash",
          "id",
          "import_error",
          "import_state",
          "import_task_id",
          "modified_at",
          "name",
          "url"
        ]
      },
      "ProjectRef": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "git_hash": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": ["git_hash", "id", "name", "url"]
      },
      "ResourceTypeEnum": {
        "enum": [
          "activation",
          "activation_instance",
          "audit_rule",
          "audit_event",
          "task",
          "user",
          "project",
          "inventory",
          "extra_var",
          "playbook",
          "rulebook",
          "role",
          "decision_environment",
          "credential"
        ],
        "type": "string",
        "description": "* `activation` - activation\n* `activation_instance` - activation_instance\n* `audit_rule` - audit_rule\n* `audit_event` - audit_event\n* `task` - task\n* `user` - user\n* `project` - project\n* `inventory` - inventory\n* `extra_var` - extra_var\n* `playbook` - playbook\n* `rulebook` - rulebook\n* `role` - role\n* `decision_environment` - decision_environment\n* `credential` - credential"
      },
      "RestartPolicyEnum": {
        "enum": ["always", "on-failure", "never"],
        "type": "string",
        "description": "* `always` - always\n* `on-failure` - on-failure\n* `never` - never"
      },
      "RoleDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique UUID of the role"
          },
          "name": {
            "type": "string",
            "description": "Name of the rulebook"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "default": "",
            "description": "Description of the rulebook"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionRef"
            },
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The created_at timestamp of the ruleset"
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "description": "The modified_at timestamp of the ruleset"
          }
        },
        "required": ["created_at", "id", "modified_at", "name", "permissions"]
      },
      "RoleList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique UUID of the role"
          },
          "name": {
            "type": "string",
            "description": "Name of the rulebook"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "default": "",
            "description": "Description of the rulebook"
          }
        },
        "required": ["id", "name"]
      },
      "RoleRef": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": ["id", "name"]
      },
      "Rule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of the rule"
          },
          "action": {
            "type": "object",
            "additionalProperties": {},
            "description": "The action in the rule"
          },
          "ruleset_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          }
        },
        "required": ["action", "id", "name", "ruleset_id"]
      },
      "RuleOut": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the ruleset"
          },
          "name": {
            "type": "string",
            "description": "Name of the rule"
          },
          "action": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true,
            "description": "The action in the rule"
          },
          "fired_stats": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {}
            },
            "description": "List of stats"
          },
          "rulebook_id": {
            "type": "integer",
            "nullable": true,
            "description": "ID of the rulebook"
          },
          "ruleset_id": {
            "type": "integer",
            "nullable": true,
            "description": "ID of the ruleset"
          },
          "project_id": {
            "type": "integer",
            "nullable": true,
            "description": "ID of the project"
          }
        },
        "required": ["fired_stats", "id", "name"]
      },
      "Rulebook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rulesets": {
            "type": "string"
          },
          "project_id": {
            "type": "integer",
            "nullable": true,
            "description": "ID of the project"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": ["created_at", "id", "modified_at", "name"]
      },
      "RulebookRef": {
        "type": "object",
        "description": "Serializer for Rulebook reference.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "required": ["id", "name"]
      },
      "RulesetOut": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the ruleset"
          },
          "name": {
            "type": "string",
            "description": "Name of the ruleset"
          },
          "rule_count": {
            "type": "integer",
            "description": "Number of rules the ruleset contains"
          },
          "source_types": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of source types"
          },
          "fired_stats": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {}
            },
            "description": "List of stats"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The created_at timestamp of the ruleset"
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "description": "The modified_at timestamp of the ruleset"
          }
        },
        "required": [
          "created_at",
          "fired_stats",
          "id",
          "modified_at",
          "name",
          "rule_count",
          "source_types"
        ]
      },
      "StatusB37Enum": {
        "enum": [
          "starting",
          "running",
          "pending",
          "failed",
          "stopping",
          "stopped",
          "completed",
          "unresponsive"
        ],
        "type": "string",
        "description": "* `starting` - starting\n* `running` - running\n* `pending` - pending\n* `failed` - failed\n* `stopping` - stopping\n* `stopped` - stopped\n* `completed` - completed\n* `unresponsive` - unresponsive"
      },
      "Task": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskStatusEnum"
              }
            ],
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "enqueued_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "finished_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "result": {
            "type": "object",
            "additionalProperties": {}
          }
        },
        "required": [
          "created_at",
          "enqueued_at",
          "finished_at",
          "id",
          "result",
          "started_at",
          "status"
        ]
      },
      "TaskRef": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "href": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          }
        },
        "required": ["href", "id"]
      },
      "TaskStatusEnum": {
        "enum": [
          "queued",
          "finished",
          "failed",
          "started",
          "deferred",
          "scheduled",
          "stopped",
          "canceled"
        ],
        "type": "string",
        "description": "* `queued` - queued\n* `finished` - finished\n* `failed` - failed\n* `started` - started\n* `deferred` - deferred\n* `scheduled` - scheduled\n* `stopped` - stopped\n* `canceled` - canceled"
      },
      "UserCreateUpdate": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The user's log in name."
          },
          "first_name": {
            "type": "string",
            "maxLength": 150
          },
          "last_name": {
            "type": "string",
            "maxLength": 150
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email address",
            "maxLength": 254
          },
          "password": {
            "type": "string",
            "writeOnly": true
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "required": ["password", "roles", "username"]
      },
      "UserDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "username": {
            "type": "string",
            "description": "The user's log in name."
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email address",
            "maxLength": 254
          },
          "first_name": {
            "type": "string",
            "maxLength": 150
          },
          "last_name": {
            "type": "string",
            "maxLength": 150
          },
          "is_superuser": {
            "type": "boolean",
            "title": "Superuser status",
            "description": "Designates that this user has all permissions without explicitly assigning them."
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleRef"
            },
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": ["created_at", "id", "modified_at", "roles", "username"]
      },
      "UserList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the user"
          },
          "username": {
            "type": "string",
            "description": "The user's log in name."
          },
          "first_name": {
            "type": "string",
            "description": "The user's first name."
          },
          "last_name": {
            "type": "string",
            "description": "The user's last name."
          },
          "is_superuser": {
            "type": "boolean",
            "description": "The user is a superuser."
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleRef"
            },
            "readOnly": true
          }
        },
        "required": ["first_name", "id", "is_superuser", "last_name", "roles", "username"]
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      },
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "sessionid"
      }
    }
  },
  "servers": [
    {
      "url": "/api/eda/v1"
    }
  ]
}
